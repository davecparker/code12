======= Test Started ==========================================

1. import Code12.*;
line (importAll)
    ID (Code12)

2. 

3. class BubblePop extends Code12Program
line (classUser)
    ID (BubblePop)
    ID (Code12Program)

4. {
line (begin)

5. public static void main(String[] args)
line (main)
    ID (void)
    ID (main)
    ID (String)
    ID (args)

6. {
line (begin)

7. Code12.run(new BubblePop());
line (Code12Run)
    ID (Code12)
    ID (run)
    ID (BubblePop)

8. }
line (end)

9. 

10. public void start()
line (func)
    access (public)
    retType (simple)
        ID (void)
    ID (start)

11. {
line (begin)

12. // Make the background

13. ct.setHeight(150);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            member (member)
                ID (setHeight)
        exprList (list)
            expr (NUM)
                NUM (150)

14. ct.setBackImage("underwater.jpg");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            member (member)
                ID (setBackImage)
        exprList (list)
            expr (STR)
                STR ("underwater.jpg")

15. }
line (end)

16. 

17. public void update()
line (func)
    access (public)
    retType (simple)
        ID (void)
    ID (update)

18. {
line (begin)

19. // Make bubbles at random times, positions, and sizes

20. if (ct.random(1, 20) == 1)
line (if)
    expr (==)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                member (member)
                    ID (random)
            exprList (list)
                expr (NUM)
                    NUM (1)
                expr (NUM)
                    NUM (20)
        expr (NUM)
            NUM (1)

21. {
line (begin)

22. double x = ct.random(0, 100);
line (varInit)
    ID (double)
    ID (x)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            member (member)
                ID (random)
        exprList (list)
            expr (NUM)
                NUM (0)
            expr (NUM)
                NUM (100)

23. double y = ct.getHeight() + 25;
line (varInit)
    ID (double)
    ID (y)
    expr (+)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                member (member)
                    ID (getHeight)
        expr (NUM)
            NUM (25)

24. double size = ct.random(5, 20);
line (varInit)
    ID (double)
    ID (size)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            member (member)
                ID (random)
        exprList (list)
            expr (NUM)
                NUM (5)
            expr (NUM)
                NUM (20)

25. GameObj bubble = ct.image("bubble.png",
-- Incomplete line carried forward

26. x, y,
-- Incomplete line carried forward

27. size);
line (varInit)
    ID (GameObj)
    ID (bubble)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            member (member)
                ID (image)
        exprList (list)
            expr (STR)
                STR ("bubble.png")
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (size)

28. bubble.ySpeed = -1;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (bubble)
            field (field)
                ID (ySpeed)
        expr (neg)
            expr (NUM)
                NUM (1)

29. bubble.clickable = true;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (bubble)
            field (field)
                ID (clickable)
        expr (BOOL)
            BOOL (true)

30. GameObj bubbleCopy = bubble; // initialization of GameObj from another GameObj
line (varInit)
    ID (GameObj)
    ID (bubbleCopy)
    expr (lValue)
        lValue (lValue)
            ID (bubble)

31. int z; // declaration without initialization - primitive type
line (varDecl)
    ID (int)
    idList (list)
        ID (z)

32. int x, y, z; // declaring multiple variables
line (varDecl)
    ID (int)
    idList (list)
        ID (x)
        ID (y)
        ID (z)

33. z = -1 + 2; // assigning value with int and unary minus
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (z)
        expr (+)
            expr (neg)
                expr (NUM)
                    NUM (1)
            expr (NUM)
                NUM (2)

34. z = 0.707; // assigning value with double
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (z)
        expr (NUM)
            NUM (0.707)

35. z = .707; // no leading zero
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (z)
        expr (NUM)
            NUM (.707)

36. z = -.707; // negative with no leading zero
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (z)
        expr (neg)
            expr (NUM)
                NUM (.707)

37. bigNum = 1.23456E10; // exponential notation E
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (bigNum)
        expr (NUM)
            NUM (1.23456E10)

38. bigNum = 1.23456e10; // exponential notation e
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (bigNum)
        expr (NUM)
            NUM (1.23456e10)

39. bigNum = 1.23456e+123; // exponential notation e+
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (bigNum)
        expr (NUM)
            NUM (1.23456e+123)

40. bigNum = -1.23456E103; // exponential notation -E
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (bigNum)
        expr (neg)
            expr (NUM)
                NUM (1.23456E103)

41. bigNum = -1.23456E+103; // exponential notation -E+
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (bigNum)
        expr (neg)
            expr (NUM)
                NUM (1.23456E+103)

42. littleNum = 1.23456E-9; // exponential notation E-
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (littleNum)
        expr (NUM)
            NUM (1.23456E-9)

43. littleNum = -1.23456E-98; // exponential notation -E-
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (littleNum)
        expr (neg)
            expr (NUM)
                NUM (1.23456E-98)

44. littleNum = 1.23456e-987; // exponential notation e-
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (littleNum)
        expr (NUM)
            NUM (1.23456e-987)

45. littleNum = -1.23456e-9876; // exponential notation -e-
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (littleNum)
        expr (neg)
            expr (NUM)
                NUM (1.23456e-9876)

46. x = .5e7; // exponential notation without leading digit before dot
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (NUM)
            NUM (.5e7)

47. x = 3.e8; // exponential notation without digit after dot
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (NUM)
            NUM (3.e8)

48. double x = 5.; // number with decimal point but no digits after
line (varInit)
    ID (double)
    ID (x)
    expr (NUM)
        NUM (5.)

49. double xyz = ( 2 * x + y - 3.14 ) / z + 1.414; // initialization with expression
line (varInit)
    ID (double)
    ID (xyz)
    expr (+)
        expr (/)
            expr (exprParens)
                expr (-)
                    expr (+)
                        expr (*)
                            expr (NUM)
                                NUM (2)
                            expr (lValue)
                                lValue (lValue)
                                    ID (x)
                        expr (lValue)
                            lValue (lValue)
                                ID (y)
                    expr (NUM)
                        NUM (3.14)
            expr (lValue)
                lValue (lValue)
                    ID (z)
        expr (NUM)
            NUM (1.414)

50. double mean = (a + b + c) / 3;
line (varInit)
    ID (double)
    ID (mean)
    expr (/)
        expr (exprParens)
            expr (+)
                expr (+)
                    expr (lValue)
                        lValue (lValue)
                            ID (a)
                    expr (lValue)
                        lValue (lValue)
                            ID (b)
                expr (lValue)
                    lValue (lValue)
                        ID (c)
        expr (NUM)
            NUM (3)

51. double y = m * x + b;
line (varInit)
    ID (double)
    ID (y)
    expr (+)
        expr (*)
            expr (lValue)
                lValue (lValue)
                    ID (m)
            expr (lValue)
                lValue (lValue)
                    ID (x)
        expr (lValue)
            lValue (lValue)
                ID (b)

52. z = p * r % q + w / x - y;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (z)
        expr (-)
            expr (+)
                expr (%)
                    expr (*)
                        expr (lValue)
                            lValue (lValue)
                                ID (p)
                        expr (lValue)
                            lValue (lValue)
                                ID (r)
                    expr (lValue)
                        lValue (lValue)
                            ID (q)
                expr (/)
                    expr (lValue)
                        lValue (lValue)
                            ID (w)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (y)

53. y = a * x * x + b * x + c;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (y)
        expr (+)
            expr (+)
                expr (*)
                    expr (*)
                        expr (lValue)
                            lValue (lValue)
                                ID (a)
                        expr (lValue)
                            lValue (lValue)
                                ID (x)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (b)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (c)

54. y = (a * x * x) + (b * x) + c;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (y)
        expr (+)
            expr (+)
                expr (exprParens)
                    expr (*)
                        expr (*)
                            expr (lValue)
                                lValue (lValue)
                                    ID (a)
                            expr (lValue)
                                lValue (lValue)
                                    ID (x)
                        expr (lValue)
                            lValue (lValue)
                                ID (x)
                expr (exprParens)
                    expr (*)
                        expr (lValue)
                            lValue (lValue)
                                ID (b)
                        expr (lValue)
                            lValue (lValue)
                                ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (c)

55. double z2 = z * 2.0; // initialization from another variable
line (varInit)
    ID (double)
    ID (z2)
    expr (*)
        expr (lValue)
            lValue (lValue)
                ID (z)
        expr (NUM)
            NUM (2.0)

56. x = (a + b) / 2 + (c - d) / 2; // multiple parentheses
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (+)
            expr (/)
                expr (exprParens)
                    expr (+)
                        expr (lValue)
                            lValue (lValue)
                                ID (a)
                        expr (lValue)
                            lValue (lValue)
                                ID (b)
                expr (NUM)
                    NUM (2)
            expr (/)
                expr (exprParens)
                    expr (-)
                        expr (lValue)
                            lValue (lValue)
                                ID (c)
                        expr (lValue)
                            lValue (lValue)
                                ID (d)
                expr (NUM)
                    NUM (2)

57. x = ( ( a + b ) / c ) / 2; // nested parentheses
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (/)
            expr (exprParens)
                expr (/)
                    expr (exprParens)
                        expr (+)
                            expr (lValue)
                                lValue (lValue)
                                    ID (a)
                            expr (lValue)
                                lValue (lValue)
                                    ID (b)
                    expr (lValue)
                        lValue (lValue)
                            ID (c)
            expr (NUM)
                NUM (2)

58. x = y % 12; // mod operator
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (%)
            expr (lValue)
                lValue (lValue)
                    ID (y)
            expr (NUM)
                NUM (12)

59. 

60. // relational operators and if/else

61. if (count == 0)
line (if)
    expr (==)
        expr (lValue)
            lValue (lValue)
                ID (count)
        expr (NUM)
            NUM (0)

62. if (x != 10)
line (if)
    expr (!=)
        expr (lValue)
            lValue (lValue)
                ID (x)
        expr (NUM)
            NUM (10)

63. if (temp > 98.6)
line (if)
    expr (>)
        expr (lValue)
            lValue (lValue)
                ID (temp)
        expr (NUM)
            NUM (98.6)

64. if ( temp <= 100 )
line (if)
    expr (<=)
        expr (lValue)
            lValue (lValue)
                ID (temp)
        expr (NUM)
            NUM (100)

65. else if (x >= 42)
line (elseif)
    expr (>=)
        expr (lValue)
            lValue (lValue)
                ID (x)
        expr (NUM)
            NUM (42)

66. else
line (else)

67. boolean differenceIsSmall = Math.abs(x - a) < eps;
line (varInit)
    ID (boolean)
    ID (differenceIsSmall)
    expr (<)
        expr (call)
            fnValue (fnValue)
                ID (Math)
                member (member)
                    ID (abs)
            exprList (list)
                expr (-)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                    expr (lValue)
                        lValue (lValue)
                            ID (a)
        expr (lValue)
            lValue (lValue)
                ID (eps)

68. 

69. // Strings

70. String greeting; //  declaration without initialization - String type
line (varDecl)
    ID (String)
    idList (list)
        ID (greeting)

71. greeting = "hello"; // assigning value to a string
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (greeting)
        expr (STR)
            STR ("hello")

72. String greeting2 = "hello there"; // declaration with initialization - String type
line (varInit)
    ID (String)
    ID (greeting2)
    expr (STR)
        STR ("hello there")

73. String greeting3 = greeting1; // declaration with initialization from another variable's value
line (varInit)
    ID (String)
    ID (greeting3)
    expr (lValue)
        lValue (lValue)
            ID (greeting1)

74. String greeting4 = greeting1 + " " + "world"; // declaration with concatenation
line (varInit)
    ID (String)
    ID (greeting4)
    expr (+)
        expr (+)
            expr (lValue)
                lValue (lValue)
                    ID (greeting1)
            expr (STR)
                STR (" ")
        expr (STR)
            STR ("world")

75. String greeting5 = greeting2.substring(0, 6); // declaration with String method
line (varInit)
    ID (String)
    ID (greeting5)
    expr (call)
        fnValue (fnValue)
            ID (greeting2)
            member (member)
                ID (substring)
        exprList (list)
            expr (NUM)
                NUM (0)
            expr (NUM)
                NUM (6)

76. s = "boolean variable b = " + true; // String concatenation with boolean
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (s)
        expr (+)
            expr (STR)
                STR ("boolean variable b = ")
            expr (BOOL)
                BOOL (true)

77. s = "line1\nline2"; // String with newline
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (s)
        expr (STR)
            STR ("line1\nline2")

78. s = "\"Hello,\" he said."; // String with escaped quotes
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (s)
        expr (STR)
            STR ("\"Hello,\" he said.")

79. ct.println("He said 'Hello'"); // String with single quotes
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            member (member)
                ID (println)
        exprList (list)
            expr (STR)
                STR ("He said 'Hello'")

80. docsDir = "C:\\Users\\Ben\\Documents\\"; // String with escaped backslash
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (docsDir)
        expr (STR)
            STR ("C:\\Users\\Ben\\Documents\\")

81. ct.println( "I\tneed\tmy\tspace" ); // String with escaped tab
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            member (member)
                ID (println)
        exprList (list)
            expr (STR)
                STR ("I\tneed\tmy\tspace")

82. input = input.toUpperCase(); // method call
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (input)
        expr (call)
            fnValue (fnValue)
                ID (input)
                member (member)
                    ID (toUpperCase)

83. i_dont_like_camel_case = "butItTakesLessKeystrokes"; // variable identifier with underscores
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (i_dont_like_camel_case)
        expr (STR)
            STR ("butItTakesLessKeystrokes")

84. 

85. // loops

86. for (int i = 0; i < 10; i++)
line (for)
    forControl (three)
        forInit (var)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                expr (NUM)
                    NUM (10)
        forNext (stmt)
            stmt (postInc)
                lValue (lValue)
                    ID (i)

87. for (i = 0; i < 10; i = i + 2)
line (for)
    forControl (three)
        forInit (stmt)
            stmt (assign)
                lValue (lValue)
                    ID (i)
                expr (NUM)
                    NUM (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                expr (NUM)
                    NUM (10)
        forNext (stmt)
            stmt (assign)
                lValue (lValue)
                    ID (i)
                expr (+)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                    expr (NUM)
                        NUM (2)

88. for (int i = 0; i < 100 && 2 * i < 50; i = i * 2)
line (for)
    forControl (three)
        forInit (var)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (0)
        forExpr (expr)
            expr (&&)
                expr (<)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                    expr (NUM)
                        NUM (100)
                expr (<)
                    expr (*)
                        expr (NUM)
                            NUM (2)
                        expr (lValue)
                            lValue (lValue)
                                ID (i)
                    expr (NUM)
                        NUM (50)
        forNext (stmt)
            stmt (assign)
                lValue (lValue)
                    ID (i)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                    expr (NUM)
                        NUM (2)

89. for (int i = 100; i > 0; i--)
line (for)
    forControl (three)
        forInit (var)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (100)
        forExpr (expr)
            expr (>)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                expr (NUM)
                    NUM (0)
        forNext (stmt)
            stmt (postDec)
                lValue (lValue)
                    ID (i)

90. for (int i = 10; i > 0; i = i - 2)
line (for)
    forControl (three)
        forInit (var)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (10)
        forExpr (expr)
            expr (>)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                expr (NUM)
                    NUM (0)
        forNext (stmt)
            stmt (assign)
                lValue (lValue)
                    ID (i)
                expr (-)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                    expr (NUM)
                        NUM (2)

91. for (int i = 0; i < len; i++)
line (for)
    forControl (three)
        forInit (var)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                expr (lValue)
                    lValue (lValue)
                        ID (len)
        forNext (stmt)
            stmt (postInc)
                lValue (lValue)
                    ID (i)

92. for (int i = 0; i < arr.length; i++)
line (for)
    forControl (three)
        forInit (var)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                expr (lValue)
                    lValue (lValue)
                        ID (arr)
                        field (field)
                            ID (length)
        forNext (stmt)
            stmt (postInc)
                lValue (lValue)
                    ID (i)

93. for (GameObj bullet : bullets )
line (for)
    forControl (array)
        ID (GameObj)
        ID (bullet)
        expr (lValue)
            lValue (lValue)
                ID (bullets)

94. 

95. while (j < 100)
line (while)
    expr (<)
        expr (lValue)
            lValue (lValue)
                ID (j)
        expr (NUM)
            NUM (100)
    whileEnd (while)

96. do
line (do)

97. while (j < 100);
line (while)
    expr (<)
        expr (lValue)
            lValue (lValue)
                ID (j)
        expr (NUM)
            NUM (100)
    whileEnd (do-while)

98. while (j < foo && i != bar);
line (while)
    expr (&&)
        expr (<)
            expr (lValue)
                lValue (lValue)
                    ID (j)
            expr (lValue)
                lValue (lValue)
                    ID (foo)
        expr (!=)
            expr (lValue)
                lValue (lValue)
                    ID (i)
            expr (lValue)
                lValue (lValue)
                    ID (bar)
    whileEnd (do-while)

99. while (j >= 100);
line (while)
    expr (>=)
        expr (lValue)
            lValue (lValue)
                ID (j)
        expr (NUM)
            NUM (100)
    whileEnd (do-while)

100. while (j <= foo && i != bar);
line (while)
    expr (&&)
        expr (<=)
            expr (lValue)
                lValue (lValue)
                    ID (j)
            expr (lValue)
                lValue (lValue)
                    ID (foo)
        expr (!=)
            expr (lValue)
                lValue (lValue)
                    ID (i)
            expr (lValue)
                lValue (lValue)
                    ID (bar)
    whileEnd (do-while)

101. while (i < max && notFound)
line (while)
    expr (&&)
        expr (<)
            expr (lValue)
                lValue (lValue)
                    ID (i)
            expr (lValue)
                lValue (lValue)
                    ID (max)
        expr (lValue)
            lValue (lValue)
                ID (notFound)
    whileEnd (while)

102. 

103. // arrays

104. int[] a;
line (arrayDecl)
    ID (int)
    idList (list)
        ID (a)

105. int[] a = new int[100];
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (expr)
        expr (newArray)
            ID (int)
            expr (NUM)
                NUM (100)

106. int[] a = new int[foo];
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (expr)
        expr (newArray)
            ID (int)
            expr (lValue)
                lValue (lValue)
                    ID (foo)

107. int[] a = new int[b.length * 2];
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (expr)
        expr (newArray)
            ID (int)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (b)
                        field (field)
                            ID (length)
                expr (NUM)
                    NUM (2)

108. int[] a = {1, 2, 3};
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (list)
        exprList (list)
            expr (NUM)
                NUM (1)
            expr (NUM)
                NUM (2)
            expr (NUM)
                NUM (3)

109. int[] a = { 1,
-- Incomplete line carried forward

110. 2,
-- Incomplete line carried forward

111. 3};
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (list)
        exprList (list)
            expr (NUM)
                NUM (1)
            expr (NUM)
                NUM (2)
            expr (NUM)
                NUM (3)

112. int[] a = b;
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (expr)
        expr (lValue)
            lValue (lValue)
                ID (b)

113. double[] data = new double[1000];
line (arrayInit)
    ID (double)
    ID (data)
    arrayInit (expr)
        expr (newArray)
            ID (double)
            expr (NUM)
                NUM (1000)

114. String[] greetings = {"hello", "hola", "bonjour"};
line (arrayInit)
    ID (String)
    ID (greetings)
    arrayInit (list)
        exprList (list)
            expr (STR)
                STR ("hello")
            expr (STR)
                STR ("hola")
            expr (STR)
                STR ("bonjour")

115. GameObj[] targets;
line (arrayDecl)
    ID (GameObj)
    idList (list)
        ID (targets)

116. GameObj[] targets = new GameObj[100];
line (arrayInit)
    ID (GameObj)
    ID (targets)
    arrayInit (expr)
        expr (newArray)
            ID (GameObj)
            expr (NUM)
                NUM (100)

117. GameObj[] targets = new GameObj[numTargets];
line (arrayInit)
    ID (GameObj)
    ID (targets)
    arrayInit (expr)
        expr (newArray)
            ID (GameObj)
            expr (lValue)
                lValue (lValue)
                    ID (numTargets)

118. foo = bar[i];
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (foo)
        expr (lValue)
            lValue (lValue)
                ID (bar)
                index (index)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)

119. foo = bar[0];
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (foo)
        expr (lValue)
            lValue (lValue)
                ID (bar)
                index (index)
                    expr (NUM)
                        NUM (0)

120. 

121. // function definitions

122. void foo()
line (func)
    retType (simple)
        ID (void)
    ID (foo)

123. void fooBar(int aParameter)
line (func)
    retType (simple)
        ID (void)
    ID (fooBar)
    paramList (list)
        param (var)
            ID (int)
            ID (aParameter)

124. int foo(double x)
line (func)
    retType (simple)
        ID (int)
    ID (foo)
    paramList (list)
        param (var)
            ID (double)
            ID (x)

125. String bar(String[] a, int length)
line (func)
    retType (simple)
        ID (String)
    ID (bar)
    paramList (list)
        param (array)
            ID (String)
            ID (a)
        param (var)
            ID (int)
            ID (length)

126. String[] split(String s, String delim)
line (func)
    retType (array)
        ID (String)
    ID (split)
    paramList (list)
        param (var)
            ID (String)
            ID (s)
        param (var)
            ID (String)
            ID (delim)

127. public double add(double x, double y, double z)
line (func)
    access (public)
    retType (simple)
        ID (double)
    ID (add)
    paramList (list)
        param (var)
            ID (double)
            ID (x)
        param (var)
            ID (double)
            ID (y)
        param (var)
            ID (double)
            ID (z)

128. 

129. // function calls

130. ct.println("Hello world");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            member (member)
                ID (println)
        exprList (list)
            expr (STR)
                STR ("Hello world")

131. ct.println("Hello " + name);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            member (member)
                ID (println)
        exprList (list)
            expr (+)
                expr (STR)
                    STR ("Hello ")
                expr (lValue)
                    lValue (lValue)
                        ID (name)

132. ct.println("Hello\nWorld");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            member (member)
                ID (println)
        exprList (list)
            expr (STR)
                STR ("Hello\nWorld")

133. x = add(3, 4);
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (call)
            fnValue (fnValue)
                ID (add)
            exprList (list)
                expr (NUM)
                    NUM (3)
                expr (NUM)
                    NUM (4)

134. m = mean(1.2, 3.4, 5.67);
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (m)
        expr (call)
            fnValue (fnValue)
                ID (mean)
            exprList (list)
                expr (NUM)
                    NUM (1.2)
                expr (NUM)
                    NUM (3.4)
                expr (NUM)
                    NUM (5.67)

135. foo(x,
-- Incomplete line carried forward

136. y,
-- Incomplete line carried forward

137. z);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

138. 

139. // multiline comments

140. /* this is a multiline comment

141. * this is the second line

142. * this is the third line

143. */

144. }
line (end)

145. // -------------------------------------------------------------

146. // Parsing white box tests

147. // -------------------------------------------------------------

148. // "blank"

149. 

150. // "comment"

151. // single comment line

152. while ( x < 100 ) // comment at end of line of code
line (while)
    expr (<)
        expr (lValue)
            lValue (lValue)
                ID (x)
        expr (NUM)
            NUM (100)
    whileEnd (while)

153. /* block comment line 1

154. * block comment line 2

155. */

156. /* block comment with // slash slash comment */

157. int x = 0; /* block comment after code on same line */
line (varInit)
    ID (int)
    ID (x)
    expr (NUM)
        NUM (0)

158. /* block comment before code on same line */ double pi = 3.14;
line (varInit)
    ID (double)
    ID (pi)
    expr (NUM)
        NUM (3.14)

159. // block comments inside line of code

160. double foo(int i /*fee*/, double db /*fi*/, boolean boo /*fo*/)
line (func)
    retType (simple)
        ID (double)
    ID (foo)
    paramList (list)
        param (var)
            ID (int)
            ID (i)
        param (var)
            ID (double)
            ID (db)
        param (var)
            ID (boolean)
            ID (boo)

161. 

162. // "stmt",       stmt, ";"

163. // -- stmt "call"      fnValue, "(", exprList, ")"

164. // -- -- exprList "empty"

165. foo();
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)

166. foo.bar();
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            member (member)
                ID (bar)

167. foo[i].bar();
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
            member (member)
                ID (bar)

168. // -- -- exprList "list"

169. foo(123); // "NUM"
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (NUM)
                NUM (123)

170. foo(12.345);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (NUM)
                NUM (12.345)

171. foo(1.234e56);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (NUM)
                NUM (1.234e56)

172. foo(1.234e+56);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (NUM)
                NUM (1.234e+56)

173. foo(1.234e-56);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (NUM)
                NUM (1.234e-56)

174. foo(.234e56);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (NUM)
                NUM (.234e56)

175. foo(.234e+56);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (NUM)
                NUM (.234e+56)

176. foo(.234e-56);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (NUM)
                NUM (.234e-56)

177. foo(true); // "BOOL"
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (BOOL)
                BOOL (true)

178. foo(false);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (BOOL)
                BOOL (false)

179. foo(null); // "NULL"
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (NULL)
                NULL (null)

180. foo("string literal"); // "STR"
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (STR)
                STR ("string literal")

181. foo(bar()); // "call"
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (call)
                fnValue (fnValue)
                    ID (bar)

182. foo(bar(123));
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (call)
                fnValue (fnValue)
                    ID (bar)
                exprList (list)
                    expr (NUM)
                        NUM (123)

183. foo(x); // "lValue"
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x)

184. foo(obj.x);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (obj)
                    field (field)
                        ID (x)

185. foo(objs[i]);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (objs)
                    index (index)
                        expr (lValue)
                            lValue (lValue)
                                ID (i)

186. foo(objs[i].x);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (objs)
                    index (index)
                        expr (lValue)
                            lValue (lValue)
                                ID (i)
                    field (field)
                        ID (x)

187. foo(123); // "exprParens"
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (NUM)
                NUM (123)

188. foo(-123); // "neg"
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (neg)
                expr (NUM)
                    NUM (123)

189. foo(-.234e+56);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (neg)
                expr (NUM)
                    NUM (.234e+56)

190. foo(-obj.x);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (neg)
                expr (lValue)
                    lValue (lValue)
                        ID (obj)
                        field (field)
                            ID (x)

191. foo(!true);   // "!"
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (not)
                expr (BOOL)
                    BOOL (true)

192. foo(!false);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (not)
                expr (BOOL)
                    BOOL (false)

193. foo(!paused);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (not)
                expr (lValue)
                    lValue (lValue)
                        ID (paused)

194. foo(new int [100]); // "newArray"
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (newArray)
                ID (int)
                expr (NUM)
                    NUM (100)

195. foo(new GameObj [numBullets]);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (newArray)
                ID (GameObj)
                expr (lValue)
                    lValue (lValue)
                        ID (numBullets)

196. foo(new GameObj [numBullets * 2]);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (newArray)
                ID (GameObj)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (numBullets)
                    expr (NUM)
                        NUM (2)

197. // -- -- exprList "list" (1 non-primary expr)

198. foo(123 + obj.x);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (+)
                expr (NUM)
                    NUM (123)
                expr (lValue)
                    lValue (lValue)
                        ID (obj)
                        field (field)
                            ID (x)

199. foo(-123 + obj.x - obj2.x);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (-)
                expr (+)
                    expr (neg)
                        expr (NUM)
                            NUM (123)
                    expr (lValue)
                        lValue (lValue)
                            ID (obj)
                            field (field)
                                ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (obj2)
                        field (field)
                            ID (x)

200. foo(100 - obj.x * -3.14);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (-)
                expr (NUM)
                    NUM (100)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (obj)
                            field (field)
                                ID (x)
                    expr (neg)
                        expr (NUM)
                            NUM (3.14)

201. foo((1 + a[iTop]) - 1);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (-)
                expr (exprParens)
                    expr (+)
                        expr (NUM)
                            NUM (1)
                        expr (lValue)
                            lValue (lValue)
                                ID (a)
                                index (index)
                                    expr (lValue)
                                        lValue (lValue)
                                            ID (iTop)
                expr (NUM)
                    NUM (1)

202. foo((1 + a[iTop]) / 1);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (/)
                expr (exprParens)
                    expr (+)
                        expr (NUM)
                            NUM (1)
                        expr (lValue)
                            lValue (lValue)
                                ID (a)
                                index (index)
                                    expr (lValue)
                                        lValue (lValue)
                                            ID (iTop)
                expr (NUM)
                    NUM (1)

203. foo((a[i] + b[j]) / 3);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (/)
                expr (exprParens)
                    expr (+)
                        expr (lValue)
                            lValue (lValue)
                                ID (a)
                                index (index)
                                    expr (lValue)
                                        lValue (lValue)
                                            ID (i)
                        expr (lValue)
                            lValue (lValue)
                                ID (b)
                                index (index)
                                    expr (lValue)
                                        lValue (lValue)
                                            ID (j)
                expr (NUM)
                    NUM (3)

204. // -- -- exprList "list" (multiple exprs)

205. foo(x, why, zee);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (why)
            expr (lValue)
                lValue (lValue)
                    ID (zee)

206. foo(x,
-- Incomplete line carried forward

207. y,
-- Incomplete line carried forward

208. z);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

209. foo( x + y, a || b && c, bar[i].m(z * (u + v)) );
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
        exprList (list)
            expr (+)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
            expr (||)
                expr (lValue)
                    lValue (lValue)
                        ID (a)
                expr (&&)
                    expr (lValue)
                        lValue (lValue)
                            ID (b)
                    expr (lValue)
                        lValue (lValue)
                            ID (c)
            expr (call)
                fnValue (fnValue)
                    ID (bar)
                    index (index)
                        expr (lValue)
                            lValue (lValue)
                                ID (i)
                    member (member)
                        ID (m)
                exprList (list)
                    expr (*)
                        expr (lValue)
                            lValue (lValue)
                                ID (z)
                        expr (exprParens)
                            expr (+)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (u)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (v)

210. // -- stmt "varAssign"      "ID", "=", expr

211. // -- -- valid "ID"s

212. x = 0;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (NUM)
            NUM (0)

213. xValue = 0;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (xValue)
        expr (NUM)
            NUM (0)

214. x123 = 0;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x123)
        expr (NUM)
            NUM (0)

215. x123four = 0;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x123four)
        expr (NUM)
            NUM (0)

216. some_variable = 0;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (some_variable)
        expr (NUM)
            NUM (0)

217. x1_ = 0;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x1_)
        expr (NUM)
            NUM (0)

218. // x = primaryExpr

219. var = 12.345; 			// "NUM"
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (var)
        expr (NUM)
            NUM (12.345)

220. x = 1.234e56;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (NUM)
            NUM (1.234e56)

221. x = 1.234e+56;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (NUM)
            NUM (1.234e+56)

222. x = 1.234e-56;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (NUM)
            NUM (1.234e-56)

223. x = .234e56;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (NUM)
            NUM (.234e56)

224. x = .234e+56;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (NUM)
            NUM (.234e+56)

225. x = .234e-56;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (NUM)
            NUM (.234e-56)

226. x = true; 				// "BOOL"
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (BOOL)
            BOOL (true)

227. x = false;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (BOOL)
            BOOL (false)

228. x = null;				// "NULL"
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (NULL)
            NULL (null)

229. x = "string literal"; 	// "STR"
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (STR)
            STR ("string literal")

230. x = foo(); 				// "call"
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (call)
            fnValue (fnValue)
                ID (foo)

231. x = foo.bar(123);
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (call)
            fnValue (fnValue)
                ID (foo)
                member (member)
                    ID (bar)
            exprList (list)
                expr (NUM)
                    NUM (123)

232. x = y; 					// "lValue"
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (lValue)
            lValue (lValue)
                ID (y)

233. x = obj.x;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (lValue)
            lValue (lValue)
                ID (obj)
                field (field)
                    ID (x)

234. x = objs[i];
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (lValue)
            lValue (lValue)
                ID (objs)
                index (index)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)

235. x = objs[i].x;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (lValue)
            lValue (lValue)
                ID (objs)
                index (index)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                field (field)
                    ID (x)

236. x = (123); 				// "exprParens"
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (exprParens)
            expr (NUM)
                NUM (123)

237. x = -123; 				// "neg"
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (neg)
            expr (NUM)
                NUM (123)

238. x = -.234e+56;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (neg)
            expr (NUM)
                NUM (.234e+56)

239. x = -obj.x;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (neg)
            expr (lValue)
                lValue (lValue)
                    ID (obj)
                    field (field)
                        ID (x)

240. x = !true;   			// "!"
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (not)
            expr (BOOL)
                BOOL (true)

241. x = !false;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (not)
            expr (BOOL)
                BOOL (false)

242. x = !paused;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (not)
            expr (lValue)
                lValue (lValue)
                    ID (paused)

243. x = new GameObj [numBullets]; // "newArray"
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (newArray)
            ID (GameObj)
            expr (lValue)
                lValue (lValue)
                    ID (numBullets)

244. x = (int) 3.14;         // "cast"
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (cast)
            ID (int)
            expr (NUM)
                NUM (3.14)

245. x = x * y;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (*)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (y)

246. x = x / y;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (/)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (y)

247. x = x % y;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (%)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (y)

248. x = x + y;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (+)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (y)

249. x = x - y;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (-)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (y)

250. x = x << y;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (<<)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (y)

251. x = x >> y;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (>>)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (y)

252. x = x >>> y;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (>>>)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (y)

253. b = x < y;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (b)
        expr (<)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (y)

254. b = x <= y;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (b)
        expr (<=)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (y)

255. b = x > y;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (b)
        expr (>)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (y)

256. b = x >= y;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (b)
        expr (>=)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (y)

257. b = x == y;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (b)
        expr (==)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (y)

258. b = x != y;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (b)
        expr (!=)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (y)

259. x = x & y;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (&)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (y)

260. x = x ^ y;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (^)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (y)

261. x = x | y;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (|)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (y)

262. b = x && y;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (b)
        expr (&&)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (y)

263. b = x || y;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (b)
        expr (||)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (y)

264. x = x + y + z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (+)
            expr (+)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

265. x = x - y - z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (-)
            expr (-)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

266. x = x * y * z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (*)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

267. x = x / y / z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (/)
            expr (/)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

268. x = x % y % z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (%)
            expr (%)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

269. x = x + y - z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (-)
            expr (+)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

270. x = x - y + z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (+)
            expr (-)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

271. x = x + y * z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (+)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                expr (lValue)
                    lValue (lValue)
                        ID (z)

272. x = x * y + z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (+)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

273. x = x + y / z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (+)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (/)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                expr (lValue)
                    lValue (lValue)
                        ID (z)

274. x = x / y + z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (+)
            expr (/)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

275. x = x + y % z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (+)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (%)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                expr (lValue)
                    lValue (lValue)
                        ID (z)

276. x = x % y + z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (+)
            expr (%)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

277. x = x - y * z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (-)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                expr (lValue)
                    lValue (lValue)
                        ID (z)

278. x = x * y - z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (-)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

279. x = x - y / z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (-)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (/)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                expr (lValue)
                    lValue (lValue)
                        ID (z)

280. x = x / y - z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (-)
            expr (/)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

281. x = x - y % z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (-)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (%)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                expr (lValue)
                    lValue (lValue)
                        ID (z)

282. x = x % y - z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (-)
            expr (%)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

283. x = x * y / z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (/)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

284. x = x / y * z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (*)
            expr (/)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

285. x = x * y % z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (%)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

286. x = x % y * z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (*)
            expr (%)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

287. x = x / y % z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (%)
            expr (/)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

288. x = x % y / z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (/)
            expr (%)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

289. x = (x + y) + z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (+)
            expr (exprParens)
                expr (+)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

290. x = x - (y - z);
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (-)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (exprParens)
                expr (-)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                    expr (lValue)
                        lValue (lValue)
                            ID (z)

291. x = (x * y) * z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (*)
            expr (exprParens)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

292. x = x / (y / z);
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (/)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (exprParens)
                expr (/)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                    expr (lValue)
                        lValue (lValue)
                            ID (z)

293. x = (x + y) - z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (-)
            expr (exprParens)
                expr (+)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

294. x = x - (y + z);
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (-)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (exprParens)
                expr (+)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                    expr (lValue)
                        lValue (lValue)
                            ID (z)

295. x = (x + y) * z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (*)
            expr (exprParens)
                expr (+)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

296. x = x * (y + z);
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (*)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (exprParens)
                expr (+)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                    expr (lValue)
                        lValue (lValue)
                            ID (z)

297. x = (x + y) / z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (/)
            expr (exprParens)
                expr (+)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

298. x = x / (y + z);
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (/)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (exprParens)
                expr (+)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                    expr (lValue)
                        lValue (lValue)
                            ID (z)

299. x = (x - y) * z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (*)
            expr (exprParens)
                expr (-)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

300. x = x * (y - z);
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (*)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (exprParens)
                expr (-)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                    expr (lValue)
                        lValue (lValue)
                            ID (z)

301. x = (x - y) / z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (/)
            expr (exprParens)
                expr (-)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

302. x = x / (y - z);
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (/)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (exprParens)
                expr (-)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                    expr (lValue)
                        lValue (lValue)
                            ID (z)

303. x = (x * y) / z;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (/)
            expr (exprParens)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
            expr (lValue)
                lValue (lValue)
                    ID (z)

304. x = x / (y * z);
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (/)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (exprParens)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                    expr (lValue)
                        lValue (lValue)
                            ID (z)

305. x = 123 + obj.x;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (+)
            expr (NUM)
                NUM (123)
            expr (lValue)
                lValue (lValue)
                    ID (obj)
                    field (field)
                        ID (x)

306. x = -123 + obj.x - obj2.x;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (-)
            expr (+)
                expr (neg)
                    expr (NUM)
                        NUM (123)
                expr (lValue)
                    lValue (lValue)
                        ID (obj)
                        field (field)
                            ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (obj2)
                    field (field)
                        ID (x)

307. x = 100 - obj.x * -3.14;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (-)
            expr (NUM)
                NUM (100)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (obj)
                        field (field)
                            ID (x)
                expr (neg)
                    expr (NUM)
                        NUM (3.14)

308. x = (1 + a[iTop]) - 1;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (-)
            expr (exprParens)
                expr (+)
                    expr (NUM)
                        NUM (1)
                    expr (lValue)
                        lValue (lValue)
                            ID (a)
                            index (index)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (iTop)
            expr (NUM)
                NUM (1)

309. x = (1 + a[iTop]) / 1;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (/)
            expr (exprParens)
                expr (+)
                    expr (NUM)
                        NUM (1)
                    expr (lValue)
                        lValue (lValue)
                            ID (a)
                            index (index)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (iTop)
            expr (NUM)
                NUM (1)

310. x = 1 + (a[i] + b[j]) / 3;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (+)
            expr (NUM)
                NUM (1)
            expr (/)
                expr (exprParens)
                    expr (+)
                        expr (lValue)
                            lValue (lValue)
                                ID (a)
                                index (index)
                                    expr (lValue)
                                        lValue (lValue)
                                            ID (i)
                        expr (lValue)
                            lValue (lValue)
                                ID (b)
                                index (index)
                                    expr (lValue)
                                        lValue (lValue)
                                            ID (j)
                expr (NUM)
                    NUM (3)

311. x = x1 * y1 + x2 * y2 + x3 * y3;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (+)
            expr (+)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (x1)
                    expr (lValue)
                        lValue (lValue)
                            ID (y1)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (x2)
                    expr (lValue)
                        lValue (lValue)
                            ID (y2)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (x3)
                expr (lValue)
                    lValue (lValue)
                        ID (y3)

312. x = x[0] * y[0] + x[1] * y[1] + x[2] * y[2];
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (+)
            expr (+)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (index)
                                expr (NUM)
                                    NUM (0)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                            index (index)
                                expr (NUM)
                                    NUM (0)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (index)
                                expr (NUM)
                                    NUM (1)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                            index (index)
                                expr (NUM)
                                    NUM (1)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (index)
                            expr (NUM)
                                NUM (2)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (index)
                            expr (NUM)
                                NUM (2)

313. x = (x1 + x2 + x3) / 3;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (/)
            expr (exprParens)
                expr (+)
                    expr (+)
                        expr (lValue)
                            lValue (lValue)
                                ID (x1)
                        expr (lValue)
                            lValue (lValue)
                                ID (x2)
                    expr (lValue)
                        lValue (lValue)
                            ID (x3)
            expr (NUM)
                NUM (3)

314. x = (x[0] + x[1] + x[2] + x[3]) / 4;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (/)
            expr (exprParens)
                expr (+)
                    expr (+)
                        expr (+)
                            expr (lValue)
                                lValue (lValue)
                                    ID (x)
                                    index (index)
                                        expr (NUM)
                                            NUM (0)
                            expr (lValue)
                                lValue (lValue)
                                    ID (x)
                                    index (index)
                                        expr (NUM)
                                            NUM (1)
                        expr (lValue)
                            lValue (lValue)
                                ID (x)
                                index (index)
                                    expr (NUM)
                                        NUM (2)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (index)
                                expr (NUM)
                                    NUM (3)
            expr (NUM)
                NUM (4)

315. x = sum / n;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (/)
            expr (lValue)
                lValue (lValue)
                    ID (sum)
            expr (lValue)
                lValue (lValue)
                    ID (n)

316. x = Math.sqrt(a * a + b * b);
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (call)
            fnValue (fnValue)
                ID (Math)
                member (member)
                    ID (sqrt)
            exprList (list)
                expr (+)
                    expr (*)
                        expr (lValue)
                            lValue (lValue)
                                ID (a)
                        expr (lValue)
                            lValue (lValue)
                                ID (a)
                    expr (*)
                        expr (lValue)
                            lValue (lValue)
                                ID (b)
                        expr (lValue)
                            lValue (lValue)
                                ID (b)

317. x = Math.sqrt(Math.pow(a,2) + Math.pow(b,2));
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (call)
            fnValue (fnValue)
                ID (Math)
                member (member)
                    ID (sqrt)
            exprList (list)
                expr (+)
                    expr (call)
                        fnValue (fnValue)
                            ID (Math)
                            member (member)
                                ID (pow)
                        exprList (list)
                            expr (lValue)
                                lValue (lValue)
                                    ID (a)
                            expr (NUM)
                                NUM (2)
                    expr (call)
                        fnValue (fnValue)
                            ID (Math)
                            member (member)
                                ID (pow)
                        exprList (list)
                            expr (lValue)
                                lValue (lValue)
                                    ID (b)
                            expr (NUM)
                                NUM (2)

318. x = Math.sqrt( (a.x - b.x) * (a.x - b.x) + (a.y - b.y)*(a.y - b.y) );
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (call)
            fnValue (fnValue)
                ID (Math)
                member (member)
                    ID (sqrt)
            exprList (list)
                expr (+)
                    expr (*)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        field (field)
                                            ID (x)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        field (field)
                                            ID (x)
                    expr (*)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        field (field)
                                            ID (y)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        field (field)
                                            ID (y)

319. x = Math.sqrt( Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2) );
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (call)
            fnValue (fnValue)
                ID (Math)
                member (member)
                    ID (sqrt)
            exprList (list)
                expr (+)
                    expr (call)
                        fnValue (fnValue)
                            ID (Math)
                            member (member)
                                ID (pow)
                        exprList (list)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        field (field)
                                            ID (x)
                            expr (NUM)
                                NUM (2)
                    expr (call)
                        fnValue (fnValue)
                            ID (Math)
                            member (member)
                                ID (pow)
                        exprList (list)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        field (field)
                                            ID (y)
                            expr (NUM)
                                NUM (2)

320. x = Math.sqrt((obj.x + obj.y) / 2 - (a[i] + b[j]) / 3);
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (call)
            fnValue (fnValue)
                ID (Math)
                member (member)
                    ID (sqrt)
            exprList (list)
                expr (-)
                    expr (/)
                        expr (exprParens)
                            expr (+)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (obj)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (obj)
                                        field (field)
                                            ID (y)
                        expr (NUM)
                            NUM (2)
                    expr (/)
                        expr (exprParens)
                            expr (+)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (j)
                        expr (NUM)
                            NUM (3)

321. x = true;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (BOOL)
            BOOL (true)

322. x = !true;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (not)
            expr (BOOL)
                BOOL (true)

323. x = false;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (BOOL)
            BOOL (false)

324. x = !false;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (not)
            expr (BOOL)
                BOOL (false)

325. x = !boolVar1 && boolVar2;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (&&)
            expr (not)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar1)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar2)

326. x = boolVar1 && !boolVar2;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (&&)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar1)
            expr (not)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar2)

327. x = !boolVar1 && !boolVar2;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (&&)
            expr (not)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar1)
            expr (not)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar2)

328. x = !(boolVar1 && boolVar2);
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (not)
            expr (exprParens)
                expr (&&)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar1)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar2)

329. x = !boolVar1 || boolVar2;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (||)
            expr (not)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar1)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar2)

330. x = boolVar1 || !boolVar2;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (||)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar1)
            expr (not)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar2)

331. x = !boolVar1 || !boolVar2;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (||)
            expr (not)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar1)
            expr (not)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar2)

332. x = !(boolVar1 || boolVar2);
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (not)
            expr (exprParens)
                expr (||)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar1)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar2)

333. x = boolVar1 && boolVar2 && boolVar3;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (&&)
            expr (&&)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar1)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar2)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar3)

334. x = boolVar1 || boolVar2 || boolVar3;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (||)
            expr (||)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar1)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar2)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar3)

335. x = boolVar1 && boolVar2 || boolVar3;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (||)
            expr (&&)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar1)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar2)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar3)

336. x = !boolVar1 && boolVar2 || boolVar3;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (||)
            expr (&&)
                expr (not)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar1)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar2)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar3)

337. x = boolVar1 && !boolVar2 || boolVar3;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (||)
            expr (&&)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar1)
                expr (not)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar2)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar3)

338. x = boolVar1 && boolVar2 || !boolVar3;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (||)
            expr (&&)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar1)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar2)
            expr (not)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar3)

339. x = !boolVar1 && !boolVar2 || boolVar3;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (||)
            expr (&&)
                expr (not)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar1)
                expr (not)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar2)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar3)

340. x = boolVar1 || boolVar2 && boolVar3;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (||)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar1)
            expr (&&)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar2)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar3)

341. x = (boolVar1 && boolVar2) || boolVar3;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (||)
            expr (exprParens)
                expr (&&)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar1)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar2)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar3)

342. x = boolVar1 && (boolVar2 || boolVar3);
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (&&)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar1)
            expr (exprParens)
                expr (||)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar2)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar3)

343. x = (boolVar1 && boolVar2) || (boolVar3 && boolVar4);
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (||)
            expr (exprParens)
                expr (&&)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar1)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar2)
            expr (exprParens)
                expr (&&)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar3)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar4)

344. x = (boolVar1 && (boolVar2 || boolVar3)) && boolVar4;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (&&)
            expr (exprParens)
                expr (&&)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar1)
                    expr (exprParens)
                        expr (||)
                            expr (lValue)
                                lValue (lValue)
                                    ID (boolVar2)
                            expr (lValue)
                                lValue (lValue)
                                    ID (boolVar3)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar4)

345. x = x && ( (y || z) && !w );
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (&&)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (exprParens)
                expr (&&)
                    expr (exprParens)
                        expr (||)
                            expr (lValue)
                                lValue (lValue)
                                    ID (y)
                            expr (lValue)
                                lValue (lValue)
                                    ID (z)
                    expr (not)
                        expr (lValue)
                            lValue (lValue)
                                ID (w)

346. x = x < 0;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (<)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (NUM)
                NUM (0)

347. x = x <= 1.2;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (<=)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (NUM)
                NUM (1.2)

348. x = x > .1;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (>)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (NUM)
                NUM (.1)

349. x = x >= .1e-23;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (>=)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (NUM)
                NUM (.1e-23)

350. x = x < eps && x > -eps;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (&&)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (eps)
            expr (>)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (neg)
                    expr (lValue)
                        lValue (lValue)
                            ID (eps)

351. x = xValue > eps[i] && xValue < eps[i + j];
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (&&)
            expr (>)
                expr (lValue)
                    lValue (lValue)
                        ID (xValue)
                expr (lValue)
                    lValue (lValue)
                        ID (eps)
                        index (index)
                            expr (lValue)
                                lValue (lValue)
                                    ID (i)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (xValue)
                expr (lValue)
                    lValue (lValue)
                        ID (eps)
                        index (index)
                            expr (+)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (i)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (j)

352. x = x1 < foo() || y2 >= foo[i].bar(arr[i]);
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (||)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (x1)
                expr (call)
                    fnValue (fnValue)
                        ID (foo)
            expr (>=)
                expr (lValue)
                    lValue (lValue)
                        ID (y2)
                expr (call)
                    fnValue (fnValue)
                        ID (foo)
                        index (index)
                            expr (lValue)
                                lValue (lValue)
                                    ID (i)
                        member (member)
                            ID (bar)
                    exprList (list)
                        expr (lValue)
                            lValue (lValue)
                                ID (arr)
                                index (index)
                                    expr (lValue)
                                        lValue (lValue)
                                            ID (i)

353. x = x >= y.bar() && ( z_val <= 1 + 2.3 || 5 > 7 );
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (x)
        expr (&&)
            expr (>=)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (call)
                    fnValue (fnValue)
                        ID (y)
                        member (member)
                            ID (bar)
            expr (exprParens)
                expr (||)
                    expr (<=)
                        expr (lValue)
                            lValue (lValue)
                                ID (z_val)
                        expr (+)
                            expr (NUM)
                                NUM (1)
                            expr (NUM)
                                NUM (2.3)
                    expr (>)
                        expr (NUM)
                            NUM (5)
                        expr (NUM)
                            NUM (7)

354. // -- stmt "assign"      lValue, "=", expr

355. obj.x = -0.5;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (obj)
            field (field)
                ID (x)
        expr (neg)
            expr (NUM)
                NUM (0.5)

356. obj.height = obj2.height;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (obj)
            field (field)
                ID (height)
        expr (lValue)
            lValue (lValue)
                ID (obj2)
                field (field)
                    ID (height)

357. xCoord[i] = obj.x;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (xCoord)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
        expr (lValue)
            lValue (lValue)
                ID (obj)
                field (field)
                    ID (x)

358. objs[i].x = foo(i);
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (objs)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
            field (field)
                ID (x)
        expr (call)
            fnValue (fnValue)
                ID (foo)
            exprList (list)
                expr (lValue)
                    lValue (lValue)
                        ID (i)

359. a[0] = startValue;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (a)
            index (index)
                expr (NUM)
                    NUM (0)
        expr (lValue)
            lValue (lValue)
                ID (startValue)

360. a[i] = max;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
        expr (lValue)
            lValue (lValue)
                ID (max)

361. a[i] = a[i - 1];
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
        expr (lValue)
            lValue (lValue)
                ID (a)
                index (index)
                    expr (-)
                        expr (lValue)
                            lValue (lValue)
                                ID (i)
                        expr (NUM)
                            NUM (1)

362. a[i] = b[i];
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
        expr (lValue)
            lValue (lValue)
                ID (b)
                index (index)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)

363. dist[i] = Math.sqrt( (a[i].x - b[i].x) * (a[i].x - b[i].x) + (a[i].y - b[i].y)*(a[i].y - b[i].y) );
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (dist)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
        expr (call)
            fnValue (fnValue)
                ID (Math)
                member (member)
                    ID (sqrt)
            exprList (list)
                expr (+)
                    expr (*)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                        field (field)
                                            ID (x)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                        field (field)
                                            ID (x)
                    expr (*)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                        field (field)
                                            ID (y)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                        field (field)
                                            ID (y)

364. dist[i] = Math.sqrt( Math.pow(a[i].x - b[i].x, 2) + Math.pow(a[i].y - b[i].y, 2) );
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (dist)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
        expr (call)
            fnValue (fnValue)
                ID (Math)
                member (member)
                    ID (sqrt)
            exprList (list)
                expr (+)
                    expr (call)
                        fnValue (fnValue)
                            ID (Math)
                            member (member)
                                ID (pow)
                        exprList (list)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                        field (field)
                                            ID (x)
                            expr (NUM)
                                NUM (2)
                    expr (call)
                        fnValue (fnValue)
                            ID (Math)
                            member (member)
                                ID (pow)
                        exprList (list)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                        field (field)
                                            ID (y)
                            expr (NUM)
                                NUM (2)

365. // -- stmt "opAssign"

366. i += 1;
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (i)
        opAssignOp (+=)
        expr (NUM)
            NUM (1)

367. obj.x += -0.5;
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (obj)
            field (field)
                ID (x)
        opAssignOp (+=)
        expr (neg)
            expr (NUM)
                NUM (0.5)

368. obj.height -= obj2.height;
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (obj)
            field (field)
                ID (height)
        opAssignOp (-=)
        expr (lValue)
            lValue (lValue)
                ID (obj2)
                field (field)
                    ID (height)

369. xCoord[i] *= obj.x;
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (xCoord)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
        opAssignOp (*=)
        expr (lValue)
            lValue (lValue)
                ID (obj)
                field (field)
                    ID (x)

370. objs[i].x /= foo(i);
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (objs)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
            field (field)
                ID (x)
        opAssignOp (/=)
        expr (call)
            fnValue (fnValue)
                ID (foo)
            exprList (list)
                expr (lValue)
                    lValue (lValue)
                        ID (i)

371. a[0] += startValue;
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (a)
            index (index)
                expr (NUM)
                    NUM (0)
        opAssignOp (+=)
        expr (lValue)
            lValue (lValue)
                ID (startValue)

372. a[i] -= max;
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
        opAssignOp (-=)
        expr (lValue)
            lValue (lValue)
                ID (max)

373. a[i] *= a[i - 1];
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
        opAssignOp (*=)
        expr (lValue)
            lValue (lValue)
                ID (a)
                index (index)
                    expr (-)
                        expr (lValue)
                            lValue (lValue)
                                ID (i)
                        expr (NUM)
                            NUM (1)

374. a[i] /= b[i];
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
        opAssignOp (/=)
        expr (lValue)
            lValue (lValue)
                ID (b)
                index (index)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)

375. dist[i] += Math.sqrt( (a[i].x - b[i].x) * (a[i].x - b[i].x) + (a[i].y - b[i].y)*(a[i].y - b[i].y) );
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (dist)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
        opAssignOp (+=)
        expr (call)
            fnValue (fnValue)
                ID (Math)
                member (member)
                    ID (sqrt)
            exprList (list)
                expr (+)
                    expr (*)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                        field (field)
                                            ID (x)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                        field (field)
                                            ID (x)
                    expr (*)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                        field (field)
                                            ID (y)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                        field (field)
                                            ID (y)

376. dist[i] -= Math.sqrt( Math.pow(a[i].x - b[i].x, 2) + Math.pow(a[i].y - b[i].y, 2) );
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (dist)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
        opAssignOp (-=)
        expr (call)
            fnValue (fnValue)
                ID (Math)
                member (member)
                    ID (sqrt)
            exprList (list)
                expr (+)
                    expr (call)
                        fnValue (fnValue)
                            ID (Math)
                            member (member)
                                ID (pow)
                        exprList (list)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                        field (field)
                                            ID (x)
                            expr (NUM)
                                NUM (2)
                    expr (call)
                        fnValue (fnValue)
                            ID (Math)
                            member (member)
                                ID (pow)
                        exprList (list)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                        field (field)
                                            ID (y)
                            expr (NUM)
                                NUM (2)

377. // -- stmt "preInc"

378. ++x;
line (stmt)
    stmt (preInc)
        lValue (lValue)
            ID (x)

379. ++x.y;
line (stmt)
    stmt (preInc)
        lValue (lValue)
            ID (x)
            field (field)
                ID (y)

380. ++a[i];
line (stmt)
    stmt (preInc)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)

381. ++a[i].x;
line (stmt)
    stmt (preInc)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
            field (field)
                ID (x)

382. // -- stmt "preDec"

383. --x;
line (stmt)
    stmt (preDec)
        lValue (lValue)
            ID (x)

384. --x.y;
line (stmt)
    stmt (preDec)
        lValue (lValue)
            ID (x)
            field (field)
                ID (y)

385. --a[i];
line (stmt)
    stmt (preDec)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)

386. --a[i].x;
line (stmt)
    stmt (preDec)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
            field (field)
                ID (x)

387. // -- stmt "postInc"

388. x++;
line (stmt)
    stmt (postInc)
        lValue (lValue)
            ID (x)

389. x.y++;
line (stmt)
    stmt (postInc)
        lValue (lValue)
            ID (x)
            field (field)
                ID (y)

390. a[i]++;
line (stmt)
    stmt (postInc)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)

391. a[i].x++;
line (stmt)
    stmt (postInc)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
            field (field)
                ID (x)

392. // -- stmt "postDec"

393. x--;
line (stmt)
    stmt (postDec)
        lValue (lValue)
            ID (x)

394. x.y--;
line (stmt)
    stmt (postDec)
        lValue (lValue)
            ID (x)
            field (field)
                ID (y)

395. a[i]--;
line (stmt)
    stmt (postDec)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)

396. a[i].x--;
line (stmt)
    stmt (postDec)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
            field (field)
                ID (x)

397. // -- break

398. break;
line (stmt)
    stmt (break)

399. 

400. // "varInit",       "ID", "ID", "=", expr, ";"

401. // -- expr is a primaryExpr

402. int i = 0;
line (varInit)
    ID (int)
    ID (i)
    expr (NUM)
        NUM (0)

403. double c = 2.99792458e+8;
line (varInit)
    ID (double)
    ID (c)
    expr (NUM)
        NUM (2.99792458e+8)

404. boolean b = true;
line (varInit)
    ID (boolean)
    ID (b)
    expr (BOOL)
        BOOL (true)

405. String greeting = "hello";
line (varInit)
    ID (String)
    ID (greeting)
    expr (STR)
        STR ("hello")

406. int x = foo();
line (varInit)
    ID (int)
    ID (x)
    expr (call)
        fnValue (fnValue)
            ID (foo)

407. double y = bar("foo");
line (varInit)
    ID (double)
    ID (y)
    expr (call)
        fnValue (fnValue)
            ID (bar)
        exprList (list)
            expr (STR)
                STR ("foo")

408. boolean b = x;
line (varInit)
    ID (boolean)
    ID (b)
    expr (lValue)
        lValue (lValue)
            ID (x)

409. String s = x.y;
line (varInit)
    ID (String)
    ID (s)
    expr (lValue)
        lValue (lValue)
            ID (x)
            field (field)
                ID (y)

410. GameObj g = arr[index];
line (varInit)
    ID (GameObj)
    ID (g)
    expr (lValue)
        lValue (lValue)
            ID (arr)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (index)

411. double x = arr[i].x;
line (varInit)
    ID (double)
    ID (x)
    expr (lValue)
        lValue (lValue)
            ID (arr)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
            field (field)
                ID (x)

412. int i = (j);
line (varInit)
    ID (int)
    ID (i)
    expr (exprParens)
        expr (lValue)
            lValue (lValue)
                ID (j)

413. double d = -123.e-56;
line (varInit)
    ID (double)
    ID (d)
    expr (neg)
        expr (NUM)
            NUM (123.e-56)

414. boolean b = !b;
line (varInit)
    ID (boolean)
    ID (b)
    expr (not)
        expr (lValue)
            lValue (lValue)
                ID (b)

415. // -- expr is not a primaryExpr

416. int m = (s + e) / 2;
line (varInit)
    ID (int)
    ID (m)
    expr (/)
        expr (exprParens)
            expr (+)
                expr (lValue)
                    lValue (lValue)
                        ID (s)
                expr (lValue)
                    lValue (lValue)
                        ID (e)
        expr (NUM)
            NUM (2)

417. int mid = start + (end - start) / 2;
line (varInit)
    ID (int)
    ID (mid)
    expr (+)
        expr (lValue)
            lValue (lValue)
                ID (start)
        expr (/)
            expr (exprParens)
                expr (-)
                    expr (lValue)
                        lValue (lValue)
                            ID (end)
                    expr (lValue)
                        lValue (lValue)
                            ID (start)
            expr (NUM)
                NUM (2)

418. double dotProduct = x1 * y1 + x2 * y2 + x3 * y3;
line (varInit)
    ID (double)
    ID (dotProduct)
    expr (+)
        expr (+)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (x1)
                expr (lValue)
                    lValue (lValue)
                        ID (y1)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (x2)
                expr (lValue)
                    lValue (lValue)
                        ID (y2)
        expr (*)
            expr (lValue)
                lValue (lValue)
                    ID (x3)
            expr (lValue)
                lValue (lValue)
                    ID (y3)

419. double avg = (x[0] + x[1] + x[2] + x[3]) / 4.0;
line (varInit)
    ID (double)
    ID (avg)
    expr (/)
        expr (exprParens)
            expr (+)
                expr (+)
                    expr (+)
                        expr (lValue)
                            lValue (lValue)
                                ID (x)
                                index (index)
                                    expr (NUM)
                                        NUM (0)
                        expr (lValue)
                            lValue (lValue)
                                ID (x)
                                index (index)
                                    expr (NUM)
                                        NUM (1)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (index)
                                expr (NUM)
                                    NUM (2)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (index)
                            expr (NUM)
                                NUM (3)
        expr (NUM)
            NUM (4.0)

420. double avg = sum(arr) / arr.length;
line (varInit)
    ID (double)
    ID (avg)
    expr (/)
        expr (call)
            fnValue (fnValue)
                ID (sum)
            exprList (list)
                expr (lValue)
                    lValue (lValue)
                        ID (arr)
        expr (lValue)
            lValue (lValue)
                ID (arr)
                field (field)
                    ID (length)

421. GameObj b = bullets[i];
line (varInit)
    ID (GameObj)
    ID (b)
    expr (lValue)
        lValue (lValue)
            ID (bullets)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)

422. double dist = Math.sqrt( Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2) );
line (varInit)
    ID (double)
    ID (dist)
    expr (call)
        fnValue (fnValue)
            ID (Math)
            member (member)
                ID (sqrt)
        exprList (list)
            expr (+)
                expr (call)
                    fnValue (fnValue)
                        ID (Math)
                        member (member)
                            ID (pow)
                    exprList (list)
                        expr (-)
                            expr (lValue)
                                lValue (lValue)
                                    ID (a)
                                    field (field)
                                        ID (x)
                            expr (lValue)
                                lValue (lValue)
                                    ID (b)
                                    field (field)
                                        ID (x)
                        expr (NUM)
                            NUM (2)
                expr (call)
                    fnValue (fnValue)
                        ID (Math)
                        member (member)
                            ID (pow)
                    exprList (list)
                        expr (-)
                            expr (lValue)
                                lValue (lValue)
                                    ID (a)
                                    field (field)
                                        ID (y)
                            expr (lValue)
                                lValue (lValue)
                                    ID (b)
                                    field (field)
                                        ID (y)
                        expr (NUM)
                            NUM (2)

423. boolean b = ( x || y ) && ( x || z );
line (varInit)
    ID (boolean)
    ID (b)
    expr (&&)
        expr (exprParens)
            expr (||)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
        expr (exprParens)
            expr (||)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (z)

424. boolean b = ( x && ( (y || z) && !w ) );
line (varInit)
    ID (boolean)
    ID (b)
    expr (exprParens)
        expr (&&)
            expr (lValue)
                lValue (lValue)
                    ID (x)
            expr (exprParens)
                expr (&&)
                    expr (exprParens)
                        expr (||)
                            expr (lValue)
                                lValue (lValue)
                                    ID (y)
                            expr (lValue)
                                lValue (lValue)
                                    ID (z)
                    expr (not)
                        expr (lValue)
                            lValue (lValue)
                                ID (w)

425. 

426. // "varDecl",       "ID", idList, ";"

427. int x;
line (varDecl)
    ID (int)
    idList (list)
        ID (x)

428. double x1, x2;
line (varDecl)
    ID (double)
    idList (list)
        ID (x1)
        ID (x2)

429. double x_1, x_2, x_3;
line (varDecl)
    ID (double)
    idList (list)
        ID (x_1)
        ID (x_2)
        ID (x_3)

430. boolean paused, turboModeOn, cheatModeOn;
line (varDecl)
    ID (boolean)
    idList (list)
        ID (paused)
        ID (turboModeOn)
        ID (cheatModeOn)

431. String city, state, zip;
line (varDecl)
    ID (String)
    idList (list)
        ID (city)
        ID (state)
        ID (zip)

432. 

433. // "constInit",      "final", "ID", "ID", "=", expr, ";"

434. final int MAX_VALUE = 100;
line (constInit)
    ID (int)
    ID (MAX_VALUE)
    expr (NUM)
        NUM (100)

435. final double MAX_VAL_DOUBLE = 1.0 * MAX_VALUE;
line (constInit)
    ID (double)
    ID (MAX_VAL_DOUBLE)
    expr (*)
        expr (NUM)
            NUM (1.0)
        expr (lValue)
            lValue (lValue)
                ID (MAX_VALUE)

436. final int MAX = max(arr, len);
line (constInit)
    ID (int)
    ID (MAX)
    expr (call)
        fnValue (fnValue)
            ID (max)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (arr)
            expr (lValue)
                lValue (lValue)
                    ID (len)

437. final String NAME = "Max";
line (constInit)
    ID (String)
    ID (NAME)
    expr (STR)
        STR ("Max")

438. final GameObj foo = bar;
line (constInit)
    ID (GameObj)
    ID (foo)
    expr (lValue)
        lValue (lValue)
            ID (bar)

439. final boolean FOO = !bar || (p && !q);
line (constInit)
    ID (boolean)
    ID (FOO)
    expr (||)
        expr (not)
            expr (lValue)
                lValue (lValue)
                    ID (bar)
        expr (exprParens)
            expr (&&)
                expr (lValue)
                    lValue (lValue)
                        ID (p)
                expr (not)
                    expr (lValue)
                        lValue (lValue)
                            ID (q)

440. final int N = 1 - a * ( b + c ) / 2;
line (constInit)
    ID (int)
    ID (N)
    expr (-)
        expr (NUM)
            NUM (1)
        expr (/)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (a)
                expr (exprParens)
                    expr (+)
                        expr (lValue)
                            lValue (lValue)
                                ID (b)
                        expr (lValue)
                            lValue (lValue)
                                ID (c)
            expr (NUM)
                NUM (2)

441. final double WIDTH = ct.getWidth();
line (constInit)
    ID (double)
    ID (WIDTH)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            member (member)
                ID (getWidth)

442. final int X0 = x[0];
line (constInit)
    ID (int)
    ID (X0)
    expr (lValue)
        lValue (lValue)
            ID (x)
            index (index)
                expr (NUM)
                    NUM (0)

443. final boolean FOO = bar[i].x + Math.sqrt(z);
line (constInit)
    ID (boolean)
    ID (FOO)
    expr (+)
        expr (lValue)
            lValue (lValue)
                ID (bar)
                index (index)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                field (field)
                    ID (x)
        expr (call)
            fnValue (fnValue)
                ID (Math)
                member (member)
                    ID (sqrt)
            exprList (list)
                expr (lValue)
                    lValue (lValue)
                        ID (z)

444. 

445. // "func", 		access, retType, "ID", "(", paramList, ")"

446. public void foo()
line (func)
    access (public)
    retType (simple)
        ID (void)
    ID (foo)

447. public int foo()
line (func)
    access (public)
    retType (simple)
        ID (int)
    ID (foo)

448. public boolean foo2(double x)
line (func)
    access (public)
    retType (simple)
        ID (boolean)
    ID (foo2)
    paramList (list)
        param (var)
            ID (double)
            ID (x)

449. public double foo(int[] arr)
line (func)
    access (public)
    retType (simple)
        ID (double)
    ID (foo)
    paramList (list)
        param (array)
            ID (int)
            ID (arr)

450. public String foo_bar(double x1, boolean b_2, GameObj gameObj)
line (func)
    access (public)
    retType (simple)
        ID (String)
    ID (foo_bar)
    paramList (list)
        param (var)
            ID (double)
            ID (x1)
        param (var)
            ID (boolean)
            ID (b_2)
        param (var)
            ID (GameObj)
            ID (gameObj)

451. public GameObj fooBar(GameObj[] objs, boolean [] bs, double []ds, int []  is)
line (func)
    access (public)
    retType (simple)
        ID (GameObj)
    ID (fooBar)
    paramList (list)
        param (array)
            ID (GameObj)
            ID (objs)
        param (array)
            ID (boolean)
            ID (bs)
        param (array)
            ID (double)
            ID (ds)
        param (array)
            ID (int)
            ID (is)

452. public int[] foo()
line (func)
    access (public)
    retType (array)
        ID (int)
    ID (foo)

453. public double[] foo()
line (func)
    access (public)
    retType (array)
        ID (double)
    ID (foo)

454. void foo()
line (func)
    retType (simple)
        ID (void)
    ID (foo)

455. int foo123()
line (func)
    retType (simple)
        ID (int)
    ID (foo123)

456. boolean foo2(double x)
line (func)
    retType (simple)
        ID (boolean)
    ID (foo2)
    paramList (list)
        param (var)
            ID (double)
            ID (x)

457. double foo(int[] arr)
line (func)
    retType (simple)
        ID (double)
    ID (foo)
    paramList (list)
        param (array)
            ID (int)
            ID (arr)

458. String foo_bar(double[] x1s, boolean b_2, GameObj gameObj)
line (func)
    retType (simple)
        ID (String)
    ID (foo_bar)
    paramList (list)
        param (array)
            ID (double)
            ID (x1s)
        param (var)
            ID (boolean)
            ID (b_2)
        param (var)
            ID (GameObj)
            ID (gameObj)

459. GameObj fooBar(GameObj obj, boolean [] bs, double []ds, int []  is)
line (func)
    retType (simple)
        ID (GameObj)
    ID (fooBar)
    paramList (list)
        param (var)
            ID (GameObj)
            ID (obj)
        param (array)
            ID (boolean)
            ID (bs)
        param (array)
            ID (double)
            ID (ds)
        param (array)
            ID (int)
            ID (is)

460. GameObj[] myMethod(GameObj[] objs)
line (func)
    retType (array)
        ID (GameObj)
    ID (myMethod)
    paramList (list)
        param (array)
            ID (GameObj)
            ID (objs)

461. 

462. // "begin",			"{"

463. {
line (begin)

464. 

465. // "end",			"}"

466. }
line (end)

467. 

468. // "if",			"if", "(", expr, ")"

469. if (true)
line (if)
    expr (BOOL)
        BOOL (true)

470. 

471. // "elseif",		"else", "if", "(", expr, ")"

472. else if ( true )
line (elseif)
    expr (BOOL)
        BOOL (true)

473. 

474. // "else"

475. else
line (else)

476. 

477. // "return",			"return", expr, ";"

478. return 0;
line (return)
    expr (NUM)
        NUM (0)

479. 

480. // "do"

481. do
line (do)

482. 

483. // "while",				"while", "(", expr, whileEnd

484. while (true)
line (while)
    expr (BOOL)
        BOOL (true)
    whileEnd (while)

485. while (true);
line (while)
    expr (BOOL)
        BOOL (true)
    whileEnd (do-while)

486. 

487. // "for",				"for", "(", forControl, ")"

488. // -- forControl "three"

489. for ( i = 0 ; i < n ; i++ )
line (for)
    forControl (three)
        forInit (stmt)
            stmt (assign)
                lValue (lValue)
                    ID (i)
                expr (NUM)
                    NUM (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                expr (lValue)
                    lValue (lValue)
                        ID (n)
        forNext (stmt)
            stmt (postInc)
                lValue (lValue)
                    ID (i)

490. for ( int i = 0 ; i < n ; i++ )
line (for)
    forControl (three)
        forInit (var)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                expr (lValue)
                    lValue (lValue)
                        ID (n)
        forNext (stmt)
            stmt (postInc)
                lValue (lValue)
                    ID (i)

491. for ( i = 0 ; ; )
line (for)
    forControl (three)
        forInit (stmt)
            stmt (assign)
                lValue (lValue)
                    ID (i)
                expr (NUM)
                    NUM (0)

492. for ( int i = 0 ; ; )
line (for)
    forControl (three)
        forInit (var)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (0)

493. for ( ; i < n ; )
line (for)
    forControl (three)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                expr (lValue)
                    lValue (lValue)
                        ID (n)

494. for ( ; ; i++ )
line (for)
    forControl (three)
        forNext (stmt)
            stmt (postInc)
                lValue (lValue)
                    ID (i)

495. for ( ; ; )
line (for)
    forControl (three)

496. // -- forControl "array"

497. for ( GameObj g : gameObjs )
line (for)
    forControl (array)
        ID (GameObj)
        ID (g)
        expr (lValue)
            lValue (lValue)
                ID (gameObjs)

498. 

499. // "arrayInit",		"ID", "[", "]", "ID", "=", arrayInit, ";"

500. int[] a = {};
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (list)

501. double[] a = { 1 };
line (arrayInit)
    ID (double)
    ID (a)
    arrayInit (list)
        exprList (list)
            expr (NUM)
                NUM (1)

502. boolean[] a = { 1, 2, 3 };
line (arrayInit)
    ID (boolean)
    ID (a)
    arrayInit (list)
        exprList (list)
            expr (NUM)
                NUM (1)
            expr (NUM)
                NUM (2)
            expr (NUM)
                NUM (3)

503. GameObj[] a = new GameObj[100];
line (arrayInit)
    ID (GameObj)
    ID (a)
    arrayInit (expr)
        expr (newArray)
            ID (GameObj)
            expr (NUM)
                NUM (100)

504. 

505. // "arrayDecl",		"ID", "[", "]", idList, ";"

506. String[] a;
line (arrayDecl)
    ID (String)
    idList (list)
        ID (a)

507. int[] a, b, c;
line (arrayDecl)
    ID (int)
    idList (list)
        ID (a)
        ID (b)
        ID (c)

508. 

509. // "importCode12",	"import", "ID", ".", "*", ";"

510. import Code12.*;
line (importAll)
    ID (Code12)

511. 

512. // "class",			"class", "ID",

513. class Foo
line (class)
    ID (Foo)

514. 

515. // "classUser",		"class", "ID", "extends", "ID"

516. class TestProgram extends Code12Program
line (classUser)
    ID (TestProgram)
    ID (Code12Program)

517. 

518. // "classUserPub",	"public", "class", "ID", "extends", "ID"

519. public class TestProgram extends Code12Program
line (classUser)
    access (public)
    ID (TestProgram)
    ID (Code12Program)

520. 

521. // "main",			"public", "static", "void", "ID", "(", "ID", "[", "]", "ID", ")"

522. public static void main(String[] args)
line (main)
    ID (void)
    ID (main)
    ID (String)
    ID (args)

523. 

524. // "Code12Run",		"ID", ".", "ID", "(", "new", "ID", "(", ")", ")", ";"

525. Code12.run(new TestProgram());
line (Code12Run)
    ID (Code12)
    ID (run)
    ID (TestProgram)

526. 

527. }
line (end)

528. 

529. public void onMousePress(GameObj obj, double x, double y)
line (func)
    access (public)
    retType (simple)
        ID (void)
    ID (onMousePress)
    paramList (list)
        param (var)
            ID (GameObj)
            ID (obj)
        param (var)
            ID (double)
            ID (x)
        param (var)
            ID (double)
            ID (y)

530. {
line (begin)

531. // Pop bubbles that get clicked

532. if (obj != null)
line (if)
    expr (!=)
        expr (lValue)
            lValue (lValue)
                ID (obj)
        expr (NULL)
            NULL (null)

533. {
line (begin)

534. obj.delete();
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (obj)
            member (member)
                ID (delete)

535. ct.sound("pop.wav");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            member (member)
                ID (sound)
        exprList (list)
            expr (STR)
                STR ("pop.wav")

536. }
line (end)

537. }
line (end)

538. }
line (end)

539. 

540. ////////////////////////////////////////////////////////////////////

541. ERRORS
************** Beginning of Expected Errors Section **************

542. 

543. // Lexical errors

544. */              // close comment without open
*** Line 544 chars 1-2: Close of comment without matching opening /*

545. int i; /* /* */ // nested block comments
*** Line 545: Java does not allow nesting comments within comments using /* */
*** Reference Line 545

546. @               // invalid character
*** Line 546 char 1: Invalid character

547. foo('a');       // char literals not supported
*** Line 547 char 5: char type not supported, use double quotes

548. foo(" );        // unclosed string literal
*** Line 548 chars 5-43: Unclosed string literal

549. foo("\);        // unclosed string literal ending in backslash
*** Line 549 chars 6-7: Unsupported or illegal escape sequence

550. s = "\          // unclosed string literal ending in backslash
*** Line 550 chars 6-7: Unsupported or illegal escape sequence

551. s = "\";        // unclosed string literal from escaped double quote
*** Line 551 chars 5-68: Unclosed string literal

552. s = "\ ";       // illegal escape character
*** Line 552 chars 6-7: Unsupported or illegal escape sequence

553. s = "\r";       // unsupported escape sequence
*** Line 553 chars 6-7: Unsupported or illegal escape sequence

554. interface foo   // unsupported reserved word
*** Line 554 chars 1-9: Unsupported reserved word "interface"

555. double 1stNumber; // variable name starting with a number
*** Line 555 chars 1-17: Syntax error (unrecognized code)

556. x = obj.1stNumber; // field name starting with a number
*** Line 556 chars 1-18: Syntax error (unrecognized code)

557. // Using reserved words as identifiers

558. int abstract;
*** Line 558 chars 5-12: Unsupported reserved word "abstract"

559. int break;
*** Line 559 chars 1-10: Syntax error (unrecognized code)

560. int case;
*** Line 560 chars 5-8: Unsupported reserved word "case"

561. int catch;
*** Line 561 chars 5-9: Unsupported reserved word "catch"

562. double class;
*** Line 562 chars 1-13: Syntax error (unrecognized code)

563. boolean const;
*** Line 563 chars 1-14: Syntax error (unrecognized code)

564. boolean continue;
*** Line 564 chars 9-16: Unsupported reserved word "continue"

565. boolean default;
*** Line 565 chars 9-15: Unsupported reserved word "default"

566. String do;
*** Line 566 chars 1-10: Syntax error (unrecognized code)

567. GameObj else;
*** Line 567 chars 1-13: Syntax error (unrecognized code)

568. GameObj enum;
*** Line 568 chars 9-12: Unsupported reserved word "enum"

569. int[] extends;
*** Line 569 chars 1-14: Syntax error (unrecognized code)

570. double final;
*** Line 570 chars 1-13: Syntax error (unrecognized code)

571. double finally();
*** Line 571 chars 8-14: Unsupported reserved word "finally"

572. boolean foo(int for);
*** Line 572 chars 1-21: Syntax error (unrecognized code)

573. for(int do = 0; do < 10; do++)
*** Line 573 chars 1-30: Syntax error (unrecognized code)

574. String goto;
*** Line 574 chars 8-11: Unsupported reserved word "goto"

575. String if;
*** Line 575 chars 1-10: Syntax error (unrecognized code)

576. GameObj implements;
*** Line 576 chars 9-18: Unsupported reserved word "implements"

577. int import;
*** Line 577 chars 1-11: Syntax error (unrecognized code)

578. int instanceof;
*** Line 578 chars 5-14: Unsupported reserved word "instanceof"

579. int interface;
*** Line 579 chars 5-13: Unsupported reserved word "interface"

580. int native;
*** Line 580 chars 5-10: Unsupported reserved word "native"

581. int new;
*** Line 581 chars 1-8: Syntax error (unrecognized code)

582. int package;
*** Line 582 chars 5-11: Unsupported reserved word "package"

583. int private;
*** Line 583 chars 1-12: Syntax error (unrecognized code)

584. int protected;
*** Line 584 chars 5-13: Unsupported reserved word "protected"

585. int public;
*** Line 585 chars 1-11: Syntax error (unrecognized code)

586. int return()
*** Line 586 chars 1-12: Syntax error (unrecognized code)

587. int static;
*** Line 587 chars 1-11: Syntax error (unrecognized code)

588. int strictfp;
*** Line 588 chars 5-12: Unsupported reserved word "strictfp"

589. int super;
*** Line 589 chars 5-9: Unsupported reserved word "super"

590. int switch;
*** Line 590 chars 5-10: Unsupported reserved word "switch"

591. int synchronized;
*** Line 591 chars 5-16: Unsupported reserved word "synchronized"

592. int this;
*** Line 592 chars 5-8: Unsupported reserved word "this"

593. int throw;
*** Line 593 chars 5-9: Unsupported reserved word "throw"

594. int throws;
*** Line 594 chars 5-10: Unsupported reserved word "throws"

595. int transient;
*** Line 595 chars 5-13: Unsupported reserved word "transient"

596. int try;
*** Line 596 chars 5-7: Unsupported reserved word "try"

597. int volatile;
*** Line 597 chars 5-12: Unsupported reserved word "volatile"

598. int while;
*** Line 598 chars 1-10: Syntax error (unrecognized code)

599. boolean true;
*** Line 599 chars 1-13: Syntax error (unrecognized code)

600. boolean false;
*** Line 600 chars 1-14: Syntax error (unrecognized code)

601. int null;
*** Line 601 chars 1-9: Syntax error (unrecognized code)

602. 

603. void foo.x()    // function definition with . as part of identifier
*** Line 603 chars 1-12: Syntax error (unrecognized code)

604. x = 10          // missing ; in stmt
*** Line 604 char 37: Statement should end with a semicolon (;)

605. int x = 10		// missing ; in varInit
*** Line 605 char 36: Variable initialization should end with a semicolon (;)

606. int x 			// missing ; in varDecl
*** Line 606 char 33: Variable declaration should end with a semicolon (;)

607. final int x = 10 // missing ; in constInit
*** Line 607 char 43: Variable initialization should end with a semicolon (;)

608. foo(x, );       // missing expr in exprList
*** Line 608 chars 1-9: Syntax error (unrecognized code)

609. f00()++;		// ++ applied to non-lvalue
*** Line 609 chars 1-8: Syntax error (unrecognized code)

610. --x.foo();		// -- applied to non-lvalue
*** Line 610 chars 1-10: Syntax error (unrecognized code)

611. x = / b;		// missing expr before binary op
*** Line 611 chars 1-8: Syntax error (unrecognized code)

612. x = a + ;       // missing expr after binary op
*** Line 612 char 9: Expected expression after + operator
*** Reference Line 612 char 7

613. x = a ++ b;     // unexpected token after unary op
*** Line 613 chars 1-11: Syntax error (unrecognized code)

614. x = a ** b;     // missing expression between binary ops
*** Line 614 char 8: Expected expression after * operator
*** Reference Line 614 char 7

615. x = a + b * ;   // missing expr after higher precedence binary op
*** Line 615 char 13: Expected expression after * operator
*** Reference Line 615 char 11

616. x = a * b + ;   // missing expr after lower precedence binary op
*** Line 616 char 13: Expected expression after + operator
*** Reference Line 616 char 11

617. x = ();         // missing expr in parentheses
*** Line 617 chars 1-7: Syntax error (unrecognized code)

618. x = 10 + ! ;    // missing expr after unary op
*** Line 618 char 10: Expected expression after + operator
*** Reference Line 618 char 8

619. x = obj.3;      // expected ID after .
*** Line 619 chars 1-10: Syntax error (unrecognized code)

620. x = 3.obj;      // ID expected before .
*** Line 620 chars 1-10: Syntax error (unrecognized code)

621. if x == 3       // required next token in pattern doesn't match
*** Line 621 chars 4-9: if statement test must be in parentheses

622. while i < max   // required next token in pattern doesn't match
*** Line 622 chars 1-13: Syntax error (unrecognized code)

623. for i=0; i<num; i=i+1 // required next token in pattern doesn't match
*** Line 623 chars 1-21: Syntax error (unrecognized code)

624. x + 3;          // no matching pattern
*** Line 624 chars 1-6: Syntax error (unrecognized code)

625. x = 1,000;      // commas in numbers
*** Line 625 chars 1-10: Syntax error (unrecognized code)

626. x = 1.23.45;    // too many decimal points
*** Line 626 chars 1-12: Syntax error (unrecognized code)

627. x = 3.14e1.0;   // exponential notation with decimal point in exponent
*** Line 627 chars 1-13: Syntax error (unrecognized code)

628. x = 3.14e;      // Invalid exponential notation
*** Line 628 chars 5-10: Invalid exponential notation

629. x = 3.141e+;    // Invalid exponential notation
*** Line 629 chars 5-12: Invalid exponential notation

630. x = 3.1415e-;   // Invalid exponential notation
*** Line 630 chars 5-13: Invalid exponential notation

631. x = 3.14159e+exponent; // Invalid exponential notation
*** Line 631 chars 5-14: Invalid exponential notation

632. x = 3.141592ee0;// Invalid exponential notation
*** Line 632 chars 5-14: Invalid exponential notation

633. x = 3.141592EE0;// Invalid exponential notation
*** Line 633 chars 5-14: Invalid exponential notation

634. x = 3e; 		// Invalid exponential notation
*** Line 634 chars 5-7: Invalid exponential notation

635. x = .3E; 		// Invalid exponential notation
*** Line 635 chars 5-8: Invalid exponential notation

636. foo(x,          // (incomplete line continued below)
-- Incomplete line carried forward

637. y)              // missing ;
*** Line 637 char 29: Statement should end with a semicolon (;)

638. x = (a + b + c / 3; 	// missing closing parenthesis
*** Line 638 chars 1-19: Syntax error (unrecognized code)

639. x = foo(y, bar(z, w); 	// missing closing parenthesis w/ nested parentheses
*** Line 639 chars 1-21: Syntax error (unrecognized code)

640. x = a + b + c ) / 3; 	// missing openning parenthesis
*** Line 640 chars 1-20: Syntax error (unrecognized code)

641. if ( i == 1 	// missing closing parenthesis with if
*** Line 641 chars 1-11: Syntax error (unrecognized code)

642. if ( i == 1 ); 	// if statment ended by ;
*** Line 642 char 14: if statement should not end with a semicolon

643. for ( i=0; i<n; i++); 	// for() followed directly by ;
*** Line 643 chars 1-21: Syntax error (unrecognized code)

644. x + 1 = x; 		// confusing left hand side an right hand side of assignment
*** Line 644 chars 1-10: Syntax error (unrecognized code)

645. 1000 = count; 	// confusing left hand side an right hand side of assignment
*** Line 645 chars 1-13: Syntax error (unrecognized code)

646. if ( x => 3 ) 	// => instead of <=
*** Line 646 chars 8-9: Invalid operator. Did you mean >= ?

647. if ( x =< 5 ) 	// =< instead of >=.
*** Line 647 chars 8-9: Invalid operator. Did you mean <= ?

648. elseif( x > 2 ) // elseif instead of else if
*** Line 648 char 45: Statement should end with a semicolon (;)

649. for(int i=0, i<n, i++) 	// commas in place of semicolons
*** Line 649 char 12: for loop parts should be separated by semicolons (;)
Comma not supported

650. for(int i=0; i<n, i++) 	// comma in place of semicolon
*** Line 650 char 17: for loop parts should be separated by semicolons (;)
Comma not supported

651. for(int i=0: i<n: i++) 	// colons in place of semicolons
*** Line 651 chars 1-22: Syntax error (unrecognized code)

652. for{int i=0; i<n; i++} 	// {} in place of ()
*** Line 652 chars 1-22: Syntax error (unrecognized code)

653. for (int i==0; i<n; i++)// == instead of =
*** Line 653 chars 1-24: Syntax error (unrecognized code)

654. for( x : arr ) 			// forgetting variable type
*** Line 654 chars 1-14: Syntax error (unrecognized code)

655. for( int x; arr ) 		// using ; instead of :
*** Line 655 chars 1-17: Syntax error (unrecognized code)

656. for( int[] x : arr )
*** Line 656 chars 1-20: Syntax error (unrecognized code)

657. for( int x : arr[] )
*** Line 657 chars 1-20: Syntax error (unrecognized code)

658. for( arr : int x )
*** Line 658 chars 1-18: Syntax error (unrecognized code)

659. double foo(x, y, z) 	// missing variable types for arguments in function definition
*** Line 659 chars 1-19: Syntax error (unrecognized code)

660. double foo[i]()			// index on function identifier
*** Line 660 chars 1-15: Syntax error (unrecognized code)

661. ct.println; 			// missing parenteses for function call without arguments
*** Line 661 chars 1-11: Syntax error (unrecognized code)

662. foo(int x, double y, GameObj z) 	// missing return type in function definition
*** Line 662 chars 1-31: Syntax error (unrecognized code)

663. foo(int x, double y, GameObj z); 	// supplying variable types in function call
*** Line 663 chars 1-32: Syntax error (unrecognized code)

664. boolean foo(int x, double y, GameObj z); // semicolon after function declaration
*** Line 664 char 40: function header should not end with a semicolon

665. String s = 'Hello'; 	// '' in place of "" for strings
*** Line 665 char 12: char type not supported, use double quotes

666. String s = "A long string
*** Line 666 chars 12-25: Unclosed string literal

667. on more than one line";
*** Line 667 chars 34-35: Unclosed string literal

668. ct.println("He said "Hello""); 	// not escaping double quotes in a string literal
*** Line 668 chars 1-30: Syntax error (unrecognized code)

669. newObj() = oldObj; 				// assigning to a function value
*** Line 669 chars 1-18: Syntax error (unrecognized code)

670. f = void foo()					// mixing assignment and function declaration
*** Line 670 chars 1-14: Syntax error (unrecognized code)

671. def func(x):					// Python syntax
*** Line 671 chars 1-12: Syntax error (unrecognized code)

672. GameObj circle = new ct.circle(0,0,10); // new keyword not needed
*** Line 672 chars 1-39: Syntax error (unrecognized code)

673. intArr = {1, 2, 3}; // trying to assign value to array using initialization syntax
*** Line 673 chars 1-19: Syntax error (unrecognized code)

674. int intArr = {1, 2, 3}; // missing []
*** Line 674 chars 1-23: Syntax error (unrecognized code)

675. 

676. // Unsupported Java syntax

677. // --------------------------------------------------------------------------------

678. int x = 1, y = 2, z = 3;      // declaring and initializing multiple variables
*** Line 678: Code12 requires each variable initialization to be on its own line

679. import java.io.PrintWriter;   // import other than Code12.*
*** Line 679: import should be "Code12.*;"

680. protected int secretVar;        // protected access
*** Line 680 chars 1-9: Unsupported reserved word "protected"

681. time %= 3600;                 // %= operator
*** Line 681 chars 1-13: Syntax error (unrecognized code)

682. int numberOfDucks = (turboMode ? 100 : 1); // ?: operator
*** Line 682 char 32: Invalid character (The "? :" operator is not supported by Code12)

683. char ch = 'a'; 	// char type
*** Line 683 char 11: char type not supported, use double quotes

684. while(foo) { 	// opening { in control structure not on it's own line
*** Line 684 chars 1-12: Syntax error (unrecognized code)

685. i++; } 			// closing } not on it's own line
*** Line 685 chars 1-6: Syntax error (unrecognized code)

686. String s = "A long string" +
*** Line 686 char 29: Expected expression after + operator
*** Reference Line 686 char 28

687. "on more than one line using concatenation";
*** Line 687 chars 12-55: Syntax error (unrecognized code)

688. x = a; y = b; 	// more than one statement on a single line
*** Line 688: Code12 only allows one statement per line

689. if (x == 0) ct.println("x is zero"); // control structures must be on their own lines
*** Line 689 chars 4-11: if statement test must be in parentheses

690. double getVariable() { return variable; } // {} must start and end on their own lines
*** Line 690 chars 1-41: Syntax error (unrecognized code)

691. switch (choice)
*** Line 691 chars 1-6: Unsupported reserved word "switch"

692. continue;
*** Line 692 chars 1-8: Unsupported reserved word "continue"

693. a[i++] = b[i++]; 	// increment/decrement only supported as statements
*** Line 693 chars 1-16: Syntax error (unrecognized code)

694. foo.obj.group.equals("targets"); 		// more than 2 chained fields
*** Line 694 chars 1-32: Syntax error (unrecognized code)

695. input.toLowerCase().equals("quit"); // indexing after function call
*** Line 695 chars 1-35: Syntax error (unrecognized code)

696. newBullet().ySpeed = 0;
*** Line 696 chars 1-23: Syntax error (unrecognized code)

697. final int N; 	// constant declaration without initialization
*** Line 697 chars 1-12: Syntax error (unrecognized code)

698. for (int i = 0, int j = 0; ; ) // Comma in forInit, forNext
*** Line 698 char 15: for loop parts should be separated by semicolons (;)
Comma not supported

699. for ( ; ; i++, j++ ) 	// Comma in forInit, forNext
*** Line 699 chars 1-20: Syntax error (unrecognized code)

700. int _var; // variable indentifiers starting with underscore
*** Line 700 chars 5-8: Names cannot start with an underscore in Code12

701. int $var; // $
*** Line 701 char 5: The $ character is not allowed in Code12

702. double pay$;
*** Line 702 char 11: The $ character is not allowed in Code12

703. int x[];	// arrays must be declared with [] between type and identifier
*** Line 703 chars 1-8: Syntax error (unrecognized code)

704. int _func() // function names starting with underscore
*** Line 704 chars 5-9: Names cannot start with an underscore in Code12

705. public abstract class Account
*** Line 705 chars 8-15: Unsupported reserved word "abstract"

706. assert x != null : "x variable is null";
*** Line 706 chars 1-6: Unsupported reserved word "assert"

707. case 0 :
*** Line 707 chars 1-4: Unsupported reserved word "case"

708. catch(Exception e)
*** Line 708 chars 1-5: Unsupported reserved word "catch"

709. continue;
*** Line 709 chars 1-8: Unsupported reserved word "continue"

710. default :
*** Line 710 chars 1-7: Unsupported reserved word "default"

711. enum WeekDays
*** Line 711 chars 1-4: Unsupported reserved word "enum"

712. goto
*** Line 712 chars 1-4: Unsupported reserved word "goto"

713. finally
*** Line 713 chars 1-7: Unsupported reserved word "finally"

714. public class C implements I
*** Line 714 chars 16-25: Unsupported reserved word "implements"

715. if (x instanceof y)
*** Line 715 chars 7-16: Unsupported reserved word "instanceof"

716. public interface I
*** Line 716 chars 8-16: Unsupported reserved word "interface"

717. native void foo()
*** Line 717 chars 1-6: Unsupported reserved word "native"

718. package P;
*** Line 718 chars 1-7: Unsupported reserved word "package"

719. public static int x;
*** Line 719 chars 1-20: Syntax error (unrecognized code)

720. protected int x;
*** Line 720 chars 1-9: Unsupported reserved word "protected"

721. static int x = 10;
*** Line 721 chars 1-18: Syntax error (unrecognized code)

722. strictfp void foo()
*** Line 722 chars 1-8: Unsupported reserved word "strictfp"

723. super.foo();
*** Line 723 chars 1-5: Unsupported reserved word "super"

724. switch (x)
*** Line 724 chars 1-6: Unsupported reserved word "switch"

725. synchronized(sync_object)
*** Line 725 chars 1-12: Unsupported reserved word "synchronized"

726. this.x = x;
*** Line 726 chars 1-4: Unsupported reserved word "this"

727. throw e;
*** Line 727 chars 1-5: Unsupported reserved word "throw"

728. void foo() throws Exception
*** Line 728 chars 12-17: Unsupported reserved word "throws"

729. transient int x;
*** Line 729 chars 1-9: Unsupported reserved word "transient"

730. try
*** Line 730 chars 1-3: Unsupported reserved word "try"

731. volatile int x = 10;
*** Line 731 chars 1-8: Unsupported reserved word "volatile"
======= Test Complete =========================================

731 lines processed in 112 ms

0 unexpected errors
0 uncaught errors (182 expected errors)

SUCCESS
