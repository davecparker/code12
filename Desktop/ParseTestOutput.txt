======= Test Started ==========================================

1. import Code12.*;
line (importCode12)
    ID (Code12)

2. 
line (blank)

3. class BubblePop extends Code12Program
line (classUser)
    access (empty)
    ID (BubblePop)
    ID (Code12Program)

4. {
line (begin)

5. public static void main(String[] args)
line (main)
    ID (main)
    ID (String)
    ID (args)

6. {
line (begin)

7. Code12.run(new BubblePop());
line (Code12Run)
    ID (Code12)
    ID (run)
    ID (BubblePop)

8. }
line (end)

9. 
line (blank)

10. public void start()
line (func)
    access (public)
    retType (void)
    ID (start)
    paramList (empty)

11. {
line (begin)

12. // Make the background
line (comment)
    COMMENT ( Make the background )

13. ct.setHeight(150);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setHeight)
        exprList (list)
            expr (NUM)
                NUM (150)

14. ct.setBackImage("underwater.jpg");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setBackImage)
        exprList (list)
            expr (STR)
                STR ("underwater.jpg")

15. }
line (end)

16. 
line (blank)

17. public void update()
line (func)
    access (public)
    retType (void)
    ID (update)
    paramList (empty)

18. {
line (begin)

19. // Make bubbles at random times, positions, and sizes
line (comment)
    COMMENT ( Make bubbles at random times, positions, and sizes)

20. if (ct.random(1, 20) == 1)
line (if)
    expr (==)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (random)
            exprList (list)
                expr (NUM)
                    NUM (1)
                expr (NUM)
                    NUM (20)
        expr (NUM)
            NUM (1)

21. {
line (begin)

22. double x = ct.random(0, 100);
line (varInit)
    ID (double)
    ID (x)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (random)
        exprList (list)
            expr (NUM)
                NUM (0)
            expr (NUM)
                NUM (100)

23. double y = ct.getHeight() + 25;
line (varInit)
    ID (double)
    ID (y)
    expr (+)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (getHeight)
            exprList (empty)
        expr (NUM)
            NUM (25)

24. double size = ct.random(5, 20);
line (varInit)
    ID (double)
    ID (size)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (random)
        exprList (list)
            expr (NUM)
                NUM (5)
            expr (NUM)
                NUM (20)

25. GameObj bubble = ct.image("bubble.png",
-- Incomplete line carried forward

26. x, y,
-- Incomplete line carried forward

27. size);
line (varInit)
    ID (GameObj)
    ID (bubble)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (image)
        exprList (list)
            expr (STR)
                STR ("bubble.png")
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (size)
                    index (empty)
                    field (empty)

28. bubble.ySpeed = -1;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (bubble)
            index (empty)
            field (field)
                ID (ySpeed)
        expr (neg)
            expr (NUM)
                NUM (1)

29. bubble.clickable = true;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (bubble)
            index (empty)
            field (field)
                ID (clickable)
        expr (BOOL)
            BOOL (true)

30. GameObj bubbleCopy = bubble; // initialization of GameObj from another GameObj
line (varInit)
    ID (GameObj)
    ID (bubbleCopy)
    expr (lValue)
        lValue (lValue)
            ID (bubble)
            index (empty)
            field (empty)

31. int z; // declaration without initialization - primitive type
line (varDecl)
    ID (int)
    idList (list)
        ID (z)

32. int x, y, z; // declaring multiple variables
line (varDecl)
    ID (int)
    idList (list)
        ID (x)
        ID (y)
        ID (z)

33. z = -1 + 2; // assigning value with int and unary minus
line (stmt)
    stmt (varAssign)
        ID (z)
        expr (+)
            expr (neg)
                expr (NUM)
                    NUM (1)
            expr (NUM)
                NUM (2)

34. z = 0.707; // assigning value with double
line (stmt)
    stmt (varAssign)
        ID (z)
        expr (NUM)
            NUM (0.707)

35. z = .707; // no leading zero
line (stmt)
    stmt (varAssign)
        ID (z)
        expr (NUM)
            NUM (.707)

36. z = -.707; // negative with no leading zero
line (stmt)
    stmt (varAssign)
        ID (z)
        expr (neg)
            expr (NUM)
                NUM (.707)

37. bigNum = 1.23456E10; // exponential notation E
line (stmt)
    stmt (varAssign)
        ID (bigNum)
        expr (NUM)
            NUM (1.23456E10)

38. bigNum = 1.23456e10; // exponential notation e
line (stmt)
    stmt (varAssign)
        ID (bigNum)
        expr (NUM)
            NUM (1.23456e10)

39. bigNum = 1.23456e+123; // exponential notation e+
line (stmt)
    stmt (varAssign)
        ID (bigNum)
        expr (NUM)
            NUM (1.23456e+123)

40. bigNum = -1.23456E103; // exponential notation -E
line (stmt)
    stmt (varAssign)
        ID (bigNum)
        expr (neg)
            expr (NUM)
                NUM (1.23456E103)

41. bigNum = -1.23456E+103; // exponential notation -E+
line (stmt)
    stmt (varAssign)
        ID (bigNum)
        expr (neg)
            expr (NUM)
                NUM (1.23456E+103)

42. littleNum = 1.23456E-9; // exponential notation E-
line (stmt)
    stmt (varAssign)
        ID (littleNum)
        expr (NUM)
            NUM (1.23456E-9)

43. littleNum = -1.23456E-98; // exponential notation -E-
line (stmt)
    stmt (varAssign)
        ID (littleNum)
        expr (neg)
            expr (NUM)
                NUM (1.23456E-98)

44. littleNum = 1.23456e-987; // exponential notation e-
line (stmt)
    stmt (varAssign)
        ID (littleNum)
        expr (NUM)
            NUM (1.23456e-987)

45. littleNum = -1.23456e-9876; // exponential notation -e-
line (stmt)
    stmt (varAssign)
        ID (littleNum)
        expr (neg)
            expr (NUM)
                NUM (1.23456e-9876)

46. x = .5e7; // exponential notation without leading digit before dot
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (NUM)
            NUM (.5e7)

47. x = 3.e8; // exponential notation without digit after dot
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (NUM)
            NUM (3.e8)

48. double xyz = ( 2 * x + y - 3.14 ) / z + 1.414; // initialization with expression
line (varInit)
    ID (double)
    ID (xyz)
    expr (+)
        expr (/)
            expr (exprParens)
                expr (-)
                    expr (+)
                        expr (*)
                            expr (NUM)
                                NUM (2)
                            expr (lValue)
                                lValue (lValue)
                                    ID (x)
                                    index (empty)
                                    field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (y)
                                index (empty)
                                field (empty)
                    expr (NUM)
                        NUM (3.14)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)
        expr (NUM)
            NUM (1.414)

49. double mean = (a + b + c) / 3;
line (varInit)
    ID (double)
    ID (mean)
    expr (/)
        expr (exprParens)
            expr (+)
                expr (+)
                    expr (lValue)
                        lValue (lValue)
                            ID (a)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (b)
                            index (empty)
                            field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (c)
                        index (empty)
                        field (empty)
        expr (NUM)
            NUM (3)

50. double y = m * x + b;
line (varInit)
    ID (double)
    ID (y)
    expr (+)
        expr (*)
            expr (lValue)
                lValue (lValue)
                    ID (m)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
        expr (lValue)
            lValue (lValue)
                ID (b)
                index (empty)
                field (empty)

51. z = p * r % q + w / x - y;
line (stmt)
    stmt (varAssign)
        ID (z)
        expr (-)
            expr (+)
                expr (%)
                    expr (*)
                        expr (lValue)
                            lValue (lValue)
                                ID (p)
                                index (empty)
                                field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (r)
                                index (empty)
                                field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (q)
                            index (empty)
                            field (empty)
                expr (/)
                    expr (lValue)
                        lValue (lValue)
                            ID (w)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (empty)
                            field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)

52. y = a * x * x + b * x + c;
line (stmt)
    stmt (varAssign)
        ID (y)
        expr (+)
            expr (+)
                expr (*)
                    expr (*)
                        expr (lValue)
                            lValue (lValue)
                                ID (a)
                                index (empty)
                                field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (x)
                                index (empty)
                                field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (empty)
                            field (empty)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (b)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (empty)
                            field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (c)
                    index (empty)
                    field (empty)

53. y = (a * x * x) + (b * x) + c;
line (stmt)
    stmt (varAssign)
        ID (y)
        expr (+)
            expr (+)
                expr (exprParens)
                    expr (*)
                        expr (*)
                            expr (lValue)
                                lValue (lValue)
                                    ID (a)
                                    index (empty)
                                    field (empty)
                            expr (lValue)
                                lValue (lValue)
                                    ID (x)
                                    index (empty)
                                    field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (x)
                                index (empty)
                                field (empty)
                expr (exprParens)
                    expr (*)
                        expr (lValue)
                            lValue (lValue)
                                ID (b)
                                index (empty)
                                field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (x)
                                index (empty)
                                field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (c)
                    index (empty)
                    field (empty)

54. double z2 = z * 2.0; // initialization from another variable
line (varInit)
    ID (double)
    ID (z2)
    expr (*)
        expr (lValue)
            lValue (lValue)
                ID (z)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (2.0)

55. x = (a + b) / 2 + (c - d) / 2; // multiple parentheses
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (+)
            expr (/)
                expr (exprParens)
                    expr (+)
                        expr (lValue)
                            lValue (lValue)
                                ID (a)
                                index (empty)
                                field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (b)
                                index (empty)
                                field (empty)
                expr (NUM)
                    NUM (2)
            expr (/)
                expr (exprParens)
                    expr (-)
                        expr (lValue)
                            lValue (lValue)
                                ID (c)
                                index (empty)
                                field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (d)
                                index (empty)
                                field (empty)
                expr (NUM)
                    NUM (2)

56. x = ( ( a + b ) / c ) / 2; // nested parentheses
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (/)
            expr (exprParens)
                expr (/)
                    expr (exprParens)
                        expr (+)
                            expr (lValue)
                                lValue (lValue)
                                    ID (a)
                                    index (empty)
                                    field (empty)
                            expr (lValue)
                                lValue (lValue)
                                    ID (b)
                                    index (empty)
                                    field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (c)
                            index (empty)
                            field (empty)
            expr (NUM)
                NUM (2)

57. x = y % 12; // mod operator
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (%)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (NUM)
                NUM (12)

58. 
line (blank)

59. // relational operators and if/else
line (comment)
    COMMENT ( relational operators and if/else)

60. if (count == 0)
line (if)
    expr (==)
        expr (lValue)
            lValue (lValue)
                ID (count)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (0)

61. if (x != 10)
line (if)
    expr (!=)
        expr (lValue)
            lValue (lValue)
                ID (x)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (10)

62. if (temp > 98.6)
line (if)
    expr (>)
        expr (lValue)
            lValue (lValue)
                ID (temp)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (98.6)

63. if ( temp <= 100 )
line (if)
    expr (<=)
        expr (lValue)
            lValue (lValue)
                ID (temp)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (100)

64. else if (x >= 42)
line (elseif)
    expr (>=)
        expr (lValue)
            lValue (lValue)
                ID (x)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (42)

65. else
line (else)

66. boolean differenceIsSmall = Math.abs(x - a) < eps;
line (varInit)
    ID (boolean)
    ID (differenceIsSmall)
    expr (<)
        expr (call)
            fnValue (fnValue)
                ID (Math)
                index (empty)
                method (method)
                    ID (abs)
            exprList (list)
                expr (-)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (a)
                            index (empty)
                            field (empty)
        expr (lValue)
            lValue (lValue)
                ID (eps)
                index (empty)
                field (empty)

67. 
line (blank)

68. // Strings
line (comment)
    COMMENT ( Strings)

69. String greeting; //  declaration without initialization - String type
line (varDecl)
    ID (String)
    idList (list)
        ID (greeting)

70. greeting = "hello"; // assigning value to a string
line (stmt)
    stmt (varAssign)
        ID (greeting)
        expr (STR)
            STR ("hello")

71. String greeting2 = "hello there"; // declaration with initialization - String type
line (varInit)
    ID (String)
    ID (greeting2)
    expr (STR)
        STR ("hello there")

72. String greeting3 = greeting1; // declaration with initialization from another variable's value
line (varInit)
    ID (String)
    ID (greeting3)
    expr (lValue)
        lValue (lValue)
            ID (greeting1)
            index (empty)
            field (empty)

73. String greeting4 = greeting1 + " " + "world"; // declaration with concatenation
line (varInit)
    ID (String)
    ID (greeting4)
    expr (+)
        expr (+)
            expr (lValue)
                lValue (lValue)
                    ID (greeting1)
                    index (empty)
                    field (empty)
            expr (STR)
                STR (" ")
        expr (STR)
            STR ("world")

74. String greeting5 = greeting2.substring(0, 6); // declaration with String method
line (varInit)
    ID (String)
    ID (greeting5)
    expr (call)
        fnValue (fnValue)
            ID (greeting2)
            index (empty)
            method (method)
                ID (substring)
        exprList (list)
            expr (NUM)
                NUM (0)
            expr (NUM)
                NUM (6)

75. s = "boolean variable b = " + true; // String concatenation with boolean
line (stmt)
    stmt (varAssign)
        ID (s)
        expr (+)
            expr (STR)
                STR ("boolean variable b = ")
            expr (BOOL)
                BOOL (true)

76. s = "line1\nline2"; // String with newline
line (stmt)
    stmt (varAssign)
        ID (s)
        expr (STR)
            STR ("line1\nline2")

77. s = "\"Hello,\" he said."; // String with escaped quotes
line (stmt)
    stmt (varAssign)
        ID (s)
        expr (STR)
            STR ("\"Hello,\" he said.")

78. ct.println("He said 'Hello'"); // String with single quotes
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (println)
        exprList (list)
            expr (STR)
                STR ("He said 'Hello'")

79. docsDir = "C:\\Users\\Ben\\Documents\\"; // String with escaped backslash
line (stmt)
    stmt (varAssign)
        ID (docsDir)
        expr (STR)
            STR ("C:\\Users\\Ben\\Documents\\")

80. ct.println( "I\tneed\tmy\tspace" ); // String with escaped tab
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (println)
        exprList (list)
            expr (STR)
                STR ("I\tneed\tmy\tspace")

81. input = input.toUpperCase(); // method call
line (stmt)
    stmt (varAssign)
        ID (input)
        expr (call)
            fnValue (fnValue)
                ID (input)
                index (empty)
                method (method)
                    ID (toUpperCase)
            exprList (empty)

82. i_dont_like_camel_case = "butItTakesLessKeystrokes"; // variable identifier with underscores
line (stmt)
    stmt (varAssign)
        ID (i_dont_like_camel_case)
        expr (STR)
            STR ("butItTakesLessKeystrokes")

83. 
line (blank)

84. // loops
line (comment)
    COMMENT ( loops)

85. for (int i = 0; i < 10; i++)
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (NUM)
                    NUM (10)
        forNext (stmt)
            stmt (postInc)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)

86. for (i = 0; i < 10; i = i + 2)
line (for)
    forControl (three)
        forInit (stmt)
            stmt (varAssign)
                ID (i)
                expr (NUM)
                    NUM (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (NUM)
                    NUM (10)
        forNext (stmt)
            stmt (varAssign)
                ID (i)
                expr (+)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                            index (empty)
                            field (empty)
                    expr (NUM)
                        NUM (2)

87. for (int i = 0; i < 100 && 2 * i < 50; i = i * 2)
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (0)
        forExpr (expr)
            expr (&&)
                expr (<)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                            index (empty)
                            field (empty)
                    expr (NUM)
                        NUM (100)
                expr (<)
                    expr (*)
                        expr (NUM)
                            NUM (2)
                        expr (lValue)
                            lValue (lValue)
                                ID (i)
                                index (empty)
                                field (empty)
                    expr (NUM)
                        NUM (50)
        forNext (stmt)
            stmt (varAssign)
                ID (i)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                            index (empty)
                            field (empty)
                    expr (NUM)
                        NUM (2)

88. for (int i = 100; i > 0; i--)
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (100)
        forExpr (expr)
            expr (>)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (NUM)
                    NUM (0)
        forNext (stmt)
            stmt (postDec)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)

89. for (int i = 10; i > 0; i = i - 2)
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (10)
        forExpr (expr)
            expr (>)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (NUM)
                    NUM (0)
        forNext (stmt)
            stmt (varAssign)
                ID (i)
                expr (-)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                            index (empty)
                            field (empty)
                    expr (NUM)
                        NUM (2)

90. for (int i = 0; i < len; i++)
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (len)
                        index (empty)
                        field (empty)
        forNext (stmt)
            stmt (postInc)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)

91. for (int i = 0; i < arr.length; i++)
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (arr)
                        index (empty)
                        field (field)
                            ID (length)
        forNext (stmt)
            stmt (postInc)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)

92. for (GameObj bullet : bullets )
line (for)
    forControl (array)
        ID (GameObj)
        ID (bullet)
        ID (bullets)

93. 
line (blank)

94. while (j < 100)
line (while)
    expr (<)
        expr (lValue)
            lValue (lValue)
                ID (j)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (100)
    whileEnd (while)

95. do
line (do)

96. while (j < 100);
line (while)
    expr (<)
        expr (lValue)
            lValue (lValue)
                ID (j)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (100)
    whileEnd (do-while)

97. while (j < foo && i != bar);
line (while)
    expr (&&)
        expr (<)
            expr (lValue)
                lValue (lValue)
                    ID (j)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (foo)
                    index (empty)
                    field (empty)
        expr (!=)
            expr (lValue)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (bar)
                    index (empty)
                    field (empty)
    whileEnd (do-while)

98. while (j >= 100);
line (while)
    expr (>=)
        expr (lValue)
            lValue (lValue)
                ID (j)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (100)
    whileEnd (do-while)

99. while (j <= foo && i != bar);
line (while)
    expr (&&)
        expr (<=)
            expr (lValue)
                lValue (lValue)
                    ID (j)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (foo)
                    index (empty)
                    field (empty)
        expr (!=)
            expr (lValue)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (bar)
                    index (empty)
                    field (empty)
    whileEnd (do-while)

100. while (i < max && notFound)
line (while)
    expr (&&)
        expr (<)
            expr (lValue)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (max)
                    index (empty)
                    field (empty)
        expr (lValue)
            lValue (lValue)
                ID (notFound)
                index (empty)
                field (empty)
    whileEnd (while)

101. 
line (blank)

102. // arrays
line (comment)
    COMMENT ( arrays)

103. int[] a;
line (arrayDecl)
    ID (int)
    idList (list)
        ID (a)

104. int[] a = new int[100];
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (expr)
        expr (newArray)
            ID (int)
            expr (NUM)
                NUM (100)

105. int[] a = new int[foo];
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (expr)
        expr (newArray)
            ID (int)
            expr (lValue)
                lValue (lValue)
                    ID (foo)
                    index (empty)
                    field (empty)

106. int[] a = new int[b.length * 2];
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (expr)
        expr (newArray)
            ID (int)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (b)
                        index (empty)
                        field (field)
                            ID (length)
                expr (NUM)
                    NUM (2)

107. int[] a = {1, 2, 3};
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (list)
        exprList (list)
            expr (NUM)
                NUM (1)
            expr (NUM)
                NUM (2)
            expr (NUM)
                NUM (3)

108. int[] a = { 1,
-- Incomplete line carried forward

109. 2,
-- Incomplete line carried forward

110. 3};
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (list)
        exprList (list)
            expr (NUM)
                NUM (1)
            expr (NUM)
                NUM (2)
            expr (NUM)
                NUM (3)

111. int[] a = b;
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (expr)
        expr (lValue)
            lValue (lValue)
                ID (b)
                index (empty)
                field (empty)

112. double[] data = new double[1000];
line (arrayInit)
    ID (double)
    ID (data)
    arrayInit (expr)
        expr (newArray)
            ID (double)
            expr (NUM)
                NUM (1000)

113. String[] greetings = {"hello", "hola", "bonjour"};
line (arrayInit)
    ID (String)
    ID (greetings)
    arrayInit (list)
        exprList (list)
            expr (STR)
                STR ("hello")
            expr (STR)
                STR ("hola")
            expr (STR)
                STR ("bonjour")

114. GameObj[] targets;
line (arrayDecl)
    ID (GameObj)
    idList (list)
        ID (targets)

115. GameObj[] targets = new GameObj[100];
line (arrayInit)
    ID (GameObj)
    ID (targets)
    arrayInit (expr)
        expr (newArray)
            ID (GameObj)
            expr (NUM)
                NUM (100)

116. GameObj[] targets = new GameObj[numTargets];
line (arrayInit)
    ID (GameObj)
    ID (targets)
    arrayInit (expr)
        expr (newArray)
            ID (GameObj)
            expr (lValue)
                lValue (lValue)
                    ID (numTargets)
                    index (empty)
                    field (empty)

117. foo = bar[i];
line (stmt)
    stmt (varAssign)
        ID (foo)
        expr (lValue)
            lValue (lValue)
                ID (bar)
                index (index)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                            index (empty)
                            field (empty)
                field (empty)

118. foo = bar[0];
line (stmt)
    stmt (varAssign)
        ID (foo)
        expr (lValue)
            lValue (lValue)
                ID (bar)
                index (index)
                    expr (NUM)
                        NUM (0)
                field (empty)

119. 
line (blank)

120. // function definitions
line (comment)
    COMMENT ( function definitions)

121. void foo()
line (func)
    access (empty)
    retType (void)
    ID (foo)
    paramList (empty)

122. void fooBar(int aParameter)
line (func)
    access (empty)
    retType (void)
    ID (fooBar)
    paramList (list)
        param (var)
            ID (int)
            ID (aParameter)

123. int foo(double x)
line (func)
    access (empty)
    retType (value)
        ID (int)
    ID (foo)
    paramList (list)
        param (var)
            ID (double)
            ID (x)

124. String bar(String[] a, int length)
line (func)
    access (empty)
    retType (value)
        ID (String)
    ID (bar)
    paramList (list)
        param (array)
            ID (String)
            ID (a)
        param (var)
            ID (int)
            ID (length)

125. String[] split(String s, String delim)
line (func)
    access (empty)
    retType (array)
        ID (String)
    ID (split)
    paramList (list)
        param (var)
            ID (String)
            ID (s)
        param (var)
            ID (String)
            ID (delim)

126. public double add(double x, double y, double z)
line (func)
    access (public)
    retType (value)
        ID (double)
    ID (add)
    paramList (list)
        param (var)
            ID (double)
            ID (x)
        param (var)
            ID (double)
            ID (y)
        param (var)
            ID (double)
            ID (z)

127. 
line (blank)

128. // function calls
line (comment)
    COMMENT ( function calls)

129. ct.println("Hello world");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (println)
        exprList (list)
            expr (STR)
                STR ("Hello world")

130. ct.println("Hello " + name);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (println)
        exprList (list)
            expr (+)
                expr (STR)
                    STR ("Hello ")
                expr (lValue)
                    lValue (lValue)
                        ID (name)
                        index (empty)
                        field (empty)

131. ct.println("Hello\nWorld");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (println)
        exprList (list)
            expr (STR)
                STR ("Hello\nWorld")

132. x = add(3, 4);
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (call)
            fnValue (fnValue)
                ID (add)
                index (empty)
                method (empty)
            exprList (list)
                expr (NUM)
                    NUM (3)
                expr (NUM)
                    NUM (4)

133. m = mean(1.2, 3.4, 5.67);
line (stmt)
    stmt (varAssign)
        ID (m)
        expr (call)
            fnValue (fnValue)
                ID (mean)
                index (empty)
                method (empty)
            exprList (list)
                expr (NUM)
                    NUM (1.2)
                expr (NUM)
                    NUM (3.4)
                expr (NUM)
                    NUM (5.67)

134. foo(x,
-- Incomplete line carried forward

135. y,
-- Incomplete line carried forward

136. z);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

137. 
line (blank)

138. // multiline comments
line (comment)
    COMMENT ( multiline comments)

139. /* this is a multiline comment
line (comment)
    COMMENT ( this is a multiline comment)

140. * this is the second line
line (blank)

141. * this is the third line
line (blank)

142. */
line (blank)

143. }
line (end)

144. // -------------------------------------------------------------
line (comment)
    COMMENT ( -------------------------------------------------------------)

145. // Parsing white box tests
line (comment)
    COMMENT ( Parsing white box tests)

146. // -------------------------------------------------------------
line (comment)
    COMMENT ( -------------------------------------------------------------)

147. // "blank"
line (comment)
    COMMENT ( "blank")

148. 
line (blank)

149. // "comment"
line (comment)
    COMMENT ( "comment")

150. // single comment line
line (comment)
    COMMENT ( single comment line)

151. while ( x < 100 ) // comment at end of line of code
line (while)
    expr (<)
        expr (lValue)
            lValue (lValue)
                ID (x)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (100)
    whileEnd (while)

152. /* block comment line 1
line (comment)
    COMMENT ( block comment line 1)

153. * block comment line 2
line (blank)

154. */
line (blank)

155. /* block comment with /* nested comment */ */
line (comment)
    COMMENT ( block comment with /* nested comment */ )

156. int x = 0; /* block comment after code on same line */
line (varInit)
    ID (int)
    ID (x)
    expr (NUM)
        NUM (0)

157. /* block comment before code on same line */ double pi = 3.14;
line (varInit)
    ID (double)
    ID (pi)
    expr (NUM)
        NUM (3.14)

158. // block comments inside line of code
line (comment)
    COMMENT ( block comments inside line of code)

159. double foo(int i /*fee*/, double db /*fi*/, boolean boo /*fo*/)
line (func)
    access (empty)
    retType (value)
        ID (double)
    ID (foo)
    paramList (list)
        param (var)
            ID (int)
            ID (i)
        param (var)
            ID (double)
            ID (db)
        param (var)
            ID (boolean)
            ID (boo)

160. 
line (blank)

161. // "stmt",       stmt, ";"
line (comment)
    COMMENT ( "stmt",       stmt, ";")

162. // -- stmt "call"      fnValue, "(", exprList, ")"
line (comment)
    COMMENT ( -- stmt "call"      fnValue, "(", exprList, ")")

163. // -- -- exprList "empty"
line (comment)
    COMMENT ( -- -- exprList "empty")

164. foo();
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (empty)

165. foo.bar();
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (method)
                ID (bar)
        exprList (empty)

166. foo[i].bar();
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            method (method)
                ID (bar)
        exprList (empty)

167. // -- -- exprList "list"
line (comment)
    COMMENT ( -- -- exprList "list")

168. foo(123); // "NUM"
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (NUM)
                NUM (123)

169. foo(12.345);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (NUM)
                NUM (12.345)

170. foo(1.234e56);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (NUM)
                NUM (1.234e56)

171. foo(1.234e+56);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (NUM)
                NUM (1.234e+56)

172. foo(1.234e-56);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (NUM)
                NUM (1.234e-56)

173. foo(.234e56);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (NUM)
                NUM (.234e56)

174. foo(.234e+56);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (NUM)
                NUM (.234e+56)

175. foo(.234e-56);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (NUM)
                NUM (.234e-56)

176. foo(true); // "BOOL"
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (BOOL)
                BOOL (true)

177. foo(false);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (BOOL)
                BOOL (false)

178. foo(null); // "NULL"
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (NULL)
                NULL (null)

179. foo("string literal"); // "STR"
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (STR)
                STR ("string literal")

180. foo(bar()); // "call"
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (call)
                fnValue (fnValue)
                    ID (bar)
                    index (empty)
                    method (empty)
                exprList (empty)

181. foo(bar(123));
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (call)
                fnValue (fnValue)
                    ID (bar)
                    index (empty)
                    method (empty)
                exprList (list)
                    expr (NUM)
                        NUM (123)

182. foo(x); // "lValue"
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)

183. foo(obj.x);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (obj)
                    index (empty)
                    field (field)
                        ID (x)

184. foo(objs[i]);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (objs)
                    index (index)
                        expr (lValue)
                            lValue (lValue)
                                ID (i)
                                index (empty)
                                field (empty)
                    field (empty)

185. foo(objs[i].x);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (objs)
                    index (index)
                        expr (lValue)
                            lValue (lValue)
                                ID (i)
                                index (empty)
                                field (empty)
                    field (field)
                        ID (x)

186. foo(123); // "exprParens"
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (NUM)
                NUM (123)

187. foo(-123); // "neg"
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (neg)
                expr (NUM)
                    NUM (123)

188. foo(-.234e+56);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (neg)
                expr (NUM)
                    NUM (.234e+56)

189. foo(-obj.x);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (neg)
                expr (lValue)
                    lValue (lValue)
                        ID (obj)
                        index (empty)
                        field (field)
                            ID (x)

190. foo(!true);   // "!"
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (!)
                expr (BOOL)
                    BOOL (true)

191. foo(!false);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (!)
                expr (BOOL)
                    BOOL (false)

192. foo(!paused);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (!)
                expr (lValue)
                    lValue (lValue)
                        ID (paused)
                        index (empty)
                        field (empty)

193. foo(new int [100]); // "newArray"
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (newArray)
                ID (int)
                expr (NUM)
                    NUM (100)

194. foo(new GameObj [numBullets]);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (newArray)
                ID (GameObj)
                expr (lValue)
                    lValue (lValue)
                        ID (numBullets)
                        index (empty)
                        field (empty)

195. foo(new GameObj [numBullets * 2]);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (newArray)
                ID (GameObj)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (numBullets)
                            index (empty)
                            field (empty)
                    expr (NUM)
                        NUM (2)

196. // -- -- exprList "list" (1 non-primary expr)
line (comment)
    COMMENT ( -- -- exprList "list" (1 non-primary expr))

197. foo(123 + obj.x);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (+)
                expr (NUM)
                    NUM (123)
                expr (lValue)
                    lValue (lValue)
                        ID (obj)
                        index (empty)
                        field (field)
                            ID (x)

198. foo(-123 + obj.x - obj2.x);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (-)
                expr (+)
                    expr (neg)
                        expr (NUM)
                            NUM (123)
                    expr (lValue)
                        lValue (lValue)
                            ID (obj)
                            index (empty)
                            field (field)
                                ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (obj2)
                        index (empty)
                        field (field)
                            ID (x)

199. foo(100 - obj.x * -3.14);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (-)
                expr (NUM)
                    NUM (100)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (obj)
                            index (empty)
                            field (field)
                                ID (x)
                    expr (neg)
                        expr (NUM)
                            NUM (3.14)

200. foo((1 + a[iTop]) - 1);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (-)
                expr (exprParens)
                    expr (+)
                        expr (NUM)
                            NUM (1)
                        expr (lValue)
                            lValue (lValue)
                                ID (a)
                                index (index)
                                    expr (lValue)
                                        lValue (lValue)
                                            ID (iTop)
                                            index (empty)
                                            field (empty)
                                field (empty)
                expr (NUM)
                    NUM (1)

201. foo((1 + a[iTop]) / 1);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (/)
                expr (exprParens)
                    expr (+)
                        expr (NUM)
                            NUM (1)
                        expr (lValue)
                            lValue (lValue)
                                ID (a)
                                index (index)
                                    expr (lValue)
                                        lValue (lValue)
                                            ID (iTop)
                                            index (empty)
                                            field (empty)
                                field (empty)
                expr (NUM)
                    NUM (1)

202. foo((a[i] + b[j]) / 3);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (/)
                expr (exprParens)
                    expr (+)
                        expr (lValue)
                            lValue (lValue)
                                ID (a)
                                index (index)
                                    expr (lValue)
                                        lValue (lValue)
                                            ID (i)
                                            index (empty)
                                            field (empty)
                                field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (b)
                                index (index)
                                    expr (lValue)
                                        lValue (lValue)
                                            ID (j)
                                            index (empty)
                                            field (empty)
                                field (empty)
                expr (NUM)
                    NUM (3)

203. // -- -- exprList "list" (multiple exprs)
line (comment)
    COMMENT ( -- -- exprList "list" (multiple exprs))

204. foo(x, why, zee);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (why)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (zee)
                    index (empty)
                    field (empty)

205. foo(x,
-- Incomplete line carried forward

206. y,
-- Incomplete line carried forward

207. z);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

208. foo( x + y, a || b && c, bar[i].m(z * (u + v)) );
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (+)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
            expr (||)
                expr (lValue)
                    lValue (lValue)
                        ID (a)
                        index (empty)
                        field (empty)
                expr (&&)
                    expr (lValue)
                        lValue (lValue)
                            ID (b)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (c)
                            index (empty)
                            field (empty)
            expr (call)
                fnValue (fnValue)
                    ID (bar)
                    index (index)
                        expr (lValue)
                            lValue (lValue)
                                ID (i)
                                index (empty)
                                field (empty)
                    method (method)
                        ID (m)
                exprList (list)
                    expr (*)
                        expr (lValue)
                            lValue (lValue)
                                ID (z)
                                index (empty)
                                field (empty)
                        expr (exprParens)
                            expr (+)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (u)
                                        index (empty)
                                        field (empty)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (v)
                                        index (empty)
                                        field (empty)

209. // -- stmt "varAssign"      "ID", "=", expr
line (comment)
    COMMENT ( -- stmt "varAssign"      "ID", "=", expr)

210. // -- -- valid "ID"s
line (comment)
    COMMENT ( -- -- valid "ID"s)

211. x = 0;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (NUM)
            NUM (0)

212. xValue = 0;
line (stmt)
    stmt (varAssign)
        ID (xValue)
        expr (NUM)
            NUM (0)

213. x123 = 0;
line (stmt)
    stmt (varAssign)
        ID (x123)
        expr (NUM)
            NUM (0)

214. x123four = 0;
line (stmt)
    stmt (varAssign)
        ID (x123four)
        expr (NUM)
            NUM (0)

215. some_variable = 0;
line (stmt)
    stmt (varAssign)
        ID (some_variable)
        expr (NUM)
            NUM (0)

216. x1_ = 0;
line (stmt)
    stmt (varAssign)
        ID (x1_)
        expr (NUM)
            NUM (0)

217. // x = primaryExpr
line (comment)
    COMMENT ( x = primaryExpr)

218. var = 12.345; 			// "NUM"
line (stmt)
    stmt (varAssign)
        ID (var)
        expr (NUM)
            NUM (12.345)

219. x = 1.234e56;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (NUM)
            NUM (1.234e56)

220. x = 1.234e+56;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (NUM)
            NUM (1.234e+56)

221. x = 1.234e-56;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (NUM)
            NUM (1.234e-56)

222. x = .234e56;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (NUM)
            NUM (.234e56)

223. x = .234e+56;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (NUM)
            NUM (.234e+56)

224. x = .234e-56;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (NUM)
            NUM (.234e-56)

225. x = true; 				// "BOOL"
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (BOOL)
            BOOL (true)

226. x = false;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (BOOL)
            BOOL (false)

227. x = null;				// "NULL"
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (NULL)
            NULL (null)

228. x = "string literal"; 	// "STR"
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (STR)
            STR ("string literal")

229. x = foo(); 				// "call"
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (call)
            fnValue (fnValue)
                ID (foo)
                index (empty)
                method (empty)
            exprList (empty)

230. x = foo.bar(123);
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (call)
            fnValue (fnValue)
                ID (foo)
                index (empty)
                method (method)
                    ID (bar)
            exprList (list)
                expr (NUM)
                    NUM (123)

231. x = y; 					// "lValue"
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (lValue)
            lValue (lValue)
                ID (y)
                index (empty)
                field (empty)

232. x = obj.x;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (lValue)
            lValue (lValue)
                ID (obj)
                index (empty)
                field (field)
                    ID (x)

233. x = objs[i];
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (lValue)
            lValue (lValue)
                ID (objs)
                index (index)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                            index (empty)
                            field (empty)
                field (empty)

234. x = objs[i].x;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (lValue)
            lValue (lValue)
                ID (objs)
                index (index)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                            index (empty)
                            field (empty)
                field (field)
                    ID (x)

235. x = (123); 				// "exprParens"
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (exprParens)
            expr (NUM)
                NUM (123)

236. x = -123; 				// "neg"
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (neg)
            expr (NUM)
                NUM (123)

237. x = -.234e+56;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (neg)
            expr (NUM)
                NUM (.234e+56)

238. x = -obj.x;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (neg)
            expr (lValue)
                lValue (lValue)
                    ID (obj)
                    index (empty)
                    field (field)
                        ID (x)

239. x = !true;   			// "!"
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (!)
            expr (BOOL)
                BOOL (true)

240. x = !false;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (!)
            expr (BOOL)
                BOOL (false)

241. x = !paused;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (!)
            expr (lValue)
                lValue (lValue)
                    ID (paused)
                    index (empty)
                    field (empty)

242. x = new GameObj [numBullets]; // "newArray"
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (newArray)
            ID (GameObj)
            expr (lValue)
                lValue (lValue)
                    ID (numBullets)
                    index (empty)
                    field (empty)

243. // x = complex expr
line (comment)
    COMMENT ( x = complex expr)

244. x = x * y;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (*)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)

245. x = x / y;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (/)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)

246. x = x % y;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (%)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)

247. x = x + y;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (+)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)

248. x = x - y;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (-)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)

249. x = x << y;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (<<)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)

250. x = x >> y;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (>>)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)

251. x = x >>> y;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (>>>)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)

252. b = x < y;
line (stmt)
    stmt (varAssign)
        ID (b)
        expr (<)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)

253. b = x <= y;
line (stmt)
    stmt (varAssign)
        ID (b)
        expr (<=)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)

254. b = x > y;
line (stmt)
    stmt (varAssign)
        ID (b)
        expr (>)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)

255. b = x >= y;
line (stmt)
    stmt (varAssign)
        ID (b)
        expr (>=)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)

256. b = x == y;
line (stmt)
    stmt (varAssign)
        ID (b)
        expr (==)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)

257. b = x != y;
line (stmt)
    stmt (varAssign)
        ID (b)
        expr (!=)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)

258. x = x & y;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (&)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)

259. x = x ^ y;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (^)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)

260. x = x | y;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (|)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)

261. b = x && y;
line (stmt)
    stmt (varAssign)
        ID (b)
        expr (&&)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)

262. b = x || y;
line (stmt)
    stmt (varAssign)
        ID (b)
        expr (||)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)

263. x = x + y + z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (+)
            expr (+)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

264. x = x - y - z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (-)
            expr (-)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

265. x = x * y * z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (*)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

266. x = x / y / z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (/)
            expr (/)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

267. x = x % y % z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (%)
            expr (%)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

268. x = x + y - z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (-)
            expr (+)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

269. x = x - y + z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (+)
            expr (-)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

270. x = x + y * z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (+)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (z)
                        index (empty)
                        field (empty)

271. x = x * y + z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (+)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

272. x = x + y / z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (+)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (/)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (z)
                        index (empty)
                        field (empty)

273. x = x / y + z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (+)
            expr (/)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

274. x = x + y % z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (+)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (%)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (z)
                        index (empty)
                        field (empty)

275. x = x % y + z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (+)
            expr (%)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

276. x = x - y * z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (-)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (z)
                        index (empty)
                        field (empty)

277. x = x * y - z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (-)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

278. x = x - y / z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (-)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (/)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (z)
                        index (empty)
                        field (empty)

279. x = x / y - z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (-)
            expr (/)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

280. x = x - y % z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (-)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (%)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (z)
                        index (empty)
                        field (empty)

281. x = x % y - z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (-)
            expr (%)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

282. x = x * y / z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (/)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

283. x = x / y * z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (*)
            expr (/)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

284. x = x * y % z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (%)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

285. x = x % y * z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (*)
            expr (%)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

286. x = x / y % z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (%)
            expr (/)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

287. x = x % y / z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (/)
            expr (%)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

288. x = (x + y) + z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (+)
            expr (exprParens)
                expr (+)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                            index (empty)
                            field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

289. x = x - (y - z);
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (-)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (exprParens)
                expr (-)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (z)
                            index (empty)
                            field (empty)

290. x = (x * y) * z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (*)
            expr (exprParens)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                            index (empty)
                            field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

291. x = x / (y / z);
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (/)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (exprParens)
                expr (/)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (z)
                            index (empty)
                            field (empty)

292. x = (x + y) - z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (-)
            expr (exprParens)
                expr (+)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                            index (empty)
                            field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

293. x = x - (y + z);
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (-)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (exprParens)
                expr (+)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (z)
                            index (empty)
                            field (empty)

294. x = (x + y) * z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (*)
            expr (exprParens)
                expr (+)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                            index (empty)
                            field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

295. x = x * (y + z);
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (*)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (exprParens)
                expr (+)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (z)
                            index (empty)
                            field (empty)

296. x = (x + y) / z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (/)
            expr (exprParens)
                expr (+)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                            index (empty)
                            field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

297. x = x / (y + z);
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (/)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (exprParens)
                expr (+)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (z)
                            index (empty)
                            field (empty)

298. x = (x - y) * z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (*)
            expr (exprParens)
                expr (-)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                            index (empty)
                            field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

299. x = x * (y - z);
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (*)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (exprParens)
                expr (-)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (z)
                            index (empty)
                            field (empty)

300. x = (x - y) / z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (/)
            expr (exprParens)
                expr (-)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                            index (empty)
                            field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

301. x = x / (y - z);
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (/)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (exprParens)
                expr (-)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (z)
                            index (empty)
                            field (empty)

302. x = (x * y) / z;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (/)
            expr (exprParens)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                            index (empty)
                            field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

303. x = x / (y * z);
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (/)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (exprParens)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (z)
                            index (empty)
                            field (empty)

304. x = 123 + obj.x;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (+)
            expr (NUM)
                NUM (123)
            expr (lValue)
                lValue (lValue)
                    ID (obj)
                    index (empty)
                    field (field)
                        ID (x)

305. x = -123 + obj.x - obj2.x;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (-)
            expr (+)
                expr (neg)
                    expr (NUM)
                        NUM (123)
                expr (lValue)
                    lValue (lValue)
                        ID (obj)
                        index (empty)
                        field (field)
                            ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (obj2)
                    index (empty)
                    field (field)
                        ID (x)

306. x = 100 - obj.x * -3.14;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (-)
            expr (NUM)
                NUM (100)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (obj)
                        index (empty)
                        field (field)
                            ID (x)
                expr (neg)
                    expr (NUM)
                        NUM (3.14)

307. x = (1 + a[iTop]) - 1;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (-)
            expr (exprParens)
                expr (+)
                    expr (NUM)
                        NUM (1)
                    expr (lValue)
                        lValue (lValue)
                            ID (a)
                            index (index)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (iTop)
                                        index (empty)
                                        field (empty)
                            field (empty)
            expr (NUM)
                NUM (1)

308. x = (1 + a[iTop]) / 1;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (/)
            expr (exprParens)
                expr (+)
                    expr (NUM)
                        NUM (1)
                    expr (lValue)
                        lValue (lValue)
                            ID (a)
                            index (index)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (iTop)
                                        index (empty)
                                        field (empty)
                            field (empty)
            expr (NUM)
                NUM (1)

309. x = 1 + (a[i] + b[j]) / 3;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (+)
            expr (NUM)
                NUM (1)
            expr (/)
                expr (exprParens)
                    expr (+)
                        expr (lValue)
                            lValue (lValue)
                                ID (a)
                                index (index)
                                    expr (lValue)
                                        lValue (lValue)
                                            ID (i)
                                            index (empty)
                                            field (empty)
                                field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (b)
                                index (index)
                                    expr (lValue)
                                        lValue (lValue)
                                            ID (j)
                                            index (empty)
                                            field (empty)
                                field (empty)
                expr (NUM)
                    NUM (3)

310. x = x1 * y1 + x2 * y2 + x3 * y3;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (+)
            expr (+)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (x1)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (y1)
                            index (empty)
                            field (empty)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (x2)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (y2)
                            index (empty)
                            field (empty)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (x3)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y3)
                        index (empty)
                        field (empty)

311. x = x[0] * y[0] + x[1] * y[1] + x[2] * y[2];
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (+)
            expr (+)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (index)
                                expr (NUM)
                                    NUM (0)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                            index (index)
                                expr (NUM)
                                    NUM (0)
                            field (empty)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (index)
                                expr (NUM)
                                    NUM (1)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                            index (index)
                                expr (NUM)
                                    NUM (1)
                            field (empty)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (index)
                            expr (NUM)
                                NUM (2)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (index)
                            expr (NUM)
                                NUM (2)
                        field (empty)

312. x = (x1 + x2 + x3) / 3;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (/)
            expr (exprParens)
                expr (+)
                    expr (+)
                        expr (lValue)
                            lValue (lValue)
                                ID (x1)
                                index (empty)
                                field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (x2)
                                index (empty)
                                field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (x3)
                            index (empty)
                            field (empty)
            expr (NUM)
                NUM (3)

313. x = (x[0] + x[1] + x[2] + x[3]) / 4;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (/)
            expr (exprParens)
                expr (+)
                    expr (+)
                        expr (+)
                            expr (lValue)
                                lValue (lValue)
                                    ID (x)
                                    index (index)
                                        expr (NUM)
                                            NUM (0)
                                    field (empty)
                            expr (lValue)
                                lValue (lValue)
                                    ID (x)
                                    index (index)
                                        expr (NUM)
                                            NUM (1)
                                    field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (x)
                                index (index)
                                    expr (NUM)
                                        NUM (2)
                                field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (index)
                                expr (NUM)
                                    NUM (3)
                            field (empty)
            expr (NUM)
                NUM (4)

314. x = sum / n;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (/)
            expr (lValue)
                lValue (lValue)
                    ID (sum)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (n)
                    index (empty)
                    field (empty)

315. x = Math.sqrt(a * a + b * b);
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (call)
            fnValue (fnValue)
                ID (Math)
                index (empty)
                method (method)
                    ID (sqrt)
            exprList (list)
                expr (+)
                    expr (*)
                        expr (lValue)
                            lValue (lValue)
                                ID (a)
                                index (empty)
                                field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (a)
                                index (empty)
                                field (empty)
                    expr (*)
                        expr (lValue)
                            lValue (lValue)
                                ID (b)
                                index (empty)
                                field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (b)
                                index (empty)
                                field (empty)

316. x = Math.sqrt(Math.pow(a,2) + Math.pow(b,2));
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (call)
            fnValue (fnValue)
                ID (Math)
                index (empty)
                method (method)
                    ID (sqrt)
            exprList (list)
                expr (+)
                    expr (call)
                        fnValue (fnValue)
                            ID (Math)
                            index (empty)
                            method (method)
                                ID (pow)
                        exprList (list)
                            expr (lValue)
                                lValue (lValue)
                                    ID (a)
                                    index (empty)
                                    field (empty)
                            expr (NUM)
                                NUM (2)
                    expr (call)
                        fnValue (fnValue)
                            ID (Math)
                            index (empty)
                            method (method)
                                ID (pow)
                        exprList (list)
                            expr (lValue)
                                lValue (lValue)
                                    ID (b)
                                    index (empty)
                                    field (empty)
                            expr (NUM)
                                NUM (2)

317. x = Math.sqrt( (a.x - b.x) * (a.x - b.x) + (a.y - b.y)*(a.y - b.y) );
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (call)
            fnValue (fnValue)
                ID (Math)
                index (empty)
                method (method)
                    ID (sqrt)
            exprList (list)
                expr (+)
                    expr (*)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (empty)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (empty)
                                        field (field)
                                            ID (x)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (empty)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (empty)
                                        field (field)
                                            ID (x)
                    expr (*)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (empty)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (empty)
                                        field (field)
                                            ID (y)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (empty)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (empty)
                                        field (field)
                                            ID (y)

318. x = Math.sqrt( Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2) );
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (call)
            fnValue (fnValue)
                ID (Math)
                index (empty)
                method (method)
                    ID (sqrt)
            exprList (list)
                expr (+)
                    expr (call)
                        fnValue (fnValue)
                            ID (Math)
                            index (empty)
                            method (method)
                                ID (pow)
                        exprList (list)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (empty)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (empty)
                                        field (field)
                                            ID (x)
                            expr (NUM)
                                NUM (2)
                    expr (call)
                        fnValue (fnValue)
                            ID (Math)
                            index (empty)
                            method (method)
                                ID (pow)
                        exprList (list)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (empty)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (empty)
                                        field (field)
                                            ID (y)
                            expr (NUM)
                                NUM (2)

319. x = Math.sqrt((obj.x + obj.y) / 2 - (a[i] + b[j]) / 3);
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (call)
            fnValue (fnValue)
                ID (Math)
                index (empty)
                method (method)
                    ID (sqrt)
            exprList (list)
                expr (-)
                    expr (/)
                        expr (exprParens)
                            expr (+)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (obj)
                                        index (empty)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (obj)
                                        index (empty)
                                        field (field)
                                            ID (y)
                        expr (NUM)
                            NUM (2)
                    expr (/)
                        expr (exprParens)
                            expr (+)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (empty)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (j)
                                                    index (empty)
                                                    field (empty)
                                        field (empty)
                        expr (NUM)
                            NUM (3)

320. x = true;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (BOOL)
            BOOL (true)

321. x = !true;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (!)
            expr (BOOL)
                BOOL (true)

322. x = false;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (BOOL)
            BOOL (false)

323. x = !false;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (!)
            expr (BOOL)
                BOOL (false)

324. x = !boolVar1 && boolVar2;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (&&)
            expr (!)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar1)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar2)
                    index (empty)
                    field (empty)

325. x = boolVar1 && !boolVar2;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (&&)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar1)
                    index (empty)
                    field (empty)
            expr (!)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar2)
                        index (empty)
                        field (empty)

326. x = !boolVar1 && !boolVar2;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (&&)
            expr (!)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar1)
                        index (empty)
                        field (empty)
            expr (!)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar2)
                        index (empty)
                        field (empty)

327. x = !(boolVar1 && boolVar2);
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (!)
            expr (exprParens)
                expr (&&)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar1)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar2)
                            index (empty)
                            field (empty)

328. x = !boolVar1 || boolVar2;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (||)
            expr (!)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar1)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar2)
                    index (empty)
                    field (empty)

329. x = boolVar1 || !boolVar2;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (||)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar1)
                    index (empty)
                    field (empty)
            expr (!)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar2)
                        index (empty)
                        field (empty)

330. x = !boolVar1 || !boolVar2;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (||)
            expr (!)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar1)
                        index (empty)
                        field (empty)
            expr (!)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar2)
                        index (empty)
                        field (empty)

331. x = !(boolVar1 || boolVar2);
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (!)
            expr (exprParens)
                expr (||)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar1)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar2)
                            index (empty)
                            field (empty)

332. x = boolVar1 && boolVar2 && boolVar3;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (&&)
            expr (&&)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar1)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar2)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar3)
                    index (empty)
                    field (empty)

333. x = boolVar1 || boolVar2 || boolVar3;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (||)
            expr (||)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar1)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar2)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar3)
                    index (empty)
                    field (empty)

334. x = boolVar1 && boolVar2 || boolVar3;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (||)
            expr (&&)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar1)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar2)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar3)
                    index (empty)
                    field (empty)

335. x = !boolVar1 && boolVar2 || boolVar3;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (||)
            expr (&&)
                expr (!)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar1)
                            index (empty)
                            field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar2)
                        index (empty)
                        field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar3)
                    index (empty)
                    field (empty)

336. x = boolVar1 && !boolVar2 || boolVar3;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (||)
            expr (&&)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar1)
                        index (empty)
                        field (empty)
                expr (!)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar2)
                            index (empty)
                            field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar3)
                    index (empty)
                    field (empty)

337. x = boolVar1 && boolVar2 || !boolVar3;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (||)
            expr (&&)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar1)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar2)
                        index (empty)
                        field (empty)
            expr (!)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar3)
                        index (empty)
                        field (empty)

338. x = !boolVar1 && !boolVar2 || boolVar3;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (||)
            expr (&&)
                expr (!)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar1)
                            index (empty)
                            field (empty)
                expr (!)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar2)
                            index (empty)
                            field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar3)
                    index (empty)
                    field (empty)

339. x = boolVar1 || boolVar2 && boolVar3;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (||)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar1)
                    index (empty)
                    field (empty)
            expr (&&)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar2)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (boolVar3)
                        index (empty)
                        field (empty)

340. x = (boolVar1 && boolVar2) || boolVar3;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (||)
            expr (exprParens)
                expr (&&)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar1)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar2)
                            index (empty)
                            field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar3)
                    index (empty)
                    field (empty)

341. x = boolVar1 && (boolVar2 || boolVar3);
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (&&)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar1)
                    index (empty)
                    field (empty)
            expr (exprParens)
                expr (||)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar2)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar3)
                            index (empty)
                            field (empty)

342. x = (boolVar1 && boolVar2) || (boolVar3 && boolVar4);
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (||)
            expr (exprParens)
                expr (&&)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar1)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar2)
                            index (empty)
                            field (empty)
            expr (exprParens)
                expr (&&)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar3)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar4)
                            index (empty)
                            field (empty)

343. x = (boolVar1 && (boolVar2 || boolVar3)) && boolVar4;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (&&)
            expr (exprParens)
                expr (&&)
                    expr (lValue)
                        lValue (lValue)
                            ID (boolVar1)
                            index (empty)
                            field (empty)
                    expr (exprParens)
                        expr (||)
                            expr (lValue)
                                lValue (lValue)
                                    ID (boolVar2)
                                    index (empty)
                                    field (empty)
                            expr (lValue)
                                lValue (lValue)
                                    ID (boolVar3)
                                    index (empty)
                                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (boolVar4)
                    index (empty)
                    field (empty)

344. x = x && ( (y || z) && !w );
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (&&)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (exprParens)
                expr (&&)
                    expr (exprParens)
                        expr (||)
                            expr (lValue)
                                lValue (lValue)
                                    ID (y)
                                    index (empty)
                                    field (empty)
                            expr (lValue)
                                lValue (lValue)
                                    ID (z)
                                    index (empty)
                                    field (empty)
                    expr (!)
                        expr (lValue)
                            lValue (lValue)
                                ID (w)
                                index (empty)
                                field (empty)

345. x = x < 0;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (<)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (NUM)
                NUM (0)

346. x = x <= 1.2;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (<=)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (NUM)
                NUM (1.2)

347. x = x > .1;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (>)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (NUM)
                NUM (.1)

348. x = x >= .1e-23;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (>=)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (NUM)
                NUM (.1e-23)

349. x = x < eps && x > -eps;
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (&&)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (eps)
                        index (empty)
                        field (empty)
            expr (>)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (neg)
                    expr (lValue)
                        lValue (lValue)
                            ID (eps)
                            index (empty)
                            field (empty)

350. x = xValue > eps[i] && xValue < eps[i + j];
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (&&)
            expr (>)
                expr (lValue)
                    lValue (lValue)
                        ID (xValue)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (eps)
                        index (index)
                            expr (lValue)
                                lValue (lValue)
                                    ID (i)
                                    index (empty)
                                    field (empty)
                        field (empty)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (xValue)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (eps)
                        index (index)
                            expr (+)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (i)
                                        index (empty)
                                        field (empty)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (j)
                                        index (empty)
                                        field (empty)
                        field (empty)

351. x = x1 < foo() || y2 >= foo[i].bar(arr[i]);
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (||)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (x1)
                        index (empty)
                        field (empty)
                expr (call)
                    fnValue (fnValue)
                        ID (foo)
                        index (empty)
                        method (empty)
                    exprList (empty)
            expr (>=)
                expr (lValue)
                    lValue (lValue)
                        ID (y2)
                        index (empty)
                        field (empty)
                expr (call)
                    fnValue (fnValue)
                        ID (foo)
                        index (index)
                            expr (lValue)
                                lValue (lValue)
                                    ID (i)
                                    index (empty)
                                    field (empty)
                        method (method)
                            ID (bar)
                    exprList (list)
                        expr (lValue)
                            lValue (lValue)
                                ID (arr)
                                index (index)
                                    expr (lValue)
                                        lValue (lValue)
                                            ID (i)
                                            index (empty)
                                            field (empty)
                                field (empty)

352. x = x >= y.bar() && ( z_val <= 1 + 2.3 || 5 > 7 );
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (&&)
            expr (>=)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (call)
                    fnValue (fnValue)
                        ID (y)
                        index (empty)
                        method (method)
                            ID (bar)
                    exprList (empty)
            expr (exprParens)
                expr (||)
                    expr (<=)
                        expr (lValue)
                            lValue (lValue)
                                ID (z_val)
                                index (empty)
                                field (empty)
                        expr (+)
                            expr (NUM)
                                NUM (1)
                            expr (NUM)
                                NUM (2.3)
                    expr (>)
                        expr (NUM)
                            NUM (5)
                        expr (NUM)
                            NUM (7)

353. // -- stmt "assign"      lValue, "=", expr
line (comment)
    COMMENT ( -- stmt "assign"      lValue, "=", expr)

354. obj.x = -0.5;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (obj)
            index (empty)
            field (field)
                ID (x)
        expr (neg)
            expr (NUM)
                NUM (0.5)

355. obj.height = obj2.height;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (obj)
            index (empty)
            field (field)
                ID (height)
        expr (lValue)
            lValue (lValue)
                ID (obj2)
                index (empty)
                field (field)
                    ID (height)

356. xCoord[i] = obj.x;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (xCoord)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            field (empty)
        expr (lValue)
            lValue (lValue)
                ID (obj)
                index (empty)
                field (field)
                    ID (x)

357. objs[i].x = foo(i);
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (objs)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            field (field)
                ID (x)
        expr (call)
            fnValue (fnValue)
                ID (foo)
                index (empty)
                method (empty)
            exprList (list)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)

358. a[0] = startValue;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (a)
            index (index)
                expr (NUM)
                    NUM (0)
            field (empty)
        expr (lValue)
            lValue (lValue)
                ID (startValue)
                index (empty)
                field (empty)

359. a[i] = max;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            field (empty)
        expr (lValue)
            lValue (lValue)
                ID (max)
                index (empty)
                field (empty)

360. a[i] = a[i - 1];
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            field (empty)
        expr (lValue)
            lValue (lValue)
                ID (a)
                index (index)
                    expr (-)
                        expr (lValue)
                            lValue (lValue)
                                ID (i)
                                index (empty)
                                field (empty)
                        expr (NUM)
                            NUM (1)
                field (empty)

361. a[i] = b[i];
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            field (empty)
        expr (lValue)
            lValue (lValue)
                ID (b)
                index (index)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                            index (empty)
                            field (empty)
                field (empty)

362. dist[i] = Math.sqrt( (a[i].x - b[i].x) * (a[i].x - b[i].x) + (a[i].y - b[i].y)*(a[i].y - b[i].y) );
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (dist)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            field (empty)
        expr (call)
            fnValue (fnValue)
                ID (Math)
                index (empty)
                method (method)
                    ID (sqrt)
            exprList (list)
                expr (+)
                    expr (*)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (field)
                                            ID (x)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (field)
                                            ID (x)
                    expr (*)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (field)
                                            ID (y)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (field)
                                            ID (y)

363. dist[i] = Math.sqrt( Math.pow(a[i].x - b[i].x, 2) + Math.pow(a[i].y - b[i].y, 2) );
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (dist)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            field (empty)
        expr (call)
            fnValue (fnValue)
                ID (Math)
                index (empty)
                method (method)
                    ID (sqrt)
            exprList (list)
                expr (+)
                    expr (call)
                        fnValue (fnValue)
                            ID (Math)
                            index (empty)
                            method (method)
                                ID (pow)
                        exprList (list)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (field)
                                            ID (x)
                            expr (NUM)
                                NUM (2)
                    expr (call)
                        fnValue (fnValue)
                            ID (Math)
                            index (empty)
                            method (method)
                                ID (pow)
                        exprList (list)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (field)
                                            ID (y)
                            expr (NUM)
                                NUM (2)

364. // -- stmt "opAssign"
line (comment)
    COMMENT ( -- stmt "opAssign")

365. i += 1;
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (i)
            index (empty)
            field (empty)
        opAssignOp (+=)
        expr (NUM)
            NUM (1)

366. obj.x += -0.5;
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (obj)
            index (empty)
            field (field)
                ID (x)
        opAssignOp (+=)
        expr (neg)
            expr (NUM)
                NUM (0.5)

367. obj.height -= obj2.height;
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (obj)
            index (empty)
            field (field)
                ID (height)
        opAssignOp (-=)
        expr (lValue)
            lValue (lValue)
                ID (obj2)
                index (empty)
                field (field)
                    ID (height)

368. xCoord[i] *= obj.x;
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (xCoord)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            field (empty)
        opAssignOp (*=)
        expr (lValue)
            lValue (lValue)
                ID (obj)
                index (empty)
                field (field)
                    ID (x)

369. objs[i].x /= foo(i);
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (objs)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            field (field)
                ID (x)
        opAssignOp (/=)
        expr (call)
            fnValue (fnValue)
                ID (foo)
                index (empty)
                method (empty)
            exprList (list)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)

370. a[0] += startValue;
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (a)
            index (index)
                expr (NUM)
                    NUM (0)
            field (empty)
        opAssignOp (+=)
        expr (lValue)
            lValue (lValue)
                ID (startValue)
                index (empty)
                field (empty)

371. a[i] -= max;
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            field (empty)
        opAssignOp (-=)
        expr (lValue)
            lValue (lValue)
                ID (max)
                index (empty)
                field (empty)

372. a[i] *= a[i - 1];
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            field (empty)
        opAssignOp (*=)
        expr (lValue)
            lValue (lValue)
                ID (a)
                index (index)
                    expr (-)
                        expr (lValue)
                            lValue (lValue)
                                ID (i)
                                index (empty)
                                field (empty)
                        expr (NUM)
                            NUM (1)
                field (empty)

373. a[i] /= b[i];
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            field (empty)
        opAssignOp (/=)
        expr (lValue)
            lValue (lValue)
                ID (b)
                index (index)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                            index (empty)
                            field (empty)
                field (empty)

374. dist[i] += Math.sqrt( (a[i].x - b[i].x) * (a[i].x - b[i].x) + (a[i].y - b[i].y)*(a[i].y - b[i].y) );
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (dist)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            field (empty)
        opAssignOp (+=)
        expr (call)
            fnValue (fnValue)
                ID (Math)
                index (empty)
                method (method)
                    ID (sqrt)
            exprList (list)
                expr (+)
                    expr (*)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (field)
                                            ID (x)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (field)
                                            ID (x)
                    expr (*)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (field)
                                            ID (y)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (field)
                                            ID (y)

375. dist[i] -= Math.sqrt( Math.pow(a[i].x - b[i].x, 2) + Math.pow(a[i].y - b[i].y, 2) );
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (dist)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            field (empty)
        opAssignOp (-=)
        expr (call)
            fnValue (fnValue)
                ID (Math)
                index (empty)
                method (method)
                    ID (sqrt)
            exprList (list)
                expr (+)
                    expr (call)
                        fnValue (fnValue)
                            ID (Math)
                            index (empty)
                            method (method)
                                ID (pow)
                        exprList (list)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (field)
                                            ID (x)
                            expr (NUM)
                                NUM (2)
                    expr (call)
                        fnValue (fnValue)
                            ID (Math)
                            index (empty)
                            method (method)
                                ID (pow)
                        exprList (list)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                lValue (lValue)
                                                    ID (i)
                                                    index (empty)
                                                    field (empty)
                                        field (field)
                                            ID (y)
                            expr (NUM)
                                NUM (2)

376. // -- stmt "preInc"
line (comment)
    COMMENT ( -- stmt "preInc")

377. ++x;
line (stmt)
    stmt (preInc)
        lValue (lValue)
            ID (x)
            index (empty)
            field (empty)

378. ++x.y;
line (stmt)
    stmt (preInc)
        lValue (lValue)
            ID (x)
            index (empty)
            field (field)
                ID (y)

379. ++a[i];
line (stmt)
    stmt (preInc)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            field (empty)

380. ++a[i].x;
line (stmt)
    stmt (preInc)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            field (field)
                ID (x)

381. // -- stmt "preDec"
line (comment)
    COMMENT ( -- stmt "preDec")

382. --x;
line (stmt)
    stmt (preDec)
        lValue (lValue)
            ID (x)
            index (empty)
            field (empty)

383. --x.y;
line (stmt)
    stmt (preDec)
        lValue (lValue)
            ID (x)
            index (empty)
            field (field)
                ID (y)

384. --a[i];
line (stmt)
    stmt (preDec)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            field (empty)

385. --a[i].x;
line (stmt)
    stmt (preDec)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            field (field)
                ID (x)

386. // -- stmt "postInc"
line (comment)
    COMMENT ( -- stmt "postInc")

387. x++;
line (stmt)
    stmt (postInc)
        lValue (lValue)
            ID (x)
            index (empty)
            field (empty)

388. x.y++;
line (stmt)
    stmt (postInc)
        lValue (lValue)
            ID (x)
            index (empty)
            field (field)
                ID (y)

389. a[i]++;
line (stmt)
    stmt (postInc)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            field (empty)

390. a[i].x++;
line (stmt)
    stmt (postInc)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            field (field)
                ID (x)

391. // -- stmt "postDec"
line (comment)
    COMMENT ( -- stmt "postDec")

392. x--;
line (stmt)
    stmt (postDec)
        lValue (lValue)
            ID (x)
            index (empty)
            field (empty)

393. x.y--;
line (stmt)
    stmt (postDec)
        lValue (lValue)
            ID (x)
            index (empty)
            field (field)
                ID (y)

394. a[i]--;
line (stmt)
    stmt (postDec)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            field (empty)

395. a[i].x--;
line (stmt)
    stmt (postDec)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            field (field)
                ID (x)

396. // -- break
line (comment)
    COMMENT ( -- break)

397. break;
line (stmt)
    stmt (break)

398. 
line (blank)

399. // "varInit",       "ID", "ID", "=", expr, ";"
line (comment)
    COMMENT ( "varInit",       "ID", "ID", "=", expr, ";")

400. // -- expr is a primaryExpr
line (comment)
    COMMENT ( -- expr is a primaryExpr)

401. int i = 0;
line (varInit)
    ID (int)
    ID (i)
    expr (NUM)
        NUM (0)

402. double c = 2.99792458e+8;
line (varInit)
    ID (double)
    ID (c)
    expr (NUM)
        NUM (2.99792458e+8)

403. boolean b = true;
line (varInit)
    ID (boolean)
    ID (b)
    expr (BOOL)
        BOOL (true)

404. String greeting = "hello";
line (varInit)
    ID (String)
    ID (greeting)
    expr (STR)
        STR ("hello")

405. int x = foo();
line (varInit)
    ID (int)
    ID (x)
    expr (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (empty)

406. double y = bar("foo");
line (varInit)
    ID (double)
    ID (y)
    expr (call)
        fnValue (fnValue)
            ID (bar)
            index (empty)
            method (empty)
        exprList (list)
            expr (STR)
                STR ("foo")

407. boolean b = x;
line (varInit)
    ID (boolean)
    ID (b)
    expr (lValue)
        lValue (lValue)
            ID (x)
            index (empty)
            field (empty)

408. String s = x.y;
line (varInit)
    ID (String)
    ID (s)
    expr (lValue)
        lValue (lValue)
            ID (x)
            index (empty)
            field (field)
                ID (y)

409. GameObj g = arr[index];
line (varInit)
    ID (GameObj)
    ID (g)
    expr (lValue)
        lValue (lValue)
            ID (arr)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (index)
                        index (empty)
                        field (empty)
            field (empty)

410. double x = arr[i].x;
line (varInit)
    ID (double)
    ID (x)
    expr (lValue)
        lValue (lValue)
            ID (arr)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            field (field)
                ID (x)

411. int i = (j);
line (varInit)
    ID (int)
    ID (i)
    expr (exprParens)
        expr (lValue)
            lValue (lValue)
                ID (j)
                index (empty)
                field (empty)

412. double d = -123.e-56;
line (varInit)
    ID (double)
    ID (d)
    expr (neg)
        expr (NUM)
            NUM (123.e-56)

413. boolean b = !b;
line (varInit)
    ID (boolean)
    ID (b)
    expr (!)
        expr (lValue)
            lValue (lValue)
                ID (b)
                index (empty)
                field (empty)

414. // -- expr is not a primaryExpr
line (comment)
    COMMENT ( -- expr is not a primaryExpr)

415. int m = (s + e) / 2;
line (varInit)
    ID (int)
    ID (m)
    expr (/)
        expr (exprParens)
            expr (+)
                expr (lValue)
                    lValue (lValue)
                        ID (s)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (e)
                        index (empty)
                        field (empty)
        expr (NUM)
            NUM (2)

416. int mid = start + (end - start) / 2;
line (varInit)
    ID (int)
    ID (mid)
    expr (+)
        expr (lValue)
            lValue (lValue)
                ID (start)
                index (empty)
                field (empty)
        expr (/)
            expr (exprParens)
                expr (-)
                    expr (lValue)
                        lValue (lValue)
                            ID (end)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (start)
                            index (empty)
                            field (empty)
            expr (NUM)
                NUM (2)

417. double dotProduct = x1 * y1 + x2 * y2 + x3 * y3;
line (varInit)
    ID (double)
    ID (dotProduct)
    expr (+)
        expr (+)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (x1)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y1)
                        index (empty)
                        field (empty)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (x2)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y2)
                        index (empty)
                        field (empty)
        expr (*)
            expr (lValue)
                lValue (lValue)
                    ID (x3)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y3)
                    index (empty)
                    field (empty)

418. double avg = (x[0] + x[1] + x[2] + x[3]) / 4.0;
line (varInit)
    ID (double)
    ID (avg)
    expr (/)
        expr (exprParens)
            expr (+)
                expr (+)
                    expr (+)
                        expr (lValue)
                            lValue (lValue)
                                ID (x)
                                index (index)
                                    expr (NUM)
                                        NUM (0)
                                field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (x)
                                index (index)
                                    expr (NUM)
                                        NUM (1)
                                field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (index)
                                expr (NUM)
                                    NUM (2)
                            field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (index)
                            expr (NUM)
                                NUM (3)
                        field (empty)
        expr (NUM)
            NUM (4.0)

419. double avg = sum(arr) / arr.length;
line (varInit)
    ID (double)
    ID (avg)
    expr (/)
        expr (call)
            fnValue (fnValue)
                ID (sum)
                index (empty)
                method (empty)
            exprList (list)
                expr (lValue)
                    lValue (lValue)
                        ID (arr)
                        index (empty)
                        field (empty)
        expr (lValue)
            lValue (lValue)
                ID (arr)
                index (empty)
                field (field)
                    ID (length)

420. GameObj b = bullets[i];
line (varInit)
    ID (GameObj)
    ID (b)
    expr (lValue)
        lValue (lValue)
            ID (bullets)
            index (index)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
            field (empty)

421. double dist = Math.sqrt( Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2) );
line (varInit)
    ID (double)
    ID (dist)
    expr (call)
        fnValue (fnValue)
            ID (Math)
            index (empty)
            method (method)
                ID (sqrt)
        exprList (list)
            expr (+)
                expr (call)
                    fnValue (fnValue)
                        ID (Math)
                        index (empty)
                        method (method)
                            ID (pow)
                    exprList (list)
                        expr (-)
                            expr (lValue)
                                lValue (lValue)
                                    ID (a)
                                    index (empty)
                                    field (field)
                                        ID (x)
                            expr (lValue)
                                lValue (lValue)
                                    ID (b)
                                    index (empty)
                                    field (field)
                                        ID (x)
                        expr (NUM)
                            NUM (2)
                expr (call)
                    fnValue (fnValue)
                        ID (Math)
                        index (empty)
                        method (method)
                            ID (pow)
                    exprList (list)
                        expr (-)
                            expr (lValue)
                                lValue (lValue)
                                    ID (a)
                                    index (empty)
                                    field (field)
                                        ID (y)
                            expr (lValue)
                                lValue (lValue)
                                    ID (b)
                                    index (empty)
                                    field (field)
                                        ID (y)
                        expr (NUM)
                            NUM (2)

422. boolean b = ( x || y ) && ( x || z );
line (varInit)
    ID (boolean)
    ID (b)
    expr (&&)
        expr (exprParens)
            expr (||)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (empty)
                        field (empty)
        expr (exprParens)
            expr (||)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (z)
                        index (empty)
                        field (empty)

423. boolean b = ( x && ( (y || z) && !w ) );
line (varInit)
    ID (boolean)
    ID (b)
    expr (exprParens)
        expr (&&)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (exprParens)
                expr (&&)
                    expr (exprParens)
                        expr (||)
                            expr (lValue)
                                lValue (lValue)
                                    ID (y)
                                    index (empty)
                                    field (empty)
                            expr (lValue)
                                lValue (lValue)
                                    ID (z)
                                    index (empty)
                                    field (empty)
                    expr (!)
                        expr (lValue)
                            lValue (lValue)
                                ID (w)
                                index (empty)
                                field (empty)

424. 
line (blank)

425. // "varDecl",       "ID", idList, ";"
line (comment)
    COMMENT ( "varDecl",       "ID", idList, ";")

426. int x;
line (varDecl)
    ID (int)
    idList (list)
        ID (x)

427. double x1, x2;
line (varDecl)
    ID (double)
    idList (list)
        ID (x1)
        ID (x2)

428. double x_1, x_2, x_3;
line (varDecl)
    ID (double)
    idList (list)
        ID (x_1)
        ID (x_2)
        ID (x_3)

429. boolean paused, turboModeOn, cheatModeOn;
line (varDecl)
    ID (boolean)
    idList (list)
        ID (paused)
        ID (turboModeOn)
        ID (cheatModeOn)

430. String city, state, zip;
line (varDecl)
    ID (String)
    idList (list)
        ID (city)
        ID (state)
        ID (zip)

431. 
line (blank)

432. // "constInit",      "final", "ID", "ID", "=", expr, ";"
line (comment)
    COMMENT ( "constInit",      "final", "ID", "ID", "=", expr, ";")

433. final int MAX_VALUE = 100;
line (constInit)
    ID (int)
    ID (MAX_VALUE)
    expr (NUM)
        NUM (100)

434. final double MAX_VAL_DOUBLE = 1.0 * MAX_VALUE;
line (constInit)
    ID (double)
    ID (MAX_VAL_DOUBLE)
    expr (*)
        expr (NUM)
            NUM (1.0)
        expr (lValue)
            lValue (lValue)
                ID (MAX_VALUE)
                index (empty)
                field (empty)

435. final int MAX = max(arr, len);
line (constInit)
    ID (int)
    ID (MAX)
    expr (call)
        fnValue (fnValue)
            ID (max)
            index (empty)
            method (empty)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (arr)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (len)
                    index (empty)
                    field (empty)

436. final String NAME = "Max";
line (constInit)
    ID (String)
    ID (NAME)
    expr (STR)
        STR ("Max")

437. final GameObj foo = bar;
line (constInit)
    ID (GameObj)
    ID (foo)
    expr (lValue)
        lValue (lValue)
            ID (bar)
            index (empty)
            field (empty)

438. final boolean FOO = !bar || (p && !q);
line (constInit)
    ID (boolean)
    ID (FOO)
    expr (||)
        expr (!)
            expr (lValue)
                lValue (lValue)
                    ID (bar)
                    index (empty)
                    field (empty)
        expr (exprParens)
            expr (&&)
                expr (lValue)
                    lValue (lValue)
                        ID (p)
                        index (empty)
                        field (empty)
                expr (!)
                    expr (lValue)
                        lValue (lValue)
                            ID (q)
                            index (empty)
                            field (empty)

439. final int N = 1 - a * ( b + c ) / 2;
line (constInit)
    ID (int)
    ID (N)
    expr (-)
        expr (NUM)
            NUM (1)
        expr (/)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (a)
                        index (empty)
                        field (empty)
                expr (exprParens)
                    expr (+)
                        expr (lValue)
                            lValue (lValue)
                                ID (b)
                                index (empty)
                                field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (c)
                                index (empty)
                                field (empty)
            expr (NUM)
                NUM (2)

440. final double WIDTH = ct.getWidth();
line (constInit)
    ID (double)
    ID (WIDTH)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (getWidth)
        exprList (empty)

441. final int X0 = x[0];
line (constInit)
    ID (int)
    ID (X0)
    expr (lValue)
        lValue (lValue)
            ID (x)
            index (index)
                expr (NUM)
                    NUM (0)
            field (empty)

442. final boolean FOO = bar[i].x + Math.sqrt(z);
line (constInit)
    ID (boolean)
    ID (FOO)
    expr (+)
        expr (lValue)
            lValue (lValue)
                ID (bar)
                index (index)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                            index (empty)
                            field (empty)
                field (field)
                    ID (x)
        expr (call)
            fnValue (fnValue)
                ID (Math)
                index (empty)
                method (method)
                    ID (sqrt)
            exprList (list)
                expr (lValue)
                    lValue (lValue)
                        ID (z)
                        index (empty)
                        field (empty)

443. 
line (blank)

444. // "func", 		access, retType, "ID", "(", paramList, ")"
line (comment)
    COMMENT ( "func", 		access, retType, "ID", "(", paramList, ")")

445. public void foo()
line (func)
    access (public)
    retType (void)
    ID (foo)
    paramList (empty)

446. public int foo()
line (func)
    access (public)
    retType (value)
        ID (int)
    ID (foo)
    paramList (empty)

447. public boolean foo2(double x)
line (func)
    access (public)
    retType (value)
        ID (boolean)
    ID (foo2)
    paramList (list)
        param (var)
            ID (double)
            ID (x)

448. public double foo(int[] arr)
line (func)
    access (public)
    retType (value)
        ID (double)
    ID (foo)
    paramList (list)
        param (array)
            ID (int)
            ID (arr)

449. public String foo_bar(double x1, boolean b_2, GameObj gameObj)
line (func)
    access (public)
    retType (value)
        ID (String)
    ID (foo_bar)
    paramList (list)
        param (var)
            ID (double)
            ID (x1)
        param (var)
            ID (boolean)
            ID (b_2)
        param (var)
            ID (GameObj)
            ID (gameObj)

450. public GameObj fooBar(GameObj[] objs, boolean [] bs, double []ds, int []  is)
line (func)
    access (public)
    retType (value)
        ID (GameObj)
    ID (fooBar)
    paramList (list)
        param (array)
            ID (GameObj)
            ID (objs)
        param (array)
            ID (boolean)
            ID (bs)
        param (array)
            ID (double)
            ID (ds)
        param (array)
            ID (int)
            ID (is)

451. public int[] foo()
line (func)
    access (public)
    retType (array)
        ID (int)
    ID (foo)
    paramList (empty)

452. public double[] foo()
line (func)
    access (public)
    retType (array)
        ID (double)
    ID (foo)
    paramList (empty)

453. void foo()
line (func)
    access (empty)
    retType (void)
    ID (foo)
    paramList (empty)

454. int foo123()
line (func)
    access (empty)
    retType (value)
        ID (int)
    ID (foo123)
    paramList (empty)

455. boolean foo2(double x)
line (func)
    access (empty)
    retType (value)
        ID (boolean)
    ID (foo2)
    paramList (list)
        param (var)
            ID (double)
            ID (x)

456. double foo(int[] arr)
line (func)
    access (empty)
    retType (value)
        ID (double)
    ID (foo)
    paramList (list)
        param (array)
            ID (int)
            ID (arr)

457. String foo_bar(double[] x1s, boolean b_2, GameObj gameObj)
line (func)
    access (empty)
    retType (value)
        ID (String)
    ID (foo_bar)
    paramList (list)
        param (array)
            ID (double)
            ID (x1s)
        param (var)
            ID (boolean)
            ID (b_2)
        param (var)
            ID (GameObj)
            ID (gameObj)

458. GameObj fooBar(GameObj obj, boolean [] bs, double []ds, int []  is)
line (func)
    access (empty)
    retType (value)
        ID (GameObj)
    ID (fooBar)
    paramList (list)
        param (var)
            ID (GameObj)
            ID (obj)
        param (array)
            ID (boolean)
            ID (bs)
        param (array)
            ID (double)
            ID (ds)
        param (array)
            ID (int)
            ID (is)

459. GameObj[] myMethod(GameObj[] objs)
line (func)
    access (empty)
    retType (array)
        ID (GameObj)
    ID (myMethod)
    paramList (list)
        param (array)
            ID (GameObj)
            ID (objs)

460. 
line (blank)

461. // "begin",			"{"
line (comment)
    COMMENT ( "begin",			"{")

462. {
line (begin)

463. 
line (blank)

464. // "end",			"}"
line (comment)
    COMMENT ( "end",			"}")

465. }
line (end)

466. 
line (blank)

467. // "if",			"if", "(", expr, ")"
line (comment)
    COMMENT ( "if",			"if", "(", expr, ")")

468. if (true)
line (if)
    expr (BOOL)
        BOOL (true)

469. 
line (blank)

470. // "elseif",		"else", "if", "(", expr, ")"
line (comment)
    COMMENT ( "elseif",		"else", "if", "(", expr, ")")

471. else if ( true )
line (elseif)
    expr (BOOL)
        BOOL (true)

472. 
line (blank)

473. // "else"
line (comment)
    COMMENT ( "else")

474. else
line (else)

475. 
line (blank)

476. // "return",			"return", expr, ";"
line (comment)
    COMMENT ( "return",			"return", expr, ";")

477. return 0;
line (return)
    expr (NUM)
        NUM (0)

478. 
line (blank)

479. // "do"
line (comment)
    COMMENT ( "do")

480. do
line (do)

481. 
line (blank)

482. // "while",				"while", "(", expr, whileEnd
line (comment)
    COMMENT ( "while",				"while", "(", expr, whileEnd)

483. while (true)
line (while)
    expr (BOOL)
        BOOL (true)
    whileEnd (while)

484. while (true);
line (while)
    expr (BOOL)
        BOOL (true)
    whileEnd (do-while)

485. 
line (blank)

486. // "for",				"for", "(", forControl, ")"
line (comment)
    COMMENT ( "for",				"for", "(", forControl, ")")

487. // -- forControl "three"
line (comment)
    COMMENT ( -- forControl "three")

488. for ( i = 0 ; i < n ; i++ )
line (for)
    forControl (three)
        forInit (stmt)
            stmt (varAssign)
                ID (i)
                expr (NUM)
                    NUM (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (n)
                        index (empty)
                        field (empty)
        forNext (stmt)
            stmt (postInc)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)

489. for ( int i = 0 ; i < n ; i++ )
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (n)
                        index (empty)
                        field (empty)
        forNext (stmt)
            stmt (postInc)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)

490. for ( i = 0 ; ; )
line (for)
    forControl (three)
        forInit (stmt)
            stmt (varAssign)
                ID (i)
                expr (NUM)
                    NUM (0)
        forExpr (empty)
        forNext (empty)

491. for ( int i = 0 ; ; )
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (0)
        forExpr (empty)
        forNext (empty)

492. for ( ; i < n ; )
line (for)
    forControl (three)
        forInit (empty)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (n)
                        index (empty)
                        field (empty)
        forNext (empty)

493. for ( ; ; i++ )
line (for)
    forControl (three)
        forInit (empty)
        forExpr (empty)
        forNext (stmt)
            stmt (postInc)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)

494. for ( ; ; )
line (for)
    forControl (three)
        forInit (empty)
        forExpr (empty)
        forNext (empty)

495. // -- forControl "array"
line (comment)
    COMMENT ( -- forControl "array")

496. for ( GameObj g : gameObjs )
line (for)
    forControl (array)
        ID (GameObj)
        ID (g)
        ID (gameObjs)

497. 
line (blank)

498. // "arrayInit",		"ID", "[", "]", "ID", "=", arrayInit, ";"
line (comment)
    COMMENT ( "arrayInit",		"ID", "[", "]", "ID", "=", arrayInit, ";")

499. int[] a = {};
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (list)
        exprList (empty)

500. double[] a = { 1 };
line (arrayInit)
    ID (double)
    ID (a)
    arrayInit (list)
        exprList (list)
            expr (NUM)
                NUM (1)

501. boolean[] a = { 1, 2, 3 };
line (arrayInit)
    ID (boolean)
    ID (a)
    arrayInit (list)
        exprList (list)
            expr (NUM)
                NUM (1)
            expr (NUM)
                NUM (2)
            expr (NUM)
                NUM (3)

502. GameObj[] a = new GameObj[100];
line (arrayInit)
    ID (GameObj)
    ID (a)
    arrayInit (expr)
        expr (newArray)
            ID (GameObj)
            expr (NUM)
                NUM (100)

503. 
line (blank)

504. // "arrayDecl",		"ID", "[", "]", idList, ";"
line (comment)
    COMMENT ( "arrayDecl",		"ID", "[", "]", idList, ";")

505. String[] a;
line (arrayDecl)
    ID (String)
    idList (list)
        ID (a)

506. int[] a, b, c;
line (arrayDecl)
    ID (int)
    idList (list)
        ID (a)
        ID (b)
        ID (c)

507. 
line (blank)

508. // "importCode12",	"import", "ID", ".", "*", ";"
line (comment)
    COMMENT ( "importCode12",	"import", "ID", ".", "*", ";")

509. import Code12.*;
line (importCode12)
    ID (Code12)

510. 
line (blank)

511. // "class",			"class", "ID",
line (comment)
    COMMENT ( "class",			"class", "ID",)

512. class Foo
line (class)
    ID (Foo)

513. 
line (blank)

514. // "classUser",		"class", "ID", "extends", "ID"
line (comment)
    COMMENT ( "classUser",		"class", "ID", "extends", "ID")

515. class TestProgram extends Code12Program
line (classUser)
    access (empty)
    ID (TestProgram)
    ID (Code12Program)

516. 
line (blank)

517. // "classUserPub",	"public", "class", "ID", "extends", "ID"
line (comment)
    COMMENT ( "classUserPub",	"public", "class", "ID", "extends", "ID")

518. public class TestProgram extends Code12Program
line (classUser)
    access (public)
    ID (TestProgram)
    ID (Code12Program)

519. 
line (blank)

520. // "main",			"public", "static", "void", "ID", "(", "ID", "[", "]", "ID", ")"
line (comment)
    COMMENT ( "main",			"public", "static", "void", "ID", "(", "ID", "[", "]", "ID", ")")

521. public static void main(String[] args)
line (main)
    ID (main)
    ID (String)
    ID (args)

522. 
line (blank)

523. // "Code12Run",		"ID", ".", "ID", "(", "new", "ID", "(", ")", ")", ";"
line (comment)
    COMMENT ( "Code12Run",		"ID", ".", "ID", "(", "new", "ID", "(", ")", ")", ";")

524. Code12.run(new TestProgram());
line (Code12Run)
    ID (Code12)
    ID (run)
    ID (TestProgram)

525. 
line (blank)

526. }
line (end)

527. 
line (blank)

528. public void onMousePress(GameObj obj, double x, double y)
line (func)
    access (public)
    retType (void)
    ID (onMousePress)
    paramList (list)
        param (var)
            ID (GameObj)
            ID (obj)
        param (var)
            ID (double)
            ID (x)
        param (var)
            ID (double)
            ID (y)

529. {
line (begin)

530. // Pop bubbles that get clicked
line (comment)
    COMMENT ( Pop bubbles that get clicked)

531. if (obj != null)
line (if)
    expr (!=)
        expr (lValue)
            lValue (lValue)
                ID (obj)
                index (empty)
                field (empty)
        expr (NULL)
            NULL (null)

532. {
line (begin)

533. obj.delete();
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (obj)
            index (empty)
            method (method)
                ID (delete)
        exprList (empty)

534. ct.sound("pop.wav");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (sound)
        exprList (list)
            expr (STR)
                STR ("pop.wav")

535. }
line (end)

536. }
line (end)

537. }
line (end)

538. 
line (blank)

539. ////////////////////////////////////////////////////////////////////
line (comment)
    COMMENT (//////////////////////////////////////////////////////////////////)

540. ERRORS
************** Beginning of Expected Errors Section **************

541. 
line (blank)

542. // Lexical errors
line (comment)
    COMMENT ( Lexical errors)

543. @               // invalid character
*** Location 543.1 to 543.1: Invalid character

544. foo('a');       // char literals not supported
*** Location 544.5 to 544.5: char type not supported, use double quotes

545. foo(" );        // unclosed string literal
*** Location 545.5 to 545.43: Unclosed string literal

546. foo("\);        // unclosed string literal ending in backslash
*** Location 546.6 to 546.7: Unsupported or illegal escape sequence

547. s = "\          // unclosed string literal ending in backslash
*** Location 547.6 to 547.7: Unsupported or illegal escape sequence

548. s = "\";        // unclosed string literal from escaped double quote
*** Location 548.5 to 548.68: Unclosed string literal

549. s = "\ ";       // illegal escape character
*** Location 549.6 to 549.7: Unsupported or illegal escape sequence

550. s = "\r";       // unsupported escape sequence
*** Location 550.6 to 550.7: Unsupported or illegal escape sequence

551. interface foo   // unsupported reserved word
*** Location 551.1 to 551.9: Unsupported reserved word "interface"

552. double 1stNumber; // variable name starting with a number
*** Line 552: Syntax error (unrecognized code)

553. x = obj.1stNumber; // field name starting with a number
*** Line 553: Syntax error (unrecognized code)

554. 
line (blank)

555. // Syntax errors
line (comment)
    COMMENT ( Syntax errors)

556. x = 10          // missing ; in stmt
*** Location 556.37 to 556.37: Statement should end with a semicolon (;)

557. int x = 10		// missing ; in varInit
*** Location 557.36 to 557.36: Variable declaration should end with a semicolon (;)

558. int x 			// missing ; in varDecl
*** Location 558.33 to 558.33: Variable declaration should end with a semicolon (;)

559. final int x = 10 // missing ; in constInit
*** Location 559.43 to 559.43: Variable declaration should end with a semicolon (;)

560. foo(x, );       // missing expr in exprList
*** Line 560: Syntax error (unrecognized code)

561. x = a + ;       // missing expr after binary op
*** Location 561.9 to 561.9: Expected expression after + operator
*** Reference 561.7 to 561.7

562. x = a ++ b;     // unexpected token after unary op
*** Line 562: Syntax error (unrecognized code)

563. x = a ** b;     // missing expression between binary ops
*** Location 563.8 to 563.8: Expected expression after * operator
*** Reference 563.7 to 563.7

564. x = a + b * ;   // missing expr after higher precedence binary op
*** Location 564.13 to 564.13: Expected expression after * operator
*** Reference 564.11 to 564.11

565. x = a * b + ;   // missing expr after lower precedence binary op
*** Location 565.13 to 565.13: Expected expression after + operator
*** Reference 565.11 to 565.11

566. x = ();         // missing expr in parentheses
*** Line 566: Syntax error (unrecognized code)

567. x = 10 + ! ;    // missing expr after unary op
*** Location 567.10 to 567.10: Expected expression after + operator
*** Reference 567.8 to 567.8

568. x = obj.3;      // expected ID after .
*** Line 568: Syntax error (unrecognized code)

569. x = 3.obj;      // ID expected before .
*** Line 569: Syntax error (unrecognized code)

570. if x == 3       // required next token in pattern doesn't match
*** Location 570.4 to 570.9: if statement test must be in parentheses

571. while i < max   // required next token in pattern doesn't match
*** Line 571: Syntax error (unrecognized code)

572. for i=0; i<num; i=i+1 // required next token in pattern doesn't match
*** Line 572: Syntax error (unrecognized code)

573. x + 3;          // no matching pattern
*** Line 573: Syntax error (unrecognized code)

574. x = 1,000;      // commas in numbers
*** Line 574: Syntax error (unrecognized code)

575. x = 1.23.45;    // too many decimal points
*** Line 575: Syntax error (unrecognized code)

576. x = 3.14e1.0;   // exponential notation with decimal point in exponent
*** Line 576: Syntax error (unrecognized code)

577. x = 3.14e;      // Invalid exponential notation
*** Location 577.5 to 577.10: Invalid exponential notation

578. x = 3.141e+;    // Invalid exponential notation
*** Location 578.5 to 578.12: Invalid exponential notation

579. x = 3.1415e-;   // Invalid exponential notation
*** Location 579.5 to 579.13: Invalid exponential notation

580. x = 3.14159e+exponent; // Invalid exponential notation
*** Location 580.5 to 580.14: Invalid exponential notation

581. x = 3.141592ee0;// Invalid exponential notation
*** Location 581.5 to 581.14: Invalid exponential notation

582. x = 3.141592EE0;// Invalid exponential notation
*** Location 582.5 to 582.14: Invalid exponential notation

583. x = 3e; 		// Invalid exponential notation
*** Location 583.5 to 583.7: Invalid exponential notation

584. x = .3E; 		// Invalid exponential notation
*** Location 584.5 to 584.8: Invalid exponential notation

585. foo(x,          // (incomplete line continued below)
-- Incomplete line carried forward

586. y)              // missing ;
*** Location 586.29 to 586.29: Statement should end with a semicolon (;)

587. x = (a + b + c / 3; 	// missing closing parenthesis
*** Line 587: Syntax error (unrecognized code)

588. x = foo(y, bar(z, w); 	// missing closing parenthesis w/ nested parentheses
*** Line 588: Syntax error (unrecognized code)

589. x = a + b + c ) / 3; 	// missing openning parenthesis
*** Line 589: Syntax error (unrecognized code)

590. if ( i == 1 	// missing closing parenthesis with if
*** Line 590: Syntax error (unrecognized code)

591. if ( i == 1 ); 	// if statment ended by ;
*** Location 591.14 to 591.14: if statement should not end with a semicolon

592. for ( i=0; i<n; i++); 	// for() followed directly by ;
*** Line 592: Syntax error (unrecognized code)

593. x + 1 = x; 		// confusing left hand side an right hand side of assignment
*** Line 593: Syntax error (unrecognized code)

594. 1000 = count; 	// confusing left hand side an right hand side of assignment
*** Line 594: Syntax error (unrecognized code)

595. if ( x => 3 ) 	// => instead of <=
*** Location 595.8 to 595.9: Invalid operator. Did you mean >= ?

596. if ( x =< 5 ) 	// =< instead of >=.
*** Location 596.8 to 596.9: Invalid operator. Did you mean <= ?

597. elseif( x > 2 ) // elseif instead of else if
*** Location 597.45 to 597.45: Statement should end with a semicolon (;)

598. for(int i=0, i<n, i++) 	// commas in place of semicolons
*** Location 598.12 to 598.12: for loop parts should be separated by semicolons (;)
Comma not supported

599. for(int i=0; i<n, i++) 	// comma in place of semicolon
*** Location 599.17 to 599.17: for loop parts should be separated by semicolons (;)
Comma not supported

600. for(int i=0: i<n: i++) 	// colons in place of semicolons
*** Line 600: Syntax error (unrecognized code)

601. for{int i=0; i<n; i++} 	// {} in place of ()
*** Line 601: Syntax error (unrecognized code)

602. for( x : arr ) 			// forgetting variable type
*** Line 602: Syntax error (unrecognized code)

603. for( int x; arr ) 		// using ; instead of :
*** Line 603: Syntax error (unrecognized code)

604. double foo(x, y, z) 	// missing variable types for arguments in function definition
*** Line 604: Syntax error (unrecognized code)

605. double foo[i]()			// index on function identifier
*** Line 605: Syntax error (unrecognized code)

606. ct.println; 			// missing parenteses for function call without arguments
*** Line 606: Syntax error (unrecognized code)

607. foo(int x, double y, GameObj z) 	// missing return type in function definition
*** Line 607: Syntax error (unrecognized code)

608. foo(int x, double y, GameObj z); 	// supplying variable types in function call
*** Line 608: Syntax error (unrecognized code)

609. boolean foo(int x, double y, GameObj z); // semicolon after function declaration
*** Location 609.40 to 609.40: function header should not end with a semicolon

610. String s = 'Hello'; 	// '' in place of "" for strings
*** Location 610.12 to 610.12: char type not supported, use double quotes

611. String s = "A long string
*** Location 611.12 to 611.25: Unclosed string literal

612. on more than one line";
*** Location 612.34 to 612.35: Unclosed string literal

613. ct.println("He said "Hello""); 	// not escaping double quotes in a string literal
*** Line 613: Syntax error (unrecognized code)

614. newObj() = oldObj; 				// assigning to a function value
*** Line 614: Syntax error (unrecognized code)

615. 
line (blank)

616. // Unsupported Java syntax
line (comment)
    COMMENT ( Unsupported Java syntax)

617. // --------------------------------------------------------------------------------
line (comment)
    COMMENT ( --------------------------------------------------------------------------------)

618. int x = 1, y = 2, z = 3;      // declaring and initializing multiple variables
*** Line 618: Code12 requires each variable initialization to be on its own line

619. import java.io.PrintWriter;   // import other than Code12.*
*** Line 619: import should be "Code12.*;"

620. int time = (int)( sec );      // type casting
*** Line 620: Syntax error (unrecognized code)

621. time %= 3600;                 // %= operator
*** Line 621: Syntax error (unrecognized code)

622. int numberOfDucks = (turboMode ? 100 : 1); // ?: operator
*** Location 622.32 to 622.32: Invalid character (The "? :" operator is not supported by Code12)

623. System.out.println("Hello world"); // classes other than GameObj and String
*** Line 623: Syntax error (unrecognized code)

624. char ch = 'a'; 	// char type
*** Location 624.11 to 624.11: char type not supported, use double quotes

625. while(foo) { 	// opening { in control structure not on it's own line
*** Line 625: Syntax error (unrecognized code)

626. i++; } 			// closing } not on it's own line
*** Location 626.6 to 626.6: Code12 only allows one statement per line

627. String s = "A long string" +
*** Location 627.29 to 627.29: Expected expression after + operator
*** Reference 627.28 to 627.28

628. "on more than one line using concatenation";
*** Line 628: Syntax error (unrecognized code)

629. x = a; y = b; 	// more than one statement on a single line
*** Location 629.8 to 629.8: Code12 only allows one statement per line

630. if (x == 0) ct.println("x is zero"); // control structures must be on their own lines
*** Location 630.4 to 630.11: if statement test must be in parentheses

631. double getVariable() { return variable; } // {} must start and end on their own lines
*** Line 631: Syntax error (unrecognized code)

632. switch (choice)
*** Location 632.1 to 632.6: Unsupported reserved word "switch"

633. continue;
*** Location 633.1 to 633.8: Unsupported reserved word "continue"

634. a[i++] = b[i++]; 	// increment/decrement only supported as statements
*** Line 634: Syntax error (unrecognized code)

635. obj.group.equals("targets"); 		// indexing more than one level at a time
*** Line 635: Syntax error (unrecognized code)

636. input.toLowerCase().equals("quit"); // indexing after function call
*** Line 636: Syntax error (unrecognized code)

637. newBullet().ySpeed = 0;
*** Line 637: Syntax error (unrecognized code)

638. final int N; 	// constant declaration without initialization
*** Line 638: Syntax error (unrecognized code)

639. for (int i = 0, int j = 0; ; ) // Comma in forInit, forNext
*** Location 639.15 to 639.15: for loop parts should be separated by semicolons (;)
Comma not supported

640. for ( ; ; i++, j++ ) 	// Comma in forInit, forNext
*** Line 640: Syntax error (unrecognized code)

641. int _var; // variable indentifiers starting with underscore
*** Location 641.5 to 641.8: Names cannot start with an underscore in Code12

642. int $var; // $
*** Location 642.5 to 642.5: The $ character is not allowed in Code12

643. double pay$;
*** Location 643.11 to 643.11: The $ character is not allowed in Code12
======= Test Complete =========================================

643 lines processed in 80 ms

0 unexpected errors
0 uncaught errors (95 expected errors)

SUCCESS
