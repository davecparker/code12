======= Test Started ==========================================

1. // import Code12.*;

2. 

3. // class BubblePop extends Code12Program

4. {
line (begin)

5. public static void main(String[] args)
line (func)
    access (publicStatic)
    retType (void)
    ID (main)
    paramList (list)
        param (array)
            TYPE (String)
            ID (args)

6. {
line (begin)

7. Code12.run(new BubblePop());
line (stmt)
    stmt (call)
        callHead (method)
            ID (Code12)
            ID (run)
        exprList (list)
            expr (new)
                ID (BubblePop)

8. }
line (end)

9. 

10. public void start()
line (func)
    access (public)
    retType (void)
    ID (start)

11. {
line (begin)

12. // Make the background

13. ct.setHeight(150);
line (stmt)
    stmt (call)
        callHead (ct)
            ID (setHeight)
        exprList (list)
            INT (150)

14. ct.setBackImage("underwater.jpg");
line (stmt)
    stmt (call)
        callHead (ct)
            ID (setBackImage)
        exprList (list)
            STR ("underwater.jpg")

15. }
line (end)

16. 

17. public void update()
line (func)
    access (public)
    retType (void)
    ID (update)

18. {
line (begin)

19. // Make bubbles at random times, positions, and sizes

20. if (ct.random(1, 20) == 1)
line (if)
    expr (==)
        expr (call)
            callHead (ct)
                ID (random)
            exprList (list)
                INT (1)
                INT (20)
        INT (1)

21. {
line (begin)

22. double x = ct.random(0, 100);
line (varInit)
    TYPE (double)
    ID (x)
    expr (call)
        callHead (ct)
            ID (random)
        exprList (list)
            INT (0)
            INT (100)

23. double y = ct.getHeight() + 25;
line (varInit)
    TYPE (double)
    ID (y)
    expr (+)
        expr (call)
            callHead (ct)
                ID (getHeight)
        INT (25)

24. double size = ct.random(5, 20);
line (varInit)
    TYPE (double)
    ID (size)
    expr (call)
        callHead (ct)
            ID (random)
        exprList (list)
            INT (5)
            INT (20)

25. GameObj bubble = ct.image("bubble.png",
-- Incomplete line carried forward

26. x, y,
-- Incomplete line carried forward

27. size);
line (varInit)
    TYPE (GameObj)
    ID (bubble)
    expr (call)
        callHead (ct)
            ID (image)
        exprList (list)
            STR ("bubble.png")
            expr (lValue)
                ID (x)
            expr (lValue)
                ID (y)
            expr (lValue)
                ID (size)

28. bubble.ySpeed = -1;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (bubble)
            field (field)
                ID (ySpeed)
        expr (neg)
            INT (1)

29. bubble.clickable = true;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (bubble)
            field (field)
                ID (clickable)
        BOOL (true)

30. GameObj bubbleCopy = bubble; // initialization of GameObj from another GameObj
line (varInit)
    TYPE (GameObj)
    ID (bubbleCopy)
    expr (lValue)
        ID (bubble)

31. int z; // declaration without initialization - primitive type
line (varDecl)
    TYPE (int)
    idList (list)
        ID (z)

32. int x, y, z; // declaring multiple variables
line (varDecl)
    TYPE (int)
    idList (list)
        ID (x)
        ID (y)
        ID (z)

33. z = -1 + 2; // assigning value with int and unary minus
line (stmt)
    stmt (assign)
        ID (z)
        expr (+)
            expr (neg)
                INT (1)
            INT (2)

34. z = 0.707; // assigning value with double
line (stmt)
    stmt (assign)
        ID (z)
        NUM (0.707)

35. z = .707; // no leading zero
line (stmt)
    stmt (assign)
        ID (z)
        NUM (.707)

36. z = -.707; // negative with no leading zero
line (stmt)
    stmt (assign)
        ID (z)
        expr (neg)
            NUM (.707)

37. bigNum = 1.23456E10; // exponential notation E
line (stmt)
    stmt (assign)
        ID (bigNum)
        NUM (1.23456E10)

38. bigNum = 1.23456e10; // exponential notation e
line (stmt)
    stmt (assign)
        ID (bigNum)
        NUM (1.23456e10)

39. bigNum = 1.23456e+123; // exponential notation e+
line (stmt)
    stmt (assign)
        ID (bigNum)
        NUM (1.23456e+123)

40. bigNum = -1.23456E103; // exponential notation -E
line (stmt)
    stmt (assign)
        ID (bigNum)
        expr (neg)
            NUM (1.23456E103)

41. bigNum = -1.23456E+103; // exponential notation -E+
line (stmt)
    stmt (assign)
        ID (bigNum)
        expr (neg)
            NUM (1.23456E+103)

42. littleNum = 1.23456E-9; // exponential notation E-
line (stmt)
    stmt (assign)
        ID (littleNum)
        NUM (1.23456E-9)

43. littleNum = -1.23456E-98; // exponential notation -E-
line (stmt)
    stmt (assign)
        ID (littleNum)
        expr (neg)
            NUM (1.23456E-98)

44. littleNum = 1.23456e-987; // exponential notation e-
line (stmt)
    stmt (assign)
        ID (littleNum)
        NUM (1.23456e-987)

45. littleNum = -1.23456e-9876; // exponential notation -e-
line (stmt)
    stmt (assign)
        ID (littleNum)
        expr (neg)
            NUM (1.23456e-9876)

46. x = .5e7; // exponential notation without leading digit before dot
line (stmt)
    stmt (assign)
        ID (x)
        NUM (.5e7)

47. x = 3.e8; // exponential notation without digit after dot
line (stmt)
    stmt (assign)
        ID (x)
        NUM (3.e8)

48. double x = 5.; // number with decimal point but no digits after
line (varInit)
    TYPE (double)
    ID (x)
    NUM (5.)

49. double xyz = ( 2 * x + y - 3.14 ) / z + 1.414; // initialization with expression
line (varInit)
    TYPE (double)
    ID (xyz)
    expr (+)
        expr (/)
            expr (exprParens)
                expr (-)
                    expr (+)
                        expr (*)
                            INT (2)
                            expr (lValue)
                                ID (x)
                        expr (lValue)
                            ID (y)
                    NUM (3.14)
            expr (lValue)
                ID (z)
        NUM (1.414)

50. double mean = (a + b + c) / 3;
line (varInit)
    TYPE (double)
    ID (mean)
    expr (/)
        expr (exprParens)
            expr (+)
                expr (+)
                    expr (lValue)
                        ID (a)
                    expr (lValue)
                        ID (b)
                expr (lValue)
                    ID (c)
        INT (3)

51. double y = m * x + b;
line (varInit)
    TYPE (double)
    ID (y)
    expr (+)
        expr (*)
            expr (lValue)
                ID (m)
            expr (lValue)
                ID (x)
        expr (lValue)
            ID (b)

52. z = p * r % q + w / x - y;
line (stmt)
    stmt (assign)
        ID (z)
        expr (-)
            expr (+)
                expr (%)
                    expr (*)
                        expr (lValue)
                            ID (p)
                        expr (lValue)
                            ID (r)
                    expr (lValue)
                        ID (q)
                expr (/)
                    expr (lValue)
                        ID (w)
                    expr (lValue)
                        ID (x)
            expr (lValue)
                ID (y)

53. y = a * x * x + b * x + c;
line (stmt)
    stmt (assign)
        ID (y)
        expr (+)
            expr (+)
                expr (*)
                    expr (*)
                        expr (lValue)
                            ID (a)
                        expr (lValue)
                            ID (x)
                    expr (lValue)
                        ID (x)
                expr (*)
                    expr (lValue)
                        ID (b)
                    expr (lValue)
                        ID (x)
            expr (lValue)
                ID (c)

54. y = (a * x * x) + (b * x) + c;
line (stmt)
    stmt (assign)
        ID (y)
        expr (+)
            expr (+)
                expr (exprParens)
                    expr (*)
                        expr (*)
                            expr (lValue)
                                ID (a)
                            expr (lValue)
                                ID (x)
                        expr (lValue)
                            ID (x)
                expr (exprParens)
                    expr (*)
                        expr (lValue)
                            ID (b)
                        expr (lValue)
                            ID (x)
            expr (lValue)
                ID (c)

55. double z2 = z * 2.0; // initialization from another variable
line (varInit)
    TYPE (double)
    ID (z2)
    expr (*)
        expr (lValue)
            ID (z)
        NUM (2.0)

56. x = (a + b) / 2 + (c - d) / 2; // multiple parentheses
line (stmt)
    stmt (assign)
        ID (x)
        expr (+)
            expr (/)
                expr (exprParens)
                    expr (+)
                        expr (lValue)
                            ID (a)
                        expr (lValue)
                            ID (b)
                INT (2)
            expr (/)
                expr (exprParens)
                    expr (-)
                        expr (lValue)
                            ID (c)
                        expr (lValue)
                            ID (d)
                INT (2)

57. x = ( ( a + b ) / c ) / 2; // nested parentheses
line (stmt)
    stmt (assign)
        ID (x)
        expr (/)
            expr (exprParens)
                expr (/)
                    expr (exprParens)
                        expr (+)
                            expr (lValue)
                                ID (a)
                            expr (lValue)
                                ID (b)
                    expr (lValue)
                        ID (c)
            INT (2)

58. x = y % 12; // mod operator
line (stmt)
    stmt (assign)
        ID (x)
        expr (%)
            expr (lValue)
                ID (y)
            INT (12)

59. 

60. // relational operators and if/else

61. if (count == 0)
line (if)
    expr (==)
        expr (lValue)
            ID (count)
        INT (0)

62. if (x != 10)
line (if)
    expr (!=)
        expr (lValue)
            ID (x)
        INT (10)

63. if (temp > 98.6)
line (if)
    expr (>)
        expr (lValue)
            ID (temp)
        NUM (98.6)

64. if ( temp <= 100 )
line (if)
    expr (<=)
        expr (lValue)
            ID (temp)
        INT (100)

65. else if (x >= 42)
line (elseif)
    expr (>=)
        expr (lValue)
            ID (x)
        INT (42)

66. else
line (else)

67. boolean differenceIsSmall = Math.abs(x - a) < eps;
line (varInit)
    TYPE (boolean)
    ID (differenceIsSmall)
    expr (<)
        expr (call)
            callHead (Math)
                ID (abs)
            exprList (list)
                expr (-)
                    expr (lValue)
                        ID (x)
                    expr (lValue)
                        ID (a)
        expr (lValue)
            ID (eps)

68. 

69. // Strings

70. String greeting; //  declaration without initialization - String type
line (varDecl)
    TYPE (String)
    idList (list)
        ID (greeting)

71. greeting = "hello"; // assigning value to a string
line (stmt)
    stmt (assign)
        ID (greeting)
        STR ("hello")

72. String greeting2 = "hello there"; // declaration with initialization - String type
line (varInit)
    TYPE (String)
    ID (greeting2)
    STR ("hello there")

73. String greeting3 = greeting1; // declaration with initialization from another variable's value
line (varInit)
    TYPE (String)
    ID (greeting3)
    expr (lValue)
        ID (greeting1)

74. String greeting4 = greeting1 + " " + "world"; // declaration with concatenation
line (varInit)
    TYPE (String)
    ID (greeting4)
    expr (+)
        expr (+)
            expr (lValue)
                ID (greeting1)
            STR (" ")
        STR ("world")

75. String greeting5 = greeting2.substring(0, 6); // declaration with String method
line (varInit)
    TYPE (String)
    ID (greeting5)
    expr (call)
        callHead (method)
            ID (greeting2)
            ID (substring)
        exprList (list)
            INT (0)
            INT (6)

76. s = "boolean variable b = " + true; // String concatenation with boolean
line (stmt)
    stmt (assign)
        ID (s)
        expr (+)
            STR ("boolean variable b = ")
            BOOL (true)

77. s = "line1\nline2"; // String with newline
line (stmt)
    stmt (assign)
        ID (s)
        STR ("line1\nline2")

78. s = "\"Hello,\" he said."; // String with escaped quotes
line (stmt)
    stmt (assign)
        ID (s)
        STR ("\"Hello,\" he said.")

79. ct.println("He said 'Hello'"); // String with single quotes
line (stmt)
    stmt (call)
        callHead (ct)
            ID (println)
        exprList (list)
            STR ("He said 'Hello'")

80. docsDir = "C:\\Users\\Ben\\Documents\\"; // String with escaped backslash
line (stmt)
    stmt (assign)
        ID (docsDir)
        STR ("C:\\Users\\Ben\\Documents\\")

81. ct.println( "I\tneed\tmy\tspace" ); // String with escaped tab
line (stmt)
    stmt (call)
        callHead (ct)
            ID (println)
        exprList (list)
            STR ("I\tneed\tmy\tspace")

82. input = input.toUpperCase(); // method call
line (stmt)
    stmt (assign)
        ID (input)
        expr (call)
            callHead (method)
                ID (input)
                ID (toUpperCase)

83. i_dont_like_camel_case = "butItTakesLessKeystrokes"; // variable identifier with underscores
line (stmt)
    stmt (assign)
        ID (i_dont_like_camel_case)
        STR ("butItTakesLessKeystrokes")

84. 

85. // loops

86. for (int i = 0; i < 10; i++)
line (for)
    forControl (three)
        forInit (var)
            TYPE (int)
            ID (i)
            INT (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    ID (i)
                INT (10)
        forNext (stmt)
            stmt (postInc)
                ID (i)

87. for (i = 0; i < 10; i = i + 2)
line (for)
    forControl (three)
        forInit (stmt)
            stmt (assign)
                ID (i)
                INT (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    ID (i)
                INT (10)
        forNext (stmt)
            stmt (assign)
                ID (i)
                expr (+)
                    expr (lValue)
                        ID (i)
                    INT (2)

88. for (int i = 0; i < 100 && 2 * i < 50; i = i * 2)
line (for)
    forControl (three)
        forInit (var)
            TYPE (int)
            ID (i)
            INT (0)
        forExpr (expr)
            expr (&&)
                expr (<)
                    expr (lValue)
                        ID (i)
                    INT (100)
                expr (<)
                    expr (*)
                        INT (2)
                        expr (lValue)
                            ID (i)
                    INT (50)
        forNext (stmt)
            stmt (assign)
                ID (i)
                expr (*)
                    expr (lValue)
                        ID (i)
                    INT (2)

89. for (int i = 100; i > 0; i--)
line (for)
    forControl (three)
        forInit (var)
            TYPE (int)
            ID (i)
            INT (100)
        forExpr (expr)
            expr (>)
                expr (lValue)
                    ID (i)
                INT (0)
        forNext (stmt)
            stmt (postDec)
                ID (i)

90. for (int i = 10; i > 0; i = i - 2)
line (for)
    forControl (three)
        forInit (var)
            TYPE (int)
            ID (i)
            INT (10)
        forExpr (expr)
            expr (>)
                expr (lValue)
                    ID (i)
                INT (0)
        forNext (stmt)
            stmt (assign)
                ID (i)
                expr (-)
                    expr (lValue)
                        ID (i)
                    INT (2)

91. for (int i = 0; i < len; i++)
line (for)
    forControl (three)
        forInit (var)
            TYPE (int)
            ID (i)
            INT (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    ID (i)
                expr (lValue)
                    ID (len)
        forNext (stmt)
            stmt (postInc)
                ID (i)

92. for (int i = 0; i < arr.length; i++)
line (for)
    forControl (three)
        forInit (var)
            TYPE (int)
            ID (i)
            INT (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    ID (i)
                expr (lValue)
                    lValue (lValue)
                        ID (arr)
                        field (field)
                            ID (length)
        forNext (stmt)
            stmt (postInc)
                ID (i)

93. for (GameObj bullet : bullets )
line (for)
    forControl (array)
        TYPE (GameObj)
        ID (bullet)
        expr (lValue)
            ID (bullets)

94. 

95. while (j < 100)
line (while)
    expr (<)
        expr (lValue)
            ID (j)
        INT (100)
    whileEnd (while)

96. do
line (do)

97. while (j < 100);
line (while)
    expr (<)
        expr (lValue)
            ID (j)
        INT (100)
    whileEnd (doWhile)

98. while (j < foo && i != bar);
line (while)
    expr (&&)
        expr (<)
            expr (lValue)
                ID (j)
            expr (lValue)
                ID (foo)
        expr (!=)
            expr (lValue)
                ID (i)
            expr (lValue)
                ID (bar)
    whileEnd (doWhile)

99. while (j >= 100);
line (while)
    expr (>=)
        expr (lValue)
            ID (j)
        INT (100)
    whileEnd (doWhile)

100. while (j <= foo && i != bar);
line (while)
    expr (&&)
        expr (<=)
            expr (lValue)
                ID (j)
            expr (lValue)
                ID (foo)
        expr (!=)
            expr (lValue)
                ID (i)
            expr (lValue)
                ID (bar)
    whileEnd (doWhile)

101. while (i < max && notFound)
line (while)
    expr (&&)
        expr (<)
            expr (lValue)
                ID (i)
            expr (lValue)
                ID (max)
        expr (lValue)
            ID (notFound)
    whileEnd (while)

102. 

103. // arrays

104. int[] a;
line (arrayDecl)
    TYPE (int)
    idList (list)
        ID (a)

105. int[] a = new int[100];
line (arrayInit)
    TYPE (int)
    ID (a)
    arrayInit (expr)
        expr (newArray)
            TYPE (int)
            INT (100)

106. int[] a = new int[foo];
line (arrayInit)
    TYPE (int)
    ID (a)
    arrayInit (expr)
        expr (newArray)
            TYPE (int)
            expr (lValue)
                ID (foo)

107. int[] a = new int[b.length * 2];
line (arrayInit)
    TYPE (int)
    ID (a)
    arrayInit (expr)
        expr (newArray)
            TYPE (int)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (b)
                        field (field)
                            ID (length)
                INT (2)

108. int[] a = {1, 2, 3};
line (arrayInit)
    TYPE (int)
    ID (a)
    arrayInit (list)
        exprList (list)
            INT (1)
            INT (2)
            INT (3)

109. int[] a = { 1,
-- Incomplete line carried forward

110. 2,
-- Incomplete line carried forward

111. 3};
line (arrayInit)
    TYPE (int)
    ID (a)
    arrayInit (list)
        exprList (list)
            INT (1)
            INT (2)
            INT (3)

112. int[] a = b;
line (arrayInit)
    TYPE (int)
    ID (a)
    arrayInit (expr)
        expr (lValue)
            ID (b)

113. double[] data = new double[1000];
line (arrayInit)
    TYPE (double)
    ID (data)
    arrayInit (expr)
        expr (newArray)
            TYPE (double)
            INT (1000)

114. String[] greetings = {"hello", "hola", "bonjour"};
line (arrayInit)
    TYPE (String)
    ID (greetings)
    arrayInit (list)
        exprList (list)
            STR ("hello")
            STR ("hola")
            STR ("bonjour")

115. GameObj[] targets;
line (arrayDecl)
    TYPE (GameObj)
    idList (list)
        ID (targets)

116. GameObj[] targets = new GameObj[100];
line (arrayInit)
    TYPE (GameObj)
    ID (targets)
    arrayInit (expr)
        expr (newArray)
            TYPE (GameObj)
            INT (100)

117. GameObj[] targets = new GameObj[numTargets];
line (arrayInit)
    TYPE (GameObj)
    ID (targets)
    arrayInit (expr)
        expr (newArray)
            TYPE (GameObj)
            expr (lValue)
                ID (numTargets)

118. foo = bar[i];
line (stmt)
    stmt (assign)
        ID (foo)
        expr (lValue)
            lValue (lValue)
                ID (bar)
                index (index)
                    expr (lValue)
                        ID (i)

119. foo = bar[0];
line (stmt)
    stmt (assign)
        ID (foo)
        expr (lValue)
            lValue (lValue)
                ID (bar)
                index (index)
                    INT (0)

120. 

121. // function definitions

122. void foo()
line (func)
    retType (void)
    ID (foo)

123. void fooBar(int aParameter)
line (func)
    retType (void)
    ID (fooBar)
    paramList (list)
        param (var)
            TYPE (int)
            ID (aParameter)

124. int foo(double x)
line (func)
    retType (type)
        TYPE (int)
    ID (foo)
    paramList (list)
        param (var)
            TYPE (double)
            ID (x)

125. String bar(String[] a, int length)
line (func)
    retType (type)
        TYPE (String)
    ID (bar)
    paramList (list)
        param (array)
            TYPE (String)
            ID (a)
        param (var)
            TYPE (int)
            ID (length)

126. String[] split(String s, String delim)
line (func)
    retType (array)
        TYPE (String)
    ID (split)
    paramList (list)
        param (var)
            TYPE (String)
            ID (s)
        param (var)
            TYPE (String)
            ID (delim)

127. public double add(double x, double y, double z)
line (func)
    access (public)
    retType (type)
        TYPE (double)
    ID (add)
    paramList (list)
        param (var)
            TYPE (double)
            ID (x)
        param (var)
            TYPE (double)
            ID (y)
        param (var)
            TYPE (double)
            ID (z)

128. 

129. // function calls

130. ct.println("Hello world");
line (stmt)
    stmt (call)
        callHead (ct)
            ID (println)
        exprList (list)
            STR ("Hello world")

131. ct.println("Hello " + name);
line (stmt)
    stmt (call)
        callHead (ct)
            ID (println)
        exprList (list)
            expr (+)
                STR ("Hello ")
                expr (lValue)
                    ID (name)

132. ct.println("Hello\nWorld");
line (stmt)
    stmt (call)
        callHead (ct)
            ID (println)
        exprList (list)
            STR ("Hello\nWorld")

133. x = add(3, 4);
line (stmt)
    stmt (assign)
        ID (x)
        expr (call)
            callHead (user)
                ID (add)
            exprList (list)
                INT (3)
                INT (4)

134. m = mean(1.2, 3.4, 5.67);
line (stmt)
    stmt (assign)
        ID (m)
        expr (call)
            callHead (user)
                ID (mean)
            exprList (list)
                NUM (1.2)
                NUM (3.4)
                NUM (5.67)

135. foo(x,
-- Incomplete line carried forward

136. y,
-- Incomplete line carried forward

137. z);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (lValue)
                ID (x)
            expr (lValue)
                ID (y)
            expr (lValue)
                ID (z)

138. 

139. // multiline comments

140. /* this is a multiline comment

141. * this is the second line

142. * this is the third line

143. */

144. }
line (end)

145. // -------------------------------------------------------------

146. // Parsing white box tests

147. // -------------------------------------------------------------

148. // "blank"

149. 

150. // "comment"

151. // single comment line

152. while ( x < 100 ) // comment at end of line of code
line (while)
    expr (<)
        expr (lValue)
            ID (x)
        INT (100)
    whileEnd (while)

153. /* block comment line 1

154. * block comment line 2

155. */

156. /* block comment with // slash slash comment */

157. int x = 0; /* block comment after code on same line */
line (varInit)
    TYPE (int)
    ID (x)
    INT (0)

158. /* block comment before code on same line */ double pi = 3.14;
line (varInit)
    TYPE (double)
    ID (pi)
    NUM (3.14)

159. // block comments inside line of code

160. double foo(int i /*fee*/, double db /*fi*/, boolean boo /*fo*/)
line (func)
    retType (type)
        TYPE (double)
    ID (foo)
    paramList (list)
        param (var)
            TYPE (int)
            ID (i)
        param (var)
            TYPE (double)
            ID (db)
        param (var)
            TYPE (boolean)
            ID (boo)

161. 

162. // "stmt",       stmt, ";"

163. // -- stmt "call"      fnValue, "(", exprList, ")"

164. // -- -- exprList "empty"

165. foo();
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)

166. foo.bar();
line (stmt)
    stmt (call)
        callHead (method)
            ID (foo)
            ID (bar)

167. foo[i].bar();
line (stmt)
    stmt (call)
        callHead (method)
            ID (foo)
            index (index)
                expr (lValue)
                    ID (i)
            ID (bar)

168. // -- -- exprList "list"

169. foo(123); // "NUM"
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            INT (123)

170. foo(12.345);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            NUM (12.345)

171. foo(1.234e56);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            NUM (1.234e56)

172. foo(1.234e+56);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            NUM (1.234e+56)

173. foo(1.234e-56);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            NUM (1.234e-56)

174. foo(.234e56);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            NUM (.234e56)

175. foo(.234e+56);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            NUM (.234e+56)

176. foo(.234e-56);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            NUM (.234e-56)

177. foo(true); // "BOOL"
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            BOOL (true)

178. foo(false);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            BOOL (false)

179. foo(null); // "NULL"
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            NULL (null)

180. foo("string literal"); // "STR"
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            STR ("string literal")

181. foo(bar()); // "call"
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (call)
                callHead (user)
                    ID (bar)

182. foo(bar(123));
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (call)
                callHead (user)
                    ID (bar)
                exprList (list)
                    INT (123)

183. foo(x); // "lValue"
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (lValue)
                ID (x)

184. foo(obj.x);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (obj)
                    field (field)
                        ID (x)

185. foo(objs[i]);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (objs)
                    index (index)
                        expr (lValue)
                            ID (i)

186. foo(objs[i].x);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (objs)
                    index (index)
                        expr (lValue)
                            ID (i)
                    field (field)
                        ID (x)

187. foo(123); // "exprParens"
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            INT (123)

188. foo(-123); // "neg"
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (neg)
                INT (123)

189. foo(-.234e+56);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (neg)
                NUM (.234e+56)

190. foo(-obj.x);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (neg)
                expr (lValue)
                    lValue (lValue)
                        ID (obj)
                        field (field)
                            ID (x)

191. foo(!true);   // "!"
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (not)
                BOOL (true)

192. foo(!false);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (not)
                BOOL (false)

193. foo(!paused);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (not)
                expr (lValue)
                    ID (paused)

194. foo(new int [100]); // "newArray"
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (newArray)
                TYPE (int)
                INT (100)

195. foo(new GameObj [numBullets]);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (newArray)
                TYPE (GameObj)
                expr (lValue)
                    ID (numBullets)

196. foo(new GameObj [numBullets * 2]);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (newArray)
                TYPE (GameObj)
                expr (*)
                    expr (lValue)
                        ID (numBullets)
                    INT (2)

197. // -- -- exprList "list" (1 non-primary expr)

198. foo(123 + obj.x);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (+)
                INT (123)
                expr (lValue)
                    lValue (lValue)
                        ID (obj)
                        field (field)
                            ID (x)

199. foo(-123 + obj.x - obj2.x);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (-)
                expr (+)
                    expr (neg)
                        INT (123)
                    expr (lValue)
                        lValue (lValue)
                            ID (obj)
                            field (field)
                                ID (x)
                expr (lValue)
                    lValue (lValue)
                        ID (obj2)
                        field (field)
                            ID (x)

200. foo(100 - obj.x * -3.14);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (-)
                INT (100)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (obj)
                            field (field)
                                ID (x)
                    expr (neg)
                        NUM (3.14)

201. foo((1 + a[iTop]) - 1);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (-)
                expr (exprParens)
                    expr (+)
                        INT (1)
                        expr (lValue)
                            lValue (lValue)
                                ID (a)
                                index (index)
                                    expr (lValue)
                                        ID (iTop)
                INT (1)

202. foo((1 + a[iTop]) / 1);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (/)
                expr (exprParens)
                    expr (+)
                        INT (1)
                        expr (lValue)
                            lValue (lValue)
                                ID (a)
                                index (index)
                                    expr (lValue)
                                        ID (iTop)
                INT (1)

203. foo((a[i] + b[j]) / 3);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (/)
                expr (exprParens)
                    expr (+)
                        expr (lValue)
                            lValue (lValue)
                                ID (a)
                                index (index)
                                    expr (lValue)
                                        ID (i)
                        expr (lValue)
                            lValue (lValue)
                                ID (b)
                                index (index)
                                    expr (lValue)
                                        ID (j)
                INT (3)

204. // -- -- exprList "list" (multiple exprs)

205. foo(x, why, zee);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (lValue)
                ID (x)
            expr (lValue)
                ID (why)
            expr (lValue)
                ID (zee)

206. foo(x,
-- Incomplete line carried forward

207. y,
-- Incomplete line carried forward

208. z);
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (lValue)
                ID (x)
            expr (lValue)
                ID (y)
            expr (lValue)
                ID (z)

209. foo( x + y, a || b && c, bar[i].m(z * (u + v)) );
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (+)
                expr (lValue)
                    ID (x)
                expr (lValue)
                    ID (y)
            expr (||)
                expr (lValue)
                    ID (a)
                expr (&&)
                    expr (lValue)
                        ID (b)
                    expr (lValue)
                        ID (c)
            expr (call)
                callHead (method)
                    ID (bar)
                    index (index)
                        expr (lValue)
                            ID (i)
                    ID (m)
                exprList (list)
                    expr (*)
                        expr (lValue)
                            ID (z)
                        expr (exprParens)
                            expr (+)
                                expr (lValue)
                                    ID (u)
                                expr (lValue)
                                    ID (v)

210. // -- stmt "varAssign"      "ID", "=", expr

211. // -- -- valid "ID"s

212. x = 0;
line (stmt)
    stmt (assign)
        ID (x)
        INT (0)

213. xValue = 0;
line (stmt)
    stmt (assign)
        ID (xValue)
        INT (0)

214. x123 = 0;
line (stmt)
    stmt (assign)
        ID (x123)
        INT (0)

215. x123four = 0;
line (stmt)
    stmt (assign)
        ID (x123four)
        INT (0)

216. some_variable = 0;
line (stmt)
    stmt (assign)
        ID (some_variable)
        INT (0)

217. x1_ = 0;
line (stmt)
    stmt (assign)
        ID (x1_)
        INT (0)

218. // x = primaryExpr

219. var = 12.345; 			// "NUM"
line (stmt)
    stmt (assign)
        ID (var)
        NUM (12.345)

220. x = 1.234e56;
line (stmt)
    stmt (assign)
        ID (x)
        NUM (1.234e56)

221. x = 1.234e+56;
line (stmt)
    stmt (assign)
        ID (x)
        NUM (1.234e+56)

222. x = 1.234e-56;
line (stmt)
    stmt (assign)
        ID (x)
        NUM (1.234e-56)

223. x = .234e56;
line (stmt)
    stmt (assign)
        ID (x)
        NUM (.234e56)

224. x = .234e+56;
line (stmt)
    stmt (assign)
        ID (x)
        NUM (.234e+56)

225. x = .234e-56;
line (stmt)
    stmt (assign)
        ID (x)
        NUM (.234e-56)

226. x = true; 				// "BOOL"
line (stmt)
    stmt (assign)
        ID (x)
        BOOL (true)

227. x = false;
line (stmt)
    stmt (assign)
        ID (x)
        BOOL (false)

228. x = null;				// "NULL"
line (stmt)
    stmt (assign)
        ID (x)
        NULL (null)

229. x = "string literal"; 	// "STR"
line (stmt)
    stmt (assign)
        ID (x)
        STR ("string literal")

230. x = foo(); 				// "call"
line (stmt)
    stmt (assign)
        ID (x)
        expr (call)
            callHead (user)
                ID (foo)

231. x = foo.bar(123);
line (stmt)
    stmt (assign)
        ID (x)
        expr (call)
            callHead (method)
                ID (foo)
                ID (bar)
            exprList (list)
                INT (123)

232. x = y; 					// "lValue"
line (stmt)
    stmt (assign)
        ID (x)
        expr (lValue)
            ID (y)

233. x = obj.x;
line (stmt)
    stmt (assign)
        ID (x)
        expr (lValue)
            lValue (lValue)
                ID (obj)
                field (field)
                    ID (x)

234. x = objs[i];
line (stmt)
    stmt (assign)
        ID (x)
        expr (lValue)
            lValue (lValue)
                ID (objs)
                index (index)
                    expr (lValue)
                        ID (i)

235. x = objs[i].x;
line (stmt)
    stmt (assign)
        ID (x)
        expr (lValue)
            lValue (lValue)
                ID (objs)
                index (index)
                    expr (lValue)
                        ID (i)
                field (field)
                    ID (x)

236. x = (123); 				// "exprParens"
line (stmt)
    stmt (assign)
        ID (x)
        expr (exprParens)
            INT (123)

237. x = -123; 				// "neg"
line (stmt)
    stmt (assign)
        ID (x)
        expr (neg)
            INT (123)

238. x = -.234e+56;
line (stmt)
    stmt (assign)
        ID (x)
        expr (neg)
            NUM (.234e+56)

239. x = -obj.x;
line (stmt)
    stmt (assign)
        ID (x)
        expr (neg)
            expr (lValue)
                lValue (lValue)
                    ID (obj)
                    field (field)
                        ID (x)

240. x = !true;   			// "!"
line (stmt)
    stmt (assign)
        ID (x)
        expr (not)
            BOOL (true)

241. x = !false;
line (stmt)
    stmt (assign)
        ID (x)
        expr (not)
            BOOL (false)

242. x = !paused;
line (stmt)
    stmt (assign)
        ID (x)
        expr (not)
            expr (lValue)
                ID (paused)

243. x = new GameObj [numBullets]; // "newArray"
line (stmt)
    stmt (assign)
        ID (x)
        expr (newArray)
            TYPE (GameObj)
            expr (lValue)
                ID (numBullets)

244. x = (int) 3.14;         // "cast"
line (stmt)
    stmt (assign)
        ID (x)
        expr (cast)
            TYPE (int)
            NUM (3.14)

245. x = x * y;
line (stmt)
    stmt (assign)
        ID (x)
        expr (*)
            expr (lValue)
                ID (x)
            expr (lValue)
                ID (y)

246. x = x / y;
line (stmt)
    stmt (assign)
        ID (x)
        expr (/)
            expr (lValue)
                ID (x)
            expr (lValue)
                ID (y)

247. x = x % y;
line (stmt)
    stmt (assign)
        ID (x)
        expr (%)
            expr (lValue)
                ID (x)
            expr (lValue)
                ID (y)

248. x = x + y;
line (stmt)
    stmt (assign)
        ID (x)
        expr (+)
            expr (lValue)
                ID (x)
            expr (lValue)
                ID (y)

249. x = x - y;
line (stmt)
    stmt (assign)
        ID (x)
        expr (-)
            expr (lValue)
                ID (x)
            expr (lValue)
                ID (y)

250. x = x << y;
line (stmt)
    stmt (assign)
        ID (x)
        expr (<<)
            expr (lValue)
                ID (x)
            expr (lValue)
                ID (y)

251. x = x >> y;
line (stmt)
    stmt (assign)
        ID (x)
        expr (>>)
            expr (lValue)
                ID (x)
            expr (lValue)
                ID (y)

252. x = x >>> y;
line (stmt)
    stmt (assign)
        ID (x)
        expr (>>>)
            expr (lValue)
                ID (x)
            expr (lValue)
                ID (y)

253. b = x < y;
line (stmt)
    stmt (assign)
        ID (b)
        expr (<)
            expr (lValue)
                ID (x)
            expr (lValue)
                ID (y)

254. b = x <= y;
line (stmt)
    stmt (assign)
        ID (b)
        expr (<=)
            expr (lValue)
                ID (x)
            expr (lValue)
                ID (y)

255. b = x > y;
line (stmt)
    stmt (assign)
        ID (b)
        expr (>)
            expr (lValue)
                ID (x)
            expr (lValue)
                ID (y)

256. b = x >= y;
line (stmt)
    stmt (assign)
        ID (b)
        expr (>=)
            expr (lValue)
                ID (x)
            expr (lValue)
                ID (y)

257. b = x == y;
line (stmt)
    stmt (assign)
        ID (b)
        expr (==)
            expr (lValue)
                ID (x)
            expr (lValue)
                ID (y)

258. b = x != y;
line (stmt)
    stmt (assign)
        ID (b)
        expr (!=)
            expr (lValue)
                ID (x)
            expr (lValue)
                ID (y)

259. x = x & y;
line (stmt)
    stmt (assign)
        ID (x)
        expr (&)
            expr (lValue)
                ID (x)
            expr (lValue)
                ID (y)

260. x = x ^ y;
line (stmt)
    stmt (assign)
        ID (x)
        expr (^)
            expr (lValue)
                ID (x)
            expr (lValue)
                ID (y)

261. x = x | y;
line (stmt)
    stmt (assign)
        ID (x)
        expr (|)
            expr (lValue)
                ID (x)
            expr (lValue)
                ID (y)

262. b = x && y;
line (stmt)
    stmt (assign)
        ID (b)
        expr (&&)
            expr (lValue)
                ID (x)
            expr (lValue)
                ID (y)

263. b = x || y;
line (stmt)
    stmt (assign)
        ID (b)
        expr (||)
            expr (lValue)
                ID (x)
            expr (lValue)
                ID (y)

264. x = x + y + z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (+)
            expr (+)
                expr (lValue)
                    ID (x)
                expr (lValue)
                    ID (y)
            expr (lValue)
                ID (z)

265. x = x - y - z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (-)
            expr (-)
                expr (lValue)
                    ID (x)
                expr (lValue)
                    ID (y)
            expr (lValue)
                ID (z)

266. x = x * y * z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (*)
            expr (*)
                expr (lValue)
                    ID (x)
                expr (lValue)
                    ID (y)
            expr (lValue)
                ID (z)

267. x = x / y / z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (/)
            expr (/)
                expr (lValue)
                    ID (x)
                expr (lValue)
                    ID (y)
            expr (lValue)
                ID (z)

268. x = x % y % z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (%)
            expr (%)
                expr (lValue)
                    ID (x)
                expr (lValue)
                    ID (y)
            expr (lValue)
                ID (z)

269. x = x + y - z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (-)
            expr (+)
                expr (lValue)
                    ID (x)
                expr (lValue)
                    ID (y)
            expr (lValue)
                ID (z)

270. x = x - y + z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (+)
            expr (-)
                expr (lValue)
                    ID (x)
                expr (lValue)
                    ID (y)
            expr (lValue)
                ID (z)

271. x = x + y * z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (+)
            expr (lValue)
                ID (x)
            expr (*)
                expr (lValue)
                    ID (y)
                expr (lValue)
                    ID (z)

272. x = x * y + z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (+)
            expr (*)
                expr (lValue)
                    ID (x)
                expr (lValue)
                    ID (y)
            expr (lValue)
                ID (z)

273. x = x + y / z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (+)
            expr (lValue)
                ID (x)
            expr (/)
                expr (lValue)
                    ID (y)
                expr (lValue)
                    ID (z)

274. x = x / y + z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (+)
            expr (/)
                expr (lValue)
                    ID (x)
                expr (lValue)
                    ID (y)
            expr (lValue)
                ID (z)

275. x = x + y % z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (+)
            expr (lValue)
                ID (x)
            expr (%)
                expr (lValue)
                    ID (y)
                expr (lValue)
                    ID (z)

276. x = x % y + z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (+)
            expr (%)
                expr (lValue)
                    ID (x)
                expr (lValue)
                    ID (y)
            expr (lValue)
                ID (z)

277. x = x - y * z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (-)
            expr (lValue)
                ID (x)
            expr (*)
                expr (lValue)
                    ID (y)
                expr (lValue)
                    ID (z)

278. x = x * y - z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (-)
            expr (*)
                expr (lValue)
                    ID (x)
                expr (lValue)
                    ID (y)
            expr (lValue)
                ID (z)

279. x = x - y / z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (-)
            expr (lValue)
                ID (x)
            expr (/)
                expr (lValue)
                    ID (y)
                expr (lValue)
                    ID (z)

280. x = x / y - z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (-)
            expr (/)
                expr (lValue)
                    ID (x)
                expr (lValue)
                    ID (y)
            expr (lValue)
                ID (z)

281. x = x - y % z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (-)
            expr (lValue)
                ID (x)
            expr (%)
                expr (lValue)
                    ID (y)
                expr (lValue)
                    ID (z)

282. x = x % y - z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (-)
            expr (%)
                expr (lValue)
                    ID (x)
                expr (lValue)
                    ID (y)
            expr (lValue)
                ID (z)

283. x = x * y / z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (/)
            expr (*)
                expr (lValue)
                    ID (x)
                expr (lValue)
                    ID (y)
            expr (lValue)
                ID (z)

284. x = x / y * z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (*)
            expr (/)
                expr (lValue)
                    ID (x)
                expr (lValue)
                    ID (y)
            expr (lValue)
                ID (z)

285. x = x * y % z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (%)
            expr (*)
                expr (lValue)
                    ID (x)
                expr (lValue)
                    ID (y)
            expr (lValue)
                ID (z)

286. x = x % y * z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (*)
            expr (%)
                expr (lValue)
                    ID (x)
                expr (lValue)
                    ID (y)
            expr (lValue)
                ID (z)

287. x = x / y % z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (%)
            expr (/)
                expr (lValue)
                    ID (x)
                expr (lValue)
                    ID (y)
            expr (lValue)
                ID (z)

288. x = x % y / z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (/)
            expr (%)
                expr (lValue)
                    ID (x)
                expr (lValue)
                    ID (y)
            expr (lValue)
                ID (z)

289. x = (x + y) + z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (+)
            expr (exprParens)
                expr (+)
                    expr (lValue)
                        ID (x)
                    expr (lValue)
                        ID (y)
            expr (lValue)
                ID (z)

290. x = x - (y - z);
line (stmt)
    stmt (assign)
        ID (x)
        expr (-)
            expr (lValue)
                ID (x)
            expr (exprParens)
                expr (-)
                    expr (lValue)
                        ID (y)
                    expr (lValue)
                        ID (z)

291. x = (x * y) * z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (*)
            expr (exprParens)
                expr (*)
                    expr (lValue)
                        ID (x)
                    expr (lValue)
                        ID (y)
            expr (lValue)
                ID (z)

292. x = x / (y / z);
line (stmt)
    stmt (assign)
        ID (x)
        expr (/)
            expr (lValue)
                ID (x)
            expr (exprParens)
                expr (/)
                    expr (lValue)
                        ID (y)
                    expr (lValue)
                        ID (z)

293. x = (x + y) - z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (-)
            expr (exprParens)
                expr (+)
                    expr (lValue)
                        ID (x)
                    expr (lValue)
                        ID (y)
            expr (lValue)
                ID (z)

294. x = x - (y + z);
line (stmt)
    stmt (assign)
        ID (x)
        expr (-)
            expr (lValue)
                ID (x)
            expr (exprParens)
                expr (+)
                    expr (lValue)
                        ID (y)
                    expr (lValue)
                        ID (z)

295. x = (x + y) * z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (*)
            expr (exprParens)
                expr (+)
                    expr (lValue)
                        ID (x)
                    expr (lValue)
                        ID (y)
            expr (lValue)
                ID (z)

296. x = x * (y + z);
line (stmt)
    stmt (assign)
        ID (x)
        expr (*)
            expr (lValue)
                ID (x)
            expr (exprParens)
                expr (+)
                    expr (lValue)
                        ID (y)
                    expr (lValue)
                        ID (z)

297. x = (x + y) / z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (/)
            expr (exprParens)
                expr (+)
                    expr (lValue)
                        ID (x)
                    expr (lValue)
                        ID (y)
            expr (lValue)
                ID (z)

298. x = x / (y + z);
line (stmt)
    stmt (assign)
        ID (x)
        expr (/)
            expr (lValue)
                ID (x)
            expr (exprParens)
                expr (+)
                    expr (lValue)
                        ID (y)
                    expr (lValue)
                        ID (z)

299. x = (x - y) * z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (*)
            expr (exprParens)
                expr (-)
                    expr (lValue)
                        ID (x)
                    expr (lValue)
                        ID (y)
            expr (lValue)
                ID (z)

300. x = x * (y - z);
line (stmt)
    stmt (assign)
        ID (x)
        expr (*)
            expr (lValue)
                ID (x)
            expr (exprParens)
                expr (-)
                    expr (lValue)
                        ID (y)
                    expr (lValue)
                        ID (z)

301. x = (x - y) / z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (/)
            expr (exprParens)
                expr (-)
                    expr (lValue)
                        ID (x)
                    expr (lValue)
                        ID (y)
            expr (lValue)
                ID (z)

302. x = x / (y - z);
line (stmt)
    stmt (assign)
        ID (x)
        expr (/)
            expr (lValue)
                ID (x)
            expr (exprParens)
                expr (-)
                    expr (lValue)
                        ID (y)
                    expr (lValue)
                        ID (z)

303. x = (x * y) / z;
line (stmt)
    stmt (assign)
        ID (x)
        expr (/)
            expr (exprParens)
                expr (*)
                    expr (lValue)
                        ID (x)
                    expr (lValue)
                        ID (y)
            expr (lValue)
                ID (z)

304. x = x / (y * z);
line (stmt)
    stmt (assign)
        ID (x)
        expr (/)
            expr (lValue)
                ID (x)
            expr (exprParens)
                expr (*)
                    expr (lValue)
                        ID (y)
                    expr (lValue)
                        ID (z)

305. x = 123 + obj.x;
line (stmt)
    stmt (assign)
        ID (x)
        expr (+)
            INT (123)
            expr (lValue)
                lValue (lValue)
                    ID (obj)
                    field (field)
                        ID (x)

306. x = -123 + obj.x - obj2.x;
line (stmt)
    stmt (assign)
        ID (x)
        expr (-)
            expr (+)
                expr (neg)
                    INT (123)
                expr (lValue)
                    lValue (lValue)
                        ID (obj)
                        field (field)
                            ID (x)
            expr (lValue)
                lValue (lValue)
                    ID (obj2)
                    field (field)
                        ID (x)

307. x = 100 - obj.x * -3.14;
line (stmt)
    stmt (assign)
        ID (x)
        expr (-)
            INT (100)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (obj)
                        field (field)
                            ID (x)
                expr (neg)
                    NUM (3.14)

308. x = (1 + a[iTop]) - 1;
line (stmt)
    stmt (assign)
        ID (x)
        expr (-)
            expr (exprParens)
                expr (+)
                    INT (1)
                    expr (lValue)
                        lValue (lValue)
                            ID (a)
                            index (index)
                                expr (lValue)
                                    ID (iTop)
            INT (1)

309. x = (1 + a[iTop]) / 1;
line (stmt)
    stmt (assign)
        ID (x)
        expr (/)
            expr (exprParens)
                expr (+)
                    INT (1)
                    expr (lValue)
                        lValue (lValue)
                            ID (a)
                            index (index)
                                expr (lValue)
                                    ID (iTop)
            INT (1)

310. x = 1 + (a[i] + b[j]) / 3;
line (stmt)
    stmt (assign)
        ID (x)
        expr (+)
            INT (1)
            expr (/)
                expr (exprParens)
                    expr (+)
                        expr (lValue)
                            lValue (lValue)
                                ID (a)
                                index (index)
                                    expr (lValue)
                                        ID (i)
                        expr (lValue)
                            lValue (lValue)
                                ID (b)
                                index (index)
                                    expr (lValue)
                                        ID (j)
                INT (3)

311. x = x1 * y1 + x2 * y2 + x3 * y3;
line (stmt)
    stmt (assign)
        ID (x)
        expr (+)
            expr (+)
                expr (*)
                    expr (lValue)
                        ID (x1)
                    expr (lValue)
                        ID (y1)
                expr (*)
                    expr (lValue)
                        ID (x2)
                    expr (lValue)
                        ID (y2)
            expr (*)
                expr (lValue)
                    ID (x3)
                expr (lValue)
                    ID (y3)

312. x = x[0] * y[0] + x[1] * y[1] + x[2] * y[2];
line (stmt)
    stmt (assign)
        ID (x)
        expr (+)
            expr (+)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (index)
                                INT (0)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                            index (index)
                                INT (0)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (index)
                                INT (1)
                    expr (lValue)
                        lValue (lValue)
                            ID (y)
                            index (index)
                                INT (1)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (index)
                            INT (2)
                expr (lValue)
                    lValue (lValue)
                        ID (y)
                        index (index)
                            INT (2)

313. x = (x1 + x2 + x3) / 3;
line (stmt)
    stmt (assign)
        ID (x)
        expr (/)
            expr (exprParens)
                expr (+)
                    expr (+)
                        expr (lValue)
                            ID (x1)
                        expr (lValue)
                            ID (x2)
                    expr (lValue)
                        ID (x3)
            INT (3)

314. x = (x[0] + x[1] + x[2] + x[3]) / 4;
line (stmt)
    stmt (assign)
        ID (x)
        expr (/)
            expr (exprParens)
                expr (+)
                    expr (+)
                        expr (+)
                            expr (lValue)
                                lValue (lValue)
                                    ID (x)
                                    index (index)
                                        INT (0)
                            expr (lValue)
                                lValue (lValue)
                                    ID (x)
                                    index (index)
                                        INT (1)
                        expr (lValue)
                            lValue (lValue)
                                ID (x)
                                index (index)
                                    INT (2)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (index)
                                INT (3)
            INT (4)

315. x = sum / n;
line (stmt)
    stmt (assign)
        ID (x)
        expr (/)
            expr (lValue)
                ID (sum)
            expr (lValue)
                ID (n)

316. x = Math.sqrt(a * a + b * b);
line (stmt)
    stmt (assign)
        ID (x)
        expr (call)
            callHead (Math)
                ID (sqrt)
            exprList (list)
                expr (+)
                    expr (*)
                        expr (lValue)
                            ID (a)
                        expr (lValue)
                            ID (a)
                    expr (*)
                        expr (lValue)
                            ID (b)
                        expr (lValue)
                            ID (b)

317. x = Math.sqrt(Math.pow(a,2) + Math.pow(b,2));
line (stmt)
    stmt (assign)
        ID (x)
        expr (call)
            callHead (Math)
                ID (sqrt)
            exprList (list)
                expr (+)
                    expr (call)
                        callHead (Math)
                            ID (pow)
                        exprList (list)
                            expr (lValue)
                                ID (a)
                            INT (2)
                    expr (call)
                        callHead (Math)
                            ID (pow)
                        exprList (list)
                            expr (lValue)
                                ID (b)
                            INT (2)

318. x = Math.sqrt( (a.x - b.x) * (a.x - b.x) + (a.y - b.y)*(a.y - b.y) );
line (stmt)
    stmt (assign)
        ID (x)
        expr (call)
            callHead (Math)
                ID (sqrt)
            exprList (list)
                expr (+)
                    expr (*)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        field (field)
                                            ID (x)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        field (field)
                                            ID (x)
                    expr (*)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        field (field)
                                            ID (y)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        field (field)
                                            ID (y)

319. x = Math.sqrt( Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2) );
line (stmt)
    stmt (assign)
        ID (x)
        expr (call)
            callHead (Math)
                ID (sqrt)
            exprList (list)
                expr (+)
                    expr (call)
                        callHead (Math)
                            ID (pow)
                        exprList (list)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        field (field)
                                            ID (x)
                            INT (2)
                    expr (call)
                        callHead (Math)
                            ID (pow)
                        exprList (list)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        field (field)
                                            ID (y)
                            INT (2)

320. x = Math.sqrt((obj.x + obj.y) / 2 - (a[i] + b[j]) / 3);
line (stmt)
    stmt (assign)
        ID (x)
        expr (call)
            callHead (Math)
                ID (sqrt)
            exprList (list)
                expr (-)
                    expr (/)
                        expr (exprParens)
                            expr (+)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (obj)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (obj)
                                        field (field)
                                            ID (y)
                        INT (2)
                    expr (/)
                        expr (exprParens)
                            expr (+)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                ID (j)
                        INT (3)

321. x = true;
line (stmt)
    stmt (assign)
        ID (x)
        BOOL (true)

322. x = !true;
line (stmt)
    stmt (assign)
        ID (x)
        expr (not)
            BOOL (true)

323. x = false;
line (stmt)
    stmt (assign)
        ID (x)
        BOOL (false)

324. x = !false;
line (stmt)
    stmt (assign)
        ID (x)
        expr (not)
            BOOL (false)

325. x = !boolVar1 && boolVar2;
line (stmt)
    stmt (assign)
        ID (x)
        expr (&&)
            expr (not)
                expr (lValue)
                    ID (boolVar1)
            expr (lValue)
                ID (boolVar2)

326. x = boolVar1 && !boolVar2;
line (stmt)
    stmt (assign)
        ID (x)
        expr (&&)
            expr (lValue)
                ID (boolVar1)
            expr (not)
                expr (lValue)
                    ID (boolVar2)

327. x = !boolVar1 && !boolVar2;
line (stmt)
    stmt (assign)
        ID (x)
        expr (&&)
            expr (not)
                expr (lValue)
                    ID (boolVar1)
            expr (not)
                expr (lValue)
                    ID (boolVar2)

328. x = !(boolVar1 && boolVar2);
line (stmt)
    stmt (assign)
        ID (x)
        expr (not)
            expr (exprParens)
                expr (&&)
                    expr (lValue)
                        ID (boolVar1)
                    expr (lValue)
                        ID (boolVar2)

329. x = !boolVar1 || boolVar2;
line (stmt)
    stmt (assign)
        ID (x)
        expr (||)
            expr (not)
                expr (lValue)
                    ID (boolVar1)
            expr (lValue)
                ID (boolVar2)

330. x = boolVar1 || !boolVar2;
line (stmt)
    stmt (assign)
        ID (x)
        expr (||)
            expr (lValue)
                ID (boolVar1)
            expr (not)
                expr (lValue)
                    ID (boolVar2)

331. x = !boolVar1 || !boolVar2;
line (stmt)
    stmt (assign)
        ID (x)
        expr (||)
            expr (not)
                expr (lValue)
                    ID (boolVar1)
            expr (not)
                expr (lValue)
                    ID (boolVar2)

332. x = !(boolVar1 || boolVar2);
line (stmt)
    stmt (assign)
        ID (x)
        expr (not)
            expr (exprParens)
                expr (||)
                    expr (lValue)
                        ID (boolVar1)
                    expr (lValue)
                        ID (boolVar2)

333. x = boolVar1 && boolVar2 && boolVar3;
line (stmt)
    stmt (assign)
        ID (x)
        expr (&&)
            expr (&&)
                expr (lValue)
                    ID (boolVar1)
                expr (lValue)
                    ID (boolVar2)
            expr (lValue)
                ID (boolVar3)

334. x = boolVar1 || boolVar2 || boolVar3;
line (stmt)
    stmt (assign)
        ID (x)
        expr (||)
            expr (||)
                expr (lValue)
                    ID (boolVar1)
                expr (lValue)
                    ID (boolVar2)
            expr (lValue)
                ID (boolVar3)

335. x = boolVar1 && boolVar2 || boolVar3;
line (stmt)
    stmt (assign)
        ID (x)
        expr (||)
            expr (&&)
                expr (lValue)
                    ID (boolVar1)
                expr (lValue)
                    ID (boolVar2)
            expr (lValue)
                ID (boolVar3)

336. x = !boolVar1 && boolVar2 || boolVar3;
line (stmt)
    stmt (assign)
        ID (x)
        expr (||)
            expr (&&)
                expr (not)
                    expr (lValue)
                        ID (boolVar1)
                expr (lValue)
                    ID (boolVar2)
            expr (lValue)
                ID (boolVar3)

337. x = boolVar1 && !boolVar2 || boolVar3;
line (stmt)
    stmt (assign)
        ID (x)
        expr (||)
            expr (&&)
                expr (lValue)
                    ID (boolVar1)
                expr (not)
                    expr (lValue)
                        ID (boolVar2)
            expr (lValue)
                ID (boolVar3)

338. x = boolVar1 && boolVar2 || !boolVar3;
line (stmt)
    stmt (assign)
        ID (x)
        expr (||)
            expr (&&)
                expr (lValue)
                    ID (boolVar1)
                expr (lValue)
                    ID (boolVar2)
            expr (not)
                expr (lValue)
                    ID (boolVar3)

339. x = !boolVar1 && !boolVar2 || boolVar3;
line (stmt)
    stmt (assign)
        ID (x)
        expr (||)
            expr (&&)
                expr (not)
                    expr (lValue)
                        ID (boolVar1)
                expr (not)
                    expr (lValue)
                        ID (boolVar2)
            expr (lValue)
                ID (boolVar3)

340. x = boolVar1 || boolVar2 && boolVar3;
line (stmt)
    stmt (assign)
        ID (x)
        expr (||)
            expr (lValue)
                ID (boolVar1)
            expr (&&)
                expr (lValue)
                    ID (boolVar2)
                expr (lValue)
                    ID (boolVar3)

341. x = (boolVar1 && boolVar2) || boolVar3;
line (stmt)
    stmt (assign)
        ID (x)
        expr (||)
            expr (exprParens)
                expr (&&)
                    expr (lValue)
                        ID (boolVar1)
                    expr (lValue)
                        ID (boolVar2)
            expr (lValue)
                ID (boolVar3)

342. x = boolVar1 && (boolVar2 || boolVar3);
line (stmt)
    stmt (assign)
        ID (x)
        expr (&&)
            expr (lValue)
                ID (boolVar1)
            expr (exprParens)
                expr (||)
                    expr (lValue)
                        ID (boolVar2)
                    expr (lValue)
                        ID (boolVar3)

343. x = (boolVar1 && boolVar2) || (boolVar3 && boolVar4);
line (stmt)
    stmt (assign)
        ID (x)
        expr (||)
            expr (exprParens)
                expr (&&)
                    expr (lValue)
                        ID (boolVar1)
                    expr (lValue)
                        ID (boolVar2)
            expr (exprParens)
                expr (&&)
                    expr (lValue)
                        ID (boolVar3)
                    expr (lValue)
                        ID (boolVar4)

344. x = (boolVar1 && (boolVar2 || boolVar3)) && boolVar4;
line (stmt)
    stmt (assign)
        ID (x)
        expr (&&)
            expr (exprParens)
                expr (&&)
                    expr (lValue)
                        ID (boolVar1)
                    expr (exprParens)
                        expr (||)
                            expr (lValue)
                                ID (boolVar2)
                            expr (lValue)
                                ID (boolVar3)
            expr (lValue)
                ID (boolVar4)

345. x = x && ( (y || z) && !w );
line (stmt)
    stmt (assign)
        ID (x)
        expr (&&)
            expr (lValue)
                ID (x)
            expr (exprParens)
                expr (&&)
                    expr (exprParens)
                        expr (||)
                            expr (lValue)
                                ID (y)
                            expr (lValue)
                                ID (z)
                    expr (not)
                        expr (lValue)
                            ID (w)

346. x = x < 0;
line (stmt)
    stmt (assign)
        ID (x)
        expr (<)
            expr (lValue)
                ID (x)
            INT (0)

347. x = x <= 1.2;
line (stmt)
    stmt (assign)
        ID (x)
        expr (<=)
            expr (lValue)
                ID (x)
            NUM (1.2)

348. x = x > .1;
line (stmt)
    stmt (assign)
        ID (x)
        expr (>)
            expr (lValue)
                ID (x)
            NUM (.1)

349. x = x >= .1e-23;
line (stmt)
    stmt (assign)
        ID (x)
        expr (>=)
            expr (lValue)
                ID (x)
            NUM (.1e-23)

350. x = x < eps && x > -eps;
line (stmt)
    stmt (assign)
        ID (x)
        expr (&&)
            expr (<)
                expr (lValue)
                    ID (x)
                expr (lValue)
                    ID (eps)
            expr (>)
                expr (lValue)
                    ID (x)
                expr (neg)
                    expr (lValue)
                        ID (eps)

351. x = xValue > eps[i] && xValue < eps[i + j];
line (stmt)
    stmt (assign)
        ID (x)
        expr (&&)
            expr (>)
                expr (lValue)
                    ID (xValue)
                expr (lValue)
                    lValue (lValue)
                        ID (eps)
                        index (index)
                            expr (lValue)
                                ID (i)
            expr (<)
                expr (lValue)
                    ID (xValue)
                expr (lValue)
                    lValue (lValue)
                        ID (eps)
                        index (index)
                            expr (+)
                                expr (lValue)
                                    ID (i)
                                expr (lValue)
                                    ID (j)

352. x = x1 < foo() || y2 >= foo[i].bar(arr[i]);
line (stmt)
    stmt (assign)
        ID (x)
        expr (||)
            expr (<)
                expr (lValue)
                    ID (x1)
                expr (call)
                    callHead (user)
                        ID (foo)
            expr (>=)
                expr (lValue)
                    ID (y2)
                expr (call)
                    callHead (method)
                        ID (foo)
                        index (index)
                            expr (lValue)
                                ID (i)
                        ID (bar)
                    exprList (list)
                        expr (lValue)
                            lValue (lValue)
                                ID (arr)
                                index (index)
                                    expr (lValue)
                                        ID (i)

353. x = x >= y.bar() && ( z_val <= 1 + 2.3 || 5 > 7 );
line (stmt)
    stmt (assign)
        ID (x)
        expr (&&)
            expr (>=)
                expr (lValue)
                    ID (x)
                expr (call)
                    callHead (method)
                        ID (y)
                        ID (bar)
            expr (exprParens)
                expr (||)
                    expr (<=)
                        expr (lValue)
                            ID (z_val)
                        expr (+)
                            INT (1)
                            NUM (2.3)
                    expr (>)
                        INT (5)
                        INT (7)

354. // -- stmt "assign"      lValue, "=", expr

355. obj.x = -0.5;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (obj)
            field (field)
                ID (x)
        expr (neg)
            NUM (0.5)

356. obj.height = obj2.height;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (obj)
            field (field)
                ID (height)
        expr (lValue)
            lValue (lValue)
                ID (obj2)
                field (field)
                    ID (height)

357. xCoord[i] = obj.x;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (xCoord)
            index (index)
                expr (lValue)
                    ID (i)
        expr (lValue)
            lValue (lValue)
                ID (obj)
                field (field)
                    ID (x)

358. objs[i].x = foo(i);
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (objs)
            index (index)
                expr (lValue)
                    ID (i)
            field (field)
                ID (x)
        expr (call)
            callHead (user)
                ID (foo)
            exprList (list)
                expr (lValue)
                    ID (i)

359. a[0] = startValue;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (a)
            index (index)
                INT (0)
        expr (lValue)
            ID (startValue)

360. a[i] = max;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    ID (i)
        expr (lValue)
            ID (max)

361. a[i] = a[i - 1];
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    ID (i)
        expr (lValue)
            lValue (lValue)
                ID (a)
                index (index)
                    expr (-)
                        expr (lValue)
                            ID (i)
                        INT (1)

362. a[i] = b[i];
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    ID (i)
        expr (lValue)
            lValue (lValue)
                ID (b)
                index (index)
                    expr (lValue)
                        ID (i)

363. dist[i] = Math.sqrt( (a[i].x - b[i].x) * (a[i].x - b[i].x) + (a[i].y - b[i].y)*(a[i].y - b[i].y) );
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (dist)
            index (index)
                expr (lValue)
                    ID (i)
        expr (call)
            callHead (Math)
                ID (sqrt)
            exprList (list)
                expr (+)
                    expr (*)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                        field (field)
                                            ID (x)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                        field (field)
                                            ID (x)
                    expr (*)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                        field (field)
                                            ID (y)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                        field (field)
                                            ID (y)

364. dist[i] = Math.sqrt( Math.pow(a[i].x - b[i].x, 2) + Math.pow(a[i].y - b[i].y, 2) );
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (dist)
            index (index)
                expr (lValue)
                    ID (i)
        expr (call)
            callHead (Math)
                ID (sqrt)
            exprList (list)
                expr (+)
                    expr (call)
                        callHead (Math)
                            ID (pow)
                        exprList (list)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                        field (field)
                                            ID (x)
                            INT (2)
                    expr (call)
                        callHead (Math)
                            ID (pow)
                        exprList (list)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                        field (field)
                                            ID (y)
                            INT (2)

365. // -- stmt "opAssign"

366. i += 1;
line (stmt)
    stmt (opAssign)
        ID (i)
        opAssignOp (+=)
        INT (1)

367. obj.x += -0.5;
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (obj)
            field (field)
                ID (x)
        opAssignOp (+=)
        expr (neg)
            NUM (0.5)

368. obj.height -= obj2.height;
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (obj)
            field (field)
                ID (height)
        opAssignOp (-=)
        expr (lValue)
            lValue (lValue)
                ID (obj2)
                field (field)
                    ID (height)

369. xCoord[i] *= obj.x;
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (xCoord)
            index (index)
                expr (lValue)
                    ID (i)
        opAssignOp (*=)
        expr (lValue)
            lValue (lValue)
                ID (obj)
                field (field)
                    ID (x)

370. objs[i].x /= foo(i);
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (objs)
            index (index)
                expr (lValue)
                    ID (i)
            field (field)
                ID (x)
        opAssignOp (/=)
        expr (call)
            callHead (user)
                ID (foo)
            exprList (list)
                expr (lValue)
                    ID (i)

371. a[0] += startValue;
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (a)
            index (index)
                INT (0)
        opAssignOp (+=)
        expr (lValue)
            ID (startValue)

372. a[i] -= max;
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    ID (i)
        opAssignOp (-=)
        expr (lValue)
            ID (max)

373. a[i] *= a[i - 1];
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    ID (i)
        opAssignOp (*=)
        expr (lValue)
            lValue (lValue)
                ID (a)
                index (index)
                    expr (-)
                        expr (lValue)
                            ID (i)
                        INT (1)

374. a[i] /= b[i];
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    ID (i)
        opAssignOp (/=)
        expr (lValue)
            lValue (lValue)
                ID (b)
                index (index)
                    expr (lValue)
                        ID (i)

375. dist[i] += Math.sqrt( (a[i].x - b[i].x) * (a[i].x - b[i].x) + (a[i].y - b[i].y)*(a[i].y - b[i].y) );
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (dist)
            index (index)
                expr (lValue)
                    ID (i)
        opAssignOp (+=)
        expr (call)
            callHead (Math)
                ID (sqrt)
            exprList (list)
                expr (+)
                    expr (*)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                        field (field)
                                            ID (x)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                        field (field)
                                            ID (x)
                    expr (*)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                        field (field)
                                            ID (y)
                        expr (exprParens)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                        field (field)
                                            ID (y)

376. dist[i] -= Math.sqrt( Math.pow(a[i].x - b[i].x, 2) + Math.pow(a[i].y - b[i].y, 2) );
line (stmt)
    stmt (opAssign)
        lValue (lValue)
            ID (dist)
            index (index)
                expr (lValue)
                    ID (i)
        opAssignOp (-=)
        expr (call)
            callHead (Math)
                ID (sqrt)
            exprList (list)
                expr (+)
                    expr (call)
                        callHead (Math)
                            ID (pow)
                        exprList (list)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                        field (field)
                                            ID (x)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                        field (field)
                                            ID (x)
                            INT (2)
                    expr (call)
                        callHead (Math)
                            ID (pow)
                        exprList (list)
                            expr (-)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (a)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                        field (field)
                                            ID (y)
                                expr (lValue)
                                    lValue (lValue)
                                        ID (b)
                                        index (index)
                                            expr (lValue)
                                                ID (i)
                                        field (field)
                                            ID (y)
                            INT (2)

377. // -- stmt "preInc"

378. ++x;
line (stmt)
    stmt (preInc)
        ID (x)

379. ++x.y;
line (stmt)
    stmt (preInc)
        lValue (lValue)
            ID (x)
            field (field)
                ID (y)

380. ++a[i];
line (stmt)
    stmt (preInc)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    ID (i)

381. ++a[i].x;
line (stmt)
    stmt (preInc)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    ID (i)
            field (field)
                ID (x)

382. // -- stmt "preDec"

383. --x;
line (stmt)
    stmt (preDec)
        ID (x)

384. --x.y;
line (stmt)
    stmt (preDec)
        lValue (lValue)
            ID (x)
            field (field)
                ID (y)

385. --a[i];
line (stmt)
    stmt (preDec)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    ID (i)

386. --a[i].x;
line (stmt)
    stmt (preDec)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    ID (i)
            field (field)
                ID (x)

387. // -- stmt "postInc"

388. x++;
line (stmt)
    stmt (postInc)
        ID (x)

389. x.y++;
line (stmt)
    stmt (postInc)
        lValue (lValue)
            ID (x)
            field (field)
                ID (y)

390. a[i]++;
line (stmt)
    stmt (postInc)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    ID (i)

391. a[i].x++;
line (stmt)
    stmt (postInc)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    ID (i)
            field (field)
                ID (x)

392. // -- stmt "postDec"

393. x--;
line (stmt)
    stmt (postDec)
        ID (x)

394. x.y--;
line (stmt)
    stmt (postDec)
        lValue (lValue)
            ID (x)
            field (field)
                ID (y)

395. a[i]--;
line (stmt)
    stmt (postDec)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    ID (i)

396. a[i].x--;
line (stmt)
    stmt (postDec)
        lValue (lValue)
            ID (a)
            index (index)
                expr (lValue)
                    ID (i)
            field (field)
                ID (x)

397. // -- break

398. break;
line (break)

399. 

400. // "varInit",       "ID", "ID", "=", expr, ";"

401. // -- expr is a primaryExpr

402. int i = 0;
line (varInit)
    TYPE (int)
    ID (i)
    INT (0)

403. double c = 2.99792458e+8;
line (varInit)
    TYPE (double)
    ID (c)
    NUM (2.99792458e+8)

404. boolean b = true;
line (varInit)
    TYPE (boolean)
    ID (b)
    BOOL (true)

405. String greeting = "hello";
line (varInit)
    TYPE (String)
    ID (greeting)
    STR ("hello")

406. int x = foo();
line (varInit)
    TYPE (int)
    ID (x)
    expr (call)
        callHead (user)
            ID (foo)

407. double y = bar("foo");
line (varInit)
    TYPE (double)
    ID (y)
    expr (call)
        callHead (user)
            ID (bar)
        exprList (list)
            STR ("foo")

408. boolean b = x;
line (varInit)
    TYPE (boolean)
    ID (b)
    expr (lValue)
        ID (x)

409. String s = x.y;
line (varInit)
    TYPE (String)
    ID (s)
    expr (lValue)
        lValue (lValue)
            ID (x)
            field (field)
                ID (y)

410. GameObj g = arr[index];
line (varInit)
    TYPE (GameObj)
    ID (g)
    expr (lValue)
        lValue (lValue)
            ID (arr)
            index (index)
                expr (lValue)
                    ID (index)

411. double x = arr[i].x;
line (varInit)
    TYPE (double)
    ID (x)
    expr (lValue)
        lValue (lValue)
            ID (arr)
            index (index)
                expr (lValue)
                    ID (i)
            field (field)
                ID (x)

412. int i = (j);
line (varInit)
    TYPE (int)
    ID (i)
    expr (exprParens)
        expr (lValue)
            ID (j)

413. double d = -123.e-56;
line (varInit)
    TYPE (double)
    ID (d)
    expr (neg)
        NUM (123.e-56)

414. boolean b = !b;
line (varInit)
    TYPE (boolean)
    ID (b)
    expr (not)
        expr (lValue)
            ID (b)

415. // -- expr is not a primaryExpr

416. int m = (s + e) / 2;
line (varInit)
    TYPE (int)
    ID (m)
    expr (/)
        expr (exprParens)
            expr (+)
                expr (lValue)
                    ID (s)
                expr (lValue)
                    ID (e)
        INT (2)

417. int mid = start + (end - start) / 2;
line (varInit)
    TYPE (int)
    ID (mid)
    expr (+)
        expr (lValue)
            ID (start)
        expr (/)
            expr (exprParens)
                expr (-)
                    expr (lValue)
                        ID (end)
                    expr (lValue)
                        ID (start)
            INT (2)

418. double dotProduct = x1 * y1 + x2 * y2 + x3 * y3;
line (varInit)
    TYPE (double)
    ID (dotProduct)
    expr (+)
        expr (+)
            expr (*)
                expr (lValue)
                    ID (x1)
                expr (lValue)
                    ID (y1)
            expr (*)
                expr (lValue)
                    ID (x2)
                expr (lValue)
                    ID (y2)
        expr (*)
            expr (lValue)
                ID (x3)
            expr (lValue)
                ID (y3)

419. double avg = (x[0] + x[1] + x[2] + x[3]) / 4.0;
line (varInit)
    TYPE (double)
    ID (avg)
    expr (/)
        expr (exprParens)
            expr (+)
                expr (+)
                    expr (+)
                        expr (lValue)
                            lValue (lValue)
                                ID (x)
                                index (index)
                                    INT (0)
                        expr (lValue)
                            lValue (lValue)
                                ID (x)
                                index (index)
                                    INT (1)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (index)
                                INT (2)
                expr (lValue)
                    lValue (lValue)
                        ID (x)
                        index (index)
                            INT (3)
        NUM (4.0)

420. double avg = sum(arr) / arr.length;
line (varInit)
    TYPE (double)
    ID (avg)
    expr (/)
        expr (call)
            callHead (user)
                ID (sum)
            exprList (list)
                expr (lValue)
                    ID (arr)
        expr (lValue)
            lValue (lValue)
                ID (arr)
                field (field)
                    ID (length)

421. GameObj b = bullets[i];
line (varInit)
    TYPE (GameObj)
    ID (b)
    expr (lValue)
        lValue (lValue)
            ID (bullets)
            index (index)
                expr (lValue)
                    ID (i)

422. double dist = Math.sqrt( Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2) );
line (varInit)
    TYPE (double)
    ID (dist)
    expr (call)
        callHead (Math)
            ID (sqrt)
        exprList (list)
            expr (+)
                expr (call)
                    callHead (Math)
                        ID (pow)
                    exprList (list)
                        expr (-)
                            expr (lValue)
                                lValue (lValue)
                                    ID (a)
                                    field (field)
                                        ID (x)
                            expr (lValue)
                                lValue (lValue)
                                    ID (b)
                                    field (field)
                                        ID (x)
                        INT (2)
                expr (call)
                    callHead (Math)
                        ID (pow)
                    exprList (list)
                        expr (-)
                            expr (lValue)
                                lValue (lValue)
                                    ID (a)
                                    field (field)
                                        ID (y)
                            expr (lValue)
                                lValue (lValue)
                                    ID (b)
                                    field (field)
                                        ID (y)
                        INT (2)

423. boolean b = ( x || y ) && ( x || z );
line (varInit)
    TYPE (boolean)
    ID (b)
    expr (&&)
        expr (exprParens)
            expr (||)
                expr (lValue)
                    ID (x)
                expr (lValue)
                    ID (y)
        expr (exprParens)
            expr (||)
                expr (lValue)
                    ID (x)
                expr (lValue)
                    ID (z)

424. boolean b = ( x && ( (y || z) && !w ) );
line (varInit)
    TYPE (boolean)
    ID (b)
    expr (exprParens)
        expr (&&)
            expr (lValue)
                ID (x)
            expr (exprParens)
                expr (&&)
                    expr (exprParens)
                        expr (||)
                            expr (lValue)
                                ID (y)
                            expr (lValue)
                                ID (z)
                    expr (not)
                        expr (lValue)
                            ID (w)

425. 

426. // "varDecl",       "ID", idList, ";"

427. int x;
line (varDecl)
    TYPE (int)
    idList (list)
        ID (x)

428. double x1, x2;
line (varDecl)
    TYPE (double)
    idList (list)
        ID (x1)
        ID (x2)

429. double x_1, x_2, x_3;
line (varDecl)
    TYPE (double)
    idList (list)
        ID (x_1)
        ID (x_2)
        ID (x_3)

430. boolean paused, turboModeOn, cheatModeOn;
line (varDecl)
    TYPE (boolean)
    idList (list)
        ID (paused)
        ID (turboModeOn)
        ID (cheatModeOn)

431. String city, state, zip;
line (varDecl)
    TYPE (String)
    idList (list)
        ID (city)
        ID (state)
        ID (zip)

432. 

433. // "constInit",      "final", "ID", "ID", "=", expr, ";"

434. final int MAX_VALUE = 100;
line (constInit)
    TYPE (int)
    ID (MAX_VALUE)
    INT (100)

435. final double MAX_VAL_DOUBLE = 1.0 * MAX_VALUE;
line (constInit)
    TYPE (double)
    ID (MAX_VAL_DOUBLE)
    expr (*)
        NUM (1.0)
        expr (lValue)
            ID (MAX_VALUE)

436. final int MAX = max(arr, len);
line (constInit)
    TYPE (int)
    ID (MAX)
    expr (call)
        callHead (user)
            ID (max)
        exprList (list)
            expr (lValue)
                ID (arr)
            expr (lValue)
                ID (len)

437. final String NAME = "Max";
line (constInit)
    TYPE (String)
    ID (NAME)
    STR ("Max")

438. final GameObj foo = bar;
line (constInit)
    TYPE (GameObj)
    ID (foo)
    expr (lValue)
        ID (bar)

439. final boolean FOO = !bar || (p && !q);
line (constInit)
    TYPE (boolean)
    ID (FOO)
    expr (||)
        expr (not)
            expr (lValue)
                ID (bar)
        expr (exprParens)
            expr (&&)
                expr (lValue)
                    ID (p)
                expr (not)
                    expr (lValue)
                        ID (q)

440. final int N = 1 - a * ( b + c ) / 2;
line (constInit)
    TYPE (int)
    ID (N)
    expr (-)
        INT (1)
        expr (/)
            expr (*)
                expr (lValue)
                    ID (a)
                expr (exprParens)
                    expr (+)
                        expr (lValue)
                            ID (b)
                        expr (lValue)
                            ID (c)
            INT (2)

441. final double WIDTH = ct.getWidth();
line (constInit)
    TYPE (double)
    ID (WIDTH)
    expr (call)
        callHead (ct)
            ID (getWidth)

442. final int X0 = x[0];
line (constInit)
    TYPE (int)
    ID (X0)
    expr (lValue)
        lValue (lValue)
            ID (x)
            index (index)
                INT (0)

443. final boolean FOO = bar[i].x + Math.sqrt(z);
line (constInit)
    TYPE (boolean)
    ID (FOO)
    expr (+)
        expr (lValue)
            lValue (lValue)
                ID (bar)
                index (index)
                    expr (lValue)
                        ID (i)
                field (field)
                    ID (x)
        expr (call)
            callHead (Math)
                ID (sqrt)
            exprList (list)
                expr (lValue)
                    ID (z)

444. 

445. // "func", 		access, retType, "ID", "(", paramList, ")"

446. public void foo()
line (func)
    access (public)
    retType (void)
    ID (foo)

447. public int foo()
line (func)
    access (public)
    retType (type)
        TYPE (int)
    ID (foo)

448. public boolean foo2(double x)
line (func)
    access (public)
    retType (type)
        TYPE (boolean)
    ID (foo2)
    paramList (list)
        param (var)
            TYPE (double)
            ID (x)

449. public double foo(int[] arr)
line (func)
    access (public)
    retType (type)
        TYPE (double)
    ID (foo)
    paramList (list)
        param (array)
            TYPE (int)
            ID (arr)

450. public String foo_bar(double x1, boolean b_2, GameObj gameObj)
line (func)
    access (public)
    retType (type)
        TYPE (String)
    ID (foo_bar)
    paramList (list)
        param (var)
            TYPE (double)
            ID (x1)
        param (var)
            TYPE (boolean)
            ID (b_2)
        param (var)
            TYPE (GameObj)
            ID (gameObj)

451. public GameObj fooBar(GameObj[] objs, boolean [] bs, double []ds, int []  is)
line (func)
    access (public)
    retType (type)
        TYPE (GameObj)
    ID (fooBar)
    paramList (list)
        param (array)
            TYPE (GameObj)
            ID (objs)
        param (array)
            TYPE (boolean)
            ID (bs)
        param (array)
            TYPE (double)
            ID (ds)
        param (array)
            TYPE (int)
            ID (is)

452. public int[] foo()
line (func)
    access (public)
    retType (array)
        TYPE (int)
    ID (foo)

453. public double[] foo()
line (func)
    access (public)
    retType (array)
        TYPE (double)
    ID (foo)

454. void foo()
line (func)
    retType (void)
    ID (foo)

455. int foo123()
line (func)
    retType (type)
        TYPE (int)
    ID (foo123)

456. boolean foo2(double x)
line (func)
    retType (type)
        TYPE (boolean)
    ID (foo2)
    paramList (list)
        param (var)
            TYPE (double)
            ID (x)

457. double foo(int[] arr)
line (func)
    retType (type)
        TYPE (double)
    ID (foo)
    paramList (list)
        param (array)
            TYPE (int)
            ID (arr)

458. String foo_bar(double[] x1s, boolean b_2, GameObj gameObj)
line (func)
    retType (type)
        TYPE (String)
    ID (foo_bar)
    paramList (list)
        param (array)
            TYPE (double)
            ID (x1s)
        param (var)
            TYPE (boolean)
            ID (b_2)
        param (var)
            TYPE (GameObj)
            ID (gameObj)

459. GameObj fooBar(GameObj obj, boolean [] bs, double []ds, int []  is)
line (func)
    retType (type)
        TYPE (GameObj)
    ID (fooBar)
    paramList (list)
        param (var)
            TYPE (GameObj)
            ID (obj)
        param (array)
            TYPE (boolean)
            ID (bs)
        param (array)
            TYPE (double)
            ID (ds)
        param (array)
            TYPE (int)
            ID (is)

460. GameObj[] myMethod(GameObj[] objs)
line (func)
    retType (array)
        TYPE (GameObj)
    ID (myMethod)
    paramList (list)
        param (array)
            TYPE (GameObj)
            ID (objs)

461. 

462. // "begin",			"{"

463. {
line (begin)

464. 

465. // "end",			"}"

466. }
line (end)

467. 

468. // "if",			"if", "(", expr, ")"

469. if (true)
line (if)
    BOOL (true)

470. 

471. // "elseif",		"else", "if", "(", expr, ")"

472. else if ( true )
line (elseif)
    BOOL (true)

473. 

474. // "else"

475. else
line (else)

476. 

477. // "return",			"return", expr, ";"

478. return 0;
line (returnVal)
    INT (0)

479. 

480. // "do"

481. do
line (do)

482. 

483. // "while",				"while", "(", expr, whileEnd

484. while (true)
line (while)
    BOOL (true)
    whileEnd (while)

485. while (true);
line (while)
    BOOL (true)
    whileEnd (doWhile)

486. 

487. // "for",				"for", "(", forControl, ")"

488. // -- forControl "three"

489. for ( i = 0 ; i < n ; i++ )
line (for)
    forControl (three)
        forInit (stmt)
            stmt (assign)
                ID (i)
                INT (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    ID (i)
                expr (lValue)
                    ID (n)
        forNext (stmt)
            stmt (postInc)
                ID (i)

490. for ( int i = 0 ; i < n ; i++ )
line (for)
    forControl (three)
        forInit (var)
            TYPE (int)
            ID (i)
            INT (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    ID (i)
                expr (lValue)
                    ID (n)
        forNext (stmt)
            stmt (postInc)
                ID (i)

491. for ( i = 0 ; ; )
line (for)
    forControl (three)
        forInit (stmt)
            stmt (assign)
                ID (i)
                INT (0)

492. for ( int i = 0 ; ; )
line (for)
    forControl (three)
        forInit (var)
            TYPE (int)
            ID (i)
            INT (0)

493. for ( ; i < n ; )
line (for)
    forControl (three)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    ID (i)
                expr (lValue)
                    ID (n)

494. for ( ; ; i++ )
line (for)
    forControl (three)
        forNext (stmt)
            stmt (postInc)
                ID (i)

495. for ( ; ; )
line (for)
    forControl (three)

496. // -- forControl "array"

497. for ( GameObj g : gameObjs )
line (for)
    forControl (array)
        TYPE (GameObj)
        ID (g)
        expr (lValue)
            ID (gameObjs)

498. 

499. // "arrayInit",		"ID", "[", "]", "ID", "=", arrayInit, ";"

500. int[] a = {};
line (arrayInit)
    TYPE (int)
    ID (a)
    arrayInit (list)

501. double[] a = { 1 };
line (arrayInit)
    TYPE (double)
    ID (a)
    arrayInit (list)
        exprList (list)
            INT (1)

502. boolean[] a = { 1, 2, 3 };
line (arrayInit)
    TYPE (boolean)
    ID (a)
    arrayInit (list)
        exprList (list)
            INT (1)
            INT (2)
            INT (3)

503. GameObj[] a = new GameObj[100];
line (arrayInit)
    TYPE (GameObj)
    ID (a)
    arrayInit (expr)
        expr (newArray)
            TYPE (GameObj)
            INT (100)

504. 

505. // "arrayDecl",		"ID", "[", "]", idList, ";"

506. String[] a;
line (arrayDecl)
    TYPE (String)
    idList (list)
        ID (a)

507. int[] a, b, c;
line (arrayDecl)
    TYPE (int)
    idList (list)
        ID (a)
        ID (b)
        ID (c)

508. 

509. // "main",			"public", "static", "void", "ID", "(", "ID", "[", "]", "ID", ")"

510. public static void main(String[] args)
line (func)
    access (publicStatic)
    retType (void)
    ID (main)
    paramList (list)
        param (array)
            TYPE (String)
            ID (args)

511. 

512. // "Code12Run",		"ID", ".", "ID", "(", "new", "ID", "(", ")", ")", ";"

513. Code12.run(new TestProgram());
line (stmt)
    stmt (call)
        callHead (method)
            ID (Code12)
            ID (run)
        exprList (list)
            expr (new)
                ID (TestProgram)

514. 

515. }
line (end)

516. 

517. public void onMousePress(GameObj obj, double x, double y)
line (func)
    access (public)
    retType (void)
    ID (onMousePress)
    paramList (list)
        param (var)
            TYPE (GameObj)
            ID (obj)
        param (var)
            TYPE (double)
            ID (x)
        param (var)
            TYPE (double)
            ID (y)

518. {
line (begin)

519. // Pop bubbles that get clicked

520. if (obj != null)
line (if)
    expr (!=)
        expr (lValue)
            ID (obj)
        NULL (null)

521. {
line (begin)

522. obj.delete();
line (stmt)
    stmt (call)
        callHead (method)
            ID (obj)
            ID (delete)

523. ct.sound("pop.wav");
line (stmt)
    stmt (call)
        callHead (ct)
            ID (sound)
        exprList (list)
            STR ("pop.wav")

524. }
line (end)

525. }
line (end)

526. }
line (end)

527. 

528. ////////////////////////////////////////////////////////////////////
*** Beginning of Expected Errors Section ***

529. // ERRORS

530. 

531. // Lexical errors

532. */              // close comment without open
*** Line 532 chars 1-2: Close of comment without matching opening /*

533. int i; /* /* */ // nested block comments
line (varDecl)
    TYPE (int)
    idList (list)
        ID (i)
*** Line 533: Java does not allow nesting comments within comments using /* */
*** Reference Line 533

534. @               // invalid character
*** Line 534 char 1: Invalid character

535. foo('a');       // char literals not supported
*** Line 535 char 5: char type not supported, use double quotes

536. foo(" );        // unclosed string literal
*** Line 536 chars 5-43: Unclosed string literal

537. foo("\);        // unclosed string literal ending in backslash
*** Line 537 chars 6-7: Unsupported or illegal escape sequence

538. s = "\          // unclosed string literal ending in backslash
*** Line 538 chars 6-7: Unsupported or illegal escape sequence

539. s = "\";        // unclosed string literal from escaped double quote
*** Line 539 chars 5-68: Unclosed string literal

540. s = "\ ";       // illegal escape character
*** Line 540 chars 6-7: Unsupported or illegal escape sequence

541. s = "\r";       // unsupported escape sequence
*** Line 541 chars 6-7: Unsupported or illegal escape sequence

542. interface foo   // unsupported reserved word
*** Line 542 chars 1-9: Unsupported reserved word "interface"

543. double 1stNumber; // variable name starting with a number
*** Line 543 chars 8-16: This is not a valid number or name

544. x = obj.1stNumber; // field name starting with a number
*** Line 544 chars 8-17: This is not a valid number or name

545. // Using reserved words as identifiers

546. int abstract;
*** Line 546 chars 5-12: Unsupported reserved word "abstract"

547. int break;
*** Line 547 chars 5-9: Syntax Error: "break" was unexpected here

548. int case;
*** Line 548 chars 5-8: Unsupported reserved word "case"

549. int catch;
*** Line 549 chars 5-9: Unsupported reserved word "catch"

550. double class;
*** Line 550 chars 8-12: Syntax Error: "class" was unexpected here

551. boolean const;
*** Line 551 chars 9-13: Unsupported reserved word "const"

552. boolean continue;
*** Line 552 chars 9-16: Unsupported reserved word "continue"

553. boolean default;
*** Line 553 chars 9-15: Unsupported reserved word "default"

554. String do;
*** Line 554 chars 8-9: Syntax Error: "do" was unexpected here

555. GameObj else;
*** Line 555 chars 9-12: Syntax Error: "else" was unexpected here

556. GameObj enum;
*** Line 556 chars 9-12: Unsupported reserved word "enum"

557. int[] extends;
*** Line 557 chars 7-13: Syntax Error: "extends" was unexpected here

558. double final;
*** Line 558 chars 8-12: Syntax Error: "final" was unexpected here

559. double finally();
*** Line 559 chars 8-14: Unsupported reserved word "finally"

560. boolean foo(int for);
line (func)
    retType (type)
        TYPE (boolean)
    ID (foo)
    paramList (list)
        param (type)
            TYPE (int)
*** Line 560 chars 13-15: Parameters in a function definition should be a type followed by a name

561. for(int do = 0; do < 10; do++)
*** Line 561 chars 9-10: Syntax Error: "do" was unexpected here

562. String goto;
*** Line 562 chars 8-11: Unsupported reserved word "goto"

563. String if;
*** Line 563 chars 8-9: Syntax Error: "if" was unexpected here

564. GameObj implements;
*** Line 564 chars 9-18: Unsupported reserved word "implements"

565. int import;
*** Line 565 chars 5-10: Syntax Error: "import" was unexpected here

566. int instanceof;
*** Line 566 chars 5-14: Unsupported reserved word "instanceof"

567. int interface;
*** Line 567 chars 5-13: Unsupported reserved word "interface"

568. int native;
*** Line 568 chars 5-10: Unsupported reserved word "native"

569. int new;
*** Line 569 chars 5-7: Syntax Error: "new" was unexpected here

570. int package;
*** Line 570 chars 5-11: Unsupported reserved word "package"

571. int private;
*** Line 571 chars 5-11: Syntax Error: "private" was unexpected here

572. int protected;
*** Line 572 chars 5-13: Unsupported reserved word "protected"

573. int public;
*** Line 573 chars 5-10: Syntax Error: "public" was unexpected here

574. int return()
*** Line 574 chars 5-10: Syntax Error: "return" was unexpected here

575. int static;
*** Line 575 chars 5-10: Syntax Error: "static" was unexpected here

576. int strictfp;
*** Line 576 chars 5-12: Unsupported reserved word "strictfp"

577. int super;
*** Line 577 chars 5-9: Unsupported reserved word "super"

578. int switch;
*** Line 578 chars 5-10: Unsupported reserved word "switch"

579. int synchronized;
*** Line 579 chars 5-16: Unsupported reserved word "synchronized"

580. int this;
*** Line 580 chars 5-8: Unsupported reserved word "this"

581. int throw;
*** Line 581 chars 5-9: Unsupported reserved word "throw"

582. int throws;
*** Line 582 chars 5-10: Unsupported reserved word "throws"

583. int transient;
*** Line 583 chars 5-13: Unsupported reserved word "transient"

584. int try;
*** Line 584 chars 5-7: Unsupported reserved word "try"

585. int volatile;
*** Line 585 chars 5-12: Unsupported reserved word "volatile"

586. int while;
*** Line 586 chars 5-9: Syntax Error: "while" was unexpected here

587. boolean true;
*** Line 587 chars 9-12: Syntax Error: "true" was unexpected here

588. boolean false;
*** Line 588 chars 9-13: Syntax Error: "false" was unexpected here

589. int null;
*** Line 589 chars 5-8: Syntax Error: null was unexpected here

590. 

591. void foo.x()    // function definition with . as part of identifier
*** Line 591 char 9: Syntax Error: expected "("

592. x = 10          // missing ; in stmt
line (stmt)
    stmt (assign)
        ID (x)
        INT (10)
*** Line 592 char 7: Statement should end with a semicolon (;)

593. int x = 10		// missing ; in varInit
*** Line 593 char 11: Syntax Error: expected a semicolon

594. int x 			// missing ; in varDecl
*** Line 594 char 6: Syntax Error: end of line was unexpected here

595. final int x = 10 // missing ; in constInit
*** Line 595 char 17: Syntax Error: expected a semicolon

596. foo(x, );       // missing expr in exprList
*** Line 596 char 8: Syntax Error: ")" was unexpected here

597. f00()++;		// ++ applied to non-lvalue
*** Line 597 chars 6-7: Syntax Error: expected a semicolon

598. --x.foo();		// -- applied to non-lvalue
*** Line 598 char 8: Syntax Error: expected a semicolon

599. x = / b;		// missing expr before binary op
*** Line 599 char 5: Syntax Error: "/" was unexpected here

600. x = a + ;       // missing expr after binary op
*** Line 600 char 9: Expected expression after + operator
*** Reference Line 600 char 7

601. x = a ++ b;     // unexpected token after unary op
*** Line 601 chars 7-8: Syntax Error: "++" was unexpected here

602. x = a ** b;     // missing expression between binary ops
*** Line 602 char 8: Expected expression after * operator
*** Reference Line 602 char 7

603. x = a + b * ;   // missing expr after higher precedence binary op
*** Line 603 char 13: Expected expression after * operator
*** Reference Line 603 char 11

604. x = a * b + ;   // missing expr after lower precedence binary op
*** Line 604 char 13: Expected expression after + operator
*** Reference Line 604 char 11

605. x = ();         // missing expr in parentheses
*** Line 605 char 6: Syntax Error: ")" was unexpected here

606. x = 10 + ! ;    // missing expr after unary op
*** Line 606 char 10: Expected expression after + operator
*** Reference Line 606 char 8

607. x = obj.3;      // expected ID after .
*** Line 607 chars 8-9: Syntax Error: a number was unexpected here

608. x = 3.obj;      // ID expected before .
*** Line 608 chars 5-9: This is not a valid number or name

609. if x == 3       // required next token in pattern doesn't match
*** Line 609 char 4: Syntax Error: expected "("

610. while i < max   // required next token in pattern doesn't match
*** Line 610 char 7: Syntax Error: expected "("

611. for i=0; i<num; i=i+1 // required next token in pattern doesn't match
*** Line 611 char 5: Syntax Error: expected "("

612. x + 3;          // no matching pattern
*** Line 612 char 3: Syntax Error: "+" was unexpected here

613. x = 1,000;      // commas in numbers
*** Line 613 char 6: Syntax Error: expected a semicolon

614. x = 1.23.45;    // too many decimal points
*** Line 614 chars 9-11: Syntax Error: expected a semicolon

615. x = 3.14e1.0;   // exponential notation with decimal point in exponent
*** Line 615 chars 11-12: Syntax Error: expected a semicolon

616. x = 3.14e;      // Invalid exponential notation
*** Line 616 chars 5-10: Invalid exponential notation

617. x = 3.141e+;    // Invalid exponential notation
*** Line 617 chars 5-12: Invalid exponential notation

618. x = 3.1415e-;   // Invalid exponential notation
*** Line 618 chars 5-13: Invalid exponential notation

619. x = 3.14159e+exponent; // Invalid exponential notation
*** Line 619 chars 5-14: Invalid exponential notation

620. x = 3.141592ee0;// Invalid exponential notation
*** Line 620 chars 5-14: Invalid exponential notation

621. x = 3.141592EE0;// Invalid exponential notation
*** Line 621 chars 5-14: Invalid exponential notation

622. x = 3e; 		// Invalid exponential notation
*** Line 622 chars 5-7: Invalid exponential notation

623. x = .3E; 		// Invalid exponential notation
*** Line 623 chars 5-8: Invalid exponential notation

624. foo(x,          // (incomplete line continued below)
-- Incomplete line carried forward
*** Line 625 char 3: Statement should end with a semicolon (;)

625. y)              // missing ;
line (stmt)
    stmt (call)
        callHead (user)
            ID (foo)
        exprList (list)
            expr (lValue)
                ID (x)
            expr (lValue)
                ID (y)

626. x = (a + b + c / 3; 	// missing closing parenthesis
*** Line 626 char 19: Syntax Error: expected ")"

627. x = foo(y, bar(z, w); 	// missing closing parenthesis w/ nested parentheses
*** Line 627 char 21: Syntax Error: a semicolon was unexpected here

628. x = a + b + c ) / 3; 	// missing openning parenthesis
*** Line 628 char 15: Syntax Error: ")" was unexpected here

629. if ( i == 1 	// missing closing parenthesis with if
*** Line 629 char 12: Syntax Error: expected ")"

630. if ( i == 1 ); 	// if statment ended by ;
line (if)
    expr (==)
        expr (lValue)
            ID (i)
        INT (1)
*** Line 630 char 14: if statement should not end with a semicolon

631. for ( i=0; i<n; i++); 	// for() followed directly by ;
line (for)
    forControl (three)
        forInit (stmt)
            stmt (assign)
                ID (i)
                INT (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    ID (i)
                expr (lValue)
                    ID (n)
        forNext (stmt)
            stmt (postInc)
                ID (i)
*** Line 631 char 21: for loop header should not end with a semicolon

632. x + 1 = x; 		// confusing left hand side an right hand side of assignment
*** Line 632 char 3: Syntax Error: "+" was unexpected here

633. 1000 = count; 	// confusing left hand side an right hand side of assignment
*** Line 633 chars 1-4: Syntax Error: a number was unexpected here

634. if ( x => 3 ) 	// => instead of <=
*** Line 634 chars 8-9: Invalid operator. Did you mean >= ?

635. if ( x =< 5 ) 	// =< instead of >=.
*** Line 635 chars 8-9: Invalid operator. Did you mean <= ?

636. elseif( x > 2 ) // elseif instead of else if
line (stmt)
    stmt (call)
        callHead (user)
            ID (elseif)
        exprList (list)
            expr (>)
                expr (lValue)
                    ID (x)
                INT (2)
*** Line 636 char 16: Statement should end with a semicolon (;)

637. for(int i=0, i<n, i++) 	// commas in place of semicolons
line (for)
    forControl (three)
        forInit (var)
            TYPE (int)
            ID (i)
            INT (0)
        ID (i)
        ID (n)
        ID (i)
*** Line 637 char 12: for loop parts should be separated by semicolons (;)
Comma not supported

638. for(int i=0; i<n, i++) 	// comma in place of semicolon
line (for)
    forControl (three)
        forInit (var)
            TYPE (int)
            ID (i)
            INT (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    ID (i)
                expr (lValue)
                    ID (n)
        ID (i)
*** Line 638 char 17: for loop parts should be separated by semicolons (;)
Comma not supported

639. for(int i=0: i<n: i++) 	// colons in place of semicolons
*** Line 639 char 12: Syntax Error: expected a semicolon

640. for{int i=0; i<n; i++} 	// {} in place of ()
*** Line 640 char 4: Syntax Error: expected "("

641. for (int i==0; i<n; i++)// == instead of =
*** Line 641 chars 11-12: Syntax Error: "==" was unexpected here

642. for( x : arr ) 			// forgetting variable type
*** Line 642 char 8: Syntax Error: ":" was unexpected here

643. for( int x; arr ) 		// using ; instead of :
*** Line 643 char 11: Syntax Error: a semicolon was unexpected here

644. for( int[] x : arr )
*** Line 644 char 9: Syntax Error: "[" was unexpected here

645. for( int x : arr[] )
*** Line 645 char 18: Syntax Error: "]" was unexpected here

646. for( arr : int x )
*** Line 646 char 10: Syntax Error: ":" was unexpected here

647. double foo(x, y, z) 	// missing variable types for arguments in function definition
line (func)
    retType (type)
        TYPE (double)
    ID (foo)
    paramList (list)
        param (expr)
            expr (lValue)
                ID (x)
*** Line 647 char 12: Parameters in a function definition should be a type followed by a name

648. double foo[i]()			// index on function identifier
*** Line 648 char 11: Syntax Error: "[" was unexpected here

649. ct.println; 			// missing parenteses for function call without arguments
*** Line 649 char 11: Syntax Error: expected "("

650. foo(int x, double y, GameObj z) 	// missing return type in function definition
*** Line 650 chars 5-7: Syntax Error: a type was unexpected here

651. foo(int x, double y, GameObj z); 	// supplying variable types in function call
*** Line 651 chars 5-7: Syntax Error: a type was unexpected here

652. boolean foo(int x, double y, GameObj z); // semicolon after function declaration
line (func)
    retType (type)
        TYPE (boolean)
    ID (foo)
    paramList (list)
        param (var)
            TYPE (int)
            ID (x)
        param (var)
            TYPE (double)
            ID (y)
        param (var)
            TYPE (GameObj)
            ID (z)
*** Line 652 char 40: function header should not end with a semicolon

653. String s = 'Hello'; 	// '' in place of "" for strings
*** Line 653 char 12: char type not supported, use double quotes

654. String s = "A long string
*** Line 654 chars 12-25: Unclosed string literal

655. on more than one line";
*** Line 655 chars 34-35: Unclosed string literal

656. ct.println("He said "Hello""); 	// not escaping double quotes in a string literal
line (stmt)
    stmt (call)
        callHead (ct)
            ID (println)
        exprList1 (list)
            STR ("He said ")
        expr (lValue)
            ID (Hello)
        STR ("")
*** Line 656 char 21: Function parameter values must be separated by commas

657. newObj() = oldObj; 				// assigning to a function value
*** Line 657 char 10: Syntax Error: expected a semicolon

658. f = void foo()					// mixing assignment and function declaration
*** Line 658 chars 5-8: Syntax Error: "void" was unexpected here

659. def func(x):					// Python syntax
*** Line 659 chars 5-8: Syntax Error: a name was unexpected here

660. GameObj circle = new ct.circle(0,0,10); // new keyword not needed
*** Line 660 chars 22-23: Syntax Error: "ct" was unexpected here

661. intArr = {1, 2, 3}; // trying to assign value to array using initialization syntax
*** Line 661 char 10: Syntax Error: "{" was unexpected here

662. int intArr = {1, 2, 3}; // missing []
*** Line 662 char 14: Syntax Error: "{" was unexpected here

663. 

664. // Unsupported Java syntax

665. // --------------------------------------------------------------------------------

666. int x = 1, y = 2, z = 3;      // declaring and initializing multiple variables
line (varInit)
    TYPE (int)
    ID (x)
    INT (1)
    ID (y)
    INT (2)
    ID (z)
    INT (3)
*** Line 666 chars 1-25: Code12 requires each variable initialization to be on its own line

667. import java.io.PrintWriter;   // import other than Code12.*
line (import)
    ID (java)
    ID (io)
    ID (PrintWriter)
*** Line 667 chars 1-28: Code12 does not support importing other classes

668. protected int secretVar;        // protected access
*** Line 668 chars 1-9: Unsupported reserved word "protected"

669. time %= 3600;                 // %= operator
*** Line 669 chars 6-7: Syntax Error: "%=" was unexpected here

670. int numberOfDucks = (turboMode ? 100 : 1); // ?: operator
*** Line 670 char 32: Invalid character (The "? :" operator is not supported by Code12)

671. char ch = 'a'; 	// char type
*** Line 671 char 11: char type not supported, use double quotes

672. while(foo) { 	// opening { in control structure not on it's own line
line (while)
    expr (lValue)
        ID (foo)
    whileEnd (while)
*** Line 672 char 12: In Code12, each {  to start a new block must be on its own line

673. i++; } 			// closing } not on it's own line
*** Line 673 char 6: Syntax Error: expected end of line

674. String s = "A long string" +
*** Line 674 char 29: Expected expression after + operator
*** Reference Line 674 char 28

675. "on more than one line using concatenation";
*** Line 675 chars 12-54: Syntax Error: a string was unexpected here

676. x = a; y = b; 	// more than one statement on a single line
line (stmt)
    stmt (assign)
        ID (x)
        expr (lValue)
            ID (a)
    ID (y)
    ID (b)
*** Line 676 chars 1-14: Code12 requires each statement to be on its own line

677. if (x == 0) ct.println("x is zero"); // control structures must be on their own lines
line (if)
    expr (==)
        expr (lValue)
            ID (x)
        INT (0)
    ID (println)
    STR ("x is zero")
*** Line 677 chars 13-36: Code12 requires code after an if statement to be on its own line

678. double getVariable() { return variable; } // {} must start and end on their own lines
line (func)
    retType (type)
        TYPE (double)
    ID (getVariable)
    ID (variable)
*** Line 678 char 22: In Code12, each {  to start a new block must be on its own line

679. switch (choice)
*** Line 679 chars 1-6: Unsupported reserved word "switch"

680. continue;
*** Line 680 chars 1-8: Unsupported reserved word "continue"

681. a[i++] = b[i++]; 	// increment/decrement only supported as statements
*** Line 681 chars 4-5: Syntax Error: "++" was unexpected here

682. foo.obj.group.equals("targets"); 		// more than 2 chained fields
*** Line 682 char 14: Syntax Error: expected "("

683. input.toLowerCase().equals("quit"); // indexing after function call
*** Line 683 char 20: Syntax Error: expected a semicolon

684. newBullet().ySpeed = 0;
*** Line 684 char 12: Syntax Error: expected a semicolon

685. final int N; 	// constant declaration without initialization
*** Line 685 char 12: Syntax Error: expected "="

686. for (int i = 0, int j = 0; ; ) // Comma in forInit, forNext
line (for)
    forControl (three)
        forInit (var)
            TYPE (int)
            ID (i)
            INT (0)
        TYPE (int)
        ID (j)
        INT (0)
*** Line 686 char 15: for loop parts should be separated by semicolons (;)
Comma not supported

687. for ( ; ; i++, j++ ) 	// Comma in forInit, forNext
*** Line 687 char 14: Syntax Error: expected ")"

688. int _var; // variable indentifiers starting with underscore
*** Line 688 chars 5-8: Names cannot start with an underscore in Code12

689. int $var; // $
*** Line 689 char 5: The $ character is not allowed in Code12

690. double pay$;
*** Line 690 char 11: The $ character is not allowed in Code12

691. int x[];	// arrays must be declared with [] between type and identifier
*** Line 691 char 6: Syntax Error: "[" was unexpected here

692. int _func() // function names starting with underscore
*** Line 692 chars 5-9: Names cannot start with an underscore in Code12

693. public abstract class Account
*** Line 693 chars 8-15: Unsupported reserved word "abstract"

694. assert x != null : "x variable is null";
*** Line 694 chars 1-6: Unsupported reserved word "assert"

695. case 0 :
*** Line 695 chars 1-4: Unsupported reserved word "case"

696. catch(Exception e)
*** Line 696 chars 1-5: Unsupported reserved word "catch"

697. continue;
*** Line 697 chars 1-8: Unsupported reserved word "continue"

698. default :
*** Line 698 chars 1-7: Unsupported reserved word "default"

699. enum WeekDays
*** Line 699 chars 1-4: Unsupported reserved word "enum"

700. goto
*** Line 700 chars 1-4: Unsupported reserved word "goto"

701. finally
*** Line 701 chars 1-7: Unsupported reserved word "finally"

702. public class C implements I
*** Line 702 chars 16-25: Unsupported reserved word "implements"

703. if (x instanceof y)
*** Line 703 chars 7-16: Unsupported reserved word "instanceof"

704. public interface I
*** Line 704 chars 8-16: Unsupported reserved word "interface"

705. native void foo()
*** Line 705 chars 1-6: Unsupported reserved word "native"

706. package P;
*** Line 706 chars 1-7: Unsupported reserved word "package"

707. private static int x;
*** Line 707 chars 9-14: Syntax Error: "static" was unexpected here

708. protected int x;
*** Line 708 chars 1-9: Unsupported reserved word "protected"

709. static int x = 10;
*** Line 709 chars 1-6: Syntax Error: "static" was unexpected here

710. strictfp void foo()
*** Line 710 chars 1-8: Unsupported reserved word "strictfp"

711. super.foo();
*** Line 711 chars 1-5: Unsupported reserved word "super"

712. switch (x)
*** Line 712 chars 1-6: Unsupported reserved word "switch"

713. synchronized(sync_object)
*** Line 713 chars 1-12: Unsupported reserved word "synchronized"

714. this.x = x;
*** Line 714 chars 1-4: Unsupported reserved word "this"

715. throw e;
*** Line 715 chars 1-5: Unsupported reserved word "throw"

716. void foo() throws Exception
*** Line 716 chars 12-17: Unsupported reserved word "throws"

717. transient int x;
*** Line 717 chars 1-9: Unsupported reserved word "transient"

718. try
*** Line 718 chars 1-3: Unsupported reserved word "try"

719. volatile int x = 10;
*** Line 719 chars 1-8: Unsupported reserved word "volatile"
======= Test Complete =========================================

719 lines processed in 715 ms

0 unexpected errors
0 uncaught errors (182 expected errors)

SUCCESS
