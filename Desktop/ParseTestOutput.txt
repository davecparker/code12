======= Test Started ==========================================

1. import Code12.*;
line (importCode12)
    ID (Code12)

2. 
line (blank)

3. class BubblePop extends Code12Program
line (classUser)
    ID (BubblePop)
    ID (Code12Program)

4. {
line (begin)

5. public static void main(String[] args)
line (main)
    ID (main)
    ID (String)
    ID (args)

6. {
line (begin)

7. Code12.run(new BubblePop());
line (Code12Run)
    ID (Code12)
    ID (run)
    ID (BubblePop)

8. }
line (end)

9. 
line (blank)

10. public void start()
line (func)
    access (public)
    retType (void)
    ID (start)
    paramList (empty)

11. {
line (begin)

12. // Make the background
line (comment)
    COMMENT ( Make the background )

13. ct.setHeight(150);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setHeight)
        exprList (list)
            expr (NUM)
                NUM (150)

14. ct.setBackImage("underwater.jpg");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setBackImage)
        exprList (list)
            expr (STR)
                STR ("underwater.jpg")

15. }
line (end)

16. 
line (blank)

17. public void update()
line (func)
    access (public)
    retType (void)
    ID (update)
    paramList (empty)

18. {
line (begin)

19. // Make bubbles at random times, positions, and sizes
line (comment)
    COMMENT ( Make bubbles at random times, positions, and sizes)

20. if (ct.random(1, 20) == 1)
line (if)
    expr (==)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (random)
            exprList (list)
                expr (NUM)
                    NUM (1)
                expr (NUM)
                    NUM (20)
        expr (NUM)
            NUM (1)

21. {
line (begin)

22. double x = ct.random(0, 100);
line (varInit)
    ID (double)
    ID (x)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (random)
        exprList (list)
            expr (NUM)
                NUM (0)
            expr (NUM)
                NUM (100)

23. double y = ct.getHeight() + 25;
line (varInit)
    ID (double)
    ID (y)
    expr (+)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (getHeight)
            exprList (empty)
        expr (NUM)
            NUM (25)

24. double size = ct.random(5, 20);
line (varInit)
    ID (double)
    ID (size)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (random)
        exprList (list)
            expr (NUM)
                NUM (5)
            expr (NUM)
                NUM (20)

25. GameObj bubble = ct.image("bubble.png",
-- Incomplete line carried forward

26. x, y,
-- Incomplete line carried forward

27. size);
line (varInit)
    ID (GameObj)
    ID (bubble)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (image)
        exprList (list)
            expr (STR)
                STR ("bubble.png")
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (size)
                    index (empty)
                    field (empty)

28. bubble.ySpeed = -1;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (bubble)
            index (empty)
            field (field)
                ID (ySpeed)
        expr (neg)
            expr (NUM)
                NUM (1)

29. bubble.clickable = true;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (bubble)
            index (empty)
            field (field)
                ID (clickable)
        expr (BOOL)
            BOOL (true)

30. GameObj bubbleCopy = bubble; // initialization of GameObj from another GameObj
line (varInit)
    ID (GameObj)
    ID (bubbleCopy)
    expr (lValue)
        lValue (lValue)
            ID (bubble)
            index (empty)
            field (empty)

31. int z; // declaration without initialization - primitive type
line (varDecl)
    ID (int)
    idList (list)
        ID (z)

32. int x, y, z; // declaring multiple variables
line (varDecl)
    ID (int)
    idList (list)
        ID (x)
        ID (y)
        ID (z)

33. z = -1 + 2; // assigning value with int and unary minus
line (stmt)
    stmt (varAssign)
        ID (z)
        expr (+)
            expr (neg)
                expr (NUM)
                    NUM (1)
            expr (NUM)
                NUM (2)

34. z = 0.707; // assigning value with double
line (stmt)
    stmt (varAssign)
        ID (z)
        expr (NUM)
            NUM (0.707)

35. z = .707; // no leading zero
*** Location 35.10 to 35.18: Syntax Error

36. z = -.707; // negative with no leading zero
*** Location 36.10 to 36.19: Syntax Error

37. bigNum = 1.23456E10; // exponential notation
*** Location 37.10 to 37.29: Syntax Error

38. bigNum = 1.23456e10; // exponential notation
*** Location 38.10 to 38.29: Syntax Error

39. bigNum = -1.23456E10; // exponential notation
*** Location 39.10 to 39.30: Syntax Error

40. littleNum = 1.23456E-9; // exponential notation
*** Location 40.10 to 40.32: Syntax Error

41. littleNum = -1.23456E-9; // exponential notation
*** Location 41.10 to 41.33: Syntax Error

42. littleNum = 1.23456e-9; // exponential notation
*** Location 42.10 to 42.32: Syntax Error

43. double xyz = ( 2 * x + y - 3.14 ) / z + 1.414; // initialization with expression
line (varInit)
    ID (double)
    ID (xyz)
    expr (+)
        expr (/)
            expr (exprParens)
                expr (-)
                    expr (+)
                        expr (*)
                            expr (NUM)
                                NUM (2)
                            expr (lValue)
                                lValue (lValue)
                                    ID (x)
                                    index (empty)
                                    field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (y)
                                index (empty)
                                field (empty)
                    expr (NUM)
                        NUM (3.14)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)
        expr (NUM)
            NUM (1.414)

44. double mean = (a + b + c) / 3;
line (varInit)
    ID (double)
    ID (mean)
    expr (/)
        expr (exprParens)
            expr (+)
                expr (+)
                    expr (lValue)
                        lValue (lValue)
                            ID (a)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (b)
                            index (empty)
                            field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (c)
                        index (empty)
                        field (empty)
        expr (NUM)
            NUM (3)

45. double y = m * x + b;
line (varInit)
    ID (double)
    ID (y)
    expr (+)
        expr (*)
            expr (lValue)
                lValue (lValue)
                    ID (m)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
        expr (lValue)
            lValue (lValue)
                ID (b)
                index (empty)
                field (empty)

46. z = p * r % q + w / x - y;
line (stmt)
    stmt (varAssign)
        ID (z)
        expr (-)
            expr (+)
                expr (%)
                    expr (*)
                        expr (lValue)
                            lValue (lValue)
                                ID (p)
                                index (empty)
                                field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (r)
                                index (empty)
                                field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (q)
                            index (empty)
                            field (empty)
                expr (/)
                    expr (lValue)
                        lValue (lValue)
                            ID (w)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (empty)
                            field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)

47. y = a * x * x + b * x + c;
line (stmt)
    stmt (varAssign)
        ID (y)
        expr (+)
            expr (+)
                expr (*)
                    expr (*)
                        expr (lValue)
                            lValue (lValue)
                                ID (a)
                                index (empty)
                                field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (x)
                                index (empty)
                                field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (empty)
                            field (empty)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (b)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (empty)
                            field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (c)
                    index (empty)
                    field (empty)

48. y = (a * x * x) + (b * x) + c;
line (stmt)
    stmt (varAssign)
        ID (y)
        expr (+)
            expr (+)
                expr (exprParens)
                    expr (*)
                        expr (*)
                            expr (lValue)
                                lValue (lValue)
                                    ID (a)
                                    index (empty)
                                    field (empty)
                            expr (lValue)
                                lValue (lValue)
                                    ID (x)
                                    index (empty)
                                    field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (x)
                                index (empty)
                                field (empty)
                expr (exprParens)
                    expr (*)
                        expr (lValue)
                            lValue (lValue)
                                ID (b)
                                index (empty)
                                field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (x)
                                index (empty)
                                field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (c)
                    index (empty)
                    field (empty)

49. double z2 = z * 2.0; // initialization from another variable
line (varInit)
    ID (double)
    ID (z2)
    expr (*)
        expr (lValue)
            lValue (lValue)
                ID (z)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (2.0)

50. x = (a + b) / 2 + (c - d) / 2; // multiple parentheses
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (+)
            expr (/)
                expr (exprParens)
                    expr (+)
                        expr (lValue)
                            lValue (lValue)
                                ID (a)
                                index (empty)
                                field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (b)
                                index (empty)
                                field (empty)
                expr (NUM)
                    NUM (2)
            expr (/)
                expr (exprParens)
                    expr (-)
                        expr (lValue)
                            lValue (lValue)
                                ID (c)
                                index (empty)
                                field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (d)
                                index (empty)
                                field (empty)
                expr (NUM)
                    NUM (2)

51. x = ( ( a + b ) / c ) / 2; // nested parentheses
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (/)
            expr (exprParens)
                expr (/)
                    expr (exprParens)
                        expr (+)
                            expr (lValue)
                                lValue (lValue)
                                    ID (a)
                                    index (empty)
                                    field (empty)
                            expr (lValue)
                                lValue (lValue)
                                    ID (b)
                                    index (empty)
                                    field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (c)
                            index (empty)
                            field (empty)
            expr (NUM)
                NUM (2)

52. x = y % 12; // mod operator
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (%)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (NUM)
                NUM (12)

53. 
line (blank)

54. // relational operators and if/else
line (comment)
    COMMENT ( relational operators and if/else)

55. if (count == 0)
line (if)
    expr (==)
        expr (lValue)
            lValue (lValue)
                ID (count)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (0)

56. if (x != 10)
line (if)
    expr (!=)
        expr (lValue)
            lValue (lValue)
                ID (x)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (10)

57. if (temp > 98.6)
line (if)
    expr (>)
        expr (lValue)
            lValue (lValue)
                ID (temp)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (98.6)

58. if ( temp <= 100 )
line (if)
    expr (<=)
        expr (lValue)
            lValue (lValue)
                ID (temp)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (100)

59. else if (x >= 42)
line (elseif)
    expr (>=)
        expr (lValue)
            lValue (lValue)
                ID (x)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (42)

60. else
line (else)

61. boolean differenceIsSmall = Math.abs(x - a) < eps;
line (varInit)
    ID (boolean)
    ID (differenceIsSmall)
    expr (<)
        expr (call)
            fnValue (fnValue)
                ID (Math)
                index (empty)
                method (method)
                    ID (abs)
            exprList (list)
                expr (-)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (a)
                            index (empty)
                            field (empty)
        expr (lValue)
            lValue (lValue)
                ID (eps)
                index (empty)
                field (empty)

62. 
line (blank)

63. // Strings
line (comment)
    COMMENT ( Strings)

64. String greeting; //  declaration without initialization - String type
line (varDecl)
    ID (String)
    idList (list)
        ID (greeting)

65. greeting = "hello"; // assigning value to a string
line (stmt)
    stmt (varAssign)
        ID (greeting)
        expr (STR)
            STR ("hello")

66. String greeting2 = "hello there"; // declaration with initialization - String type
line (varInit)
    ID (String)
    ID (greeting2)
    expr (STR)
        STR ("hello there")

67. String greeting3 = greeting1; // declaration with initialization from another variable's value
line (varInit)
    ID (String)
    ID (greeting3)
    expr (lValue)
        lValue (lValue)
            ID (greeting1)
            index (empty)
            field (empty)

68. String greeting4 = greeting1 + " " + "world"; // declaration with concatenation
line (varInit)
    ID (String)
    ID (greeting4)
    expr (+)
        expr (+)
            expr (lValue)
                lValue (lValue)
                    ID (greeting1)
                    index (empty)
                    field (empty)
            expr (STR)
                STR (" ")
        expr (STR)
            STR ("world")

69. String greeting5 = greeting2.substring(0, 6); // declaration with String method
line (varInit)
    ID (String)
    ID (greeting5)
    expr (call)
        fnValue (fnValue)
            ID (greeting2)
            index (empty)
            method (method)
                ID (substring)
        exprList (list)
            expr (NUM)
                NUM (0)
            expr (NUM)
                NUM (6)

70. s = "boolean variable b = " + true; // String concatenation with boolean
line (stmt)
    stmt (varAssign)
        ID (s)
        expr (+)
            expr (STR)
                STR ("boolean variable b = ")
            expr (BOOL)
                BOOL (true)

71. s = "line1\nline2"; // String with newline
line (stmt)
    stmt (varAssign)
        ID (s)
        expr (STR)
            STR ("line1\nline2")

72. s = "\"Hello,\" he said."; // String with escaped quotes
*** Location 72.23 to 72.23: Invalid character

73. ct.println("He said 'Hello'"); // String with single quotes
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (println)
        exprList (list)
            expr (STR)
                STR ("He said 'Hello'")

74. docsDir = "C:\\Users\\Ben\\Documents\\"; // String with escaped backslash
line (stmt)
    stmt (varAssign)
        ID (docsDir)
        expr (STR)
            STR ("C:\\Users\\Ben\\Documents\\")

75. input = input.toUpperCase();
line (stmt)
    stmt (varAssign)
        ID (input)
        expr (call)
            fnValue (fnValue)
                ID (input)
                index (empty)
                method (method)
                    ID (toUpperCase)
            exprList (empty)

76. i_dont_like_camel_case = "former c programmer";
line (stmt)
    stmt (varAssign)
        ID (i_dont_like_camel_case)
        expr (STR)
            STR ("former c programmer")

77. 
line (blank)

78. // loops
line (comment)
    COMMENT ( loops)

79. for (int i = 0; i < 10; i++)
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (NUM)
                    NUM (10)
        forNext (stmt)
            stmt (postInc)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)

80. for (i = 0; i < 10; i = i + 2)
line (for)
    forControl (three)
        forInit (stmt)
            stmt (varAssign)
                ID (i)
                expr (NUM)
                    NUM (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (NUM)
                    NUM (10)
        forNext (stmt)
            stmt (varAssign)
                ID (i)
                expr (+)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                            index (empty)
                            field (empty)
                    expr (NUM)
                        NUM (2)

81. for (int i = 0; i < 100 && 2 * i < 50; i = i * 2)
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (0)
        forExpr (expr)
            expr (&&)
                expr (<)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                            index (empty)
                            field (empty)
                    expr (NUM)
                        NUM (100)
                expr (<)
                    expr (*)
                        expr (NUM)
                            NUM (2)
                        expr (lValue)
                            lValue (lValue)
                                ID (i)
                                index (empty)
                                field (empty)
                    expr (NUM)
                        NUM (50)
        forNext (stmt)
            stmt (varAssign)
                ID (i)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                            index (empty)
                            field (empty)
                    expr (NUM)
                        NUM (2)

82. for (int i = 100; i > 0; i--)
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (100)
        forExpr (expr)
            expr (>)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (NUM)
                    NUM (0)
        forNext (stmt)
            stmt (postDec)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)

83. for (int i = 10; i > 0; i = i - 2)
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (10)
        forExpr (expr)
            expr (>)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (NUM)
                    NUM (0)
        forNext (stmt)
            stmt (varAssign)
                ID (i)
                expr (-)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                            index (empty)
                            field (empty)
                    expr (NUM)
                        NUM (2)

84. for (int i = 0; i < len; i++)
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (len)
                        index (empty)
                        field (empty)
        forNext (stmt)
            stmt (postInc)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)

85. for (int i = 0; i < arr.length; i++)
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (arr)
                        index (empty)
                        field (field)
                            ID (length)
        forNext (stmt)
            stmt (postInc)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)

86. while (j < 100)
line (while)
    expr (<)
        expr (lValue)
            lValue (lValue)
                ID (j)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (100)
    whileEnd (while)

87. do
line (do)

88. while (j < 100);
line (while)
    expr (<)
        expr (lValue)
            lValue (lValue)
                ID (j)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (100)
    whileEnd (do-while)

89. while (j < foo && i != bar);
line (while)
    expr (&&)
        expr (<)
            expr (lValue)
                lValue (lValue)
                    ID (j)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (foo)
                    index (empty)
                    field (empty)
        expr (!=)
            expr (lValue)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (bar)
                    index (empty)
                    field (empty)
    whileEnd (do-while)

90. while (j >= 100);
line (while)
    expr (>=)
        expr (lValue)
            lValue (lValue)
                ID (j)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (100)
    whileEnd (do-while)

91. while (j <= foo && i != bar);
line (while)
    expr (&&)
        expr (<=)
            expr (lValue)
                lValue (lValue)
                    ID (j)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (foo)
                    index (empty)
                    field (empty)
        expr (!=)
            expr (lValue)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (bar)
                    index (empty)
                    field (empty)
    whileEnd (do-while)

92. while (i < max && notFound)
line (while)
    expr (&&)
        expr (<)
            expr (lValue)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (max)
                    index (empty)
                    field (empty)
        expr (lValue)
            lValue (lValue)
                ID (notFound)
                index (empty)
                field (empty)
    whileEnd (while)

93. 
line (blank)

94. // arrays
line (comment)
    COMMENT ( arrays)

95. int[] a;
line (arrayDecl)
    ID (int)
    idList (list)
        ID (a)

96. int[] a = new int[100];
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (expr)
        expr (newArray)
            ID (int)
            expr (NUM)
                NUM (100)

97. int[] a = new int[foo];
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (expr)
        expr (newArray)
            ID (int)
            expr (lValue)
                lValue (lValue)
                    ID (foo)
                    index (empty)
                    field (empty)

98. int[] a = new int[b.length * 2];
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (expr)
        expr (newArray)
            ID (int)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (b)
                        index (empty)
                        field (field)
                            ID (length)
                expr (NUM)
                    NUM (2)

99. int[] a = {1, 2, 3};
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (list)
        exprList (list)
            expr (NUM)
                NUM (1)
            expr (NUM)
                NUM (2)
            expr (NUM)
                NUM (3)

100. int[] a = { 1,
-- Incomplete line carried forward

101. 2,
-- Incomplete line carried forward

102. 3};
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (list)
        exprList (list)
            expr (NUM)
                NUM (1)
            expr (NUM)
                NUM (2)
            expr (NUM)
                NUM (3)

103. int[] a = b;
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (expr)
        expr (lValue)
            lValue (lValue)
                ID (b)
                index (empty)
                field (empty)

104. double[] data = new double[1000];
line (arrayInit)
    ID (double)
    ID (data)
    arrayInit (expr)
        expr (newArray)
            ID (double)
            expr (NUM)
                NUM (1000)

105. String[] greetings = {"hello", "hola", "bonjour"};
line (arrayInit)
    ID (String)
    ID (greetings)
    arrayInit (list)
        exprList (list)
            expr (STR)
                STR ("hello")
            expr (STR)
                STR ("hola")
            expr (STR)
                STR ("bonjour")

106. GameObj[] targets;
line (arrayDecl)
    ID (GameObj)
    idList (list)
        ID (targets)

107. GameObj[] targets = new GameObj[100];
line (arrayInit)
    ID (GameObj)
    ID (targets)
    arrayInit (expr)
        expr (newArray)
            ID (GameObj)
            expr (NUM)
                NUM (100)

108. GameObj[] targets = new GameObj[numTargets];
line (arrayInit)
    ID (GameObj)
    ID (targets)
    arrayInit (expr)
        expr (newArray)
            ID (GameObj)
            expr (lValue)
                lValue (lValue)
                    ID (numTargets)
                    index (empty)
                    field (empty)

109. foo = bar[i];
line (stmt)
    stmt (varAssign)
        ID (foo)
        expr (lValue)
            lValue (lValue)
                ID (bar)
                index (index)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                            index (empty)
                            field (empty)
                field (empty)

110. foo = bar[0];
line (stmt)
    stmt (varAssign)
        ID (foo)
        expr (lValue)
            lValue (lValue)
                ID (bar)
                index (index)
                    expr (NUM)
                        NUM (0)
                field (empty)

111. 
line (blank)

112. // function definitions
line (comment)
    COMMENT ( function definitions)

113. void foo()
line (func)
    access (empty)
    retType (void)
    ID (foo)
    paramList (empty)

114. void fooBar(int aParameter)
line (func)
    access (empty)
    retType (void)
    ID (fooBar)
    paramList (list)
        param (var)
            ID (int)
            ID (aParameter)

115. int foo(double x)
line (func)
    access (empty)
    retType (value)
        ID (int)
    ID (foo)
    paramList (list)
        param (var)
            ID (double)
            ID (x)

116. String bar(String[] a, int length)
line (func)
    access (empty)
    retType (value)
        ID (String)
    ID (bar)
    paramList (list)
        param (array)
            ID (String)
            ID (a)
        param (var)
            ID (int)
            ID (length)

117. String[] split(String s, String delim)
line (func)
    access (empty)
    retType (array)
        ID (String)
    ID (split)
    paramList (list)
        param (var)
            ID (String)
            ID (s)
        param (var)
            ID (String)
            ID (delim)

118. public double add(double x, double y, double z)
line (func)
    access (public)
    retType (value)
        ID (double)
    ID (add)
    paramList (list)
        param (var)
            ID (double)
            ID (x)
        param (var)
            ID (double)
            ID (y)
        param (var)
            ID (double)
            ID (z)

119. 
line (blank)

120. // function calls
line (comment)
    COMMENT ( function calls)

121. ct.println("Hello world");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (println)
        exprList (list)
            expr (STR)
                STR ("Hello world")

122. ct.println("Hello " + name);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (println)
        exprList (list)
            expr (+)
                expr (STR)
                    STR ("Hello ")
                expr (lValue)
                    lValue (lValue)
                        ID (name)
                        index (empty)
                        field (empty)

123. ct.println("Hello\nWorld");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (println)
        exprList (list)
            expr (STR)
                STR ("Hello\nWorld")

124. x = add(3, 4);
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (call)
            fnValue (fnValue)
                ID (add)
                index (empty)
                method (empty)
            exprList (list)
                expr (NUM)
                    NUM (3)
                expr (NUM)
                    NUM (4)

125. m = mean(1.2, 3.4, 5.67);
line (stmt)
    stmt (varAssign)
        ID (m)
        expr (call)
            fnValue (fnValue)
                ID (mean)
                index (empty)
                method (empty)
            exprList (list)
                expr (NUM)
                    NUM (1.2)
                expr (NUM)
                    NUM (3.4)
                expr (NUM)
                    NUM (5.67)

126. foo(x,
-- Incomplete line carried forward

127. y,
-- Incomplete line carried forward

128. z);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

129. 
line (blank)

130. // multiline comments
line (comment)
    COMMENT ( multiline comments)

131. /* this is a multiline comment
line (comment)
    COMMENT ( this is a multiline comment)

132. * this is the second line
line (blank)

133. * this is the third line
line (blank)

134. */
line (blank)

135. 
line (blank)

136. // Code12 api
line (comment)
    COMMENT ( Code12 api)

137. ct.print("Hello world");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (print)
        exprList (list)
            expr (STR)
                STR ("Hello world")

138. ct.print("Hello world\n");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (print)
        exprList (list)
            expr (STR)
                STR ("Hello world\n")

139. ct.print("Hello "+name);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (print)
        exprList (list)
            expr (+)
                expr (STR)
                    STR ("Hello ")
                expr (lValue)
                    lValue (lValue)
                        ID (name)
                        index (empty)
                        field (empty)

140. ct.print(myObj);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (print)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (myObj)
                    index (empty)
                    field (empty)

141. ct.println("Hello world");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (println)
        exprList (list)
            expr (STR)
                STR ("Hello world")

142. ct.println("Hello world\n");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (println)
        exprList (list)
            expr (STR)
                STR ("Hello world\n")

143. ct.println("Hello "+name);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (println)
        exprList (list)
            expr (+)
                expr (STR)
                    STR ("Hello ")
                expr (lValue)
                    lValue (lValue)
                        ID (name)
                        index (empty)
                        field (empty)

144. ct.println(myObj);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (println)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (myObj)
                    index (empty)
                    field (empty)

145. ct.log(obj);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (log)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (obj)
                    index (empty)
                    field (empty)

146. ct.log("obj1 = ", obj1, "obj2 = ", obj2, "obj3=", obj3, 3.14, Math.PI, 42);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (log)
        exprList (list)
            expr (STR)
                STR ("obj1 = ")
            expr (lValue)
                lValue (lValue)
                    ID (obj1)
                    index (empty)
                    field (empty)
            expr (STR)
                STR ("obj2 = ")
            expr (lValue)
                lValue (lValue)
                    ID (obj2)
                    index (empty)
                    field (empty)
            expr (STR)
                STR ("obj3=")
            expr (lValue)
                lValue (lValue)
                    ID (obj3)
                    index (empty)
                    field (empty)
            expr (NUM)
                NUM (3.14)
            expr (lValue)
                lValue (lValue)
                    ID (Math)
                    index (empty)
                    field (field)
                        ID (PI)
            expr (NUM)
                NUM (42)

147. ct.logm("message");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (logm)
        exprList (list)
            expr (STR)
                STR ("message")

148. ct.logm("message", obj1, obj2);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (logm)
        exprList (list)
            expr (STR)
                STR ("message")
            expr (lValue)
                lValue (lValue)
                    ID (obj1)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (obj2)
                    index (empty)
                    field (empty)

149. ct.showAlert("alert message");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (showAlert)
        exprList (list)
            expr (STR)
                STR ("alert message")

150. ct.showAlert(alertMessage);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (showAlert)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (alertMessage)
                    index (empty)
                    field (empty)

151. int n = ct.inputInt("enter a number: ");
line (varInit)
    ID (int)
    ID (n)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (inputInt)
        exprList (list)
            expr (STR)
                STR ("enter a number: ")

152. n = ct.inputInt("enter a number: ");
line (stmt)
    stmt (varAssign)
        ID (n)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (inputInt)
            exprList (list)
                expr (STR)
                    STR ("enter a number: ")

153. double x = ct.inputNumber("enter a number: ");
line (varInit)
    ID (double)
    ID (x)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (inputNumber)
        exprList (list)
            expr (STR)
                STR ("enter a number: ")

154. x = ct.inputNumber("enter a number: ");
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (inputNumber)
            exprList (list)
                expr (STR)
                    STR ("enter a number: ")

155. boolean quit = ct.inputString("Quit?");
line (varInit)
    ID (boolean)
    ID (quit)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (inputString)
        exprList (list)
            expr (STR)
                STR ("Quit?")

156. quit = ct.inputString("Quit?");
line (stmt)
    stmt (varAssign)
        ID (quit)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (inputString)
            exprList (list)
                expr (STR)
                    STR ("Quit?")

157. ct.setTitle("Title");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setTitle)
        exprList (list)
            expr (STR)
                STR ("Title")

158. ct.setHeight(100.0 * 9 / 16);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setHeight)
        exprList (list)
            expr (/)
                expr (*)
                    expr (NUM)
                        NUM (100.0)
                    expr (NUM)
                        NUM (9)
                expr (NUM)
                    NUM (16)

159. double height = ct.getHeight();
line (varInit)
    ID (double)
    ID (height)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (getHeight)
        exprList (empty)

160. height = ct.getHeight();
line (stmt)
    stmt (varAssign)
        ID (height)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (getHeight)
            exprList (empty)

161. double width = ct.getWidth();
line (varInit)
    ID (double)
    ID (width)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (getWidth)
        exprList (empty)

162. width = ct.getWidth();
line (stmt)
    stmt (varAssign)
        ID (width)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (getWidth)
            exprList (empty)

163. double pxPerUnit = ct.getPixelsPerUnit();
line (varInit)
    ID (double)
    ID (pxPerUnit)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (getPixelsPerUnit)
        exprList (empty)

164. pxPerUnit = ct.getPixelsPerUnit();
line (stmt)
    stmt (varAssign)
        ID (pxPerUnit)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (getPixelsPerUnit)
            exprList (empty)

165. int pixelWidth = ct.round( ct.getWidth() * ct.getPixelsPerUnit() );
line (varInit)
    ID (int)
    ID (pixelWidth)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (round)
        exprList (list)
            expr (*)
                expr (call)
                    fnValue (fnValue)
                        ID (ct)
                        index (empty)
                        method (method)
                            ID (getWidth)
                    exprList (empty)
                expr (call)
                    fnValue (fnValue)
                        ID (ct)
                        index (empty)
                        method (method)
                            ID (getPixelsPerUnit)
                    exprList (empty)

166. int pixelHeight = ct.round( ct.getHeight() * ct.getPixelsPerUnit() );
line (varInit)
    ID (int)
    ID (pixelHeight)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (round)
        exprList (list)
            expr (*)
                expr (call)
                    fnValue (fnValue)
                        ID (ct)
                        index (empty)
                        method (method)
                            ID (getHeight)
                    exprList (empty)
                expr (call)
                    fnValue (fnValue)
                        ID (ct)
                        index (empty)
                        method (method)
                            ID (getPixelsPerUnit)
                    exprList (empty)

167. String currentScreen = ct.getScreen( );
line (varInit)
    ID (String)
    ID (currentScreen)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (getScreen)
        exprList (empty)

168. currentScreen = ct.getScreen( );
line (stmt)
    stmt (varAssign)
        ID (currentScreen)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (getScreen)
            exprList (empty)

169. ct.clearScreen();
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (clearScreen)
        exprList (empty)

170. ct.clearGroup("targets");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (clearGroup)
        exprList (list)
            expr (STR)
                STR ("targets")

171. ct.setBackColor("orange");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setBackColor)
        exprList (list)
            expr (STR)
                STR ("orange")

172. ct.setBackColor(backColor);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setBackColor)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (backColor)
                    index (empty)
                    field (empty)

173. ct.setBackColor(colors[i]);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setBackColor)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (colors)
                    index (index)
                        expr (lValue)
                            lValue (lValue)
                                ID (i)
                                index (empty)
                                field (empty)
                    field (empty)

174. ct.setBackColor(255, 0, 0);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setBackColor)
        exprList (list)
            expr (NUM)
                NUM (255)
            expr (NUM)
                NUM (0)
            expr (NUM)
                NUM (0)

175. ct.setBackImage("background.png");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setBackImage)
        exprList (list)
            expr (STR)
                STR ("background.png")

176. ct.setBackImage("C:\\Users\\ben\\Pictures\\landscape.jpg");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setBackImage)
        exprList (list)
            expr (STR)
                STR ("C:\\Users\\ben\\Pictures\\landscape.jpg")

177. ct.setBackImage(filename);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setBackImage)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (filename)
                    index (empty)
                    field (empty)

178. GameObj circle = ct.circle(x, y, diameter);
line (varInit)
    ID (GameObj)
    ID (circle)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (circle)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (diameter)
                    index (empty)
                    field (empty)

179. GameObj circle = ct.circle(x, y, diameter, color);
line (varInit)
    ID (GameObj)
    ID (circle)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (circle)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (diameter)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (color)
                    index (empty)
                    field (empty)

180. circle = ct.circle(50, 20, 10.5);
line (stmt)
    stmt (varAssign)
        ID (circle)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (circle)
            exprList (list)
                expr (NUM)
                    NUM (50)
                expr (NUM)
                    NUM (20)
                expr (NUM)
                    NUM (10.5)

181. circle = ct.circle(50, 20, 10.5, "blue");
line (stmt)
    stmt (varAssign)
        ID (circle)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (circle)
            exprList (list)
                expr (NUM)
                    NUM (50)
                expr (NUM)
                    NUM (20)
                expr (NUM)
                    NUM (10.5)
                expr (STR)
                    STR ("blue")

182. GameObj rect = ct.rect(x, y, width, height);
line (varInit)
    ID (GameObj)
    ID (rect)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (rect)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (width)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (height)
                    index (empty)
                    field (empty)

183. GameObj rect = ct.rect(x, y, width, height, color);
line (varInit)
    ID (GameObj)
    ID (rect)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (rect)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (width)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (height)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (color)
                    index (empty)
                    field (empty)

184. rect = ct.rect(50, 33.3, 11.2, 23.890);
line (stmt)
    stmt (varAssign)
        ID (rect)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (rect)
            exprList (list)
                expr (NUM)
                    NUM (50)
                expr (NUM)
                    NUM (33.3)
                expr (NUM)
                    NUM (11.2)
                expr (NUM)
                    NUM (23.890)

185. rect = ct.rect(50, 33.3, 11.2, 23.890, "green");
line (stmt)
    stmt (varAssign)
        ID (rect)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (rect)
            exprList (list)
                expr (NUM)
                    NUM (50)
                expr (NUM)
                    NUM (33.3)
                expr (NUM)
                    NUM (11.2)
                expr (NUM)
                    NUM (23.890)
                expr (STR)
                    STR ("green")

186. GameObj line = ct.line( x1, y1, x2, y2 );
line (varInit)
    ID (GameObj)
    ID (line)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (line)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x1)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y1)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (x2)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y2)
                    index (empty)
                    field (empty)

187. GameObj line = ct.line( x1, y1, x2, y2, color );
line (varInit)
    ID (GameObj)
    ID (line)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (line)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x1)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y1)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (x2)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y2)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (color)
                    index (empty)
                    field (empty)

188. line = ct.line( 0, 0, 100, 95 );
line (stmt)
    stmt (varAssign)
        ID (line)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (line)
            exprList (list)
                expr (NUM)
                    NUM (0)
                expr (NUM)
                    NUM (0)
                expr (NUM)
                    NUM (100)
                expr (NUM)
                    NUM (95)

189. line = ct.line( 0, 0, 100, 95, "red" );
line (stmt)
    stmt (varAssign)
        ID (line)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (line)
            exprList (list)
                expr (NUM)
                    NUM (0)
                expr (NUM)
                    NUM (0)
                expr (NUM)
                    NUM (100)
                expr (NUM)
                    NUM (95)
                expr (STR)
                    STR ("red")

190. GameObj text = ct.text( s, x, y, height );
line (varInit)
    ID (GameObj)
    ID (text)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (text)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (s)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (height)
                    index (empty)
                    field (empty)

191. GameObj text = ct.text( s, x, y, height, color );
line (varInit)
    ID (GameObj)
    ID (text)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (text)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (s)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (height)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (color)
                    index (empty)
                    field (empty)

192. text = ct.text( "Score: " + score, 20, 90, 10 );
line (stmt)
    stmt (varAssign)
        ID (text)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (text)
            exprList (list)
                expr (+)
                    expr (STR)
                        STR ("Score: ")
                    expr (lValue)
                        lValue (lValue)
                            ID (score)
                            index (empty)
                            field (empty)
                expr (NUM)
                    NUM (20)
                expr (NUM)
                    NUM (90)
                expr (NUM)
                    NUM (10)

193. text = ct.text( "Score: " + score, 20, 90, 10, "purple" );
line (stmt)
    stmt (varAssign)
        ID (text)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (text)
            exprList (list)
                expr (+)
                    expr (STR)
                        STR ("Score: ")
                    expr (lValue)
                        lValue (lValue)
                            ID (score)
                            index (empty)
                            field (empty)
                expr (NUM)
                    NUM (20)
                expr (NUM)
                    NUM (90)
                expr (NUM)
                    NUM (10)
                expr (STR)
                    STR ("purple")

194. GameObj car = ct.image( filename, x, y, width );
line (varInit)
    ID (GameObj)
    ID (car)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (image)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (filename)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (width)
                    index (empty)
                    field (empty)

195. car = ct.image( "car.png", 42, 25, 38.7 );
line (stmt)
    stmt (varAssign)
        ID (car)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (image)
            exprList (list)
                expr (STR)
                    STR ("car.png")
                expr (NUM)
                    NUM (42)
                expr (NUM)
                    NUM (25)
                expr (NUM)
                    NUM (38.7)

196. car = ct.image( "C:\\Users\\john\\Pictures\\car.jpg", 42, 25, 38.7 );
line (stmt)
    stmt (varAssign)
        ID (car)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (image)
            exprList (list)
                expr (STR)
                    STR ("C:\\Users\\john\\Pictures\\car.jpg")
                expr (NUM)
                    NUM (42)
                expr (NUM)
                    NUM (25)
                expr (NUM)
                    NUM (38.7)

197. if (ct.clicked())
line (if)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (clicked)
        exprList (empty)

198. boolean mouseClicked = ct.clicked();
line (varInit)
    ID (boolean)
    ID (mouseClicked)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (clicked)
        exprList (empty)

199. mouseClicked = ct.clicked();
line (stmt)
    stmt (varAssign)
        ID (mouseClicked)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (clicked)
            exprList (empty)

200. if ( ct.clickX() > 50 )
line (if)
    expr (>)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (clickX)
            exprList (empty)
        expr (NUM)
            NUM (50)

201. double x = ct.clickX();
line (varInit)
    ID (double)
    ID (x)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (clickX)
        exprList (empty)

202. x = ct.clickX();
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (clickX)
            exprList (empty)

203. if ( ct.clickY() <= bottomMargin )
line (if)
    expr (<=)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (clickY)
            exprList (empty)
        expr (lValue)
            lValue (lValue)
                ID (bottomMargin)
                index (empty)
                field (empty)

204. double y = ct.clickY();
line (varInit)
    ID (double)
    ID (y)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (clickY)
        exprList (empty)

205. y = ct.clickY();
line (stmt)
    stmt (varAssign)
        ID (y)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (clickY)
            exprList (empty)

206. if (ct.keyPressed(keyName))
line (if)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (keyPressed)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (keyName)
                    index (empty)
                    field (empty)

207. if (ct.keyPressed("up"))
line (if)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (keyPressed)
        exprList (list)
            expr (STR)
                STR ("up")

208. boolean upKeyPressed = ct.keyPressed("up");
line (varInit)
    ID (boolean)
    ID (upKeyPressed)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (keyPressed)
        exprList (list)
            expr (STR)
                STR ("up")

209. keyPressed = ct.keyPressed(keyName);
line (stmt)
    stmt (varAssign)
        ID (keyPressed)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (keyPressed)
            exprList (list)
                expr (lValue)
                    lValue (lValue)
                        ID (keyName)
                        index (empty)
                        field (empty)

210. if ( ct.charTyped("+") )
line (if)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (charTyped)
        exprList (list)
            expr (STR)
                STR ("+")

211. if ( ct.charTyped(keyName) )
line (if)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (charTyped)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (keyName)
                    index (empty)
                    field (empty)

212. boolean plusCharTyped = ct.charTyped("+");
line (varInit)
    ID (boolean)
    ID (plusCharTyped)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (charTyped)
        exprList (list)
            expr (STR)
                STR ("+")

213. plusCharTyped = ct.charTyped(plusKeyName);
line (stmt)
    stmt (varAssign)
        ID (plusCharTyped)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (charTyped)
            exprList (list)
                expr (lValue)
                    lValue (lValue)
                        ID (plusKeyName)
                        index (empty)
                        field (empty)

214. 
line (blank)

215. rect.width = 10;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (rect)
            index (empty)
            field (field)
                ID (width)
        expr (NUM)
            NUM (10)

216. }
line (end)

217. }
line (end)

218. 
line (blank)

219. public void onMousePress(GameObj obj, double x, double y)
line (func)
    access (public)
    retType (void)
    ID (onMousePress)
    paramList (list)
        param (var)
            ID (GameObj)
            ID (obj)
        param (var)
            ID (double)
            ID (x)
        param (var)
            ID (double)
            ID (y)

220. {
line (begin)

221. // Pop bubbles that get clicked
line (comment)
    COMMENT ( Pop bubbles that get clicked)

222. if (obj != null)
line (if)
    expr (!=)
        expr (lValue)
            lValue (lValue)
                ID (obj)
                index (empty)
                field (empty)
        expr (NULL)
            NULL (null)

223. {
line (begin)

224. obj.delete();
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (obj)
            index (empty)
            method (method)
                ID (delete)
        exprList (empty)

225. ct.sound("pop.wav");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (sound)
        exprList (list)
            expr (STR)
                STR ("pop.wav")

226. }
line (end)

227. }
line (end)

228. }
line (end)

229. 
line (blank)

230. ////////////////////////////////////////////////////////////////////
line (comment)
    COMMENT (//////////////////////////////////////////////////////////////////)

231. ERRORS
************** Beginning of Expected Errors Section **************

232. 
line (blank)

233. // Lexical errors
line (comment)
    COMMENT ( Lexical errors)

234. @               // invalid character
*** Location 234.1 to 234.1: Invalid character

235. foo('a');       // char literals not supported
*** Location 235.5 to 235.5: char type not supported, use double quotes

236. foo(" );        // unclosed string literal
*** Location 236.5 to 236.43: Unclosed string literal

237. interface foo   // unsupported reserved word
*** Location 237.1 to 237.9: Unsupported reserved word "interface"

238. double 1stNumber; // variable name starting with a number
*** Location 238.1 to 238.17: Syntax Error

239. 
line (blank)

240. // Syntax errors
line (comment)
    COMMENT ( Syntax errors)

241. x = 10          // missing ;
*** Location 241.1 to 241.6: Syntax Error

242. foo(x, );       // missing expr in exprList
*** Location 242.1 to 242.9: Syntax Error

243. x = a + ;       // missing expr after binary op
*** Location 243.1 to 243.9: Syntax Error

244. x = a + b * ;   // missing expr after higher precedence binary op
*** Location 244.1 to 244.13: Syntax Error

245. x = a * b + ;   // missing expr after lower precedence binary op
*** Location 245.1 to 245.13: Syntax Error

246. x = ();         // missing expr in parentheses
*** Location 246.1 to 246.7: Syntax Error

247. x = 10 + ! ;    // missing expr after unary op
*** Location 247.1 to 247.12: Syntax Error

248. x = obj.3;      // expected ID after .
*** Location 248.1 to 248.10: Syntax Error

249. if x == 3       // required next token in pattern doesn't match
*** Location 249.1 to 249.9: Syntax Error

250. while i < max   // required next token in pattern doesn't match
*** Location 250.1 to 250.13: Syntax Error

251. for i=0; i<num; i=i+1 // required next token in pattern doesn't match
*** Location 251.1 to 251.21: Syntax Error

252. x + 3;          // no matching pattern
*** Location 252.1 to 252.6: Syntax Error

253. x = 1,000;      // commas in numbers
*** Location 253.1 to 253.10: Syntax Error

254. x = 1.23.45;    // too many decimal points
*** Location 254.1 to 254.12: Syntax Error

255. foo(x,          // (incomplete line continued below)
-- Incomplete line carried forward

256. y)              // missing ;
*** Location 255.1 to 256.2: Syntax Error

257. int i = 3.14;   // incompatible types: possible lossy conversion from double to int
line (varInit)
    ID (int)
    ID (i)
    expr (NUM)
        NUM (3.14)
Uncaught Error 1

258. double x = a < 100; // incompatible types: double/boolean
line (varInit)
    ID (double)
    ID (x)
    expr (<)
        expr (lValue)
            lValue (lValue)
                ID (a)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (100)
Uncaught Error 2

259. x = (a + b + c / 3; // missing closing parenthesis
*** Location 259.1 to 259.19: Syntax Error

260. x = foo(y, bar(z, w); // missing closing parenthesis w/ nested parentheses
*** Location 260.1 to 260.21: Syntax Error

261. x = a + b + c ) / 3; // missing openning parenthesis
*** Location 261.1 to 261.20: Syntax Error

262. if ( i == 1 // missing closing parenthesis with if
*** Location 262.1 to 262.11: Syntax Error

263. x + 1 = x; // confusing left hand side an right hand side of assignment
*** Location 263.1 to 263.10: Syntax Error

264. if ( x = 3 ); // = instead of ==
*** Location 264.1 to 264.13: Syntax Error

265. if ( x => 3 ); // => instead of <=
*** Location 265.1 to 265.14: Syntax Error

266. for(int i=0, i<n, i++) // commas in place of semicolons
*** Location 266.1 to 266.22: Syntax Error

267. for(int i=0: i<n: i++) // colons in place of semicolons
*** Location 267.1 to 267.22: Syntax Error

268. for{int i=0; i<n; i++} // {} in place of ()
*** Location 268.1 to 268.22: Syntax Error

269. 
line (blank)

270. double foo(x, y, z) // missing varibale types for arguments in function definition
*** Location 270.1 to 270.19: Syntax Error

271. ct.println; // missing parenteses for function call without arguments
*** Location 271.1 to 271.11: Syntax Error

272. foo(int x, double y, GameObj z) // missing return type in function definition
*** Location 272.1 to 272.31: Syntax Error

273. foo(int x, double y, GameObj z); // supplying variable types in function call
*** Location 273.1 to 273.32: Syntax Error

274. String s = 'Hello'; // '' in place of "" for strings
*** Location 274.12 to 274.12: char type not supported, use double quotes

275. String s = "A long string
*** Location 275.12 to 275.25: Unclosed string literal

276. on more than one line";
*** Location 276.34 to 276.35: Unclosed string literal

277. ct.println("He said "Hello""); // not escaping quotes in a string literal
*** Location 277.1 to 277.30: Syntax Error

278. 
line (blank)

279. // Code12 api
line (comment)
    COMMENT ( Code12 api)

280. gameObj circle = ct.circle(x, y, diameter); // GameObj miss-spelled
line (varInit)
    ID (gameObj)
    ID (circle)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (circle)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (diameter)
                    index (empty)
                    field (empty)
Uncaught Error 3

281. GameObj circle = ct.circle(x, y, width, height); // too many arguments
line (varInit)
    ID (GameObj)
    ID (circle)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (circle)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (width)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (height)
                    index (empty)
                    field (empty)
Uncaught Error 4

282. GameObj rect = ct.rect(x, y, width); // not enough arguments
line (varInit)
    ID (GameObj)
    ID (rect)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (rect)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (width)
                    index (empty)
                    field (empty)
Uncaught Error 5

283. 
line (blank)

284. // Unsupported Java syntax
line (comment)
    COMMENT ( Unsupported Java syntax)

285. int x = 1, y = 2, z = 3;      // declaring and initializing multiple variables
*** Location 285.1 to 285.24: Syntax Error

286. import java.io.PrintWriter;   // import other than Code12.*
*** Location 286.1 to 286.27: Syntax Error

287. int time = (int)( sec );      // type casting
*** Location 287.1 to 287.24: Syntax Error

288. time %= 3600;                 // %=
*** Location 288.1 to 288.13: Syntax Error

289. int numberOfDucks = (turboMode ? 100 : 1); // ?: operator
*** Location 289.32 to 289.32: Invalid character (The "? :" operator is not supported by Code12)

290. System.out.println("Hello world"); // classes other than GameObj and String
*** Location 290.1 to 290.34: Syntax Error

291. float x = 1.234; // float type
line (varInit)
    ID (float)
    ID (x)
    expr (NUM)
        NUM (1.234)
Uncaught Error 6

292. long i = bigNumber; // long type
line (varInit)
    ID (long)
    ID (i)
    expr (lValue)
        lValue (lValue)
            ID (bigNumber)
            index (empty)
            field (empty)
Uncaught Error 7

293. char ch = 'a'; // char type
*** Location 293.11 to 293.11: char type not supported, use double quotes

294. while(foo) { // opening { in control structure not on it's own line
*** Location 294.1 to 294.12: Syntax Error

295. i++; } // closing } not on it's own line
*** Location 295.1 to 295.6: Syntax Error

296. String s = "A long string" +
*** Location 296.1 to 296.28: Syntax Error

297. "on more than one line using concatenation";
*** Location 297.12 to 297.55: Syntax Error

298. x = a; y = b; // more than one statment on a single line not supported
*** Location 298.1 to 298.13: Syntax Error

299. if (x == 0) ct.println("x is zero"); // control structure must be on their own lines
*** Location 299.1 to 299.36: Syntax Error

300. double getVariable() { return variable; } // blocks must start and end on their own lines
*** Location 300.1 to 300.41: Syntax Error

301. switch (choice) // switch not supported
*** Location 301.1 to 301.6: Unsupported reserved word "switch"

302. continue;   // continue not supported
*** Location 302.1 to 302.8: Unsupported reserved word "continue"

303. x = y = 0; // using the output of an assignment in another assignment
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (=)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (NUM)
                NUM (0)
Uncaught Error 8

304. max = a[i++]; // complex expressions not supported
*** Location 304.1 to 304.13: Syntax Error

305. x = ++i; // prefix increment not supported
*** Location 305.1 to 305.8: Syntax Error

306. x = --i; // prefix decrement not supported
*** Location 306.1 to 306.8: Syntax Error

307. obj.group.equals("targets"); // indexing more than one level at a time not supported
*** Location 307.1 to 307.28: Syntax Error

308. input.toLowerCase().equals("quit"); // indexing after function call not supported
*** Location 308.1 to 308.35: Syntax Error
======= Test Complete =========================================

308 lines processed in 50 ms

9 unexpected errors
8 uncaught errors (59 expected errors)

FAILED
