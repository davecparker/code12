======= Test Started ==========================================

1. import Code12.*;
line (importCode12)
    ID (Code12)

2. 
line (blank)

3. class BubblePop extends Code12Program
line (classUser)
    ID (BubblePop)
    ID (Code12Program)

4. {
line (begin)

5. public static void main(String[] args)
line (main)
    ID (main)
    ID (String)
    ID (args)

6. {
line (begin)

7. Code12.run(new BubblePop());
line (Code12Run)
    ID (Code12)
    ID (run)
    ID (BubblePop)

8. }
line (end)

9. 
line (blank)

10. public void start()
line (func)
    access (public)
    retType (void)
    ID (start)
    paramList (empty)

11. {
line (begin)

12. // Make the background
line (comment)
    COMMENT ( Make the background )

13. ct.setHeight(150);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setHeight)
        exprList (list)
            expr (NUM)
                NUM (150)

14. ct.setBackImage("underwater.jpg");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setBackImage)
        exprList (list)
            expr (STR)
                STR ("underwater.jpg")

15. }
line (end)

16. 
line (blank)

17. public void update()
line (func)
    access (public)
    retType (void)
    ID (update)
    paramList (empty)

18. {
line (begin)

19. // Make bubbles at random times, positions, and sizes
line (comment)
    COMMENT ( Make bubbles at random times, positions, and sizes)

20. if (ct.random(1, 20) == 1)
line (if)
    expr (==)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (random)
            exprList (list)
                expr (NUM)
                    NUM (1)
                expr (NUM)
                    NUM (20)
        expr (NUM)
            NUM (1)

21. {
line (begin)

22. double x = ct.random(0, 100);
line (varInit)
    ID (double)
    ID (x)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (random)
        exprList (list)
            expr (NUM)
                NUM (0)
            expr (NUM)
                NUM (100)

23. double y = ct.getHeight() + 25;
line (varInit)
    ID (double)
    ID (y)
    expr (+)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (getHeight)
            exprList (empty)
        expr (NUM)
            NUM (25)

24. double size = ct.random(5, 20);
line (varInit)
    ID (double)
    ID (size)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (random)
        exprList (list)
            expr (NUM)
                NUM (5)
            expr (NUM)
                NUM (20)

25. GameObj bubble = ct.image("bubble.png",
-- Incomplete line carried forward

26. x, y,
-- Incomplete line carried forward

27. size);
line (varInit)
    ID (GameObj)
    ID (bubble)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (image)
        exprList (list)
            expr (STR)
                STR ("bubble.png")
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (size)
                    index (empty)
                    field (empty)

28. bubble.ySpeed = -1;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (bubble)
            index (empty)
            field (field)
                ID (ySpeed)
        expr (neg)
            expr (NUM)
                NUM (1)

29. bubble.clickable = true;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (bubble)
            index (empty)
            field (field)
                ID (clickable)
        expr (BOOL)
            BOOL (true)

30. GameObj bubbleCopy = bubble; // initialization of GameObj from another GameObj
line (varInit)
    ID (GameObj)
    ID (bubbleCopy)
    expr (lValue)
        lValue (lValue)
            ID (bubble)
            index (empty)
            field (empty)

31. int z; // declaration without initialization - primitive type
line (varDecl)
    ID (int)
    idList (list)
        ID (z)

32. int x, y, z; // declaring multiple variables
line (varDecl)
    ID (int)
    idList (list)
        ID (x)
        ID (y)
        ID (z)

33. z = -1 + 2; // assigning value with int and unary minus
line (stmt)
    stmt (varAssign)
        ID (z)
        expr (+)
            expr (neg)
                expr (NUM)
                    NUM (1)
            expr (NUM)
                NUM (2)

34. z = 0.707; // assigning value with double
line (stmt)
    stmt (varAssign)
        ID (z)
        expr (NUM)
            NUM (0.707)

35. z = .707; // no leading zero
*** Location 35.10 to 35.18: Syntax Error

36. z = -.707; // negative with no leading zero
*** Location 36.10 to 36.19: Syntax Error

37. double xyz = ( 2 * x + y - 3.14 ) / z + 1.414; // initialization with expression
line (varInit)
    ID (double)
    ID (xyz)
    expr (+)
        expr (/)
            expr (exprParens)
                expr (-)
                    expr (+)
                        expr (*)
                            expr (NUM)
                                NUM (2)
                            expr (lValue)
                                lValue (lValue)
                                    ID (x)
                                    index (empty)
                                    field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (y)
                                index (empty)
                                field (empty)
                    expr (NUM)
                        NUM (3.14)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)
        expr (NUM)
            NUM (1.414)

38. double z2 = z * 2.0; // initialization from another variable
line (varInit)
    ID (double)
    ID (z2)
    expr (*)
        expr (lValue)
            lValue (lValue)
                ID (z)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (2.0)

39. // Strings
line (comment)
    COMMENT ( Strings)

40. String greeting; //  declaration without initialization - String type
line (varDecl)
    ID (String)
    idList (list)
        ID (greeting)

41. greeting = "hello"; // assigning value to a string
line (stmt)
    stmt (varAssign)
        ID (greeting)
        expr (STR)
            STR ("hello")

42. String greeting2 = "hello there"; // declaration with initialization - String type
line (varInit)
    ID (String)
    ID (greeting2)
    expr (STR)
        STR ("hello there")

43. String greeting3 = greeting1; // declaration with initialization from another variable's value
line (varInit)
    ID (String)
    ID (greeting3)
    expr (lValue)
        lValue (lValue)
            ID (greeting1)
            index (empty)
            field (empty)

44. String greeting4 = greeting1 + " " + "world"; // declaration with concatenation
line (varInit)
    ID (String)
    ID (greeting4)
    expr (+)
        expr (+)
            expr (lValue)
                lValue (lValue)
                    ID (greeting1)
                    index (empty)
                    field (empty)
            expr (STR)
                STR (" ")
        expr (STR)
            STR ("world")

45. String greeting5 = greeting2.substring(0, 6); // declaration with String method
line (varInit)
    ID (String)
    ID (greeting5)
    expr (call)
        fnValue (fnValue)
            ID (greeting2)
            index (empty)
            method (method)
                ID (substring)
        exprList (list)
            expr (NUM)
                NUM (0)
            expr (NUM)
                NUM (6)

46. // loops
line (comment)
    COMMENT ( loops)

47. for (int i = 0; i < 10; i++)
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (NUM)
                    NUM (10)
        forNext (stmt)
            stmt (postInc)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)

48. for (i = 0; i < 10; i = i + 2)
line (for)
    forControl (three)
        forInit (stmt)
            stmt (varAssign)
                ID (i)
                expr (NUM)
                    NUM (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (NUM)
                    NUM (10)
        forNext (stmt)
            stmt (varAssign)
                ID (i)
                expr (+)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                            index (empty)
                            field (empty)
                    expr (NUM)
                        NUM (2)

49. for (int i = 0; i < 100 && 2 * i < 50; i = i * 2)
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (0)
        forExpr (expr)
            expr (&&)
                expr (<)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                            index (empty)
                            field (empty)
                    expr (NUM)
                        NUM (100)
                expr (<)
                    expr (*)
                        expr (NUM)
                            NUM (2)
                        expr (lValue)
                            lValue (lValue)
                                ID (i)
                                index (empty)
                                field (empty)
                    expr (NUM)
                        NUM (50)
        forNext (stmt)
            stmt (varAssign)
                ID (i)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                            index (empty)
                            field (empty)
                    expr (NUM)
                        NUM (2)

50. for (int i = 100; i > 0; i--)
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (100)
        forExpr (expr)
            expr (>)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (NUM)
                    NUM (0)
        forNext (stmt)
            stmt (postDec)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)

51. for (int i = 10; i > 0; i = i - 2)
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (10)
        forExpr (expr)
            expr (>)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (NUM)
                    NUM (0)
        forNext (stmt)
            stmt (varAssign)
                ID (i)
                expr (-)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                            index (empty)
                            field (empty)
                    expr (NUM)
                        NUM (2)

52. for (int i = 0; i < len; i++)
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (len)
                        index (empty)
                        field (empty)
        forNext (stmt)
            stmt (postInc)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)

53. for (int i = 0; i < arr.length; i++)
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (arr)
                        index (empty)
                        field (field)
                            ID (length)
        forNext (stmt)
            stmt (postInc)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)

54. while (j < 100)
line (while)
    expr (<)
        expr (lValue)
            lValue (lValue)
                ID (j)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (100)
    whileEnd (while)

55. do
line (do)

56. while (j < 100);
line (while)
    expr (<)
        expr (lValue)
            lValue (lValue)
                ID (j)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (100)
    whileEnd (do-while)

57. while (j < foo && i != bar);
line (while)
    expr (&&)
        expr (<)
            expr (lValue)
                lValue (lValue)
                    ID (j)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (foo)
                    index (empty)
                    field (empty)
        expr (!=)
            expr (lValue)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (bar)
                    index (empty)
                    field (empty)
    whileEnd (do-while)

58. // arrays
line (comment)
    COMMENT ( arrays)

59. int[] a;
line (arrayDecl)
    ID (int)
    idList (list)
        ID (a)

60. int[] a = new int[100];
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (expr)
        expr (newArray)
            ID (int)
            expr (NUM)
                NUM (100)

61. int[] a = new int[foo];
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (expr)
        expr (newArray)
            ID (int)
            expr (lValue)
                lValue (lValue)
                    ID (foo)
                    index (empty)
                    field (empty)

62. int[] a = new int[b.length * 2];
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (expr)
        expr (newArray)
            ID (int)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (b)
                        index (empty)
                        field (field)
                            ID (length)
                expr (NUM)
                    NUM (2)

63. int[] a = {1, 2, 3};
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (list)
        exprList (list)
            expr (NUM)
                NUM (1)
            expr (NUM)
                NUM (2)
            expr (NUM)
                NUM (3)

64. int[] a = { 1,
-- Incomplete line carried forward

65. 2,
-- Incomplete line carried forward

66. 3};
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (list)
        exprList (list)
            expr (NUM)
                NUM (1)
            expr (NUM)
                NUM (2)
            expr (NUM)
                NUM (3)

67. int[] a = b;
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (expr)
        expr (lValue)
            lValue (lValue)
                ID (b)
                index (empty)
                field (empty)

68. 
line (blank)

69. }
line (end)

70. }
line (end)

71. 
line (blank)

72. public void onMousePress(GameObj obj, double x, double y)
line (func)
    access (public)
    retType (void)
    ID (onMousePress)
    paramList (list)
        param (var)
            ID (GameObj)
            ID (obj)
        param (var)
            ID (double)
            ID (x)
        param (var)
            ID (double)
            ID (y)

73. {
line (begin)

74. // Pop bubbles that get clicked
line (comment)
    COMMENT ( Pop bubbles that get clicked)

75. if (obj != null)
line (if)
    expr (!=)
        expr (lValue)
            lValue (lValue)
                ID (obj)
                index (empty)
                field (empty)
        expr (NULL)
            NULL (null)

76. {
line (begin)

77. obj.delete();
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (obj)
            index (empty)
            method (method)
                ID (delete)
        exprList (empty)

78. ct.sound("pop.wav");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (sound)
        exprList (list)
            expr (STR)
                STR ("pop.wav")

79. }
line (end)

80. }
line (end)

81. }
line (end)

82. 
line (blank)

83. ////////////////////////////////////////////////////////////////////
line (comment)
    COMMENT (//////////////////////////////////////////////////////////////////)

84. ERRORS
************** Beginning of Expected Errors Section **************

85. 
line (blank)

86. // Lexical errors
line (comment)
    COMMENT ( Lexical errors)

87. @               // invalid character
*** Location 87.1 to 87.1: Invalid character

88. foo('a');       // char literals not supported
*** Location 88.5 to 88.5: char type not supported, use double quotes

89. foo(" );        // unclosed string literal
*** Location 89.5 to 89.43: Unclosed string literal

90. interface foo   // unsupported reserved word
*** Location 90.1 to 90.9: Unsupported reserved word "interface"

91. 
line (blank)

92. // Syntax errors
line (comment)
    COMMENT ( Syntax errors)

93. x = 10          // missing ;
*** Location 93.1 to 93.6: Syntax Error

94. foo(x, );       // missing expr in exprList
*** Location 94.1 to 94.9: Syntax Error

95. x = a + ;       // missing expr after binary op
*** Location 95.1 to 95.9: Syntax Error

96. x = a + b * ;   // missing expr after higher precedence binary op
*** Location 96.1 to 96.13: Syntax Error

97. x = a * b + ;   // missing expr after lower precedence binary op
*** Location 97.1 to 97.13: Syntax Error

98. x = ();         // missing expr in parentheses
*** Location 98.1 to 98.7: Syntax Error

99. x = 10 + ! ;    // missing expr after unary op
*** Location 99.1 to 99.12: Syntax Error

100. x = obj.3;      // expected ID after .
*** Location 100.1 to 100.10: Syntax Error

101. if x == 3       // required next token in pattern doesn't match
*** Location 101.1 to 101.9: Syntax Error

102. x + 3;          // no matching pattern
*** Location 102.1 to 102.6: Syntax Error

103. foo(x,          // (incomplete line continued below)
-- Incomplete line carried forward

104. y)              // missing ;
*** Location 103.1 to 104.2: Syntax Error

105. 
line (blank)

106. // Unsupported Java syntax
line (comment)
    COMMENT ( Unsupported Java syntax)

107. int x = 1, y = 2, z = 3; // declaring and initializing
*** Location 107.1 to 107.24: Syntax Error
======= Test Complete =========================================

107 lines processed in 39 ms

2 unexpected errors
0 uncaught errors (16 expected errors)

FAILED
