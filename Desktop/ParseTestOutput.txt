======= Test Started ==========================================

1. import Code12.*;
line (importCode12)
    ID (Code12)

2. 
line (blank)

3. class BubblePop extends Code12Program
line (classUser)
    ID (BubblePop)
    ID (Code12Program)

4. {
line (begin)

5. public static void main(String[] args)
line (main)
    ID (main)
    ID (String)
    ID (args)

6. {
line (begin)

7. Code12.run(new BubblePop());
line (Code12Run)
    ID (Code12)
    ID (run)
    ID (BubblePop)

8. }
line (end)

9. 
line (blank)

10. public void start()
line (func)
    access (public)
    retType (void)
    ID (start)
    paramList (empty)

11. {
line (begin)

12. // Make the background
line (comment)
    COMMENT ( Make the background )

13. ct.setHeight(150);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setHeight)
        exprList (list)
            expr (NUM)
                NUM (150)

14. ct.setBackImage("underwater.jpg");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setBackImage)
        exprList (list)
            expr (STR)
                STR ("underwater.jpg")

15. }
line (end)

16. 
line (blank)

17. public void update()
line (func)
    access (public)
    retType (void)
    ID (update)
    paramList (empty)

18. {
line (begin)

19. // Make bubbles at random times, positions, and sizes
line (comment)
    COMMENT ( Make bubbles at random times, positions, and sizes)

20. if (ct.random(1, 20) == 1)
line (if)
    expr (==)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (random)
            exprList (list)
                expr (NUM)
                    NUM (1)
                expr (NUM)
                    NUM (20)
        expr (NUM)
            NUM (1)

21. {
line (begin)

22. double x = ct.random(0, 100);
line (varInit)
    ID (double)
    ID (x)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (random)
        exprList (list)
            expr (NUM)
                NUM (0)
            expr (NUM)
                NUM (100)

23. double y = ct.getHeight() + 25;
line (varInit)
    ID (double)
    ID (y)
    expr (+)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (getHeight)
            exprList (empty)
        expr (NUM)
            NUM (25)

24. double size = ct.random(5, 20);
line (varInit)
    ID (double)
    ID (size)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (random)
        exprList (list)
            expr (NUM)
                NUM (5)
            expr (NUM)
                NUM (20)

25. GameObj bubble = ct.image("bubble.png",
-- Incomplete line carried forward

26. x, y,
-- Incomplete line carried forward

27. size);
line (varInit)
    ID (GameObj)
    ID (bubble)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (image)
        exprList (list)
            expr (STR)
                STR ("bubble.png")
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (size)
                    index (empty)
                    field (empty)

28. bubble.ySpeed = -1;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (bubble)
            index (empty)
            field (field)
                ID (ySpeed)
        expr (neg)
            expr (NUM)
                NUM (1)

29. bubble.clickable = true;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (bubble)
            index (empty)
            field (field)
                ID (clickable)
        expr (BOOL)
            BOOL (true)

30. GameObj bubbleCopy = bubble; // initialization of GameObj from another GameObj
line (varInit)
    ID (GameObj)
    ID (bubbleCopy)
    expr (lValue)
        lValue (lValue)
            ID (bubble)
            index (empty)
            field (empty)

31. int z; // declaration without initialization - primitive type
line (varDecl)
    ID (int)
    idList (list)
        ID (z)

32. int x, y, z; // declaring multiple variables
line (varDecl)
    ID (int)
    idList (list)
        ID (x)
        ID (y)
        ID (z)

33. z = -1 + 2; // assigning value with int and unary minus
line (stmt)
    stmt (varAssign)
        ID (z)
        expr (+)
            expr (neg)
                expr (NUM)
                    NUM (1)
            expr (NUM)
                NUM (2)

34. z = 0.707; // assigning value with double
line (stmt)
    stmt (varAssign)
        ID (z)
        expr (NUM)
            NUM (0.707)

35. z = .707; // no leading zero
line (stmt)
    stmt (varAssign)
        ID (z)
        expr (NUM)
            NUM (.707)

36. z = -.707; // negative with no leading zero
line (stmt)
    stmt (varAssign)
        ID (z)
        expr (neg)
            expr (NUM)
                NUM (.707)

37. bigNum = 1.23456E10; // exponential notation E
line (stmt)
    stmt (varAssign)
        ID (bigNum)
        expr (NUM)
            NUM (1.23456E10)

38. bigNum = 1.23456e10; // exponential notation e
line (stmt)
    stmt (varAssign)
        ID (bigNum)
        expr (NUM)
            NUM (1.23456e10)

39. bigNum = 1.23456e+123; // exponential notation e+
line (stmt)
    stmt (varAssign)
        ID (bigNum)
        expr (NUM)
            NUM (1.23456e+123)

40. bigNum = -1.23456E103; // exponential notation -E
line (stmt)
    stmt (varAssign)
        ID (bigNum)
        expr (neg)
            expr (NUM)
                NUM (1.23456E103)

41. bigNum = -1.23456E+103; // exponential notation -E+
line (stmt)
    stmt (varAssign)
        ID (bigNum)
        expr (neg)
            expr (NUM)
                NUM (1.23456E+103)

42. littleNum = 1.23456E-9; // exponential notation E-
line (stmt)
    stmt (varAssign)
        ID (littleNum)
        expr (NUM)
            NUM (1.23456E-9)

43. littleNum = -1.23456E-98; // exponential notation -E-
line (stmt)
    stmt (varAssign)
        ID (littleNum)
        expr (neg)
            expr (NUM)
                NUM (1.23456E-98)

44. littleNum = 1.23456e-987; // exponential notation e-
line (stmt)
    stmt (varAssign)
        ID (littleNum)
        expr (NUM)
            NUM (1.23456e-987)

45. littleNum = -1.23456e-9876; // exponential notation -e-
line (stmt)
    stmt (varAssign)
        ID (littleNum)
        expr (neg)
            expr (NUM)
                NUM (1.23456e-9876)

46. x = .5e7; // exponential notation without leading digit before dot
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (NUM)
            NUM (.5e7)

47. x = 3.e8; // exponential notation without digit after dot
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (NUM)
            NUM (3.e8)

48. double xyz = ( 2 * x + y - 3.14 ) / z + 1.414; // initialization with expression
line (varInit)
    ID (double)
    ID (xyz)
    expr (+)
        expr (/)
            expr (exprParens)
                expr (-)
                    expr (+)
                        expr (*)
                            expr (NUM)
                                NUM (2)
                            expr (lValue)
                                lValue (lValue)
                                    ID (x)
                                    index (empty)
                                    field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (y)
                                index (empty)
                                field (empty)
                    expr (NUM)
                        NUM (3.14)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)
        expr (NUM)
            NUM (1.414)

49. double mean = (a + b + c) / 3;
line (varInit)
    ID (double)
    ID (mean)
    expr (/)
        expr (exprParens)
            expr (+)
                expr (+)
                    expr (lValue)
                        lValue (lValue)
                            ID (a)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (b)
                            index (empty)
                            field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (c)
                        index (empty)
                        field (empty)
        expr (NUM)
            NUM (3)

50. double y = m * x + b;
line (varInit)
    ID (double)
    ID (y)
    expr (+)
        expr (*)
            expr (lValue)
                lValue (lValue)
                    ID (m)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
        expr (lValue)
            lValue (lValue)
                ID (b)
                index (empty)
                field (empty)

51. z = p * r % q + w / x - y;
line (stmt)
    stmt (varAssign)
        ID (z)
        expr (-)
            expr (+)
                expr (%)
                    expr (*)
                        expr (lValue)
                            lValue (lValue)
                                ID (p)
                                index (empty)
                                field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (r)
                                index (empty)
                                field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (q)
                            index (empty)
                            field (empty)
                expr (/)
                    expr (lValue)
                        lValue (lValue)
                            ID (w)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (empty)
                            field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)

52. y = a * x * x + b * x + c;
line (stmt)
    stmt (varAssign)
        ID (y)
        expr (+)
            expr (+)
                expr (*)
                    expr (*)
                        expr (lValue)
                            lValue (lValue)
                                ID (a)
                                index (empty)
                                field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (x)
                                index (empty)
                                field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (empty)
                            field (empty)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (b)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (empty)
                            field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (c)
                    index (empty)
                    field (empty)

53. y = (a * x * x) + (b * x) + c;
line (stmt)
    stmt (varAssign)
        ID (y)
        expr (+)
            expr (+)
                expr (exprParens)
                    expr (*)
                        expr (*)
                            expr (lValue)
                                lValue (lValue)
                                    ID (a)
                                    index (empty)
                                    field (empty)
                            expr (lValue)
                                lValue (lValue)
                                    ID (x)
                                    index (empty)
                                    field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (x)
                                index (empty)
                                field (empty)
                expr (exprParens)
                    expr (*)
                        expr (lValue)
                            lValue (lValue)
                                ID (b)
                                index (empty)
                                field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (x)
                                index (empty)
                                field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (c)
                    index (empty)
                    field (empty)

54. double z2 = z * 2.0; // initialization from another variable
line (varInit)
    ID (double)
    ID (z2)
    expr (*)
        expr (lValue)
            lValue (lValue)
                ID (z)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (2.0)

55. x = (a + b) / 2 + (c - d) / 2; // multiple parentheses
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (+)
            expr (/)
                expr (exprParens)
                    expr (+)
                        expr (lValue)
                            lValue (lValue)
                                ID (a)
                                index (empty)
                                field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (b)
                                index (empty)
                                field (empty)
                expr (NUM)
                    NUM (2)
            expr (/)
                expr (exprParens)
                    expr (-)
                        expr (lValue)
                            lValue (lValue)
                                ID (c)
                                index (empty)
                                field (empty)
                        expr (lValue)
                            lValue (lValue)
                                ID (d)
                                index (empty)
                                field (empty)
                expr (NUM)
                    NUM (2)

56. x = ( ( a + b ) / c ) / 2; // nested parentheses
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (/)
            expr (exprParens)
                expr (/)
                    expr (exprParens)
                        expr (+)
                            expr (lValue)
                                lValue (lValue)
                                    ID (a)
                                    index (empty)
                                    field (empty)
                            expr (lValue)
                                lValue (lValue)
                                    ID (b)
                                    index (empty)
                                    field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (c)
                            index (empty)
                            field (empty)
            expr (NUM)
                NUM (2)

57. x = y % 12; // mod operator
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (%)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (NUM)
                NUM (12)

58. 
line (blank)

59. // relational operators and if/else
line (comment)
    COMMENT ( relational operators and if/else)

60. if (count == 0)
line (if)
    expr (==)
        expr (lValue)
            lValue (lValue)
                ID (count)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (0)

61. if (x != 10)
line (if)
    expr (!=)
        expr (lValue)
            lValue (lValue)
                ID (x)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (10)

62. if (temp > 98.6)
line (if)
    expr (>)
        expr (lValue)
            lValue (lValue)
                ID (temp)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (98.6)

63. if ( temp <= 100 )
line (if)
    expr (<=)
        expr (lValue)
            lValue (lValue)
                ID (temp)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (100)

64. else if (x >= 42)
line (elseif)
    expr (>=)
        expr (lValue)
            lValue (lValue)
                ID (x)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (42)

65. else
line (else)

66. boolean differenceIsSmall = Math.abs(x - a) < eps;
line (varInit)
    ID (boolean)
    ID (differenceIsSmall)
    expr (<)
        expr (call)
            fnValue (fnValue)
                ID (Math)
                index (empty)
                method (method)
                    ID (abs)
            exprList (list)
                expr (-)
                    expr (lValue)
                        lValue (lValue)
                            ID (x)
                            index (empty)
                            field (empty)
                    expr (lValue)
                        lValue (lValue)
                            ID (a)
                            index (empty)
                            field (empty)
        expr (lValue)
            lValue (lValue)
                ID (eps)
                index (empty)
                field (empty)

67. 
line (blank)

68. // Strings
line (comment)
    COMMENT ( Strings)

69. String greeting; //  declaration without initialization - String type
line (varDecl)
    ID (String)
    idList (list)
        ID (greeting)

70. greeting = "hello"; // assigning value to a string
line (stmt)
    stmt (varAssign)
        ID (greeting)
        expr (STR)
            STR ("hello")

71. String greeting2 = "hello there"; // declaration with initialization - String type
line (varInit)
    ID (String)
    ID (greeting2)
    expr (STR)
        STR ("hello there")

72. String greeting3 = greeting1; // declaration with initialization from another variable's value
line (varInit)
    ID (String)
    ID (greeting3)
    expr (lValue)
        lValue (lValue)
            ID (greeting1)
            index (empty)
            field (empty)

73. String greeting4 = greeting1 + " " + "world"; // declaration with concatenation
line (varInit)
    ID (String)
    ID (greeting4)
    expr (+)
        expr (+)
            expr (lValue)
                lValue (lValue)
                    ID (greeting1)
                    index (empty)
                    field (empty)
            expr (STR)
                STR (" ")
        expr (STR)
            STR ("world")

74. String greeting5 = greeting2.substring(0, 6); // declaration with String method
line (varInit)
    ID (String)
    ID (greeting5)
    expr (call)
        fnValue (fnValue)
            ID (greeting2)
            index (empty)
            method (method)
                ID (substring)
        exprList (list)
            expr (NUM)
                NUM (0)
            expr (NUM)
                NUM (6)

75. s = "boolean variable b = " + true; // String concatenation with boolean
line (stmt)
    stmt (varAssign)
        ID (s)
        expr (+)
            expr (STR)
                STR ("boolean variable b = ")
            expr (BOOL)
                BOOL (true)

76. s = "line1\nline2"; // String with newline
line (stmt)
    stmt (varAssign)
        ID (s)
        expr (STR)
            STR ("line1\nline2")

77. s = "\"Hello,\" he said."; // String with escaped quotes
line (stmt)
    stmt (varAssign)
        ID (s)
        expr (STR)
            STR ("\"Hello,\" he said.")

78. ct.println("He said 'Hello'"); // String with single quotes
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (println)
        exprList (list)
            expr (STR)
                STR ("He said 'Hello'")

79. docsDir = "C:\\Users\\Ben\\Documents\\"; // String with escaped backslash
line (stmt)
    stmt (varAssign)
        ID (docsDir)
        expr (STR)
            STR ("C:\\Users\\Ben\\Documents\\")

80. ct.println( "I\tneed\tmy\tspace" ); // String with escaped tab
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (println)
        exprList (list)
            expr (STR)
                STR ("I\tneed\tmy\tspace")

81. input = input.toUpperCase(); // method call
line (stmt)
    stmt (varAssign)
        ID (input)
        expr (call)
            fnValue (fnValue)
                ID (input)
                index (empty)
                method (method)
                    ID (toUpperCase)
            exprList (empty)

82. i_dont_like_camel_case = "butItTakesLessKeystrokes"; // variable identifier with underscores
line (stmt)
    stmt (varAssign)
        ID (i_dont_like_camel_case)
        expr (STR)
            STR ("butItTakesLessKeystrokes")

83. 
line (blank)

84. // loops
line (comment)
    COMMENT ( loops)

85. for (int i = 0; i < 10; i++)
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (NUM)
                    NUM (10)
        forNext (stmt)
            stmt (postInc)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)

86. for (i = 0; i < 10; i = i + 2)
line (for)
    forControl (three)
        forInit (stmt)
            stmt (varAssign)
                ID (i)
                expr (NUM)
                    NUM (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (NUM)
                    NUM (10)
        forNext (stmt)
            stmt (varAssign)
                ID (i)
                expr (+)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                            index (empty)
                            field (empty)
                    expr (NUM)
                        NUM (2)

87. for (int i = 0; i < 100 && 2 * i < 50; i = i * 2)
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (0)
        forExpr (expr)
            expr (&&)
                expr (<)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                            index (empty)
                            field (empty)
                    expr (NUM)
                        NUM (100)
                expr (<)
                    expr (*)
                        expr (NUM)
                            NUM (2)
                        expr (lValue)
                            lValue (lValue)
                                ID (i)
                                index (empty)
                                field (empty)
                    expr (NUM)
                        NUM (50)
        forNext (stmt)
            stmt (varAssign)
                ID (i)
                expr (*)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                            index (empty)
                            field (empty)
                    expr (NUM)
                        NUM (2)

88. for (int i = 100; i > 0; i--)
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (100)
        forExpr (expr)
            expr (>)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (NUM)
                    NUM (0)
        forNext (stmt)
            stmt (postDec)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)

89. for (int i = 10; i > 0; i = i - 2)
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (10)
        forExpr (expr)
            expr (>)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (NUM)
                    NUM (0)
        forNext (stmt)
            stmt (varAssign)
                ID (i)
                expr (-)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                            index (empty)
                            field (empty)
                    expr (NUM)
                        NUM (2)

90. for (int i = 0; i < len; i++)
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (len)
                        index (empty)
                        field (empty)
        forNext (stmt)
            stmt (postInc)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)

91. for (int i = 0; i < arr.length; i++)
line (for)
    forControl (three)
        forInit (varInit)
            ID (int)
            ID (i)
            expr (NUM)
                NUM (0)
        forExpr (expr)
            expr (<)
                expr (lValue)
                    lValue (lValue)
                        ID (i)
                        index (empty)
                        field (empty)
                expr (lValue)
                    lValue (lValue)
                        ID (arr)
                        index (empty)
                        field (field)
                            ID (length)
        forNext (stmt)
            stmt (postInc)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)

92. while (j < 100)
line (while)
    expr (<)
        expr (lValue)
            lValue (lValue)
                ID (j)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (100)
    whileEnd (while)

93. do
line (do)

94. while (j < 100);
line (while)
    expr (<)
        expr (lValue)
            lValue (lValue)
                ID (j)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (100)
    whileEnd (do-while)

95. while (j < foo && i != bar);
line (while)
    expr (&&)
        expr (<)
            expr (lValue)
                lValue (lValue)
                    ID (j)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (foo)
                    index (empty)
                    field (empty)
        expr (!=)
            expr (lValue)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (bar)
                    index (empty)
                    field (empty)
    whileEnd (do-while)

96. while (j >= 100);
line (while)
    expr (>=)
        expr (lValue)
            lValue (lValue)
                ID (j)
                index (empty)
                field (empty)
        expr (NUM)
            NUM (100)
    whileEnd (do-while)

97. while (j <= foo && i != bar);
line (while)
    expr (&&)
        expr (<=)
            expr (lValue)
                lValue (lValue)
                    ID (j)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (foo)
                    index (empty)
                    field (empty)
        expr (!=)
            expr (lValue)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (bar)
                    index (empty)
                    field (empty)
    whileEnd (do-while)

98. while (i < max && notFound)
line (while)
    expr (&&)
        expr (<)
            expr (lValue)
                lValue (lValue)
                    ID (i)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (max)
                    index (empty)
                    field (empty)
        expr (lValue)
            lValue (lValue)
                ID (notFound)
                index (empty)
                field (empty)
    whileEnd (while)

99. 
line (blank)

100. // arrays
line (comment)
    COMMENT ( arrays)

101. int[] a;
line (arrayDecl)
    ID (int)
    idList (list)
        ID (a)

102. int[] a = new int[100];
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (expr)
        expr (newArray)
            ID (int)
            expr (NUM)
                NUM (100)

103. int[] a = new int[foo];
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (expr)
        expr (newArray)
            ID (int)
            expr (lValue)
                lValue (lValue)
                    ID (foo)
                    index (empty)
                    field (empty)

104. int[] a = new int[b.length * 2];
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (expr)
        expr (newArray)
            ID (int)
            expr (*)
                expr (lValue)
                    lValue (lValue)
                        ID (b)
                        index (empty)
                        field (field)
                            ID (length)
                expr (NUM)
                    NUM (2)

105. int[] a = {1, 2, 3};
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (list)
        exprList (list)
            expr (NUM)
                NUM (1)
            expr (NUM)
                NUM (2)
            expr (NUM)
                NUM (3)

106. int[] a = { 1,
-- Incomplete line carried forward

107. 2,
-- Incomplete line carried forward

108. 3};
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (list)
        exprList (list)
            expr (NUM)
                NUM (1)
            expr (NUM)
                NUM (2)
            expr (NUM)
                NUM (3)

109. int[] a = b;
line (arrayInit)
    ID (int)
    ID (a)
    arrayInit (expr)
        expr (lValue)
            lValue (lValue)
                ID (b)
                index (empty)
                field (empty)

110. double[] data = new double[1000];
line (arrayInit)
    ID (double)
    ID (data)
    arrayInit (expr)
        expr (newArray)
            ID (double)
            expr (NUM)
                NUM (1000)

111. String[] greetings = {"hello", "hola", "bonjour"};
line (arrayInit)
    ID (String)
    ID (greetings)
    arrayInit (list)
        exprList (list)
            expr (STR)
                STR ("hello")
            expr (STR)
                STR ("hola")
            expr (STR)
                STR ("bonjour")

112. GameObj[] targets;
line (arrayDecl)
    ID (GameObj)
    idList (list)
        ID (targets)

113. GameObj[] targets = new GameObj[100];
line (arrayInit)
    ID (GameObj)
    ID (targets)
    arrayInit (expr)
        expr (newArray)
            ID (GameObj)
            expr (NUM)
                NUM (100)

114. GameObj[] targets = new GameObj[numTargets];
line (arrayInit)
    ID (GameObj)
    ID (targets)
    arrayInit (expr)
        expr (newArray)
            ID (GameObj)
            expr (lValue)
                lValue (lValue)
                    ID (numTargets)
                    index (empty)
                    field (empty)

115. foo = bar[i];
line (stmt)
    stmt (varAssign)
        ID (foo)
        expr (lValue)
            lValue (lValue)
                ID (bar)
                index (index)
                    expr (lValue)
                        lValue (lValue)
                            ID (i)
                            index (empty)
                            field (empty)
                field (empty)

116. foo = bar[0];
line (stmt)
    stmt (varAssign)
        ID (foo)
        expr (lValue)
            lValue (lValue)
                ID (bar)
                index (index)
                    expr (NUM)
                        NUM (0)
                field (empty)

117. 
line (blank)

118. // function definitions
line (comment)
    COMMENT ( function definitions)

119. void foo()
line (func)
    access (empty)
    retType (void)
    ID (foo)
    paramList (empty)

120. void fooBar(int aParameter)
line (func)
    access (empty)
    retType (void)
    ID (fooBar)
    paramList (list)
        param (var)
            ID (int)
            ID (aParameter)

121. int foo(double x)
line (func)
    access (empty)
    retType (value)
        ID (int)
    ID (foo)
    paramList (list)
        param (var)
            ID (double)
            ID (x)

122. String bar(String[] a, int length)
line (func)
    access (empty)
    retType (value)
        ID (String)
    ID (bar)
    paramList (list)
        param (array)
            ID (String)
            ID (a)
        param (var)
            ID (int)
            ID (length)

123. String[] split(String s, String delim)
line (func)
    access (empty)
    retType (array)
        ID (String)
    ID (split)
    paramList (list)
        param (var)
            ID (String)
            ID (s)
        param (var)
            ID (String)
            ID (delim)

124. public double add(double x, double y, double z)
line (func)
    access (public)
    retType (value)
        ID (double)
    ID (add)
    paramList (list)
        param (var)
            ID (double)
            ID (x)
        param (var)
            ID (double)
            ID (y)
        param (var)
            ID (double)
            ID (z)

125. 
line (blank)

126. // function calls
line (comment)
    COMMENT ( function calls)

127. ct.println("Hello world");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (println)
        exprList (list)
            expr (STR)
                STR ("Hello world")

128. ct.println("Hello " + name);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (println)
        exprList (list)
            expr (+)
                expr (STR)
                    STR ("Hello ")
                expr (lValue)
                    lValue (lValue)
                        ID (name)
                        index (empty)
                        field (empty)

129. ct.println("Hello\nWorld");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (println)
        exprList (list)
            expr (STR)
                STR ("Hello\nWorld")

130. x = add(3, 4);
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (call)
            fnValue (fnValue)
                ID (add)
                index (empty)
                method (empty)
            exprList (list)
                expr (NUM)
                    NUM (3)
                expr (NUM)
                    NUM (4)

131. m = mean(1.2, 3.4, 5.67);
line (stmt)
    stmt (varAssign)
        ID (m)
        expr (call)
            fnValue (fnValue)
                ID (mean)
                index (empty)
                method (empty)
            exprList (list)
                expr (NUM)
                    NUM (1.2)
                expr (NUM)
                    NUM (3.4)
                expr (NUM)
                    NUM (5.67)

132. foo(x,
-- Incomplete line carried forward

133. y,
-- Incomplete line carried forward

134. z);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (foo)
            index (empty)
            method (empty)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (z)
                    index (empty)
                    field (empty)

135. 
line (blank)

136. // multiline comments
line (comment)
    COMMENT ( multiline comments)

137. /* this is a multiline comment
line (comment)
    COMMENT ( this is a multiline comment)

138. * this is the second line
line (blank)

139. * this is the third line
line (blank)

140. */
line (blank)

141. 
line (blank)

142. // Code12 api
line (comment)
    COMMENT ( Code12 api)

143. ct.print("Hello world");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (print)
        exprList (list)
            expr (STR)
                STR ("Hello world")

144. ct.print("Hello world\n");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (print)
        exprList (list)
            expr (STR)
                STR ("Hello world\n")

145. ct.print("Hello "+name);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (print)
        exprList (list)
            expr (+)
                expr (STR)
                    STR ("Hello ")
                expr (lValue)
                    lValue (lValue)
                        ID (name)
                        index (empty)
                        field (empty)

146. ct.print(myObj);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (print)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (myObj)
                    index (empty)
                    field (empty)

147. ct.println("Hello world");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (println)
        exprList (list)
            expr (STR)
                STR ("Hello world")

148. ct.println("Hello world\n");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (println)
        exprList (list)
            expr (STR)
                STR ("Hello world\n")

149. ct.println("Hello "+name);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (println)
        exprList (list)
            expr (+)
                expr (STR)
                    STR ("Hello ")
                expr (lValue)
                    lValue (lValue)
                        ID (name)
                        index (empty)
                        field (empty)

150. ct.println(myObj);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (println)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (myObj)
                    index (empty)
                    field (empty)

151. ct.log(obj);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (log)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (obj)
                    index (empty)
                    field (empty)

152. ct.log("obj1 = ", obj1, "obj2 = ", obj2, "obj3=", obj3, 3.14, Math.PI, 42);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (log)
        exprList (list)
            expr (STR)
                STR ("obj1 = ")
            expr (lValue)
                lValue (lValue)
                    ID (obj1)
                    index (empty)
                    field (empty)
            expr (STR)
                STR ("obj2 = ")
            expr (lValue)
                lValue (lValue)
                    ID (obj2)
                    index (empty)
                    field (empty)
            expr (STR)
                STR ("obj3=")
            expr (lValue)
                lValue (lValue)
                    ID (obj3)
                    index (empty)
                    field (empty)
            expr (NUM)
                NUM (3.14)
            expr (lValue)
                lValue (lValue)
                    ID (Math)
                    index (empty)
                    field (field)
                        ID (PI)
            expr (NUM)
                NUM (42)

153. ct.logm("message");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (logm)
        exprList (list)
            expr (STR)
                STR ("message")

154. ct.logm("message", obj1, obj2);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (logm)
        exprList (list)
            expr (STR)
                STR ("message")
            expr (lValue)
                lValue (lValue)
                    ID (obj1)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (obj2)
                    index (empty)
                    field (empty)

155. ct.showAlert("alert message");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (showAlert)
        exprList (list)
            expr (STR)
                STR ("alert message")

156. ct.showAlert(alertMessage);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (showAlert)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (alertMessage)
                    index (empty)
                    field (empty)

157. int n = ct.inputInt("enter a number: ");
line (varInit)
    ID (int)
    ID (n)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (inputInt)
        exprList (list)
            expr (STR)
                STR ("enter a number: ")

158. n = ct.inputInt("enter a number: ");
line (stmt)
    stmt (varAssign)
        ID (n)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (inputInt)
            exprList (list)
                expr (STR)
                    STR ("enter a number: ")

159. double x = ct.inputNumber("enter a number: ");
line (varInit)
    ID (double)
    ID (x)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (inputNumber)
        exprList (list)
            expr (STR)
                STR ("enter a number: ")

160. x = ct.inputNumber("enter a number: ");
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (inputNumber)
            exprList (list)
                expr (STR)
                    STR ("enter a number: ")

161. boolean quit = ct.inputString("Quit?");
line (varInit)
    ID (boolean)
    ID (quit)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (inputString)
        exprList (list)
            expr (STR)
                STR ("Quit?")

162. quit = ct.inputString("Quit?");
line (stmt)
    stmt (varAssign)
        ID (quit)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (inputString)
            exprList (list)
                expr (STR)
                    STR ("Quit?")

163. ct.setTitle("Title");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setTitle)
        exprList (list)
            expr (STR)
                STR ("Title")

164. ct.setHeight(100.0 * 9 / 16);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setHeight)
        exprList (list)
            expr (/)
                expr (*)
                    expr (NUM)
                        NUM (100.0)
                    expr (NUM)
                        NUM (9)
                expr (NUM)
                    NUM (16)

165. double height = ct.getHeight();
line (varInit)
    ID (double)
    ID (height)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (getHeight)
        exprList (empty)

166. height = ct.getHeight();
line (stmt)
    stmt (varAssign)
        ID (height)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (getHeight)
            exprList (empty)

167. double width = ct.getWidth();
line (varInit)
    ID (double)
    ID (width)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (getWidth)
        exprList (empty)

168. width = ct.getWidth();
line (stmt)
    stmt (varAssign)
        ID (width)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (getWidth)
            exprList (empty)

169. double pxPerUnit = ct.getPixelsPerUnit();
line (varInit)
    ID (double)
    ID (pxPerUnit)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (getPixelsPerUnit)
        exprList (empty)

170. pxPerUnit = ct.getPixelsPerUnit();
line (stmt)
    stmt (varAssign)
        ID (pxPerUnit)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (getPixelsPerUnit)
            exprList (empty)

171. int pixelWidth = ct.round( ct.getWidth() * ct.getPixelsPerUnit() );
line (varInit)
    ID (int)
    ID (pixelWidth)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (round)
        exprList (list)
            expr (*)
                expr (call)
                    fnValue (fnValue)
                        ID (ct)
                        index (empty)
                        method (method)
                            ID (getWidth)
                    exprList (empty)
                expr (call)
                    fnValue (fnValue)
                        ID (ct)
                        index (empty)
                        method (method)
                            ID (getPixelsPerUnit)
                    exprList (empty)

172. int pixelHeight = ct.round( ct.getHeight() * ct.getPixelsPerUnit() );
line (varInit)
    ID (int)
    ID (pixelHeight)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (round)
        exprList (list)
            expr (*)
                expr (call)
                    fnValue (fnValue)
                        ID (ct)
                        index (empty)
                        method (method)
                            ID (getHeight)
                    exprList (empty)
                expr (call)
                    fnValue (fnValue)
                        ID (ct)
                        index (empty)
                        method (method)
                            ID (getPixelsPerUnit)
                    exprList (empty)

173. String currentScreen = ct.getScreen( );
line (varInit)
    ID (String)
    ID (currentScreen)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (getScreen)
        exprList (empty)

174. currentScreen = ct.getScreen( );
line (stmt)
    stmt (varAssign)
        ID (currentScreen)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (getScreen)
            exprList (empty)

175. ct.clearScreen();
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (clearScreen)
        exprList (empty)

176. ct.clearGroup("targets");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (clearGroup)
        exprList (list)
            expr (STR)
                STR ("targets")

177. ct.setBackColor("orange");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setBackColor)
        exprList (list)
            expr (STR)
                STR ("orange")

178. ct.setBackColor(backColor);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setBackColor)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (backColor)
                    index (empty)
                    field (empty)

179. ct.setBackColor(colors[i]);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setBackColor)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (colors)
                    index (index)
                        expr (lValue)
                            lValue (lValue)
                                ID (i)
                                index (empty)
                                field (empty)
                    field (empty)

180. ct.setBackColor(255, 0, 0);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setBackColor)
        exprList (list)
            expr (NUM)
                NUM (255)
            expr (NUM)
                NUM (0)
            expr (NUM)
                NUM (0)

181. ct.setBackImage("background.png");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setBackImage)
        exprList (list)
            expr (STR)
                STR ("background.png")

182. ct.setBackImage("C:\\Users\\ben\\Pictures\\landscape.jpg");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setBackImage)
        exprList (list)
            expr (STR)
                STR ("C:\\Users\\ben\\Pictures\\landscape.jpg")

183. ct.setBackImage(filename);
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (setBackImage)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (filename)
                    index (empty)
                    field (empty)

184. GameObj circle = ct.circle(x, y, diameter);
line (varInit)
    ID (GameObj)
    ID (circle)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (circle)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (diameter)
                    index (empty)
                    field (empty)

185. GameObj circle = ct.circle(x, y, diameter, color);
line (varInit)
    ID (GameObj)
    ID (circle)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (circle)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (diameter)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (color)
                    index (empty)
                    field (empty)

186. circle = ct.circle(50, 20, 10.5);
line (stmt)
    stmt (varAssign)
        ID (circle)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (circle)
            exprList (list)
                expr (NUM)
                    NUM (50)
                expr (NUM)
                    NUM (20)
                expr (NUM)
                    NUM (10.5)

187. circle = ct.circle(50, 20, 10.5, "blue");
line (stmt)
    stmt (varAssign)
        ID (circle)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (circle)
            exprList (list)
                expr (NUM)
                    NUM (50)
                expr (NUM)
                    NUM (20)
                expr (NUM)
                    NUM (10.5)
                expr (STR)
                    STR ("blue")

188. GameObj rect = ct.rect(x, y, width, height);
line (varInit)
    ID (GameObj)
    ID (rect)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (rect)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (width)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (height)
                    index (empty)
                    field (empty)

189. GameObj rect = ct.rect(x, y, width, height, color);
line (varInit)
    ID (GameObj)
    ID (rect)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (rect)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (width)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (height)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (color)
                    index (empty)
                    field (empty)

190. rect = ct.rect(50, 33.3, 11.2, 23.890);
line (stmt)
    stmt (varAssign)
        ID (rect)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (rect)
            exprList (list)
                expr (NUM)
                    NUM (50)
                expr (NUM)
                    NUM (33.3)
                expr (NUM)
                    NUM (11.2)
                expr (NUM)
                    NUM (23.890)

191. rect = ct.rect(50, 33.3, 11.2, 23.890, "green");
line (stmt)
    stmt (varAssign)
        ID (rect)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (rect)
            exprList (list)
                expr (NUM)
                    NUM (50)
                expr (NUM)
                    NUM (33.3)
                expr (NUM)
                    NUM (11.2)
                expr (NUM)
                    NUM (23.890)
                expr (STR)
                    STR ("green")

192. GameObj line = ct.line( x1, y1, x2, y2 );
line (varInit)
    ID (GameObj)
    ID (line)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (line)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x1)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y1)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (x2)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y2)
                    index (empty)
                    field (empty)

193. GameObj line = ct.line( x1, y1, x2, y2, color );
line (varInit)
    ID (GameObj)
    ID (line)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (line)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (x1)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y1)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (x2)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y2)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (color)
                    index (empty)
                    field (empty)

194. line = ct.line( 0, 0, 100, 95 );
line (stmt)
    stmt (varAssign)
        ID (line)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (line)
            exprList (list)
                expr (NUM)
                    NUM (0)
                expr (NUM)
                    NUM (0)
                expr (NUM)
                    NUM (100)
                expr (NUM)
                    NUM (95)

195. line = ct.line( 0, 0, 100, 95, "red" );
line (stmt)
    stmt (varAssign)
        ID (line)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (line)
            exprList (list)
                expr (NUM)
                    NUM (0)
                expr (NUM)
                    NUM (0)
                expr (NUM)
                    NUM (100)
                expr (NUM)
                    NUM (95)
                expr (STR)
                    STR ("red")

196. GameObj text = ct.text( s, x, y, height );
line (varInit)
    ID (GameObj)
    ID (text)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (text)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (s)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (height)
                    index (empty)
                    field (empty)

197. GameObj text = ct.text( s, x, y, height, color );
line (varInit)
    ID (GameObj)
    ID (text)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (text)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (s)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (height)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (color)
                    index (empty)
                    field (empty)

198. text = ct.text( "Score: " + score, 20, 90, 10 );
line (stmt)
    stmt (varAssign)
        ID (text)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (text)
            exprList (list)
                expr (+)
                    expr (STR)
                        STR ("Score: ")
                    expr (lValue)
                        lValue (lValue)
                            ID (score)
                            index (empty)
                            field (empty)
                expr (NUM)
                    NUM (20)
                expr (NUM)
                    NUM (90)
                expr (NUM)
                    NUM (10)

199. text = ct.text( "Score: " + score, 20, 90, 10, "purple" );
line (stmt)
    stmt (varAssign)
        ID (text)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (text)
            exprList (list)
                expr (+)
                    expr (STR)
                        STR ("Score: ")
                    expr (lValue)
                        lValue (lValue)
                            ID (score)
                            index (empty)
                            field (empty)
                expr (NUM)
                    NUM (20)
                expr (NUM)
                    NUM (90)
                expr (NUM)
                    NUM (10)
                expr (STR)
                    STR ("purple")

200. GameObj car = ct.image( filename, x, y, width );
line (varInit)
    ID (GameObj)
    ID (car)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (image)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (filename)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (x)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (y)
                    index (empty)
                    field (empty)
            expr (lValue)
                lValue (lValue)
                    ID (width)
                    index (empty)
                    field (empty)

201. car = ct.image( "car.png", 42, 25, 38.7 );
line (stmt)
    stmt (varAssign)
        ID (car)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (image)
            exprList (list)
                expr (STR)
                    STR ("car.png")
                expr (NUM)
                    NUM (42)
                expr (NUM)
                    NUM (25)
                expr (NUM)
                    NUM (38.7)

202. car = ct.image( "C:\\Users\\john\\Pictures\\car.jpg", 42, 25, 38.7 );
line (stmt)
    stmt (varAssign)
        ID (car)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (image)
            exprList (list)
                expr (STR)
                    STR ("C:\\Users\\john\\Pictures\\car.jpg")
                expr (NUM)
                    NUM (42)
                expr (NUM)
                    NUM (25)
                expr (NUM)
                    NUM (38.7)

203. if (ct.clicked())
line (if)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (clicked)
        exprList (empty)

204. boolean mouseClicked = ct.clicked();
line (varInit)
    ID (boolean)
    ID (mouseClicked)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (clicked)
        exprList (empty)

205. mouseClicked = ct.clicked();
line (stmt)
    stmt (varAssign)
        ID (mouseClicked)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (clicked)
            exprList (empty)

206. if ( ct.clickX() > 50 )
line (if)
    expr (>)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (clickX)
            exprList (empty)
        expr (NUM)
            NUM (50)

207. double x = ct.clickX();
line (varInit)
    ID (double)
    ID (x)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (clickX)
        exprList (empty)

208. x = ct.clickX();
line (stmt)
    stmt (varAssign)
        ID (x)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (clickX)
            exprList (empty)

209. if ( ct.clickY() <= bottomMargin )
line (if)
    expr (<=)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (clickY)
            exprList (empty)
        expr (lValue)
            lValue (lValue)
                ID (bottomMargin)
                index (empty)
                field (empty)

210. double y = ct.clickY();
line (varInit)
    ID (double)
    ID (y)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (clickY)
        exprList (empty)

211. y = ct.clickY();
line (stmt)
    stmt (varAssign)
        ID (y)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (clickY)
            exprList (empty)

212. if (ct.keyPressed(keyName))
line (if)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (keyPressed)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (keyName)
                    index (empty)
                    field (empty)

213. if (ct.keyPressed("up"))
line (if)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (keyPressed)
        exprList (list)
            expr (STR)
                STR ("up")

214. boolean upKeyPressed = ct.keyPressed("up");
line (varInit)
    ID (boolean)
    ID (upKeyPressed)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (keyPressed)
        exprList (list)
            expr (STR)
                STR ("up")

215. keyPressed = ct.keyPressed(keyName);
line (stmt)
    stmt (varAssign)
        ID (keyPressed)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (keyPressed)
            exprList (list)
                expr (lValue)
                    lValue (lValue)
                        ID (keyName)
                        index (empty)
                        field (empty)

216. if ( ct.charTyped("+") )
line (if)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (charTyped)
        exprList (list)
            expr (STR)
                STR ("+")

217. if ( ct.charTyped(keyName) )
line (if)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (charTyped)
        exprList (list)
            expr (lValue)
                lValue (lValue)
                    ID (keyName)
                    index (empty)
                    field (empty)

218. boolean plusCharTyped = ct.charTyped("+");
line (varInit)
    ID (boolean)
    ID (plusCharTyped)
    expr (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (charTyped)
        exprList (list)
            expr (STR)
                STR ("+")

219. plusCharTyped = ct.charTyped(plusKeyName);
line (stmt)
    stmt (varAssign)
        ID (plusCharTyped)
        expr (call)
            fnValue (fnValue)
                ID (ct)
                index (empty)
                method (method)
                    ID (charTyped)
            exprList (list)
                expr (lValue)
                    lValue (lValue)
                        ID (plusKeyName)
                        index (empty)
                        field (empty)

220. 
line (blank)

221. rect.width = 10;
line (stmt)
    stmt (assign)
        lValue (lValue)
            ID (rect)
            index (empty)
            field (field)
                ID (width)
        expr (NUM)
            NUM (10)

222. }
line (end)

223. }
line (end)

224. 
line (blank)

225. public void onMousePress(GameObj obj, double x, double y)
line (func)
    access (public)
    retType (void)
    ID (onMousePress)
    paramList (list)
        param (var)
            ID (GameObj)
            ID (obj)
        param (var)
            ID (double)
            ID (x)
        param (var)
            ID (double)
            ID (y)

226. {
line (begin)

227. // Pop bubbles that get clicked
line (comment)
    COMMENT ( Pop bubbles that get clicked)

228. if (obj != null)
line (if)
    expr (!=)
        expr (lValue)
            lValue (lValue)
                ID (obj)
                index (empty)
                field (empty)
        expr (NULL)
            NULL (null)

229. {
line (begin)

230. obj.delete();
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (obj)
            index (empty)
            method (method)
                ID (delete)
        exprList (empty)

231. ct.sound("pop.wav");
line (stmt)
    stmt (call)
        fnValue (fnValue)
            ID (ct)
            index (empty)
            method (method)
                ID (sound)
        exprList (list)
            expr (STR)
                STR ("pop.wav")

232. }
line (end)

233. }
line (end)

234. }
line (end)

235. 
line (blank)

236. ////////////////////////////////////////////////////////////////////
line (comment)
    COMMENT (//////////////////////////////////////////////////////////////////)

237. ERRORS
************** Beginning of Expected Errors Section **************

238. 
line (blank)

239. // Lexical errors
line (comment)
    COMMENT ( Lexical errors)

240. @               // invalid character
*** Location 240.1 to 240.1: Invalid character

241. foo('a');       // char literals not supported
*** Location 241.5 to 241.5: char type not supported, use double quotes

242. foo(" );        // unclosed string literal
*** Location 242.5 to 242.43: Unclosed string literal

243. foo("\);        // unclosed string literal ending in backslash
*** Location 243.6 to 243.7: Unsupported or illegal escape sequence

244. s = "\          // unclosed string literal ending in backslash
*** Location 244.6 to 244.7: Unsupported or illegal escape sequence

245. s = "\";        // unclosed string literal from escaped double quote
*** Location 245.5 to 245.68: Unclosed string literal

246. s = "\ ";       // illegal escape character
*** Location 246.6 to 246.7: Unsupported or illegal escape sequence

247. s = "\r"        // unsupported escape sequence
*** Location 247.6 to 247.7: Unsupported or illegal escape sequence

248. interface foo   // unsupported reserved word
*** Location 248.1 to 248.9: Unsupported reserved word "interface"

249. double 1stNumber; // variable name starting with a number
*** Location 249.1 to 249.17: Syntax Error

250. x = obj.1stNumber; // field name starting with a number
*** Location 250.1 to 250.18: Syntax Error

251. 
line (blank)

252. // Syntax errors
line (comment)
    COMMENT ( Syntax errors)

253. x = 10          // missing ;
*** Location 253.29 to 253.29: Statement should end with a semicolon (;)

254. foo(x, );       // missing expr in exprList
*** Location 254.1 to 254.9: Syntax Error

255. x = a + ;       // missing expr after binary op
*** Location 255.9 to 255.9: Expected expression after + operator
*** Reference 255.7 to 255.7

256. x = a ++ b;     // unexpected token after unary op
*** Location 256.1 to 256.11: Syntax Error

257. x = a ** b;     // missing expression between binary ops
*** Location 257.8 to 257.8: Expected expression after * operator
*** Reference 257.7 to 257.7

258. x = a + b * ;   // missing expr after higher precedence binary op
*** Location 258.13 to 258.13: Expected expression after * operator
*** Reference 258.11 to 258.11

259. x = a * b + ;   // missing expr after lower precedence binary op
*** Location 259.13 to 259.13: Expected expression after + operator
*** Reference 259.11 to 259.11

260. x = ();         // missing expr in parentheses
*** Location 260.1 to 260.7: Syntax Error

261. x = 10 + ! ;    // missing expr after unary op
*** Location 261.10 to 261.10: Expected expression after + operator
*** Reference 261.8 to 261.8

262. x = obj.3;      // expected ID after .
*** Location 262.1 to 262.10: Syntax Error

263. x = 3.obj;      // ID expected before .
*** Location 263.1 to 263.10: Syntax Error

264. if x == 3       // required next token in pattern doesn't match
*** Location 264.4 to 264.9: if statement test must be in parentheses

265. while i < max   // required next token in pattern doesn't match
*** Location 265.1 to 265.13: Syntax Error

266. for i=0; i<num; i=i+1 // required next token in pattern doesn't match
*** Location 266.1 to 266.21: Syntax Error

267. x + 3;          // no matching pattern
*** Location 267.1 to 267.6: Syntax Error

268. x = 1,000;      // commas in numbers
*** Location 268.1 to 268.10: Syntax Error

269. x = 1.23.45;    // too many decimal points
*** Location 269.1 to 269.12: Syntax Error

270. x = 3.14e1.0;   // exponential notation with decimal point in exponent
*** Location 270.1 to 270.13: Syntax Error

271. x = 3.14e;      // Invalid exponential notation
*** Location 271.5 to 271.10: Invalid exponential notation

272. x = 3.141e+;    // Invalid exponential notation
*** Location 272.5 to 272.12: Invalid exponential notation

273. x = 3.1415e-;   // Invalid exponential notation
*** Location 273.5 to 273.13: Invalid exponential notation

274. x = 3.14159e+exponent; // Invalid exponential notation
*** Location 274.5 to 274.14: Invalid exponential notation

275. x = 3.141592ee0; // Invalid exponential notation
*** Location 275.5 to 275.14: Invalid exponential notation

276. x = 3.141592EE0; // Invalid exponential notation
*** Location 276.5 to 276.14: Invalid exponential notation

277. x = 3e; // Invalid exponential notation
*** Location 277.5 to 277.7: Invalid exponential notation

278. x = .3E; // Invalid exponential notation
*** Location 278.5 to 278.8: Invalid exponential notation

279. foo(x,          // (incomplete line continued below)
-- Incomplete line carried forward

280. y)              // missing ;
*** Location 280.29 to 280.29: Statement should end with a semicolon (;)

281. x = (a + b + c / 3; // missing closing parenthesis
*** Location 281.1 to 281.19: Syntax Error

282. x = foo(y, bar(z, w); // missing closing parenthesis w/ nested parentheses
*** Location 282.1 to 282.21: Syntax Error

283. x = a + b + c ) / 3; // missing openning parenthesis
*** Location 283.1 to 283.20: Syntax Error

284. if ( i == 1 // missing closing parenthesis with if
*** Location 284.1 to 284.11: Syntax Error

285. if ( i == 1 ); // if followed directly by ;
*** Location 285.14 to 285.14: if statement should not end with a semicolon

286. for ( i=0; i<n; i++); // for() followed directly by ;
*** Location 286.1 to 286.21: Syntax Error

287. x + 1 = x; // confusing left hand side an right hand side of assignment
*** Location 287.1 to 287.10: Syntax Error

288. 1000 = count; // confusing left hand side an right hand side of assignment
*** Location 288.1 to 288.13: Syntax Error

289. if ( x => 3 ) // => instead of <=
*** Location 289.8 to 289.9: Invalid operator. Did you mean >= ?

290. if ( x =< 5 ) // =< instead of >=.
*** Location 290.8 to 290.9: Invalid operator. Did you mean <= ?

291. for(int i=0, i<n, i++) // commas in place of semicolons
*** Location 291.12 to 291.12: for loop parts should be separated by semicolons (;)
Comma not supported

292. for(int i=0: i<n: i++) // colons in place of semicolons
*** Location 292.1 to 292.22: Syntax Error

293. for{int i=0; i<n; i++} // {} in place of ()
*** Location 293.1 to 293.22: Syntax Error

294. 
line (blank)

295. double foo(x, y, z) // missing variable types for arguments in function definition
*** Location 295.1 to 295.19: Syntax Error

296. ct.println; // missing parenteses for function call without arguments
*** Location 296.1 to 296.11: Syntax Error

297. foo(int x, double y, GameObj z) // missing return type in function definition
*** Location 297.1 to 297.31: Syntax Error

298. foo(int x, double y, GameObj z); // supplying variable types in function call
*** Location 298.1 to 298.32: Syntax Error

299. String s = 'Hello'; // '' in place of "" for strings
*** Location 299.12 to 299.12: char type not supported, use double quotes

300. String s = "A long string
*** Location 300.12 to 300.25: Unclosed string literal

301. on more than one line";
*** Location 301.34 to 301.35: Unclosed string literal

302. ct.println("He said "Hello""); // not escaping double quotes in a string literal
*** Location 302.1 to 302.30: Syntax Error

303. 
line (blank)

304. // Unsupported Java syntax
line (comment)
    COMMENT ( Unsupported Java syntax)

305. int x = 1, y = 2, z = 3;      // declaring and initializing multiple variables
*** Location 305.1 to 305.24: Syntax Error

306. import java.io.PrintWriter;   // import other than Code12.*
*** Location 306.1 to 306.27: Syntax Error

307. int time = (int)( sec );      // type casting
*** Location 307.1 to 307.24: Syntax Error

308. time %= 3600;                 // %=
*** Location 308.1 to 308.13: Syntax Error

309. int numberOfDucks = (turboMode ? 100 : 1); // ?: operator
*** Location 309.32 to 309.32: Invalid character (The "? :" operator is not supported by Code12)

310. System.out.println("Hello world"); // classes other than GameObj and String
*** Location 310.1 to 310.34: Syntax Error

311. char ch = 'a'; // char type
*** Location 311.11 to 311.11: char type not supported, use double quotes

312. while(foo) { // opening { in control structure not on it's own line
*** Location 312.1 to 312.12: Syntax Error

313. i++; } // closing } not on it's own line
*** Location 313.1 to 313.6: Syntax Error

314. String s = "A long string" +
*** Location 314.29 to 314.29: Expected expression after + operator
*** Reference 314.28 to 314.28

315. "on more than one line using concatenation";
*** Location 315.12 to 315.55: Syntax Error

316. x = a; y = b; // more than one statement on a single line not supported
*** Location 316.1 to 316.13: Syntax Error

317. if (x == 0) ct.println("x is zero"); // control structure must be on their own lines
*** Location 317.1 to 317.36: Syntax Error

318. double getVariable() { return variable; } // blocks must start and end on their own lines
*** Location 318.1 to 318.41: Syntax Error

319. switch (choice) // switch not supported
*** Location 319.1 to 319.6: Unsupported reserved word "switch"

320. continue;   // continue not supported
*** Location 320.1 to 320.8: Unsupported reserved word "continue"

321. max = a[i++]; // complex expressions not supported
*** Location 321.1 to 321.13: Syntax Error

322. x = ++i; // prefix increment not supported
*** Location 322.1 to 322.8: Syntax Error

323. x = --i; // prefix decrement not supported
*** Location 323.1 to 323.8: Syntax Error

324. obj.group.equals("targets"); // indexing more than one level at a time not supported
*** Location 324.1 to 324.28: Syntax Error

325. input.toLowerCase().equals("quit"); // indexing after function call not supported
*** Location 325.1 to 325.35: Syntax Error
======= Test Complete =========================================

325 lines processed in 185 ms

0 unexpected errors
0 uncaught errors (80 expected errors)

SUCCESS
