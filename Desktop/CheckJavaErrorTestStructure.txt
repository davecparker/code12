    program CheckJavaErrorTestCode { #funcs = 71, #vars = 9 }
        funcs:
 15.        func syntaxLevelDependentTests { #paramVars = 0, vt = void }
                block: block { iLineEnd = 25, #stmts = 4, iLineBegin = 16 }
                    stmts:
 17.                    var strVar { vt = String, initExpr = "" }
 18.                    var gameObjVar { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
 18.                                (0)
 18.                                (0)
 18.                                (1)
 21.                    if
                            expr: (!=) { left = "" }
                                right: lValue { varID = strVar }
                            block: block { #stmts = 1 }
                                stmts:
 22.                                call voidMethod
 24.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (==) { right = "circles" }
                                    left: lValue { varID = gameObjVar, fieldID = group }
 27.        func intMethod { #paramVars = 0, vt = int }
                block: block { iLineEnd = 30, #stmts = 1, iLineBegin = 28 }
                    stmts:
 29.                    return { expr = 0 }
 31.        func voidMethod { #paramVars = 0, vt = void }
                block: block { iLineEnd = 35, #stmts = 2, iLineBegin = 32 }
                    stmts:
 33.                    var voidMethodVar { vt = int }
 34.                    return
 36.        func voidMethodWithParams { #paramVars = 5, vt = void }
                paramVars:
 36.                var p1 { vt = int, isGlobal = false }
 36.                var p2 { vt = double, isGlobal = false }
 36.                var p3 { vt = boolean, isGlobal = false }
 36.                var p4 { vt = String, isGlobal = false }
 36.                var p5 { vt = GameObj, isGlobal = false }
                block: block { iLineEnd = 38, #stmts = 0, iLineBegin = 37 }
 40.        func noErrorsMethod { #paramVars = 0, vt = GameObj }
                block: block { iLineEnd = 90, #stmts = 12, iLineBegin = 41 }
                    stmts:
 42.                    call println { lValue = out, #exprs = 1, class = System }
                            exprs:
 42.                            ("Hello world")
 43.                    assign (=)
                            lValue: lValue { varID = classLevelGameObj }
                            expr: call rect { #exprs = 4, class = ct }
                                exprs:
 43.                                (0)
 43.                                (0)
 43.                                (10)
 43.                                (10)
 44.                    var returnValue { vt = GameObj, initExpr = null }
 45.                    var boolVar { vt = boolean, initExpr = false }
 46.                    var intArrayInitWithExpressions { vt = array of int }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    (+) { right = 2, left = 1 }
                                    (+) { right = 50 }
                                        left: (*) { right = 4, left = 3 }
                                    (+) { right = 3 }
                                        left: parens
                                            expr: (-) { right = 890, left = 67 }
 47.                    var gObjArrayInitWithCTCalls { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
                                    call rect { #exprs = 4, class = ct }
                                        exprs:
 47.                                        (50)
 47.                                        (50)
 47.                                        (10)
 47.                                        (10)
                                    call text { #exprs = 4, class = ct }
                                        exprs:
 47.                                        ("text")
 47.                                        (50)
 47.                                        (50)
 47.                                        (10)
 48.                    var dblArrayInitWithExpressionsAndIntPromotion { vt = array of double }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
                                    (+) { right = 2, left = 1 }
                                    (/) { right = 2 }
                                        left: (*) { right = 7, left = 3.4 }
 50.                    for
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 58, #stmts = 3, iLineBegin = 51 }
                                stmts:
 52.                                call println { class = ct }
 53.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
 56.                                            break
                                        expr: lValue { varID = boolVar }
                                        block: block { #stmts = 1 }
                                            stmts:
 54.                                            call println { class = ct }
 57.                                call println { class = ct }
 59.                    while
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 64, #stmts = 2, iLineBegin = 60 }
                                stmts:
 61.                                if
                                        expr: lValue { varID = boolVar }
                                        block: block { #stmts = 1 }
                                            stmts:
 62.                                            break
 63.                                call println { class = ct }
 65.                    doWhile { iLineWhile = 71 }
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 70, #stmts = 2, iLineBegin = 66 }
                                stmts:
 67.                                call println { class = ct }
 68.                                if
                                        expr: lValue { varID = boolVar }
                                        block: block { #stmts = 1 }
                                            stmts:
 69.                                            break
 73.                    for
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 77, #stmts = 1, iLineBegin = 74 }
                                stmts:
 75.                                if
                                        expr: lValue { varID = boolVar }
                                        block: block { #stmts = 1 }
                                            stmts:
 76.                                            return
                                                    expr: lValue { varID = returnValue }
 78.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { iLineEnd = 89, #stmts = 1, iLineBegin = 87 }
                                            stmts:
 88.                                            return
                                                    expr: lValue { varID = returnValue }
                                        expr: lValue { varID = boolVar }
                                        block: block { iLineEnd = 85, #stmts = 1, iLineBegin = 83 }
                                            stmts:
 84.                                            return
                                                    expr: lValue { varID = returnValue }
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 81, #stmts = 1, iLineBegin = 79 }
                                stmts:
 80.                                return
                                        expr: lValue { varID = returnValue }
 93.        func onMousePress { #paramVars = 3, isPublic = true, vt = void }
                paramVars:
 93.                var obj { vt = GameObj, isGlobal = false }
 93.                var x { vt = double, isGlobal = false }
 93.                var Yvalue { vt = double, isGlobal = false }
                block: block { iLineEnd = 95, #stmts = 0, iLineBegin = 94 }
 97.        func parameterStartsWithCapitalMethod { #paramVars = 3, vt = void }
                paramVars:
 97.                var doubleParam { vt = double, isGlobal = false }
 97.                var IntParam { vt = int, isGlobal = false }
 97.                var boolParam { vt = boolean, isGlobal = false }
                block: block { iLineEnd = 100, #stmts = 1, iLineBegin = 98 }
                    stmts:
 99.                    var userFunc1Var { vt = int, initExpr = 1 }
102.        func StartsWithCapitalLetterMethod { #paramVars = 0, vt = void }
                block: block { iLineEnd = 104, #stmts = 0, iLineBegin = 103 }
105.        func testErrors3 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 152, #stmts = 23, iLineBegin = 106 }
                    stmts:
107.                    var intVar { vt = int, initExpr = 0 }
108.                    var boolVar { vt = boolean, initExpr = false }
110.                    var Starts_with_capital_letter_var { vt = int }
112.                    var StartsWithCapitalLetterVarWithAssignment { vt = double, initExpr = 3.14 }
114.                    var GameObjArrVar { vt = array of GameObj }
                            initExpr: newArray { vtElement = "GameObj", lengthExpr = 10 }
116.                    var dblVar { vt = double }
                            initExpr: (+) { right = 1 }
                                left: lValue { varID = intvar }
118.                    call println { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = boolvar }
120.                    call voidmethod
122.                    call PrintLn { class = ct }
124.                    var classLevelGameObj { vt = int }
126.                    var intVar { vt = int }
128.                    var boolVar { vt = boolean }
130.                    var classlevelInt { vt = GameObj }
132.                    var boolvar { vt = boolean, initExpr = true }
133.                    if
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 136, #stmts = 1, iLineBegin = 134 }
                                stmts:
135.                                var prevBlockVar { vt = int }
138.                    assign (=) { expr = 2e2 }
                            lValue: lValue { varID = prevBlockVar }
140.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { right = 1 }
                                    left: lValue { varID = voidMethodVar }
142.                    assign (=) { expr = 1.1 }
                            lValue: lValue { varID = prevBlockvar }
144.                    assign (=) { expr = 0 }
                            lValue: lValue { varID = undeclaredVar }
146.                    call setText { #exprs = 1 }
                            lValue: lValue { varID = classLevelGameObj }
                            exprs:
                                lValue { varID = undeclaredVar }
148.                    call print { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = classLevelUnassignedVar }
149.                    var unassignedVar { vt = int }
151.                    call print { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = unassignedVar }
154.        func onMousePress { #paramVars = 3, isPublic = true, vt = boolean }
                paramVars:
154.                var obj { vt = GameObj, isGlobal = false }
154.                var x { vt = double, isGlobal = false }
154.                var y { vt = double, isGlobal = false }
                block: block { iLineEnd = 157, #stmts = 1, iLineBegin = 155 }
                    stmts:
156.                    return
                            expr: lValue { varID = classLevelBoolean }
159.        func onMouseDrag { #paramVars = 4, isPublic = true, vt = void }
                paramVars:
159.                var obj { vt = GameObj, isGlobal = false }
159.                var x { vt = double, isGlobal = false }
159.                var y { vt = double, isGlobal = false }
159.                var z { vt = double, isGlobal = false }
                block: block { iLineEnd = 161, #stmts = 0, iLineBegin = 160 }
163.        func onMouseRelease { #paramVars = 3, isPublic = true, vt = void }
                paramVars:
163.                var obj { vt = GameObj, isGlobal = false }
163.                var x { vt = double, isGlobal = false }
163.                var y { vt = int, isGlobal = false }
                block: block { iLineEnd = 165, #stmts = 0, iLineBegin = 164 }
167.        func onKeyPress { #paramVars = 1, vt = void }
                paramVars:
167.                var keyName { vt = String, isGlobal = false }
                block: block { iLineEnd = 169, #stmts = 0, iLineBegin = 168 }
171.        func onKeyRelease { #paramVars = 1, vt = void }
                paramVars:
171.                var keyName { vt = String, isGlobal = false }
                block: block { iLineEnd = 173, #stmts = 0, iLineBegin = 172 }
176.        func onCharTyped { isStatic = true, vt = void, #paramVars = 1, isPublic = true }
                paramVars:
176.                var charString { vt = String, isGlobal = false }
                block: block { iLineEnd = 178, #stmts = 0, iLineBegin = 177 }
179.        func onResize { #paramVars = 0, isPublic = true, vt = void }
                block: block { iLineEnd = 181, #stmts = 0, iLineBegin = 180 }
183.        func onResize { #paramVars = 0, isPublic = true, vt = void }
                block: block { iLineEnd = 185, #stmts = 0, iLineBegin = 184 }
186.        func existingUserFunction { #paramVars = 0, vt = void }
                block: block { iLineEnd = 188, #stmts = 0, iLineBegin = 187 }
190.        func existingUserFunction { #paramVars = 0, vt = void }
                block: block { iLineEnd = 192, #stmts = 0, iLineBegin = 191 }
194.        func existingUserfunction { #paramVars = 0, vt = void }
                block: block { iLineEnd = 196, #stmts = 0, iLineBegin = 195 }
197.        func testErrors2 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 361, #stmts = 79, iLineBegin = 198 }
                    stmts:
199.                    var intVar { vt = int, initExpr = 0 }
200.                    var dblVar { vt = double, initExpr = 0 }
201.                    var boolVar { vt = boolean, initExpr = false }
202.                    var strVar { vt = String, initExpr = "" }
203.                    var rect { vt = GameObj }
                            initExpr: call rect { #exprs = 4, class = ct }
                                exprs:
203.                                (50)
203.                                (50)
203.                                (10)
203.                                (10)
204.                    var circle { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
204.                                (50)
204.                                (50)
204.                                (10)
205.                    var text { vt = GameObj }
                            initExpr: call text { #exprs = 4, class = ct }
                                exprs:
205.                                ("text")
205.                                (50)
205.                                (50)
205.                                (10)
206.                    var image { vt = GameObj }
                            initExpr: call image { #exprs = 4, class = ct }
                                exprs:
206.                                ("bogusFileName.png")
206.                                (50)
206.                                (50)
206.                                (10)
207.                    var intArr { vt = array of int }
                            initExpr: newArray { vtElement = 0, lengthExpr = 10 }
208.                    var dblArr { vt = array of double }
                            initExpr: newArray { vtElement = 1, lengthExpr = 10 }
209.                    var boolArr { vt = array of boolean }
                            initExpr: newArray { vtElement = true, lengthExpr = 10 }
210.                    var strArr { vt = array of String }
                            initExpr: newArray { vtElement = "String", lengthExpr = 10 }
211.                    var objArr { vt = array of GameObj }
                            initExpr: newArray { vtElement = "GameObj", lengthExpr = 10 }
213.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = dblVar }
215.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: lValue { varID = dblVar }
217.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: lValue { varID = intVar }
219.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: lValue { varID = strVar }
221.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = strVar }
223.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: lValue { varID = rect }
225.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x, indexExpr = 0 }
                            expr: lValue { varID = dblVar }
227.                    assign (++)
                            lValue: lValue { varID = intVar, indexExpr = 0 }
229.                    assign (=)
                            lValue: lValue { varID = strArr }
                                indexExpr: (*) { right = 1.0 }
                                    left: lValue { varID = intVar }
                            expr: lValue { varID = strVar }
231.                    assign (=)
                            lValue: lValue { varID = objArr }
                                indexExpr: lValue { varID = dblVar }
                            expr: lValue { varID = rect }
233.                    assign (=)
                            lValue: lValue { varID = intArr }
                            expr: newArray { vtElement = 0 }
                                lengthExpr: (*) { right = 2 }
                                    left: lValue { varID = intArr, fieldID = foo }
235.                    call print { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = intVar, fieldID = x }
237.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = setText }
                            expr: lValue { varID = strVar }
239.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: lValue { varID = rect, fieldID = foo }
241.                    assign (=) { expr = 0 }
                            lValue: lValue { varID = rect, fieldID = foo }
243.                    call onMousePress { #exprs = 3 }
                            exprs:
                                lValue { varID = rect }
                                lValue { varID = rect, fieldID = x }
                                lValue { varID = rect, fieldID = y }
245.                    var line { vt = GameObj }
                            initExpr: call line { #exprs = 4 }
                                exprs:
245.                                (50)
245.                                (50)
245.                                (10)
245.                                (10)
247.                    call println
249.                    call undefinedFunc
251.                    assign (=)
                            lValue: lValue { varID = rect }
                            expr: call rec { #exprs = 4, class = ct }
                                exprs:
251.                                (0)
251.                                (0)
251.                                (1)
251.                                (1)
253.                    call printLine { class = ct }
255.                    call foo { class = ct }
257.                    call bar { lValue = foo, class = System }
259.                    call println { lValue = err, #exprs = 1, class = System }
                            exprs:
259.                            ("File opening failed:")
261.                    var stdev { vt = double }
                            initExpr: call foo { #exprs = 1, class = Math }
                                exprs:
                                    lValue { varID = doubleVar }
263.                    call getWidht { #exprs = 1 }
                            lValue: lValue { varID = rect }
                            exprs:
                                lValue { varID = dblVar }
265.                    call equal { #exprs = 1 }
                            lValue: lValue { varID = strVar }
                            exprs:
                                lValue { varID = classLevelString }
267.                    call foo
                            lValue: lValue { varID = rect }
269.                    call concat { #exprs = 1 }
                            lValue: lValue { varID = rect, fieldID = group }
                            exprs:
                                call getText
                                    lValue: lValue { varID = text }
271.                    call setSize { #exprs = 2 }
                            lValue: lValue { varID = classLevelString }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = dblVar }
273.                    call size
                            lValue: lValue { varID = strVar }
275.                    call delete
                            lValue: lValue { varID = objArr }
277.                    call delete
                            lValue: lValue { varID = intVar }
279.                    call print { class = ct }
281.                    if
                            expr: (<) { right = 0 }
                                left: call min { #exprs = 1, class = Math }
                                    exprs:
281.                                    (1)
                            block: block { #stmts = 1 }
                                stmts:
282.                                call voidMethod
284.                    call voidMethodWithParams
286.                    if
                            expr: (<) { right = 0 }
                                left: call min { #exprs = 3, class = Math }
                                    exprs:
286.                                    (1)
286.                                    (2)
286.                                    (3)
                            block: block { #stmts = 1 }
                                stmts:
287.                                call voidMethod
289.                    var minOf3 { vt = double }
                            initExpr: call min { #exprs = 3, class = Math }
                                exprs:
289.                                (1)
289.                                (2)
289.                                (3)
291.                    call voidMethod { #exprs = 1 }
                            exprs:
291.                            (1)
293.                    call println { #exprs = 2, class = ct }
                            exprs:
293.                            ("hello")
293.                            ("world")
295.                    call println { #exprs = 1, class = ct }
                            exprs:
                                call distance { #exprs = 4, class = ct }
                                    exprs:
                                        call round { #exprs = 1, class = ct }
                                            exprs:
                                                lValue { varID = rect, fieldID = x }
                                        lValue { varID = rect, fieldID = y }
                                        lValue { varID = circle }
                                        lValue { varID = circle, fieldID = y }
297.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: call max { #exprs = 2, class = Math }
                                exprs:
                                    lValue { varID = intVar }
                                    lValue { varID = strVar }
298.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = intVar }
                                lValue { varID = boolVar }
                                lValue { varID = strVar }
                                lValue { varID = rect }
300.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = dblVar }
                                lValue { varID = boolVar }
                                lValue { varID = strVar }
                                lValue { varID = intVar }
302.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = dblVar }
                                lValue { varID = strVar }
                                lValue { varID = strVar }
                                lValue { varID = rect }
304.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = boolVar }
                                lValue { varID = boolVar }
                                lValue { varID = strVar }
                                lValue { varID = rect }
306.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = dblVar }
                                lValue { varID = dblVar }
                                lValue { varID = boolVar }
                                lValue { varID = strVar }
                                lValue { varID = rect }
308.                    for
                            expr: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
309.                                call println { class = ct }
310.                    doWhile { iLineWhile = 313 }
                            expr: (+) { right = "" }
                                left: parens
                                    expr: (==) { right = 2e0 }
                                        left: (+) { right = 1.0, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
311.                                call println { class = ct }
315.                    while
                            expr: (+) { right = "" }
                                left: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
317.                                assign (+=) { expr = 1 }
                                        lValue: lValue { varID = rect, fieldID = group }
319.                    assign (+=) { expr = false }
                            lValue: lValue { varID = boolVar }
321.                    assign (*=)
                            lValue: lValue { varID = dblVar }
                            expr: lValue { varID = rect }
323.                    assign (+=)
                            lValue: lValue { varID = dblVar }
                            expr: (+) { right = "" }
                                left: lValue { varID = boolVar }
325.                    assign (+=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = boolVar }
327.                    assign (/=)
                            lValue: lValue { varID = intVar }
                            expr: (*)
                                right: lValue { varID = rect, fieldID = x }
                                left: lValue { varID = classLevelInt }
329.                    assign (*=) { expr = 1e0 }
                            lValue: lValue { varID = intVar }
331.                    assign (-=)
                            lValue: lValue { varID = classLevelInt }
                            expr: lValue { varID = classLevelDouble }
333.                    assign (+=) { expr = 1.0 }
                            lValue: lValue { varID = intVar }
335.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: lValue { varID = intVar }
                                        block: block { #stmts = 1 }
                                            stmts:
339.                                            call println { class = ct }
                            expr: lValue { varID = dblVar }
                            block: block { #stmts = 1 }
                                stmts:
336.                                call println { class = ct }
341.                    if { expr = 0 }
                            block: block { #stmts = 1 }
                                stmts:
342.                                call println { class = ct }
344.                    forArray { expr = null }
344.                        var: var x { vt = int, isGlobal = false }
                            block: block { #stmts = 1 }
                                stmts:
345.                                break
347.                    forArray
347.                        var: var x { vt = int, isGlobal = false }
                            expr: lValue { varID = image }
                            block: block { #stmts = 1 }
                                stmts:
348.                                break
350.                    forArray
350.                        var: var x { vt = int, isGlobal = false }
                            expr: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
351.                                break
353.                    forArray
353.                        var: var x { vt = GameObj, isGlobal = false }
                            expr: lValue { varID = classLevelIntArr }
                            block: block { #stmts = 1 }
                                stmts:
354.                                break
356.                    forArray
356.                        var: var x { vt = boolean, isGlobal = false }
                            expr: newArray { vtElement = "String", lengthExpr = 10 }
                            block: block { #stmts = 1 }
                                stmts:
357.                                break
359.                    forArray
359.                        var: var x { vt = int, isGlobal = false }
                            expr: lValue { varID = dblArr }
                            block: block { #stmts = 1 }
                                stmts:
360.                                break
362.        func voidFuncReturnsValue6 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 371, #stmts = 3, iLineBegin = 363 }
                    stmts:
364.                    var r { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
364.                                (0)
364.                                (0)
364.                                (1)
365.                    while
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
366.                                if
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { #stmts = 1 }
                                            stmts:
368.                                            return
                                                    expr: lValue { varID = r }
370.                    return
                            expr: lValue { varID = r }
372.        func voidFuncReturnsValue5 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 380, #stmts = 3, iLineBegin = 373 }
                    stmts:
374.                    var r { vt = GameObj, initExpr = null }
375.                    for
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
377.                                return
                                        expr: lValue { varID = r }
379.                    return
                            expr: lValue { varID = r }
381.        func voidFuncReturnsValue4 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 389, #stmts = 3, iLineBegin = 382 }
                    stmts:
383.                    var r { vt = String, initExpr = null }
384.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
386.                                return
                                        expr: lValue { varID = r }
388.                    return
                            expr: lValue { varID = r }
390.        func voidFuncReturnsValue3 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 398, #stmts = 3, iLineBegin = 391 }
                    stmts:
392.                    var r { vt = String, initExpr = "" }
393.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
395.                                return
                                        expr: lValue { varID = r }
397.                    return
                            expr: lValue { varID = r }
399.        func voidFuncReturnsValue2 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 407, #stmts = 3, iLineBegin = 400 }
                    stmts:
401.                    var r { vt = boolean, initExpr = false }
402.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
404.                                return
                                        expr: lValue { varID = r }
406.                    return
                            expr: lValue { varID = r }
408.        func voidFuncReturnsValue1 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 413, #stmts = 2, iLineBegin = 409 }
                    stmts:
410.                    var r { vt = double, initExpr = 0 }
412.                    return
                            expr: lValue { varID = r }
414.        func funcWrongReturnValueType7 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 418, #stmts = 1, iLineBegin = 415 }
                    stmts:
417.                    return
                            expr: (*) { right = 1.0 }
                                left: lValue { varID = classLevelInt }
419.        func funcWrongReturnValueType6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 428, #stmts = 3, iLineBegin = 420 }
                    stmts:
421.                    var r { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
421.                                (0)
421.                                (0)
421.                                (1)
422.                    while
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
423.                                if
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { #stmts = 1 }
                                            stmts:
425.                                            return
                                                    expr: lValue { varID = r }
427.                    return
                            expr: lValue { varID = r }
429.        func funcWrongReturnValueType5 { #paramVars = 0, vt = String }
                block: block { iLineEnd = 437, #stmts = 3, iLineBegin = 430 }
                    stmts:
431.                    var r { vt = GameObj, initExpr = null }
432.                    for
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
434.                                return
                                        expr: lValue { varID = r }
436.                    return
                            expr: lValue { varID = r }
438.        func funcWrongReturnValueType4 { #paramVars = 0, vt = GameObj }
                block: block { iLineEnd = 446, #stmts = 3, iLineBegin = 439 }
                    stmts:
440.                    var r { vt = String, initExpr = null }
441.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
443.                                return
                                        expr: lValue { varID = r }
445.                    return
                            expr: lValue { varID = r }
447.        func funcWrongReturnValueType3 { #paramVars = 0, vt = boolean }
                block: block { iLineEnd = 455, #stmts = 3, iLineBegin = 448 }
                    stmts:
449.                    var r { vt = String, initExpr = "" }
450.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
452.                                return
                                        expr: lValue { varID = r }
454.                    return
                            expr: lValue { varID = r }
456.        func funcWrongReturnValueType2 { #paramVars = 0, vt = double }
                block: block { iLineEnd = 464, #stmts = 3, iLineBegin = 457 }
                    stmts:
458.                    var r { vt = boolean, initExpr = false }
459.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
461.                                return
                                        expr: lValue { varID = r }
463.                    return
                            expr: lValue { varID = r }
465.        func funcWrongReturnValueType1 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 470, #stmts = 2, iLineBegin = 466 }
                    stmts:
467.                    var r { vt = double, initExpr = 0 }
469.                    return
                            expr: lValue { varID = r }
471.        func funcNoReturnValue6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 479, #stmts = 3, iLineBegin = 472 }
                    stmts:
473.                    var r { vt = int, initExpr = 0 }
474.                    while
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
475.                                if
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { #stmts = 1 }
                                            stmts:
477.                                            return
478.                    return
                            expr: lValue { varID = r }
480.        func funcNoReturnValue5 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 487, #stmts = 3, iLineBegin = 481 }
                    stmts:
482.                    var r { vt = int, initExpr = 0 }
483.                    for
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
485.                                return
486.                    return
                            expr: lValue { varID = r }
488.        func funcNoReturnValue4 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 496, #stmts = 3, iLineBegin = 489 }
                    stmts:
490.                    var r { vt = int, initExpr = 0 }
491.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
493.                                return
495.                    return
497.        func funcNoReturnValue3 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 504, #stmts = 3, iLineBegin = 498 }
                    stmts:
499.                    var r { vt = int, initExpr = 0 }
500.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
502.                                return
503.                    return
                            expr: lValue { varID = r }
505.        func funcNoReturnValue2 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 512, #stmts = 3, iLineBegin = 506 }
                    stmts:
507.                    var r { vt = int, initExpr = 0 }
508.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
509.                                return
                                        expr: lValue { varID = r }
511.                    return
513.        func funcNoReturnValue1 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 517, #stmts = 1, iLineBegin = 514 }
                    stmts:
516.                    return
518.        func funcBreakStmtErrors { #paramVars = 0, vt = void }
                block: block { iLineEnd = 533, #stmts = 2, iLineBegin = 519 }
                    stmts:
520.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
530.                                            break
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { #stmts = 1 }
                                            stmts:
527.                                            break
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 524, #stmts = 1, iLineBegin = 521 }
                                stmts:
523.                                break
532.                    break
534.        func funcUnreachableStmt8 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 551, #stmts = 3, iLineBegin = 535 }
                    stmts:
536.                    var r { vt = int, initExpr = 0 }
537.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 549, #stmts = 1, iLineBegin = 538 }
                                stmts:
539.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
                                                if
                                                    expr: (==) { right = 3 }
                                                        left: (+) { right = 1, left = 1 }
                                                    block: block { iLineEnd = 548, #stmts = 2, iLineBegin = 544 }
                                                        stmts:
545.                                                        return
                                                                expr: lValue { varID = r }
547.                                                        call println { class = ct }
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { iLineEnd = 542, #stmts = 1, iLineBegin = 540 }
                                            stmts:
541.                                            call println { class = ct }
550.                    return
                            expr: lValue { varID = r }
552.        func funcUnreachableStmt7 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 562, #stmts = 3, iLineBegin = 553 }
                    stmts:
554.                    var r { vt = int, initExpr = 0 }
555.                    while
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 560, #stmts = 2, iLineBegin = 556 }
                                stmts:
557.                                return
                                        expr: lValue { varID = r }
559.                                call println { class = ct }
561.                    return
                            expr: lValue { varID = r }
563.        func funcUnreachableStmt6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 577, #stmts = 3, iLineBegin = 564 }
                    stmts:
565.                    var r { vt = int, initExpr = 0 }
566.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: (==) { right = 3 }
                                            left: (+) { right = 1, left = 1 }
                                        block: block { iLineEnd = 575, #stmts = 2, iLineBegin = 571 }
                                            stmts:
572.                                            return
                                                    expr: lValue { varID = r }
574.                                            call println { class = ct }
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 569, #stmts = 1, iLineBegin = 567 }
                                stmts:
568.                                call println { class = ct }
576.                    return
                            expr: lValue { varID = r }
578.        func funcUnreachableStmt5 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 592, #stmts = 3, iLineBegin = 579 }
                    stmts:
580.                    var r { vt = int, initExpr = 0 }
581.                    if
                            elseBlock: block { iLineEnd = 590, #stmts = 2, iLineBegin = 586 }
                                stmts:
587.                                return
                                        expr: lValue { varID = r }
589.                                call println { class = ct }
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 584, #stmts = 1, iLineBegin = 582 }
                                stmts:
583.                                call println { class = ct }
591.                    return
                            expr: lValue { varID = r }
593.        func funcUnreachableStmt4 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 604, #stmts = 3, iLineBegin = 594 }
                    stmts:
595.                    var r { vt = int, initExpr = 0 }
596.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 602, #stmts = 2, iLineBegin = 597 }
                                stmts:
598.                                return
                                        expr: lValue { varID = r }
600.                                if
                                        expr: (==) { right = 2 }
                                            left: (+) { right = 1, left = 1 }
                                        block: block { #stmts = 1 }
                                            stmts:
601.                                            call println { class = ct }
603.                    return
                            expr: lValue { varID = r }
605.        func funcUnreachableStmt3 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 614, #stmts = 5, iLineBegin = 606 }
                    stmts:
607.                    var r { vt = int, initExpr = 0 }
608.                    return
                            expr: lValue { varID = r }
610.                    for
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
611.                                break
612.                    call println { class = ct }
613.                    return
                            expr: lValue { varID = r }
615.        func funcUnreachableStmt2 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 624, #stmts = 5, iLineBegin = 616 }
                    stmts:
617.                    var r { vt = int, initExpr = 0 }
618.                    return
                            expr: lValue { varID = r }
620.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
621.                                call println { class = ct }
622.                    call println { class = ct }
623.                    return
                            expr: lValue { varID = r }
625.        func funcUnreachableStmt1 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 631, #stmts = 3, iLineBegin = 626 }
                    stmts:
627.                    return
629.                    call println { class = ct }
630.                    call println { class = ct }
632.        func funcMissingReturn10 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 645, #stmts = 4, iLineBegin = 633 }
                    stmts:
634.                    var r { vt = int, initExpr = 0 }
635.                    var boolVar1 { vt = boolean, initExpr = false }
636.                    var boolVar2 { vt = boolean, initExpr = false }
637.                    if
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
638.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
                                                if
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
643.                                                        return
                                                                expr: lValue { varID = r }
                                                    expr: lValue { varID = boolVar2 }
                                                    block: block { #stmts = 1 }
                                                        stmts:
641.                                                        return
                                                                expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar1 }
                                        block: block { #stmts = 1 }
                                            stmts:
639.                                            call println { class = ct }
646.        func funcMissingReturn9 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 657, #stmts = 4, iLineBegin = 647 }
                    stmts:
648.                    var r { vt = int, initExpr = 0 }
649.                    var boolVar1 { vt = boolean, initExpr = false }
650.                    var boolVar2 { vt = boolean, initExpr = false }
651.                    if
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
652.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
655.                                            call println { class = ct }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
653.                                            return
                                                    expr: lValue { varID = r }
658.        func funcMissingReturn8 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 669, #stmts = 4, iLineBegin = 659 }
                    stmts:
660.                    var r { vt = int, initExpr = 0 }
661.                    var boolVar1 { vt = boolean, initExpr = false }
662.                    var boolVar2 { vt = boolean, initExpr = false }
663.                    if
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
664.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
667.                                            return
                                                    expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
665.                                            return
                                                    expr: lValue { varID = r }
670.        func funcMissingReturn7 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 682, #stmts = 4, iLineBegin = 671 }
                    stmts:
672.                    var r { vt = int, initExpr = 0 }
673.                    var boolVar1 { vt = boolean, initExpr = false }
674.                    var boolVar2 { vt = boolean, initExpr = true }
675.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
680.                                            return
                                                    expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
678.                                            call println { class = ct }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
676.                                call println { class = ct }
683.        func funcMissingReturn6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 695, #stmts = 4, iLineBegin = 684 }
                    stmts:
685.                    var r { vt = int, initExpr = 0 }
686.                    var boolVar1 { vt = boolean, initExpr = false }
687.                    var boolVar2 { vt = boolean, initExpr = true }
688.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
693.                                            call println { class = ct }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
691.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
689.                                call println { class = ct }
697.        func funcMissingReturn4 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 705, #stmts = 2, iLineBegin = 698 }
                    stmts:
699.                    var boolVar { vt = boolean, initExpr = false }
700.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
703.                                call println { class = ct }
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
701.                                call println { class = ct }
706.        func funcMissingReturn2 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 713, #stmts = 3, iLineBegin = 707 }
                    stmts:
708.                    var r { vt = int, initExpr = 0 }
709.                    var boolVar { vt = boolean, initExpr = false }
710.                    if
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
711.                                return
                                        expr: lValue { varID = r }
714.        func funcMissingReturn1 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 717, #stmts = 0, iLineBegin = 715 }
718.        func funcPathMissingReturn3Brackets { #paramVars = 0, vt = int }
                block: block { iLineEnd = 732, #stmts = 4, iLineBegin = 719 }
                    stmts:
720.                    var r { vt = int, initExpr = 0 }
721.                    var boolVar1 { vt = boolean, initExpr = false }
722.                    var boolVar2 { vt = boolean, initExpr = false }
723.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: lValue { varID = boolVar2 }
                                        block: block { iLineEnd = 731, #stmts = 1, iLineBegin = 729 }
                                            stmts:
730.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { iLineEnd = 727, #stmts = 1, iLineBegin = 724 }
                                stmts:
725.                                call println { class = ct }
733.        func funcPathMissingReturn2Brackets { #paramVars = 0, vt = int }
                block: block { iLineEnd = 746, #stmts = 3, iLineBegin = 734 }
                    stmts:
735.                    var r { vt = int, initExpr = 0 }
736.                    var boolVar { vt = boolean, initExpr = false }
737.                    if
                            elseBlock: block { iLineEnd = 745, #stmts = 1, iLineBegin = 742 }
                                stmts:
743.                                call println { class = ct }
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 740, #stmts = 1, iLineBegin = 738 }
                                stmts:
739.                                return
                                        expr: lValue { varID = r }
747.        func funcPathMissingReturn1Brackets { #paramVars = 0, vt = int }
                block: block { iLineEnd = 760, #stmts = 3, iLineBegin = 748 }
                    stmts:
749.                    var r { vt = int, initExpr = 0 }
750.                    var boolVar { vt = boolean, initExpr = false }
751.                    if
                            elseBlock: block { iLineEnd = 759, #stmts = 1, iLineBegin = 757 }
                                stmts:
758.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 755, #stmts = 1, iLineBegin = 752 }
                                stmts:
753.                                call println { class = ct }
761.        func funcPathMissingReturn10 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 776, #stmts = 4, iLineBegin = 762 }
                    stmts:
763.                    var r { vt = int, initExpr = 0 }
764.                    var boolVar1 { vt = boolean, initExpr = false }
765.                    var boolVar2 { vt = boolean, initExpr = false }
766.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
775.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
767.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
                                                if
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
773.                                                        call println { class = ct }
                                                    expr: lValue { varID = boolVar2 }
                                                    block: block { #stmts = 1 }
                                                        stmts:
770.                                                        return
                                                                expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar1 }
                                        block: block { #stmts = 1 }
                                            stmts:
768.                                            return
                                                    expr: lValue { varID = r }
777.        func funcPathMissingReturn9 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 792, #stmts = 4, iLineBegin = 778 }
                    stmts:
779.                    var r { vt = int, initExpr = 0 }
780.                    var boolVar1 { vt = boolean, initExpr = false }
781.                    var boolVar2 { vt = boolean, initExpr = false }
782.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
791.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
783.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
                                                if
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
789.                                                        return
                                                                expr: lValue { varID = r }
                                                    expr: lValue { varID = boolVar2 }
                                                    block: block { #stmts = 1 }
                                                        stmts:
787.                                                        call println { class = ct }
                                        expr: lValue { varID = boolVar1 }
                                        block: block { #stmts = 1 }
                                            stmts:
784.                                            return
                                                    expr: lValue { varID = r }
793.        func funcPathMissingReturn8 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 808, #stmts = 4, iLineBegin = 794 }
                    stmts:
795.                    var r { vt = int, initExpr = 0 }
796.                    var boolVar1 { vt = boolean, initExpr = false }
797.                    var boolVar2 { vt = boolean, initExpr = false }
798.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
807.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
799.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
                                                if
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
805.                                                        return
                                                                expr: lValue { varID = r }
                                                    expr: lValue { varID = boolVar2 }
                                                    block: block { #stmts = 1 }
                                                        stmts:
803.                                                        return
                                                                expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar1 }
                                        block: block { #stmts = 1 }
                                            stmts:
801.                                            call println { class = ct }
809.        func funcPathMissingReturn7 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 821, #stmts = 4, iLineBegin = 810 }
                    stmts:
811.                    var r { vt = int, initExpr = 0 }
812.                    var boolVar1 { vt = boolean, initExpr = false }
813.                    var boolVar2 { vt = boolean, initExpr = false }
814.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
820.                                            return
                                                    expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
818.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
816.                                call println { class = ct }
822.        func funcPathMissingReturn6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 834, #stmts = 4, iLineBegin = 823 }
                    stmts:
824.                    var r { vt = int, initExpr = 0 }
825.                    var boolVar1 { vt = boolean, initExpr = false }
826.                    var boolVar2 { vt = boolean, initExpr = false }
827.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
833.                                            return
                                                    expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
831.                                            call println { class = ct }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
828.                                return
                                        expr: lValue { varID = r }
835.        func funcPathMissingReturn5 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 847, #stmts = 4, iLineBegin = 836 }
                    stmts:
837.                    var r { vt = int, initExpr = 0 }
838.                    var boolVar1 { vt = boolean, initExpr = false }
839.                    var boolVar2 { vt = boolean, initExpr = false }
840.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
846.                                            call println { class = ct }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
843.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
841.                                return
                                        expr: lValue { varID = r }
848.        func funcPathMissingReturn3 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 858, #stmts = 4, iLineBegin = 849 }
                    stmts:
850.                    var r { vt = int, initExpr = 0 }
851.                    var boolVar1 { vt = boolean, initExpr = false }
852.                    var boolVar2 { vt = boolean, initExpr = false }
853.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
857.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
855.                                call println { class = ct }
859.        func funcPathMissingReturn2 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 868, #stmts = 3, iLineBegin = 860 }
                    stmts:
861.                    var r { vt = int, initExpr = 0 }
862.                    var boolVar { vt = boolean, initExpr = false }
863.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
867.                                call println { class = ct }
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
864.                                return
                                        expr: lValue { varID = r }
869.        func funcPathMissingReturn1 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 878, #stmts = 3, iLineBegin = 870 }
                    stmts:
871.                    var r { vt = int, initExpr = 0 }
872.                    var boolVar { vt = boolean, initExpr = false }
873.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
877.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
875.                                call println { class = ct }
880.        func testErrors1 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1154, #stmts = 108, iLineBegin = 881 }
                    stmts:
882.                    var intVar { vt = int, initExpr = 1 }
883.                    var dblVar { vt = double, initExpr = 1.2 }
884.                    var boolVar { vt = boolean, initExpr = false }
885.                    var strVar { vt = String, initExpr = "" }
886.                    var rect { vt = GameObj }
                            initExpr: call rect { #exprs = 4, class = ct }
                                exprs:
886.                                (50)
886.                                (50)
886.                                (10)
886.                                (10)
887.                    var circle { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
887.                                (50)
887.                                (50)
887.                                (10)
888.                    var text { vt = GameObj }
                            initExpr: call text { #exprs = 4, class = ct }
                                exprs:
888.                                ("text")
888.                                (50)
888.                                (50)
888.                                (10)
889.                    var image { vt = GameObj }
                            initExpr: call image { #exprs = 4, class = ct }
                                exprs:
889.                                ("bogusFileName.png")
889.                                (50)
889.                                (50)
889.                                (10)
890.                    var intArr { vt = array of int }
                            initExpr: newArray { vtElement = 0, lengthExpr = 10 }
891.                    var dblArr { vt = array of double }
                            initExpr: newArray { vtElement = 1, lengthExpr = 10 }
892.                    var boolArr { vt = array of boolean }
                            initExpr: newArray { vtElement = true, lengthExpr = 10 }
893.                    var strArr { vt = array of String }
                            initExpr: newArray { vtElement = "String", lengthExpr = 10 }
894.                    var objArr { vt = array of GameObj }
                            initExpr: newArray { vtElement = "GameObj", lengthExpr = 10 }
897.                    assign (=)
                            lValue: lValue { varID = circle, fieldID = x }
                            expr: (+) { right = 314 }
                                left: cast { vtCast = 0 }
                                    expr: lValue { varID = intVar }
899.                    assign (=)
                            lValue: lValue { varID = circle, fieldID = x }
                            expr: cast { vtCast = 0 }
                                expr: parens
                                    expr: (+) { right = 314 }
                                        left: lValue { varID = intVar }
901.                    assign (=)
                            lValue: lValue { varID = objArr }
                            expr: newArray { vtElement = "GameObj" }
                                lengthExpr: (*) { left = 2 }
                                    right: cast { vtCast = 0 }
                                        expr: lValue { varID = objArr }
903.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: cast { vtCast = 1 }
                                expr: parens
                                    expr: (*) { right = 2.3, left = 10 }
905.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = group }
                            expr: cast { vtCast = "String" }
                                expr: lValue { varID = circle, fieldID = group }
907.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: staticField { fieldID = P, class = Math }
911.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: unaryOp (neg)
                                expr: lValue { varID = rect }
913.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: unaryOp (neg)
                                expr: lValue { varID = strVar }
917.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: unaryOp (not)
                                expr: lValue { varID = intVar }
921.                    assign (=)
                            lValue: lValue { varID = objArr }
                            expr: newArray { vtElement = "GameObj", lengthExpr = "ten" }
923.                    assign (=)
                            lValue: lValue { varID = strArr }
                            expr: newArray { vtElement = "String" }
                                lengthExpr: (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = intVar }
925.                    assign (=)
                            lValue: lValue { varID = boolArr }
                            expr: newArray { vtElement = true }
                                lengthExpr: (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = intVar }
927.                    assign (=)
                            lValue: lValue { varID = dblArr }
                            expr: newArray { vtElement = 1 }
                                lengthExpr: lValue { varID = dblVar }
929.                    assign (=)
                            lValue: lValue { varID = intArr }
                            expr: newArray { vtElement = 0, lengthExpr = 10.0 }
942.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: new Integer { #exprs = 1 }
                                exprs:
942.                                (1)
948.                    var arrInit9 { vt = array of String }
                            initExpr: arrayInit { #exprs = 1 }
                                exprs:
                                    newArray { vtElement = "String" }
                                        lengthExpr: lValue { varID = intVar }
950.                    var arrInit8 { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    lValue { varID = rect }
                                    lValue { varID = intArr }
                                    lValue { varID = text }
952.                    var arrInit7 { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    lValue { varID = rect }
                                    lValue { varID = image }
                                    lValue { varID = objArr }
956.                    var arrInit6 { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    call rect { #exprs = 4, class = ct }
                                        exprs:
956.                                        (50)
956.                                        (50)
956.                                        (10)
956.                                        (10)
                                    lValue { varID = text }
956.                                (0)
958.                    var arrInit5 { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
958.                                ("circle")
                                    lValue { varID = circle }
960.                    var arrInit4 { vt = array of String }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    (+) { right = 1 }
                                        left: lValue { varID = strVar }
                                    lValue { varID = intVar }
                                    (+) { right = 2 }
                                        left: lValue { varID = intVar }
962.                    var arrInit3 { vt = array of boolean }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
962.                                (false)
                                    lValue { varID = boolVar }
962.                                (null)
964.                    var arrInit2 { vt = array of double }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
                                    lValue { varID = circle }
964.                                (0.5)
966.                    var arrInit1 { vt = array of int }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
966.                                (1)
966.                                ("1")
971.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = strVar }
                                    left: lValue { varID = objArr }
973.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = strVar }
                                    left: lValue { varID = strArr }
975.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = strVar }
                                    left: lValue { varID = boolArr }
977.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = dblArr }
                                    left: lValue { varID = strVar }
979.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intArr }
                                    left: lValue { varID = strVar }
983.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = intArr }
985.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = rect }
987.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = boolVar }
989.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = intArr }
991.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = rect }
993.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = boolVar }
995.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intArr }
                                    left: lValue { varID = dblVar }
997.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = rect }
                                    left: lValue { varID = dblVar }
999.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = boolVar }
                                    left: lValue { varID = dblVar }
1001.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intArr }
                                    left: lValue { varID = intVar }
1003.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = rect }
                                    left: lValue { varID = intVar }
1005.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = boolVar }
                                    left: lValue { varID = intVar }
1007.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { left = 1 }
                                right: parens
                                    expr: (+) { right = 1 }
                                        left: (+)
                                            right: lValue { varID = intArr }
                                            left: lValue { varID = boolVar }
1009.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: (+)
                                right: lValue { varID = rect }
                                left: lValue { varID = boolVar }
1011.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (+)
                                right: (/) { right = 2 }
                                    left: lValue { varID = dblVar }
                                left: lValue { varID = boolVar }
1013.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (-) { right = 1 }
                                left: (+)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = boolVar }
1015.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (+)
                                right: lValue { varID = boolVar }
                                left: lValue { varID = boolVar }
1017.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: (+)
                                right: lValue { varID = text }
                                left: lValue { varID = circle }
1019.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = width }
                            expr: (+) { left = 2 }
                                right: lValue { varID = rect }
1021.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { right = false }
                                    left: lValue { varID = rect, fieldID = x }
1025.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (-) { right = ".txt" }
                                left: lValue { varID = strVar }
1027.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (%)
                                right: lValue { varID = text }
                                left: lValue { varID = rect, fieldID = group }
1029.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { right = 10 }
                                left: lValue { varID = circle }
1031.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = width }
                            expr: (*) { right = 2 }
                                left: lValue { varID = rect }
1033.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: (-) { left = 100 }
                                right: lValue { varID = rect }
1037.                    var intArrayInitWithExpressions { vt = array of int }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
                                    (+) { left = 1 }
                                        right: (/) { right = 1, left = 2 }
                                    (/) { right = 2 }
                                        left: parens
                                            expr: (+) { right = 1, left = 3 }
1039.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (==) { right = 1 }
                                left: (/)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = intVar }
1041.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { right = 3 }
                                left: unaryOp (neg) { expr = 10 }
1043.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { left = 10 }
                                right: unaryOp (neg) { expr = 3 }
1045.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { right = 5, left = 123 }
1047.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { right = 3 }
                                left: parens
                                    expr: (+) { right = 2, left = 1 }
1049.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { left = 1 }
                                right: parens
                                    expr: (+) { right = 3, left = 2 }
1051.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: (/) { right = 1 }
                                left: lValue { varID = intVar }
1053.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { left = 1 }
                                    right: (/)
                                        right: lValue { varID = intVar }
                                        left: lValue { varID = intVar }
1055.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { left = 2 }
                                right: lValue { varID = intVar }
1057.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { right = 2 }
                                left: lValue { varID = intVar }
1061.                    assign (=)
                            lValue: lValue { varID = circle }
                            expr: (||) { right = false }
                                left: lValue { varID = intVar }
1063.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: (&&) { right = true }
                                            left: lValue { varID = rect }
                                        block: block { #stmts = 1 }
                                            stmts:
1067.                                            call voidMethod
                            expr: (&&) { left = true }
                                right: lValue { varID = dblVar }
                            block: block { #stmts = 1 }
                                stmts:
1064.                                call voidMethod
1069.                    while
                            expr: (&&)
                                right: lValue { varID = boolVar }
                                left: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
1070.                                break
1071.                    doWhile { iLineWhile = 1074 }
                            expr: (||)
                                right: lValue { varID = strVar }
                                left: lValue { varID = dblVar }
                            block: block { #stmts = 1 }
                                stmts:
1072.                                break
1078.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (<)
                                right: lValue { varID = rect }
                                left: lValue { varID = circle }
1080.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: (<=) { right = 10, left = "level" }
                                        block: block { #stmts = 1 }
                                            stmts:
1084.                                            call voidMethod
                            expr: (>) { right = false, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
1081.                                call voidMethod
1086.                    while
                            expr: (>=)
                                right: lValue { varID = rect, fieldID = visible }
                                left: (+) { right = 1, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
1087.                                break
1088.                    doWhile { iLineWhile = 1091 }
                            expr: (<) { left = 3.14 }
                                right: lValue { varID = text }
                            block: block { #stmts = 1 }
                                stmts:
1089.                                break
1095.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (==)
                                right: lValue { varID = rect }
                                left: lValue { varID = boolVar }
1097.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (!=) { right = true }
                                left: lValue { varID = rect }
1099.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (==) { left = "3.14" }
                                right: staticField { fieldID = PI, class = Math }
1101.                    for
                            expr: (!=)
                                right: lValue { varID = strVar }
                                left: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
1102.                                call voidMethod
1104.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (==) { right = true }
                                left: lValue { varID = strVar }
1106.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (!=) { right = false, left = "false" }
1107.                    doWhile { iLineWhile = 1110 }
                            expr: (==) { right = false, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
1108.                                call voidMethod
1112.                    while
                            expr: (!=) { right = 0 }
                                left: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
1113.                                call voidMethod
1115.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: (!=) { left = 1 }
                                            right: lValue { varID = circle }
                                        block: block { #stmts = 1 }
                                            stmts:
1119.                                            call voidMethod
                            expr: (==) { right = 1 }
                                left: lValue { varID = rect }
                            block: block { #stmts = 1 }
                                stmts:
1116.                                call voidMethod
1123.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (=)
                                    right: lValue { varID = rect }
                                    left: lValue { varID = circle }
1125.                    while
                            expr: (=) { right = false }
                                left: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
1126.                                assign (=) { expr = true }
                                        lValue: lValue { varID = boolVar }
1128.                    if
                            expr: (=) { right = 100 }
                                left: lValue { varID = rect, fieldID = x }
                            block: block { #stmts = 1 }
                                stmts:
1129.                                call setSpeed { #exprs = 2 }
                                        lValue: lValue { varID = rect }
                                        exprs:
                                            unaryOp (neg) { expr = 1 }
1129.                                        (0)
1131.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: parens
                                expr: (=) { right = 2 }
                                    left: (+) { right = 1, left = 1 }
1133.                    if
                            expr: (=) { right = 1 }
                                left: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
1134.                                call println { #exprs = 1, class = ct }
                                        exprs:
1134.                                        ("oops")
1138.                    call println { #exprs = 1, class = ct }
                            exprs:
                                call voidMethod
1140.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: call println { class = ct }
1143.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (|) { right = 1, left = 2 }
1145.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (^) { right = 1, left = 2 }
1147.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (&) { right = 1, left = 2 }
1149.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (>>>) { right = 1, left = 2 }
1151.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (>>) { right = 1, left = 2 }
1153.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (<<) { right = 1, left = 2 }
1156.        func start { #paramVars = 0, isPublic = true, vt = void }
                block: block { iLineEnd = 1158, #stmts = 0, iLineBegin = 1157 }
        vars:
  3.        var classLevelInt { vt = int, isGlobal = true, initExpr = 0 }
  4.        var classLevelDouble { vt = double, isGlobal = true, initExpr = 0 }
  5.        var classLevelBoolean { vt = boolean, isGlobal = true, initExpr = false }
  6.        var classLevelString { vt = String, isGlobal = true, initExpr = "" }
  7.        var classLevelGameObj { vt = GameObj, isGlobal = true }
  8.        var classLevelIntArr { vt = array of int, isGlobal = true }
                initExpr: newArray { vtElement = 0, lengthExpr = 10 }
  9.        var classLevelUnassignedVar { vt = GameObj, isGlobal = true }
 11.        var varFromCtCallBeforeStart { vt = GameObj, isGlobal = true }
                initExpr: call rect { #exprs = 4, class = ct }
                    exprs:
 11.                    (0)
 11.                    (0)
 11.                    (10)
 11.                    (10)
 13.        var intVarFromUserMethod { vt = GameObj, isGlobal = true }
                initExpr: call intMethod
