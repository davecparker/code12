    program CheckJavaErrorTestCode { #funcs = 3, #vars = 5 }
        funcs:
  9.        func voidMethod { #paramVars = 0, vt = void }
                block: block { iLineEnd = 11, #stmts = 0, iLineBegin = 10 }
 13.        func testMethod { #paramVars = 0, vt = void }
                block: block { iLineEnd = 230, #stmts = 84, iLineBegin = 14 }
                    stmts:
 15.                    var i { vt = int, initExpr = 1 }
 16.                    var d { vt = double, initExpr = 1.2 }
 17.                    var b { vt = boolean, initExpr = false }
 18.                    var s { vt = String, initExpr = "" }
 19.                    var rect { vt = GameObj }
                            initExpr: call rect { #exprs = 4, class = ct }
                                exprs:
 19.                                (50)
 19.                                (50)
 19.                                (10)
 19.                                (10)
 20.                    var circle { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
 20.                                (50)
 20.                                (50)
 20.                                (10)
 21.                    var text { vt = GameObj }
                            initExpr: call text { #exprs = 4, class = ct }
                                exprs:
 21.                                ("text")
 21.                                (50)
 21.                                (50)
 21.                                (10)
 22.                    var intArr { vt = array of int }
                            initExpr: newArray { vtElement = 0, lengthExpr = 10 }
 23.                    var dblArr { vt = array of double }
                            initExpr: newArray { vtElement = 1, lengthExpr = 10 }
 24.                    var boolArr { vt = array of boolean }
                            initExpr: newArray { vtElement = true, lengthExpr = 10 }
 25.                    var strArr { vt = array of String }
                            initExpr: newArray { vtElement = "String", lengthExpr = 10 }
 26.                    var objArr { vt = array of GameObj }
                            initExpr: newArray { vtElement = "GameObj", lengthExpr = 10 }
 33.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = s }
                                    left: lValue { varID = objArr }
 35.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = s }
                                    left: lValue { varID = strArr }
 37.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = s }
                                    left: lValue { varID = boolArr }
 39.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = dblArr }
                                    left: lValue { varID = s }
 41.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intArr }
                                    left: lValue { varID = s }
 45.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = d }
                                    left: lValue { varID = intArr }
 47.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = d }
                                    left: lValue { varID = rect }
 49.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = d }
                                    left: lValue { varID = b }
 51.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = i }
                                    left: lValue { varID = intArr }
 53.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = i }
                                    left: lValue { varID = rect }
 55.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = i }
                                    left: lValue { varID = b }
 57.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intArr }
                                    left: lValue { varID = d }
 59.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = rect }
                                    left: lValue { varID = d }
 61.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = b }
                                    left: lValue { varID = d }
 63.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intArr }
                                    left: lValue { varID = i }
 65.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = rect }
                                    left: lValue { varID = i }
 67.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = b }
                                    left: lValue { varID = i }
 69.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (/) { left = 1 }
                                right: parens
                                    expr: (+) { right = 1 }
                                        left: (+)
                                            right: lValue { varID = intArr }
                                            left: lValue { varID = b }
 71.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: (+)
                                right: lValue { varID = rect }
                                left: lValue { varID = b }
 73.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (+)
                                right: (/) { right = 2 }
                                    left: lValue { varID = d }
                                left: lValue { varID = b }
 75.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (-) { right = 1 }
                                left: (+)
                                    right: lValue { varID = i }
                                    left: lValue { varID = b }
 77.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (+)
                                right: lValue { varID = b }
                                left: lValue { varID = b }
 79.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: (+)
                                right: lValue { varID = text }
                                left: lValue { varID = circle }
 81.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = width }
                            expr: (+) { left = 2 }
                                right: lValue { varID = rect }
 83.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { right = false }
                                    left: lValue { varID = rect, fieldID = x }
 87.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (-) { right = ".txt" }
                                left: lValue { varID = s }
 89.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (%)
                                right: lValue { varID = text }
                                left: lValue { varID = rect, fieldID = group }
 91.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (/) { right = 10 }
                                left: lValue { varID = circle }
 93.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = width }
                            expr: (*) { right = 2 }
                                left: lValue { varID = rect }
 95.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: (-) { left = 100 }
                                right: lValue { varID = rect }
 99.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (==) { right = 1 }
                                left: (/)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
101.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (/) { right = 3 }
                                left: unaryOp (neg) { expr = 10 }
103.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (/) { left = 10 }
                                right: unaryOp (neg) { expr = 3 }
105.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (/) { right = 5, left = 123 }
107.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (/) { right = 3 }
                                left: parens
                                    expr: (+) { right = 2, left = 1 }
109.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (/) { left = 1 }
                                right: parens
                                    expr: (+) { right = 3, left = 2 }
111.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: (/) { right = 1 }
                                left: lValue { varID = i }
113.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { left = 1 }
                                    right: (/)
                                        right: lValue { varID = i }
                                        left: lValue { varID = i }
115.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (/) { left = 2 }
                                right: lValue { varID = i }
117.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (/) { right = 2 }
                                left: lValue { varID = i }
121.                    assign (=)
                            lValue: lValue { varID = circle }
                            expr: (||) { right = false }
                                left: lValue { varID = i }
123.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: (&&) { right = true }
                                            left: lValue { varID = rect }
                                        block: block { #stmts = 1 }
                                            stmts:
127.                                            call voidMethod
                            expr: (&&) { left = true }
                                right: lValue { varID = d }
                            block: block { #stmts = 1 }
                                stmts:
124.                                call voidMethod
129.                    while
                            expr: (&&)
                                right: lValue { varID = b }
                                left: lValue { varID = i }
                            block: block { #stmts = 1 }
                                stmts:
130.                                break
131.                    doWhile { iLineWhile = 134 }
                            expr: (||)
                                right: lValue { varID = s }
                                left: lValue { varID = d }
                            block: block { #stmts = 1 }
                                stmts:
132.                                break
138.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (<)
                                right: lValue { varID = rect }
                                left: lValue { varID = circle }
140.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: (<=) { right = 10, left = "level" }
                                        block: block { #stmts = 1 }
                                            stmts:
144.                                            call voidMethod
                            expr: (>) { right = false, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
141.                                call voidMethod
146.                    while
                            expr: (>=)
                                right: lValue { varID = rect, fieldID = visible }
                                left: (+) { right = 1, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
147.                                break
148.                    doWhile { iLineWhile = 151 }
                            expr: (<) { left = 3.14 }
                                right: lValue { varID = text }
                            block: block { #stmts = 1 }
                                stmts:
149.                                break
155.                    if
                            expr: (!=) { left = "" }
                                right: lValue { varID = s }
                            block: block { #stmts = 1 }
                                stmts:
156.                                call voidMethod
158.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (==) { right = "circles" }
                                    left: lValue { varID = circle, fieldID = group }
168.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (==)
                                right: lValue { varID = rect }
                                left: lValue { varID = b }
170.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (!=) { right = true }
                                left: lValue { varID = rect }
172.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (==) { left = "3.14" }
                                right: staticField { fieldID = PI, class = Math }
174.                    for
                            expr: (!=)
                                right: lValue { varID = s }
                                left: lValue { varID = i }
                            block: block { #stmts = 1 }
                                stmts:
175.                                call voidMethod
177.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (==) { right = true }
                                left: lValue { varID = s }
179.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (!=) { right = false, left = "false" }
180.                    doWhile { iLineWhile = 183 }
                            expr: (==) { right = false, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
181.                                call voidMethod
185.                    while
                            expr: (!=) { right = 0 }
                                left: lValue { varID = b }
                            block: block { #stmts = 1 }
                                stmts:
186.                                call voidMethod
188.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: (!=) { left = 1 }
                                            right: lValue { varID = circle }
                                        block: block { #stmts = 1 }
                                            stmts:
192.                                            call voidMethod
                            expr: (==) { right = 1 }
                                left: lValue { varID = rect }
                            block: block { #stmts = 1 }
                                stmts:
189.                                call voidMethod
196.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (=)
                                    right: lValue { varID = rect }
                                    left: lValue { varID = circle }
198.                    while
                            expr: (=) { right = false }
                                left: lValue { varID = b }
                            block: block { #stmts = 1 }
                                stmts:
199.                                assign (=) { expr = true }
                                        lValue: lValue { varID = b }
201.                    if
                            expr: (=) { right = 100 }
                                left: lValue { varID = rect, fieldID = x }
                            block: block { #stmts = 1 }
                                stmts:
202.                                call setSpeed { #exprs = 2 }
                                        lValue: lValue { varID = rect }
                                        exprs:
                                            unaryOp (neg) { expr = 1 }
202.                                        (0)
204.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: parens
                                expr: (=) { right = 2 }
                                    left: (+) { right = 1, left = 1 }
206.                    if
                            expr: (=) { right = 1 }
                                left: lValue { varID = i }
                            block: block { #stmts = 1 }
                                stmts:
207.                                call println { #exprs = 1, class = ct }
                                        exprs:
207.                                        ("oops")
211.                    call println { #exprs = 1, class = ct }
                            exprs:
                                call voidMethod
213.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call println { class = ct }
219.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (|) { right = 1, left = 2 }
221.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (^) { right = 1, left = 2 }
223.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (&) { right = 1, left = 2 }
225.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (>>>) { right = 1, left = 2 }
227.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (>>) { right = 1, left = 2 }
229.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (<<) { right = 1, left = 2 }
234.        func start { #paramVars = 0, isPublic = true, vt = void }
                block: block { iLineEnd = 236, #stmts = 0, iLineBegin = 235 }
        vars:
  3.        var classLevelInt { vt = int, isGlobal = true, initExpr = 0 }
  4.        var classLevelDouble { vt = double, isGlobal = true, initExpr = 0 }
  5.        var classLevelBoolean { vt = boolean, isGlobal = true, initExpr = false }
  6.        var classLevelString { vt = String, isGlobal = true, initExpr = "" }
  7.        var classLevelGameObj { vt = GameObj, isGlobal = true }
