    program CheckJavaErrorTestCode { #funcs = 27, #vars = 5 }
        funcs:
  9.        func voidMethod { #paramVars = 0, vt = void }
                block: block { iLineEnd = 11, #stmts = 0, iLineBegin = 10 }
 13.        func noErrorsMethod { #paramVars = 0, vt = void }
                block: block { iLineEnd = 19, #stmts = 3, iLineBegin = 14 }
                    stmts:
 15.                    var intArrayInitWithExpressions { vt = array of int }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    (+) { right = 2, left = 1 }
                                    (+) { right = 50 }
                                        left: (*) { right = 4, left = 3 }
                                    (+) { right = 3 }
                                        left: parens
                                            expr: (-) { right = 890, left = 67 }
 16.                    var gObjArrayInitWithCTCalls { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
                                    call rect { #exprs = 4, class = ct }
                                        exprs:
 16.                                        (50)
 16.                                        (50)
 16.                                        (10)
 16.                                        (10)
                                    call text { #exprs = 4, class = ct }
                                        exprs:
 16.                                        ("text")
 16.                                        (50)
 16.                                        (50)
 16.                                        (10)
 17.                    var dblArrayInitWithExpressionsAndIntPromotion { vt = array of double }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
                                    (+) { right = 2, left = 1 }
                                    (/) { right = 2 }
                                        left: (*) { right = 7, left = 3.4 }
 21.        func funcMissingReturn10 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 34, #stmts = 4, iLineBegin = 22 }
                    stmts:
 23.                    var r { vt = int, initExpr = 0 }
 24.                    var boolVar1 { vt = boolean, initExpr = false }
 25.                    var boolVar2 { vt = boolean, initExpr = false }
 26.                    if
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
 27.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
                                                if
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
 32.                                                        return
                                                                expr: lValue { varID = r }
                                                    expr: lValue { varID = boolVar2 }
                                                    block: block { #stmts = 1 }
                                                        stmts:
 30.                                                        return
                                                                expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar1 }
                                        block: block { #stmts = 1 }
                                            stmts:
 28.                                            call println { class = ct }
 35.        func funcMissingReturn9 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 46, #stmts = 4, iLineBegin = 36 }
                    stmts:
 37.                    var r { vt = int, initExpr = 0 }
 38.                    var boolVar1 { vt = boolean, initExpr = false }
 39.                    var boolVar2 { vt = boolean, initExpr = false }
 40.                    if
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
 41.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
 44.                                            call println { class = ct }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
 42.                                            return
                                                    expr: lValue { varID = r }
 47.        func funcMissingReturn8 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 58, #stmts = 4, iLineBegin = 48 }
                    stmts:
 49.                    var r { vt = int, initExpr = 0 }
 50.                    var boolVar1 { vt = boolean, initExpr = false }
 51.                    var boolVar2 { vt = boolean, initExpr = false }
 52.                    if
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
 53.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
 56.                                            return
                                                    expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
 54.                                            return
                                                    expr: lValue { varID = r }
 59.        func funcMissingReturn7 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 71, #stmts = 4, iLineBegin = 60 }
                    stmts:
 61.                    var r { vt = int, initExpr = 0 }
 62.                    var boolVar1 { vt = boolean, initExpr = false }
 63.                    var boolVar2 { vt = boolean, initExpr = true }
 64.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
 69.                                            return
                                                    expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
 67.                                            call println { class = ct }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
 65.                                call println { class = ct }
 72.        func funcMissingReturn6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 84, #stmts = 4, iLineBegin = 73 }
                    stmts:
 74.                    var r { vt = int, initExpr = 0 }
 75.                    var boolVar1 { vt = boolean, initExpr = false }
 76.                    var boolVar2 { vt = boolean, initExpr = true }
 77.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
 82.                                            call println { class = ct }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
 80.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
 78.                                call println { class = ct }
 85.        func funcMissingReturn5 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 97, #stmts = 4, iLineBegin = 86 }
                    stmts:
 87.                    var r { vt = int, initExpr = 0 }
 88.                    var boolVar1 { vt = boolean, initExpr = false }
 89.                    var boolVar2 { vt = boolean, initExpr = true }
 90.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
 95.                                            call println { class = ct }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
 93.                                            call println { class = ct }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
 91.                                return
                                        expr: lValue { varID = r }
 98.        func funcMissingReturn4 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 106, #stmts = 2, iLineBegin = 99 }
                    stmts:
100.                    var boolVar { vt = boolean, initExpr = false }
101.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
104.                                call println { class = ct }
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
102.                                call println { class = ct }
107.        func funcMissingReturn2 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 114, #stmts = 3, iLineBegin = 108 }
                    stmts:
109.                    var r { vt = int, initExpr = 0 }
110.                    var boolVar { vt = boolean, initExpr = false }
111.                    if
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
112.                                return
                                        expr: lValue { varID = r }
115.        func funcMissingReturn1 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 118, #stmts = 0, iLineBegin = 116 }
119.        func funcPathMissingReturn4WithBrackets { #paramVars = 0, vt = int }
                block: block { iLineEnd = 133, #stmts = 4, iLineBegin = 120 }
                    stmts:
121.                    var r { vt = int, initExpr = 0 }
122.                    var boolVar1 { vt = boolean, initExpr = false }
123.                    var boolVar2 { vt = boolean, initExpr = false }
124.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: lValue { varID = boolVar2 }
                                        block: block { iLineEnd = 132, #stmts = 1, iLineBegin = 129 }
                                            stmts:
130.                                            call println { class = ct }
                            expr: lValue { varID = boolVar1 }
                            block: block { iLineEnd = 127, #stmts = 1, iLineBegin = 125 }
                                stmts:
126.                                return
                                        expr: lValue { varID = r }
134.        func funcPathMissingReturn3WithBrackets { #paramVars = 0, vt = int }
                block: block { iLineEnd = 148, #stmts = 4, iLineBegin = 135 }
                    stmts:
136.                    var r { vt = int, initExpr = 0 }
137.                    var boolVar1 { vt = boolean, initExpr = false }
138.                    var boolVar2 { vt = boolean, initExpr = false }
139.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: lValue { varID = boolVar2 }
                                        block: block { iLineEnd = 147, #stmts = 1, iLineBegin = 145 }
                                            stmts:
146.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { iLineEnd = 143, #stmts = 1, iLineBegin = 140 }
                                stmts:
141.                                call println { class = ct }
149.        func funcPathMissingReturn2WithBrackets { #paramVars = 0, vt = int }
                block: block { iLineEnd = 162, #stmts = 3, iLineBegin = 150 }
                    stmts:
151.                    var r { vt = int, initExpr = 0 }
152.                    var boolVar { vt = boolean, initExpr = false }
153.                    if
                            elseBlock: block { iLineEnd = 161, #stmts = 1, iLineBegin = 158 }
                                stmts:
159.                                call println { class = ct }
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 156, #stmts = 1, iLineBegin = 154 }
                                stmts:
155.                                return
                                        expr: lValue { varID = r }
163.        func funcPathMissingReturn1WithBrackets { #paramVars = 0, vt = int }
                block: block { iLineEnd = 176, #stmts = 3, iLineBegin = 164 }
                    stmts:
165.                    var r { vt = int, initExpr = 0 }
166.                    var boolVar { vt = boolean, initExpr = false }
167.                    if
                            elseBlock: block { iLineEnd = 175, #stmts = 1, iLineBegin = 173 }
                                stmts:
174.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 171, #stmts = 1, iLineBegin = 168 }
                                stmts:
169.                                call println { class = ct }
177.        func funcPathMissingReturn10 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 192, #stmts = 4, iLineBegin = 178 }
                    stmts:
179.                    var r { vt = int, initExpr = 0 }
180.                    var boolVar1 { vt = boolean, initExpr = false }
181.                    var boolVar2 { vt = boolean, initExpr = false }
182.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
191.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
183.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
                                                if
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
189.                                                        call println { class = ct }
                                                    expr: lValue { varID = boolVar2 }
                                                    block: block { #stmts = 1 }
                                                        stmts:
186.                                                        return
                                                                expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar1 }
                                        block: block { #stmts = 1 }
                                            stmts:
184.                                            return
                                                    expr: lValue { varID = r }
193.        func funcPathMissingReturn9 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 208, #stmts = 4, iLineBegin = 194 }
                    stmts:
195.                    var r { vt = int, initExpr = 0 }
196.                    var boolVar1 { vt = boolean, initExpr = false }
197.                    var boolVar2 { vt = boolean, initExpr = false }
198.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
207.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
199.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
                                                if
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
205.                                                        return
                                                                expr: lValue { varID = r }
                                                    expr: lValue { varID = boolVar2 }
                                                    block: block { #stmts = 1 }
                                                        stmts:
203.                                                        call println { class = ct }
                                        expr: lValue { varID = boolVar1 }
                                        block: block { #stmts = 1 }
                                            stmts:
200.                                            return
                                                    expr: lValue { varID = r }
209.        func funcPathMissingReturn8 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 224, #stmts = 4, iLineBegin = 210 }
                    stmts:
211.                    var r { vt = int, initExpr = 0 }
212.                    var boolVar1 { vt = boolean, initExpr = false }
213.                    var boolVar2 { vt = boolean, initExpr = false }
214.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
223.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
215.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
                                                if
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
221.                                                        return
                                                                expr: lValue { varID = r }
                                                    expr: lValue { varID = boolVar2 }
                                                    block: block { #stmts = 1 }
                                                        stmts:
219.                                                        return
                                                                expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar1 }
                                        block: block { #stmts = 1 }
                                            stmts:
217.                                            call println { class = ct }
225.        func funcPathMissingReturn7 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 237, #stmts = 4, iLineBegin = 226 }
                    stmts:
227.                    var r { vt = int, initExpr = 0 }
228.                    var boolVar1 { vt = boolean, initExpr = false }
229.                    var boolVar2 { vt = boolean, initExpr = false }
230.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
236.                                            return
                                                    expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
234.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
232.                                call println { class = ct }
238.        func funcPathMissingReturn6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 250, #stmts = 4, iLineBegin = 239 }
                    stmts:
240.                    var r { vt = int, initExpr = 0 }
241.                    var boolVar1 { vt = boolean, initExpr = false }
242.                    var boolVar2 { vt = boolean, initExpr = false }
243.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
249.                                            return
                                                    expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
247.                                            call println { class = ct }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
244.                                return
                                        expr: lValue { varID = r }
251.        func funcPathMissingReturn5 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 263, #stmts = 4, iLineBegin = 252 }
                    stmts:
253.                    var r { vt = int, initExpr = 0 }
254.                    var boolVar1 { vt = boolean, initExpr = false }
255.                    var boolVar2 { vt = boolean, initExpr = false }
256.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
262.                                            call println { class = ct }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
259.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
257.                                return
                                        expr: lValue { varID = r }
264.        func funcPathMissingReturn4 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 274, #stmts = 4, iLineBegin = 265 }
                    stmts:
266.                    var r { vt = int, initExpr = 0 }
267.                    var boolVar1 { vt = boolean, initExpr = false }
268.                    var boolVar2 { vt = boolean, initExpr = false }
269.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
273.                                            call println { class = ct }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
270.                                return
                                        expr: lValue { varID = r }
275.        func funcPathMissingReturn3 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 285, #stmts = 4, iLineBegin = 276 }
                    stmts:
277.                    var r { vt = int, initExpr = 0 }
278.                    var boolVar1 { vt = boolean, initExpr = false }
279.                    var boolVar2 { vt = boolean, initExpr = false }
280.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
284.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
282.                                call println { class = ct }
286.        func funcPathMissingReturn2 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 295, #stmts = 3, iLineBegin = 287 }
                    stmts:
288.                    var r { vt = int, initExpr = 0 }
289.                    var boolVar { vt = boolean, initExpr = false }
290.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
294.                                call println { class = ct }
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
291.                                return
                                        expr: lValue { varID = r }
296.        func funcPathMissingReturn1 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 305, #stmts = 3, iLineBegin = 297 }
                    stmts:
298.                    var r { vt = int, initExpr = 0 }
299.                    var boolVar { vt = boolean, initExpr = false }
300.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
304.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
302.                                call println { class = ct }
307.        func testErrors1 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 601, #stmts = 109, iLineBegin = 308 }
                    stmts:
309.                    var intVar { vt = int, initExpr = 1 }
310.                    var doubleVar { vt = double, initExpr = 1.2 }
311.                    var booleanVar { vt = boolean, initExpr = false }
312.                    var stringVar { vt = String, initExpr = "" }
313.                    var rect { vt = GameObj }
                            initExpr: call rect { #exprs = 4, class = ct }
                                exprs:
313.                                (50)
313.                                (50)
313.                                (10)
313.                                (10)
314.                    var circle { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
314.                                (50)
314.                                (50)
314.                                (10)
315.                    var text { vt = GameObj }
                            initExpr: call text { #exprs = 4, class = ct }
                                exprs:
315.                                ("text")
315.                                (50)
315.                                (50)
315.                                (10)
316.                    var image { vt = GameObj }
                            initExpr: call image { #exprs = 4, class = ct }
                                exprs:
316.                                ("bogusFileName.png")
316.                                (50)
316.                                (50)
316.                                (10)
317.                    var intArr { vt = array of int }
                            initExpr: newArray { vtElement = 0, lengthExpr = 10 }
318.                    var dblArr { vt = array of double }
                            initExpr: newArray { vtElement = 1, lengthExpr = 10 }
319.                    var boolArr { vt = array of boolean }
                            initExpr: newArray { vtElement = true, lengthExpr = 10 }
320.                    var strArr { vt = array of String }
                            initExpr: newArray { vtElement = "String", lengthExpr = 10 }
321.                    var objArr { vt = array of GameObj }
                            initExpr: newArray { vtElement = "GameObj", lengthExpr = 10 }
324.                    assign (=)
                            lValue: lValue { varID = circle, fieldID = x }
                            expr: (+) { right = 314 }
                                left: cast { vtCast = 0 }
                                    expr: lValue { varID = intVar }
326.                    assign (=)
                            lValue: lValue { varID = circle, fieldID = x }
                            expr: cast { vtCast = 0 }
                                expr: parens
                                    expr: (+) { right = 314 }
                                        left: lValue { varID = intVar }
328.                    assign (=)
                            lValue: lValue { varID = objArr }
                            expr: newArray { vtElement = "GameObj" }
                                lengthExpr: (*) { left = 2 }
                                    right: cast { vtCast = 0 }
                                        expr: lValue { varID = objArr }
330.                    assign (=)
                            lValue: lValue { varID = doubleVar }
                            expr: cast { vtCast = 1 }
                                expr: parens
                                    expr: (*) { right = 2.3, left = 10 }
332.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = group }
                            expr: cast { vtCast = "String" }
                                expr: lValue { varID = circle, fieldID = group }
334.                    assign (=)
                            lValue: lValue { varID = doubleVar }
                            expr: staticField { fieldID = P, class = Math }
338.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: unaryOp (neg)
                                expr: lValue { varID = rect }
340.                    assign (=)
                            lValue: lValue { varID = stringVar }
                            expr: unaryOp (neg)
                                expr: lValue { varID = stringVar }
344.                    assign (=)
                            lValue: lValue { varID = booleanVar }
                            expr: unaryOp (not)
                                expr: lValue { varID = intVar }
348.                    assign (=)
                            lValue: lValue { varID = objArr }
                            expr: newArray { vtElement = "GameObj", lengthExpr = "ten" }
350.                    assign (=)
                            lValue: lValue { varID = strArr }
                            expr: newArray { vtElement = "String" }
                                lengthExpr: (+)
                                    right: lValue { varID = doubleVar }
                                    left: lValue { varID = intVar }
352.                    assign (=)
                            lValue: lValue { varID = boolArr }
                            expr: newArray { vtElement = true }
                                lengthExpr: (+)
                                    right: lValue { varID = doubleVar }
                                    left: lValue { varID = intVar }
354.                    assign (=)
                            lValue: lValue { varID = dblArr }
                            expr: newArray { vtElement = 1 }
                                lengthExpr: lValue { varID = doubleVar }
356.                    assign (=)
                            lValue: lValue { varID = intArr }
                            expr: newArray { vtElement = 0, lengthExpr = 10.0 }
377.                    var arrInit9 { vt = array of String }
                            initExpr: arrayInit { #exprs = 1 }
                                exprs:
                                    newArray { vtElement = "String" }
                                        lengthExpr: lValue { varID = intVar }
379.                    var arrInit8 { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    lValue { varID = rect }
                                    lValue { varID = intArr }
                                    lValue { varID = text }
381.                    var arrInit7 { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    lValue { varID = rect }
                                    lValue { varID = image }
                                    lValue { varID = objArr }
385.                    var arrInit6 { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    call rect { #exprs = 4, class = ct }
                                        exprs:
385.                                        (50)
385.                                        (50)
385.                                        (10)
385.                                        (10)
                                    lValue { varID = text }
385.                                (0)
387.                    var arrInit5 { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
387.                                ("circle")
                                    lValue { varID = circle }
389.                    var arrInit4 { vt = array of String }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    (+) { right = 1 }
                                        left: lValue { varID = stringVar }
                                    lValue { varID = intVar }
                                    (+) { right = 2 }
                                        left: lValue { varID = intVar }
391.                    var arrInit3 { vt = array of boolean }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
391.                                (false)
                                    lValue { varID = booleanVar }
391.                                (null)
393.                    var arrInit2 { vt = array of double }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
                                    lValue { varID = circle }
393.                                (0.5)
395.                    var arrInit1 { vt = array of int }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
395.                                (1)
395.                                ("1")
400.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = stringVar }
                                    left: lValue { varID = objArr }
402.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = stringVar }
                                    left: lValue { varID = strArr }
404.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = stringVar }
                                    left: lValue { varID = boolArr }
406.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = dblArr }
                                    left: lValue { varID = stringVar }
408.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intArr }
                                    left: lValue { varID = stringVar }
412.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = doubleVar }
                                    left: lValue { varID = intArr }
414.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = doubleVar }
                                    left: lValue { varID = rect }
416.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = doubleVar }
                                    left: lValue { varID = booleanVar }
418.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = intArr }
420.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = rect }
422.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = booleanVar }
424.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intArr }
                                    left: lValue { varID = doubleVar }
426.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = rect }
                                    left: lValue { varID = doubleVar }
428.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = booleanVar }
                                    left: lValue { varID = doubleVar }
430.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intArr }
                                    left: lValue { varID = intVar }
432.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = rect }
                                    left: lValue { varID = intVar }
434.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = booleanVar }
                                    left: lValue { varID = intVar }
436.                    assign (=)
                            lValue: lValue { varID = doubleVar }
                            expr: (/) { left = 1 }
                                right: parens
                                    expr: (+) { right = 1 }
                                        left: (+)
                                            right: lValue { varID = intArr }
                                            left: lValue { varID = booleanVar }
438.                    assign (=)
                            lValue: lValue { varID = stringVar }
                            expr: (+)
                                right: lValue { varID = rect }
                                left: lValue { varID = booleanVar }
440.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (+)
                                right: (/) { right = 2 }
                                    left: lValue { varID = doubleVar }
                                left: lValue { varID = booleanVar }
442.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (-) { right = 1 }
                                left: (+)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = booleanVar }
444.                    assign (=)
                            lValue: lValue { varID = booleanVar }
                            expr: (+)
                                right: lValue { varID = booleanVar }
                                left: lValue { varID = booleanVar }
446.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: (+)
                                right: lValue { varID = text }
                                left: lValue { varID = circle }
448.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = width }
                            expr: (+) { left = 2 }
                                right: lValue { varID = rect }
450.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { right = false }
                                    left: lValue { varID = rect, fieldID = x }
454.                    assign (=)
                            lValue: lValue { varID = doubleVar }
                            expr: (-) { right = ".txt" }
                                left: lValue { varID = stringVar }
456.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (%)
                                right: lValue { varID = text }
                                left: lValue { varID = rect, fieldID = group }
458.                    assign (=)
                            lValue: lValue { varID = doubleVar }
                            expr: (/) { right = 10 }
                                left: lValue { varID = circle }
460.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = width }
                            expr: (*) { right = 2 }
                                left: lValue { varID = rect }
462.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: (-) { left = 100 }
                                right: lValue { varID = rect }
466.                    var intArrayInitWithExpressions { vt = array of int }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
                                    (+) { left = 1 }
                                        right: (/) { right = 1, left = 2 }
                                    (/) { right = 2 }
                                        left: parens
                                            expr: (+) { right = 1, left = 3 }
468.                    assign (=)
                            lValue: lValue { varID = booleanVar }
                            expr: (==) { right = 1 }
                                left: (/)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = intVar }
470.                    assign (=)
                            lValue: lValue { varID = doubleVar }
                            expr: (/) { right = 3 }
                                left: unaryOp (neg) { expr = 10 }
472.                    assign (=)
                            lValue: lValue { varID = doubleVar }
                            expr: (/) { left = 10 }
                                right: unaryOp (neg) { expr = 3 }
474.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { right = 5, left = 123 }
476.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { right = 3 }
                                left: parens
                                    expr: (+) { right = 2, left = 1 }
478.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { left = 1 }
                                right: parens
                                    expr: (+) { right = 3, left = 2 }
480.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: (/) { right = 1 }
                                left: lValue { varID = intVar }
482.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { left = 1 }
                                    right: (/)
                                        right: lValue { varID = intVar }
                                        left: lValue { varID = intVar }
484.                    assign (=)
                            lValue: lValue { varID = doubleVar }
                            expr: (/) { left = 2 }
                                right: lValue { varID = intVar }
486.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { right = 2 }
                                left: lValue { varID = intVar }
490.                    assign (=)
                            lValue: lValue { varID = circle }
                            expr: (||) { right = false }
                                left: lValue { varID = intVar }
492.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: (&&) { right = true }
                                            left: lValue { varID = rect }
                                        block: block { #stmts = 1 }
                                            stmts:
496.                                            call voidMethod
                            expr: (&&) { left = true }
                                right: lValue { varID = doubleVar }
                            block: block { #stmts = 1 }
                                stmts:
493.                                call voidMethod
498.                    while
                            expr: (&&)
                                right: lValue { varID = booleanVar }
                                left: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
499.                                break
500.                    doWhile { iLineWhile = 503 }
                            expr: (||)
                                right: lValue { varID = stringVar }
                                left: lValue { varID = doubleVar }
                            block: block { #stmts = 1 }
                                stmts:
501.                                break
507.                    assign (=)
                            lValue: lValue { varID = booleanVar }
                            expr: (<)
                                right: lValue { varID = rect }
                                left: lValue { varID = circle }
509.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: (<=) { right = 10, left = "level" }
                                        block: block { #stmts = 1 }
                                            stmts:
513.                                            call voidMethod
                            expr: (>) { right = false, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
510.                                call voidMethod
515.                    while
                            expr: (>=)
                                right: lValue { varID = rect, fieldID = visible }
                                left: (+) { right = 1, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
516.                                break
517.                    doWhile { iLineWhile = 520 }
                            expr: (<) { left = 3.14 }
                                right: lValue { varID = text }
                            block: block { #stmts = 1 }
                                stmts:
518.                                break
525.                    if
                            expr: (!=) { left = "" }
                                right: lValue { varID = stringVar }
                            block: block { #stmts = 1 }
                                stmts:
526.                                call voidMethod
528.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (==) { right = "circles" }
                                    left: lValue { varID = circle, fieldID = group }
539.                    assign (=)
                            lValue: lValue { varID = booleanVar }
                            expr: (==)
                                right: lValue { varID = rect }
                                left: lValue { varID = booleanVar }
541.                    assign (=)
                            lValue: lValue { varID = booleanVar }
                            expr: (!=) { right = true }
                                left: lValue { varID = rect }
543.                    assign (=)
                            lValue: lValue { varID = booleanVar }
                            expr: (==) { left = "3.14" }
                                right: staticField { fieldID = PI, class = Math }
545.                    for
                            expr: (!=)
                                right: lValue { varID = stringVar }
                                left: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
546.                                call voidMethod
548.                    assign (=)
                            lValue: lValue { varID = booleanVar }
                            expr: (==) { right = true }
                                left: lValue { varID = stringVar }
550.                    assign (=)
                            lValue: lValue { varID = booleanVar }
                            expr: (!=) { right = false, left = "false" }
551.                    doWhile { iLineWhile = 554 }
                            expr: (==) { right = false, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
552.                                call voidMethod
556.                    while
                            expr: (!=) { right = 0 }
                                left: lValue { varID = booleanVar }
                            block: block { #stmts = 1 }
                                stmts:
557.                                call voidMethod
559.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: (!=) { left = 1 }
                                            right: lValue { varID = circle }
                                        block: block { #stmts = 1 }
                                            stmts:
563.                                            call voidMethod
                            expr: (==) { right = 1 }
                                left: lValue { varID = rect }
                            block: block { #stmts = 1 }
                                stmts:
560.                                call voidMethod
567.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (=)
                                    right: lValue { varID = rect }
                                    left: lValue { varID = circle }
569.                    while
                            expr: (=) { right = false }
                                left: lValue { varID = booleanVar }
                            block: block { #stmts = 1 }
                                stmts:
570.                                assign (=) { expr = true }
                                        lValue: lValue { varID = booleanVar }
572.                    if
                            expr: (=) { right = 100 }
                                left: lValue { varID = rect, fieldID = x }
                            block: block { #stmts = 1 }
                                stmts:
573.                                call setSpeed { #exprs = 2 }
                                        lValue: lValue { varID = rect }
                                        exprs:
                                            unaryOp (neg) { expr = 1 }
573.                                        (0)
575.                    assign (=)
                            lValue: lValue { varID = booleanVar }
                            expr: parens
                                expr: (=) { right = 2 }
                                    left: (+) { right = 1, left = 1 }
577.                    if
                            expr: (=) { right = 1 }
                                left: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
578.                                call println { #exprs = 1, class = ct }
                                        exprs:
578.                                        ("oops")
582.                    call println { #exprs = 1, class = ct }
                            exprs:
                                call voidMethod
584.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: call println { class = ct }
590.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (|) { right = 1, left = 2 }
592.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (^) { right = 1, left = 2 }
594.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (&) { right = 1, left = 2 }
596.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (>>>) { right = 1, left = 2 }
598.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (>>) { right = 1, left = 2 }
600.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (<<) { right = 1, left = 2 }
605.        func start { #paramVars = 0, isPublic = true, vt = void }
                block: block { iLineEnd = 607, #stmts = 0, iLineBegin = 606 }
        vars:
  3.        var classLevelInt { vt = int, isGlobal = true, initExpr = 0 }
  4.        var classLevelDouble { vt = double, isGlobal = true, initExpr = 0 }
  5.        var classLevelBoolean { vt = boolean, isGlobal = true, initExpr = false }
  6.        var classLevelString { vt = String, isGlobal = true, initExpr = "" }
  7.        var classLevelGameObj { vt = GameObj, isGlobal = true }
