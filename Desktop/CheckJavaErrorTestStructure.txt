    program CheckJavaErrorTestCode { #funcs = 69, #vars = 7 }
        funcs:
 13.        func voidMethod { #paramVars = 0, vt = void }
                block: block { iLineEnd = 17, #stmts = 2, iLineBegin = 14 }
                    stmts:
 15.                    var voidMethodVar { vt = int }
 16.                    return
 18.        func voidMethodWithParams { #paramVars = 5, vt = void }
                paramVars:
 18.                var p1 { vt = int, isGlobal = false }
 18.                var p2 { vt = double, isGlobal = false }
 18.                var p3 { vt = boolean, isGlobal = false }
 18.                var p4 { vt = String, isGlobal = false }
 18.                var p5 { vt = GameObj, isGlobal = false }
                block: block { iLineEnd = 20, #stmts = 0, iLineBegin = 19 }
 24.        func noErrorsMethod { #paramVars = 0, vt = GameObj }
                block: block { iLineEnd = 76, #stmts = 12, iLineBegin = 25 }
                    stmts:
 26.                    call println { lValue = out, #exprs = 1, class = System }
                            exprs:
 26.                            ("Hello world")
 27.                    assign (=)
                            lValue: lValue { varID = classLevelGameObj }
                            expr: call rect { #exprs = 4, class = ct }
                                exprs:
 27.                                (0)
 27.                                (0)
 27.                                (10)
 27.                                (10)
 28.                    var returnValue { vt = GameObj, initExpr = null }
 29.                    var boolVar { vt = boolean, initExpr = false }
 30.                    var intArrayInitWithExpressions { vt = array of int }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    (+) { right = 2, left = 1 }
                                    (+) { right = 50 }
                                        left: (*) { right = 4, left = 3 }
                                    (+) { right = 3 }
                                        left: parens
                                            expr: (-) { right = 890, left = 67 }
 31.                    var gObjArrayInitWithCTCalls { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
                                    call rect { #exprs = 4, class = ct }
                                        exprs:
 31.                                        (50)
 31.                                        (50)
 31.                                        (10)
 31.                                        (10)
                                    call text { #exprs = 4, class = ct }
                                        exprs:
 31.                                        ("text")
 31.                                        (50)
 31.                                        (50)
 31.                                        (10)
 32.                    var dblArrayInitWithExpressionsAndIntPromotion { vt = array of double }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
                                    (+) { right = 2, left = 1 }
                                    (/) { right = 2 }
                                        left: (*) { right = 7, left = 3.4 }
 36.                    for
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 44, #stmts = 3, iLineBegin = 37 }
                                stmts:
 38.                                call println { class = ct }
 39.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
 42.                                            break
                                        expr: lValue { varID = boolVar }
                                        block: block { #stmts = 1 }
                                            stmts:
 40.                                            call println { class = ct }
 43.                                call println { class = ct }
 45.                    while
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 50, #stmts = 2, iLineBegin = 46 }
                                stmts:
 47.                                if
                                        expr: lValue { varID = boolVar }
                                        block: block { #stmts = 1 }
                                            stmts:
 48.                                            break
 49.                                call println { class = ct }
 51.                    doWhile { iLineWhile = 57 }
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 56, #stmts = 2, iLineBegin = 52 }
                                stmts:
 53.                                call println { class = ct }
 54.                                if
                                        expr: lValue { varID = boolVar }
                                        block: block { #stmts = 1 }
                                            stmts:
 55.                                            break
 59.                    for
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 63, #stmts = 1, iLineBegin = 60 }
                                stmts:
 61.                                if
                                        expr: lValue { varID = boolVar }
                                        block: block { #stmts = 1 }
                                            stmts:
 62.                                            return
                                                    expr: lValue { varID = returnValue }
 64.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { iLineEnd = 75, #stmts = 1, iLineBegin = 73 }
                                            stmts:
 74.                                            return
                                                    expr: lValue { varID = returnValue }
                                        expr: lValue { varID = boolVar }
                                        block: block { iLineEnd = 71, #stmts = 1, iLineBegin = 69 }
                                            stmts:
 70.                                            return
                                                    expr: lValue { varID = returnValue }
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 67, #stmts = 1, iLineBegin = 65 }
                                stmts:
 66.                                return
                                        expr: lValue { varID = returnValue }
 77.        func testErrors3 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 99, #stmts = 10, iLineBegin = 78 }
                    stmts:
 79.                    var boolVar { vt = boolean, initExpr = false }
 80.                    if
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 83, #stmts = 1, iLineBegin = 81 }
                                stmts:
 82.                                var prevBlockVar { vt = int }
 85.                    assign (=) { expr = 2e2 }
                            lValue: lValue { varID = prevBlockVar }
 87.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { right = 1 }
                                    left: lValue { varID = voidMethodVar }
 89.                    assign (=) { expr = 1.1 }
                            lValue: lValue { varID = prevBlockvar }
 91.                    assign (=) { expr = 0 }
                            lValue: lValue { varID = undeclaredVar }
 93.                    call setText { #exprs = 1 }
                            lValue: lValue { varID = classLevelGameObj }
                            exprs:
                                lValue { varID = undeclaredVar }
 95.                    call print { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = classLevelUnassignedVar }
 96.                    var unassignedVar { vt = int }
 98.                    call print { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = unassignedVar }
101.        func onMousePress { #paramVars = 3, isPublic = true, vt = boolean }
                paramVars:
101.                var obj { vt = GameObj, isGlobal = false }
101.                var x { vt = double, isGlobal = false }
101.                var y { vt = double, isGlobal = false }
                block: block { iLineEnd = 104, #stmts = 1, iLineBegin = 102 }
                    stmts:
103.                    return
                            expr: lValue { varID = classLevelBoolean }
106.        func onMouseDrag { #paramVars = 4, isPublic = true, vt = void }
                paramVars:
106.                var obj { vt = GameObj, isGlobal = false }
106.                var x { vt = double, isGlobal = false }
106.                var y { vt = double, isGlobal = false }
106.                var z { vt = double, isGlobal = false }
                block: block { iLineEnd = 108, #stmts = 0, iLineBegin = 107 }
110.        func onMouseRelease { #paramVars = 3, isPublic = true, vt = void }
                paramVars:
110.                var obj { vt = GameObj, isGlobal = false }
110.                var x { vt = double, isGlobal = false }
110.                var y { vt = int, isGlobal = false }
                block: block { iLineEnd = 112, #stmts = 0, iLineBegin = 111 }
114.        func onKeyPress { #paramVars = 1, vt = void }
                paramVars:
114.                var keyName { vt = String, isGlobal = false }
                block: block { iLineEnd = 116, #stmts = 0, iLineBegin = 115 }
118.        func onKeyRelease { #paramVars = 1, vt = void }
                paramVars:
118.                var keyName { vt = String, isGlobal = false }
                block: block { iLineEnd = 120, #stmts = 0, iLineBegin = 119 }
126.        func onCharTyped { isStatic = true, vt = void, #paramVars = 1, isPublic = true }
                paramVars:
126.                var charString { vt = String, isGlobal = false }
                block: block { iLineEnd = 128, #stmts = 0, iLineBegin = 127 }
129.        func onResize { #paramVars = 0, isPublic = true, vt = void }
                block: block { iLineEnd = 131, #stmts = 0, iLineBegin = 130 }
133.        func onResize { #paramVars = 0, isPublic = true, vt = void }
                block: block { iLineEnd = 135, #stmts = 0, iLineBegin = 134 }
136.        func existingUserFunction { #paramVars = 0, vt = void }
                block: block { iLineEnd = 138, #stmts = 0, iLineBegin = 137 }
140.        func existingUserFunction { #paramVars = 0, vt = void }
                block: block { iLineEnd = 142, #stmts = 0, iLineBegin = 141 }
144.        func existingUserfunction { #paramVars = 0, vt = void }
                block: block { iLineEnd = 146, #stmts = 0, iLineBegin = 145 }
148.        func testErrors2 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 314, #stmts = 79, iLineBegin = 149 }
                    stmts:
150.                    var intVar { vt = int, initExpr = 0 }
151.                    var dblVar { vt = double, initExpr = 0 }
152.                    var boolVar { vt = boolean, initExpr = false }
153.                    var strVar { vt = String, initExpr = "" }
154.                    var rect { vt = GameObj }
                            initExpr: call rect { #exprs = 4, class = ct }
                                exprs:
154.                                (50)
154.                                (50)
154.                                (10)
154.                                (10)
155.                    var circle { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
155.                                (50)
155.                                (50)
155.                                (10)
156.                    var text { vt = GameObj }
                            initExpr: call text { #exprs = 4, class = ct }
                                exprs:
156.                                ("text")
156.                                (50)
156.                                (50)
156.                                (10)
157.                    var image { vt = GameObj }
                            initExpr: call image { #exprs = 4, class = ct }
                                exprs:
157.                                ("bogusFileName.png")
157.                                (50)
157.                                (50)
157.                                (10)
158.                    var intArr { vt = array of int }
                            initExpr: newArray { vtElement = 0, lengthExpr = 10 }
159.                    var dblArr { vt = array of double }
                            initExpr: newArray { vtElement = 1, lengthExpr = 10 }
160.                    var boolArr { vt = array of boolean }
                            initExpr: newArray { vtElement = true, lengthExpr = 10 }
161.                    var strArr { vt = array of String }
                            initExpr: newArray { vtElement = "String", lengthExpr = 10 }
162.                    var objArr { vt = array of GameObj }
                            initExpr: newArray { vtElement = "GameObj", lengthExpr = 10 }
164.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = dblVar }
166.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: lValue { varID = dblVar }
168.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: lValue { varID = intVar }
170.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: lValue { varID = strVar }
172.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = strVar }
174.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: lValue { varID = rect }
176.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x, indexExpr = 0 }
                            expr: lValue { varID = dblVar }
178.                    assign (++)
                            lValue: lValue { varID = intVar, indexExpr = 0 }
180.                    assign (=)
                            lValue: lValue { varID = strArr }
                                indexExpr: (*) { right = 1.0 }
                                    left: lValue { varID = intVar }
                            expr: lValue { varID = strVar }
182.                    assign (=)
                            lValue: lValue { varID = objArr }
                                indexExpr: lValue { varID = dblVar }
                            expr: lValue { varID = rect }
184.                    assign (=)
                            lValue: lValue { varID = intArr }
                            expr: newArray { vtElement = 0 }
                                lengthExpr: (*) { right = 2 }
                                    left: lValue { varID = intArr, fieldID = foo }
186.                    call print { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = intVar, fieldID = x }
188.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = setText }
                            expr: lValue { varID = strVar }
190.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: lValue { varID = rect, fieldID = foo }
192.                    assign (=) { expr = 0 }
                            lValue: lValue { varID = rect, fieldID = foo }
194.                    call onMousePress { #exprs = 3 }
                            exprs:
                                lValue { varID = rect }
                                lValue { varID = rect, fieldID = x }
                                lValue { varID = rect, fieldID = y }
196.                    var line { vt = GameObj }
                            initExpr: call line { #exprs = 4 }
                                exprs:
196.                                (50)
196.                                (50)
196.                                (10)
196.                                (10)
198.                    call println
200.                    call undefinedFunc
202.                    assign (=)
                            lValue: lValue { varID = rect }
                            expr: call rec { #exprs = 4, class = ct }
                                exprs:
202.                                (0)
202.                                (0)
202.                                (1)
202.                                (1)
204.                    call printLine { class = ct }
206.                    call foo { class = ct }
210.                    call bar { lValue = foo, class = System }
212.                    call println { lValue = err, #exprs = 1, class = System }
                            exprs:
212.                            ("File opening failed:")
214.                    var stdev { vt = double }
                            initExpr: call foo { #exprs = 1, class = Math }
                                exprs:
                                    lValue { varID = doubleVar }
216.                    call getWidht { #exprs = 1 }
                            lValue: lValue { varID = rect }
                            exprs:
                                lValue { varID = dblVar }
218.                    call equal { #exprs = 1 }
                            lValue: lValue { varID = strVar }
                            exprs:
                                lValue { varID = classLevelString }
220.                    call foo
                            lValue: lValue { varID = rect }
222.                    call concat { #exprs = 1 }
                            lValue: lValue { varID = rect, fieldID = group }
                            exprs:
                                call getText
                                    lValue: lValue { varID = text }
224.                    call setSize { #exprs = 2 }
                            lValue: lValue { varID = classLevelString }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = dblVar }
226.                    call size
                            lValue: lValue { varID = strVar }
228.                    call delete
                            lValue: lValue { varID = objArr }
230.                    call delete
                            lValue: lValue { varID = intVar }
232.                    call print { class = ct }
234.                    if
                            expr: (<) { right = 0 }
                                left: call min { #exprs = 1, class = Math }
                                    exprs:
234.                                    (1)
                            block: block { #stmts = 1 }
                                stmts:
235.                                call voidMethod
237.                    call voidMethodWithParams
239.                    if
                            expr: (<) { right = 0 }
                                left: call min { #exprs = 3, class = Math }
                                    exprs:
239.                                    (1)
239.                                    (2)
239.                                    (3)
                            block: block { #stmts = 1 }
                                stmts:
240.                                call voidMethod
242.                    var minOf3 { vt = double }
                            initExpr: call min { #exprs = 3, class = Math }
                                exprs:
242.                                (1)
242.                                (2)
242.                                (3)
244.                    call voidMethod { #exprs = 1 }
                            exprs:
244.                            (1)
246.                    call println { #exprs = 2, class = ct }
                            exprs:
246.                            ("hello")
246.                            ("world")
248.                    call println { #exprs = 1, class = ct }
                            exprs:
                                call distance { #exprs = 4, class = ct }
                                    exprs:
                                        call round { #exprs = 1, class = ct }
                                            exprs:
                                                lValue { varID = rect, fieldID = x }
                                        lValue { varID = rect, fieldID = y }
                                        lValue { varID = circle }
                                        lValue { varID = circle, fieldID = y }
250.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: call max { #exprs = 2, class = Math }
                                exprs:
                                    lValue { varID = intVar }
                                    lValue { varID = strVar }
251.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = intVar }
                                lValue { varID = boolVar }
                                lValue { varID = strVar }
                                lValue { varID = rect }
253.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = dblVar }
                                lValue { varID = boolVar }
                                lValue { varID = strVar }
                                lValue { varID = intVar }
255.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = dblVar }
                                lValue { varID = strVar }
                                lValue { varID = strVar }
                                lValue { varID = rect }
257.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = boolVar }
                                lValue { varID = boolVar }
                                lValue { varID = strVar }
                                lValue { varID = rect }
259.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = dblVar }
                                lValue { varID = dblVar }
                                lValue { varID = boolVar }
                                lValue { varID = strVar }
                                lValue { varID = rect }
261.                    for
                            expr: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
262.                                call println { class = ct }
263.                    doWhile { iLineWhile = 266 }
                            expr: (+) { right = "" }
                                left: parens
                                    expr: (==) { right = 2e0 }
                                        left: (+) { right = 1.0, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
264.                                call println { class = ct }
268.                    while
                            expr: (+) { right = "" }
                                left: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
270.                                assign (+=) { expr = 1 }
                                        lValue: lValue { varID = rect, fieldID = group }
272.                    assign (+=) { expr = false }
                            lValue: lValue { varID = boolVar }
274.                    assign (*=)
                            lValue: lValue { varID = dblVar }
                            expr: lValue { varID = rect }
276.                    assign (+=)
                            lValue: lValue { varID = dblVar }
                            expr: (+) { right = "" }
                                left: lValue { varID = boolVar }
278.                    assign (+=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = boolVar }
280.                    assign (/=)
                            lValue: lValue { varID = intVar }
                            expr: (*)
                                right: lValue { varID = rect, fieldID = x }
                                left: lValue { varID = classLevelInt }
282.                    assign (*=) { expr = 1e0 }
                            lValue: lValue { varID = intVar }
284.                    assign (-=)
                            lValue: lValue { varID = classLevelInt }
                            expr: lValue { varID = classLevelDouble }
286.                    assign (+=) { expr = 1.0 }
                            lValue: lValue { varID = intVar }
288.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: lValue { varID = intVar }
                                        block: block { #stmts = 1 }
                                            stmts:
292.                                            call println { class = ct }
                            expr: lValue { varID = dblVar }
                            block: block { #stmts = 1 }
                                stmts:
289.                                call println { class = ct }
294.                    if { expr = 0 }
                            block: block { #stmts = 1 }
                                stmts:
295.                                call println { class = ct }
297.                    forArray { expr = null }
297.                        var: var x { vt = int, isGlobal = false }
                            block: block { #stmts = 1 }
                                stmts:
298.                                break
300.                    forArray
300.                        var: var x { vt = int, isGlobal = false }
                            expr: lValue { varID = image }
                            block: block { #stmts = 1 }
                                stmts:
301.                                break
303.                    forArray
303.                        var: var x { vt = int, isGlobal = false }
                            expr: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
304.                                break
306.                    forArray
306.                        var: var x { vt = GameObj, isGlobal = false }
                            expr: lValue { varID = classLevelIntArr }
                            block: block { #stmts = 1 }
                                stmts:
307.                                break
309.                    forArray
309.                        var: var x { vt = boolean, isGlobal = false }
                            expr: newArray { vtElement = "String", lengthExpr = 10 }
                            block: block { #stmts = 1 }
                                stmts:
310.                                break
312.                    forArray
312.                        var: var x { vt = int, isGlobal = false }
                            expr: lValue { varID = dblArr }
                            block: block { #stmts = 1 }
                                stmts:
313.                                break
315.        func voidFuncReturnsValue6 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 324, #stmts = 3, iLineBegin = 316 }
                    stmts:
317.                    var r { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
317.                                (0)
317.                                (0)
317.                                (1)
318.                    while
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
319.                                if
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { #stmts = 1 }
                                            stmts:
321.                                            return
                                                    expr: lValue { varID = r }
323.                    return
                            expr: lValue { varID = r }
325.        func voidFuncReturnsValue5 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 333, #stmts = 3, iLineBegin = 326 }
                    stmts:
327.                    var r { vt = GameObj, initExpr = null }
328.                    for
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
330.                                return
                                        expr: lValue { varID = r }
332.                    return
                            expr: lValue { varID = r }
334.        func voidFuncReturnsValue4 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 342, #stmts = 3, iLineBegin = 335 }
                    stmts:
336.                    var r { vt = String, initExpr = null }
337.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
339.                                return
                                        expr: lValue { varID = r }
341.                    return
                            expr: lValue { varID = r }
343.        func voidFuncReturnsValue3 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 351, #stmts = 3, iLineBegin = 344 }
                    stmts:
345.                    var r { vt = String, initExpr = "" }
346.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
348.                                return
                                        expr: lValue { varID = r }
350.                    return
                            expr: lValue { varID = r }
352.        func voidFuncReturnsValue2 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 360, #stmts = 3, iLineBegin = 353 }
                    stmts:
354.                    var r { vt = boolean, initExpr = false }
355.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
357.                                return
                                        expr: lValue { varID = r }
359.                    return
                            expr: lValue { varID = r }
361.        func voidFuncReturnsValue1 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 366, #stmts = 2, iLineBegin = 362 }
                    stmts:
363.                    var r { vt = double, initExpr = 0 }
365.                    return
                            expr: lValue { varID = r }
367.        func funcWrongReturnValueType7 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 371, #stmts = 1, iLineBegin = 368 }
                    stmts:
370.                    return
                            expr: (*) { right = 1.0 }
                                left: lValue { varID = classLevelInt }
372.        func funcWrongReturnValueType6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 381, #stmts = 3, iLineBegin = 373 }
                    stmts:
374.                    var r { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
374.                                (0)
374.                                (0)
374.                                (1)
375.                    while
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
376.                                if
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { #stmts = 1 }
                                            stmts:
378.                                            return
                                                    expr: lValue { varID = r }
380.                    return
                            expr: lValue { varID = r }
382.        func funcWrongReturnValueType5 { #paramVars = 0, vt = String }
                block: block { iLineEnd = 390, #stmts = 3, iLineBegin = 383 }
                    stmts:
384.                    var r { vt = GameObj, initExpr = null }
385.                    for
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
387.                                return
                                        expr: lValue { varID = r }
389.                    return
                            expr: lValue { varID = r }
391.        func funcWrongReturnValueType4 { #paramVars = 0, vt = GameObj }
                block: block { iLineEnd = 399, #stmts = 3, iLineBegin = 392 }
                    stmts:
393.                    var r { vt = String, initExpr = null }
394.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
396.                                return
                                        expr: lValue { varID = r }
398.                    return
                            expr: lValue { varID = r }
400.        func funcWrongReturnValueType3 { #paramVars = 0, vt = boolean }
                block: block { iLineEnd = 408, #stmts = 3, iLineBegin = 401 }
                    stmts:
402.                    var r { vt = String, initExpr = "" }
403.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
405.                                return
                                        expr: lValue { varID = r }
407.                    return
                            expr: lValue { varID = r }
409.        func funcWrongReturnValueType2 { #paramVars = 0, vt = double }
                block: block { iLineEnd = 417, #stmts = 3, iLineBegin = 410 }
                    stmts:
411.                    var r { vt = boolean, initExpr = false }
412.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
414.                                return
                                        expr: lValue { varID = r }
416.                    return
                            expr: lValue { varID = r }
418.        func funcWrongReturnValueType1 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 423, #stmts = 2, iLineBegin = 419 }
                    stmts:
420.                    var r { vt = double, initExpr = 0 }
422.                    return
                            expr: lValue { varID = r }
424.        func funcNoReturnValue6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 432, #stmts = 3, iLineBegin = 425 }
                    stmts:
426.                    var r { vt = int, initExpr = 0 }
427.                    while
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
428.                                if
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { #stmts = 1 }
                                            stmts:
430.                                            return
431.                    return
                            expr: lValue { varID = r }
433.        func funcNoReturnValue5 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 440, #stmts = 3, iLineBegin = 434 }
                    stmts:
435.                    var r { vt = int, initExpr = 0 }
436.                    for
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
438.                                return
439.                    return
                            expr: lValue { varID = r }
441.        func funcNoReturnValue4 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 449, #stmts = 3, iLineBegin = 442 }
                    stmts:
443.                    var r { vt = int, initExpr = 0 }
444.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
446.                                return
448.                    return
450.        func funcNoReturnValue3 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 457, #stmts = 3, iLineBegin = 451 }
                    stmts:
452.                    var r { vt = int, initExpr = 0 }
453.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
455.                                return
456.                    return
                            expr: lValue { varID = r }
458.        func funcNoReturnValue2 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 465, #stmts = 3, iLineBegin = 459 }
                    stmts:
460.                    var r { vt = int, initExpr = 0 }
461.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
462.                                return
                                        expr: lValue { varID = r }
464.                    return
466.        func funcNoReturnValue1 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 470, #stmts = 1, iLineBegin = 467 }
                    stmts:
469.                    return
471.        func funcBreakStmtErrors { #paramVars = 0, vt = void }
                block: block { iLineEnd = 486, #stmts = 2, iLineBegin = 472 }
                    stmts:
473.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
483.                                            break
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { #stmts = 1 }
                                            stmts:
480.                                            break
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 477, #stmts = 1, iLineBegin = 474 }
                                stmts:
476.                                break
485.                    break
487.        func funcUnreachableStmt8 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 504, #stmts = 3, iLineBegin = 488 }
                    stmts:
489.                    var r { vt = int, initExpr = 0 }
490.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 502, #stmts = 1, iLineBegin = 491 }
                                stmts:
492.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
                                                if
                                                    expr: (==) { right = 3 }
                                                        left: (+) { right = 1, left = 1 }
                                                    block: block { iLineEnd = 501, #stmts = 2, iLineBegin = 497 }
                                                        stmts:
498.                                                        return
                                                                expr: lValue { varID = r }
500.                                                        call println { class = ct }
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { iLineEnd = 495, #stmts = 1, iLineBegin = 493 }
                                            stmts:
494.                                            call println { class = ct }
503.                    return
                            expr: lValue { varID = r }
505.        func funcUnreachableStmt7 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 515, #stmts = 3, iLineBegin = 506 }
                    stmts:
507.                    var r { vt = int, initExpr = 0 }
508.                    while
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 513, #stmts = 2, iLineBegin = 509 }
                                stmts:
510.                                return
                                        expr: lValue { varID = r }
512.                                call println { class = ct }
514.                    return
                            expr: lValue { varID = r }
516.        func funcUnreachableStmt6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 530, #stmts = 3, iLineBegin = 517 }
                    stmts:
518.                    var r { vt = int, initExpr = 0 }
519.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: (==) { right = 3 }
                                            left: (+) { right = 1, left = 1 }
                                        block: block { iLineEnd = 528, #stmts = 2, iLineBegin = 524 }
                                            stmts:
525.                                            return
                                                    expr: lValue { varID = r }
527.                                            call println { class = ct }
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 522, #stmts = 1, iLineBegin = 520 }
                                stmts:
521.                                call println { class = ct }
529.                    return
                            expr: lValue { varID = r }
531.        func funcUnreachableStmt5 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 545, #stmts = 3, iLineBegin = 532 }
                    stmts:
533.                    var r { vt = int, initExpr = 0 }
534.                    if
                            elseBlock: block { iLineEnd = 543, #stmts = 2, iLineBegin = 539 }
                                stmts:
540.                                return
                                        expr: lValue { varID = r }
542.                                call println { class = ct }
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 537, #stmts = 1, iLineBegin = 535 }
                                stmts:
536.                                call println { class = ct }
544.                    return
                            expr: lValue { varID = r }
546.        func funcUnreachableStmt4 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 557, #stmts = 3, iLineBegin = 547 }
                    stmts:
548.                    var r { vt = int, initExpr = 0 }
549.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 555, #stmts = 2, iLineBegin = 550 }
                                stmts:
551.                                return
                                        expr: lValue { varID = r }
553.                                if
                                        expr: (==) { right = 2 }
                                            left: (+) { right = 1, left = 1 }
                                        block: block { #stmts = 1 }
                                            stmts:
554.                                            call println { class = ct }
556.                    return
                            expr: lValue { varID = r }
558.        func funcUnreachableStmt3 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 567, #stmts = 5, iLineBegin = 559 }
                    stmts:
560.                    var r { vt = int, initExpr = 0 }
561.                    return
                            expr: lValue { varID = r }
563.                    for
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
564.                                break
565.                    call println { class = ct }
566.                    return
                            expr: lValue { varID = r }
568.        func funcUnreachableStmt2 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 577, #stmts = 5, iLineBegin = 569 }
                    stmts:
570.                    var r { vt = int, initExpr = 0 }
571.                    return
                            expr: lValue { varID = r }
573.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
574.                                call println { class = ct }
575.                    call println { class = ct }
576.                    return
                            expr: lValue { varID = r }
578.        func funcUnreachableStmt1 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 584, #stmts = 3, iLineBegin = 579 }
                    stmts:
580.                    return
582.                    call println { class = ct }
583.                    call println { class = ct }
585.        func funcMissingReturn10 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 598, #stmts = 4, iLineBegin = 586 }
                    stmts:
587.                    var r { vt = int, initExpr = 0 }
588.                    var boolVar1 { vt = boolean, initExpr = false }
589.                    var boolVar2 { vt = boolean, initExpr = false }
590.                    if
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
591.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
                                                if
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
596.                                                        return
                                                                expr: lValue { varID = r }
                                                    expr: lValue { varID = boolVar2 }
                                                    block: block { #stmts = 1 }
                                                        stmts:
594.                                                        return
                                                                expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar1 }
                                        block: block { #stmts = 1 }
                                            stmts:
592.                                            call println { class = ct }
599.        func funcMissingReturn9 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 610, #stmts = 4, iLineBegin = 600 }
                    stmts:
601.                    var r { vt = int, initExpr = 0 }
602.                    var boolVar1 { vt = boolean, initExpr = false }
603.                    var boolVar2 { vt = boolean, initExpr = false }
604.                    if
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
605.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
608.                                            call println { class = ct }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
606.                                            return
                                                    expr: lValue { varID = r }
611.        func funcMissingReturn8 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 622, #stmts = 4, iLineBegin = 612 }
                    stmts:
613.                    var r { vt = int, initExpr = 0 }
614.                    var boolVar1 { vt = boolean, initExpr = false }
615.                    var boolVar2 { vt = boolean, initExpr = false }
616.                    if
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
617.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
620.                                            return
                                                    expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
618.                                            return
                                                    expr: lValue { varID = r }
623.        func funcMissingReturn7 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 635, #stmts = 4, iLineBegin = 624 }
                    stmts:
625.                    var r { vt = int, initExpr = 0 }
626.                    var boolVar1 { vt = boolean, initExpr = false }
627.                    var boolVar2 { vt = boolean, initExpr = true }
628.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
633.                                            return
                                                    expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
631.                                            call println { class = ct }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
629.                                call println { class = ct }
636.        func funcMissingReturn6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 648, #stmts = 4, iLineBegin = 637 }
                    stmts:
638.                    var r { vt = int, initExpr = 0 }
639.                    var boolVar1 { vt = boolean, initExpr = false }
640.                    var boolVar2 { vt = boolean, initExpr = true }
641.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
646.                                            call println { class = ct }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
644.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
642.                                call println { class = ct }
649.        func funcMissingReturn5 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 661, #stmts = 4, iLineBegin = 650 }
                    stmts:
651.                    var r { vt = int, initExpr = 0 }
652.                    var boolVar1 { vt = boolean, initExpr = false }
653.                    var boolVar2 { vt = boolean, initExpr = true }
654.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
659.                                            call println { class = ct }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
657.                                            call println { class = ct }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
655.                                return
                                        expr: lValue { varID = r }
662.        func funcMissingReturn4 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 670, #stmts = 2, iLineBegin = 663 }
                    stmts:
664.                    var boolVar { vt = boolean, initExpr = false }
665.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
668.                                call println { class = ct }
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
666.                                call println { class = ct }
671.        func funcMissingReturn2 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 678, #stmts = 3, iLineBegin = 672 }
                    stmts:
673.                    var r { vt = int, initExpr = 0 }
674.                    var boolVar { vt = boolean, initExpr = false }
675.                    if
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
676.                                return
                                        expr: lValue { varID = r }
679.        func funcMissingReturn1 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 682, #stmts = 0, iLineBegin = 680 }
683.        func funcPathMissingReturn4Brackets { #paramVars = 0, vt = int }
                block: block { iLineEnd = 697, #stmts = 4, iLineBegin = 684 }
                    stmts:
685.                    var r { vt = int, initExpr = 0 }
686.                    var boolVar1 { vt = boolean, initExpr = false }
687.                    var boolVar2 { vt = boolean, initExpr = false }
688.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: lValue { varID = boolVar2 }
                                        block: block { iLineEnd = 696, #stmts = 1, iLineBegin = 693 }
                                            stmts:
694.                                            call println { class = ct }
                            expr: lValue { varID = boolVar1 }
                            block: block { iLineEnd = 691, #stmts = 1, iLineBegin = 689 }
                                stmts:
690.                                return
                                        expr: lValue { varID = r }
698.        func funcPathMissingReturn3Brackets { #paramVars = 0, vt = int }
                block: block { iLineEnd = 712, #stmts = 4, iLineBegin = 699 }
                    stmts:
700.                    var r { vt = int, initExpr = 0 }
701.                    var boolVar1 { vt = boolean, initExpr = false }
702.                    var boolVar2 { vt = boolean, initExpr = false }
703.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: lValue { varID = boolVar2 }
                                        block: block { iLineEnd = 711, #stmts = 1, iLineBegin = 709 }
                                            stmts:
710.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { iLineEnd = 707, #stmts = 1, iLineBegin = 704 }
                                stmts:
705.                                call println { class = ct }
713.        func funcPathMissingReturn2Brackets { #paramVars = 0, vt = int }
                block: block { iLineEnd = 726, #stmts = 3, iLineBegin = 714 }
                    stmts:
715.                    var r { vt = int, initExpr = 0 }
716.                    var boolVar { vt = boolean, initExpr = false }
717.                    if
                            elseBlock: block { iLineEnd = 725, #stmts = 1, iLineBegin = 722 }
                                stmts:
723.                                call println { class = ct }
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 720, #stmts = 1, iLineBegin = 718 }
                                stmts:
719.                                return
                                        expr: lValue { varID = r }
727.        func funcPathMissingReturn1Brackets { #paramVars = 0, vt = int }
                block: block { iLineEnd = 740, #stmts = 3, iLineBegin = 728 }
                    stmts:
729.                    var r { vt = int, initExpr = 0 }
730.                    var boolVar { vt = boolean, initExpr = false }
731.                    if
                            elseBlock: block { iLineEnd = 739, #stmts = 1, iLineBegin = 737 }
                                stmts:
738.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 735, #stmts = 1, iLineBegin = 732 }
                                stmts:
733.                                call println { class = ct }
741.        func funcPathMissingReturn10 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 756, #stmts = 4, iLineBegin = 742 }
                    stmts:
743.                    var r { vt = int, initExpr = 0 }
744.                    var boolVar1 { vt = boolean, initExpr = false }
745.                    var boolVar2 { vt = boolean, initExpr = false }
746.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
755.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
747.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
                                                if
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
753.                                                        call println { class = ct }
                                                    expr: lValue { varID = boolVar2 }
                                                    block: block { #stmts = 1 }
                                                        stmts:
750.                                                        return
                                                                expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar1 }
                                        block: block { #stmts = 1 }
                                            stmts:
748.                                            return
                                                    expr: lValue { varID = r }
757.        func funcPathMissingReturn9 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 772, #stmts = 4, iLineBegin = 758 }
                    stmts:
759.                    var r { vt = int, initExpr = 0 }
760.                    var boolVar1 { vt = boolean, initExpr = false }
761.                    var boolVar2 { vt = boolean, initExpr = false }
762.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
771.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
763.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
                                                if
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
769.                                                        return
                                                                expr: lValue { varID = r }
                                                    expr: lValue { varID = boolVar2 }
                                                    block: block { #stmts = 1 }
                                                        stmts:
767.                                                        call println { class = ct }
                                        expr: lValue { varID = boolVar1 }
                                        block: block { #stmts = 1 }
                                            stmts:
764.                                            return
                                                    expr: lValue { varID = r }
773.        func funcPathMissingReturn8 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 788, #stmts = 4, iLineBegin = 774 }
                    stmts:
775.                    var r { vt = int, initExpr = 0 }
776.                    var boolVar1 { vt = boolean, initExpr = false }
777.                    var boolVar2 { vt = boolean, initExpr = false }
778.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
787.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
779.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
                                                if
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
785.                                                        return
                                                                expr: lValue { varID = r }
                                                    expr: lValue { varID = boolVar2 }
                                                    block: block { #stmts = 1 }
                                                        stmts:
783.                                                        return
                                                                expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar1 }
                                        block: block { #stmts = 1 }
                                            stmts:
781.                                            call println { class = ct }
789.        func funcPathMissingReturn7 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 801, #stmts = 4, iLineBegin = 790 }
                    stmts:
791.                    var r { vt = int, initExpr = 0 }
792.                    var boolVar1 { vt = boolean, initExpr = false }
793.                    var boolVar2 { vt = boolean, initExpr = false }
794.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
800.                                            return
                                                    expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
798.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
796.                                call println { class = ct }
802.        func funcPathMissingReturn6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 814, #stmts = 4, iLineBegin = 803 }
                    stmts:
804.                    var r { vt = int, initExpr = 0 }
805.                    var boolVar1 { vt = boolean, initExpr = false }
806.                    var boolVar2 { vt = boolean, initExpr = false }
807.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
813.                                            return
                                                    expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
811.                                            call println { class = ct }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
808.                                return
                                        expr: lValue { varID = r }
815.        func funcPathMissingReturn5 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 827, #stmts = 4, iLineBegin = 816 }
                    stmts:
817.                    var r { vt = int, initExpr = 0 }
818.                    var boolVar1 { vt = boolean, initExpr = false }
819.                    var boolVar2 { vt = boolean, initExpr = false }
820.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
826.                                            call println { class = ct }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
823.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
821.                                return
                                        expr: lValue { varID = r }
828.        func funcPathMissingReturn4 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 838, #stmts = 4, iLineBegin = 829 }
                    stmts:
830.                    var r { vt = int, initExpr = 0 }
831.                    var boolVar1 { vt = boolean, initExpr = false }
832.                    var boolVar2 { vt = boolean, initExpr = false }
833.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
837.                                            call println { class = ct }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
834.                                return
                                        expr: lValue { varID = r }
839.        func funcPathMissingReturn3 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 849, #stmts = 4, iLineBegin = 840 }
                    stmts:
841.                    var r { vt = int, initExpr = 0 }
842.                    var boolVar1 { vt = boolean, initExpr = false }
843.                    var boolVar2 { vt = boolean, initExpr = false }
844.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
848.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
846.                                call println { class = ct }
850.        func funcPathMissingReturn2 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 859, #stmts = 3, iLineBegin = 851 }
                    stmts:
852.                    var r { vt = int, initExpr = 0 }
853.                    var boolVar { vt = boolean, initExpr = false }
854.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
858.                                call println { class = ct }
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
855.                                return
                                        expr: lValue { varID = r }
860.        func funcPathMissingReturn1 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 869, #stmts = 3, iLineBegin = 861 }
                    stmts:
862.                    var r { vt = int, initExpr = 0 }
863.                    var boolVar { vt = boolean, initExpr = false }
864.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
868.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
866.                                call println { class = ct }
871.        func testErrors1 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1165, #stmts = 109, iLineBegin = 872 }
                    stmts:
873.                    var intVar { vt = int, initExpr = 1 }
874.                    var dblVar { vt = double, initExpr = 1.2 }
875.                    var boolVar { vt = boolean, initExpr = false }
876.                    var strVar { vt = String, initExpr = "" }
877.                    var rect { vt = GameObj }
                            initExpr: call rect { #exprs = 4, class = ct }
                                exprs:
877.                                (50)
877.                                (50)
877.                                (10)
877.                                (10)
878.                    var circle { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
878.                                (50)
878.                                (50)
878.                                (10)
879.                    var text { vt = GameObj }
                            initExpr: call text { #exprs = 4, class = ct }
                                exprs:
879.                                ("text")
879.                                (50)
879.                                (50)
879.                                (10)
880.                    var image { vt = GameObj }
                            initExpr: call image { #exprs = 4, class = ct }
                                exprs:
880.                                ("bogusFileName.png")
880.                                (50)
880.                                (50)
880.                                (10)
881.                    var intArr { vt = array of int }
                            initExpr: newArray { vtElement = 0, lengthExpr = 10 }
882.                    var dblArr { vt = array of double }
                            initExpr: newArray { vtElement = 1, lengthExpr = 10 }
883.                    var boolArr { vt = array of boolean }
                            initExpr: newArray { vtElement = true, lengthExpr = 10 }
884.                    var strArr { vt = array of String }
                            initExpr: newArray { vtElement = "String", lengthExpr = 10 }
885.                    var objArr { vt = array of GameObj }
                            initExpr: newArray { vtElement = "GameObj", lengthExpr = 10 }
888.                    assign (=)
                            lValue: lValue { varID = circle, fieldID = x }
                            expr: (+) { right = 314 }
                                left: cast { vtCast = 0 }
                                    expr: lValue { varID = intVar }
890.                    assign (=)
                            lValue: lValue { varID = circle, fieldID = x }
                            expr: cast { vtCast = 0 }
                                expr: parens
                                    expr: (+) { right = 314 }
                                        left: lValue { varID = intVar }
892.                    assign (=)
                            lValue: lValue { varID = objArr }
                            expr: newArray { vtElement = "GameObj" }
                                lengthExpr: (*) { left = 2 }
                                    right: cast { vtCast = 0 }
                                        expr: lValue { varID = objArr }
894.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: cast { vtCast = 1 }
                                expr: parens
                                    expr: (*) { right = 2.3, left = 10 }
896.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = group }
                            expr: cast { vtCast = "String" }
                                expr: lValue { varID = circle, fieldID = group }
898.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: staticField { fieldID = P, class = Math }
902.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: unaryOp (neg)
                                expr: lValue { varID = rect }
904.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: unaryOp (neg)
                                expr: lValue { varID = strVar }
908.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: unaryOp (not)
                                expr: lValue { varID = intVar }
912.                    assign (=)
                            lValue: lValue { varID = objArr }
                            expr: newArray { vtElement = "GameObj", lengthExpr = "ten" }
914.                    assign (=)
                            lValue: lValue { varID = strArr }
                            expr: newArray { vtElement = "String" }
                                lengthExpr: (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = intVar }
916.                    assign (=)
                            lValue: lValue { varID = boolArr }
                            expr: newArray { vtElement = true }
                                lengthExpr: (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = intVar }
918.                    assign (=)
                            lValue: lValue { varID = dblArr }
                            expr: newArray { vtElement = 1 }
                                lengthExpr: lValue { varID = dblVar }
920.                    assign (=)
                            lValue: lValue { varID = intArr }
                            expr: newArray { vtElement = 0, lengthExpr = 10.0 }
941.                    var arrInit9 { vt = array of String }
                            initExpr: arrayInit { #exprs = 1 }
                                exprs:
                                    newArray { vtElement = "String" }
                                        lengthExpr: lValue { varID = intVar }
943.                    var arrInit8 { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    lValue { varID = rect }
                                    lValue { varID = intArr }
                                    lValue { varID = text }
945.                    var arrInit7 { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    lValue { varID = rect }
                                    lValue { varID = image }
                                    lValue { varID = objArr }
949.                    var arrInit6 { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    call rect { #exprs = 4, class = ct }
                                        exprs:
949.                                        (50)
949.                                        (50)
949.                                        (10)
949.                                        (10)
                                    lValue { varID = text }
949.                                (0)
951.                    var arrInit5 { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
951.                                ("circle")
                                    lValue { varID = circle }
953.                    var arrInit4 { vt = array of String }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    (+) { right = 1 }
                                        left: lValue { varID = strVar }
                                    lValue { varID = intVar }
                                    (+) { right = 2 }
                                        left: lValue { varID = intVar }
955.                    var arrInit3 { vt = array of boolean }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
955.                                (false)
                                    lValue { varID = boolVar }
955.                                (null)
957.                    var arrInit2 { vt = array of double }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
                                    lValue { varID = circle }
957.                                (0.5)
959.                    var arrInit1 { vt = array of int }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
959.                                (1)
959.                                ("1")
964.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = strVar }
                                    left: lValue { varID = objArr }
966.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = strVar }
                                    left: lValue { varID = strArr }
968.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = strVar }
                                    left: lValue { varID = boolArr }
970.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = dblArr }
                                    left: lValue { varID = strVar }
972.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intArr }
                                    left: lValue { varID = strVar }
976.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = intArr }
978.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = rect }
980.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = boolVar }
982.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = intArr }
984.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = rect }
986.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = boolVar }
988.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intArr }
                                    left: lValue { varID = dblVar }
990.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = rect }
                                    left: lValue { varID = dblVar }
992.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = boolVar }
                                    left: lValue { varID = dblVar }
994.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intArr }
                                    left: lValue { varID = intVar }
996.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = rect }
                                    left: lValue { varID = intVar }
998.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = boolVar }
                                    left: lValue { varID = intVar }
1000.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { left = 1 }
                                right: parens
                                    expr: (+) { right = 1 }
                                        left: (+)
                                            right: lValue { varID = intArr }
                                            left: lValue { varID = boolVar }
1002.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: (+)
                                right: lValue { varID = rect }
                                left: lValue { varID = boolVar }
1004.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (+)
                                right: (/) { right = 2 }
                                    left: lValue { varID = dblVar }
                                left: lValue { varID = boolVar }
1006.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (-) { right = 1 }
                                left: (+)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = boolVar }
1008.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (+)
                                right: lValue { varID = boolVar }
                                left: lValue { varID = boolVar }
1010.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: (+)
                                right: lValue { varID = text }
                                left: lValue { varID = circle }
1012.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = width }
                            expr: (+) { left = 2 }
                                right: lValue { varID = rect }
1014.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { right = false }
                                    left: lValue { varID = rect, fieldID = x }
1018.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (-) { right = ".txt" }
                                left: lValue { varID = strVar }
1020.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (%)
                                right: lValue { varID = text }
                                left: lValue { varID = rect, fieldID = group }
1022.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { right = 10 }
                                left: lValue { varID = circle }
1024.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = width }
                            expr: (*) { right = 2 }
                                left: lValue { varID = rect }
1026.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: (-) { left = 100 }
                                right: lValue { varID = rect }
1030.                    var intArrayInitWithExpressions { vt = array of int }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
                                    (+) { left = 1 }
                                        right: (/) { right = 1, left = 2 }
                                    (/) { right = 2 }
                                        left: parens
                                            expr: (+) { right = 1, left = 3 }
1032.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (==) { right = 1 }
                                left: (/)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = intVar }
1034.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { right = 3 }
                                left: unaryOp (neg) { expr = 10 }
1036.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { left = 10 }
                                right: unaryOp (neg) { expr = 3 }
1038.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { right = 5, left = 123 }
1040.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { right = 3 }
                                left: parens
                                    expr: (+) { right = 2, left = 1 }
1042.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { left = 1 }
                                right: parens
                                    expr: (+) { right = 3, left = 2 }
1044.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: (/) { right = 1 }
                                left: lValue { varID = intVar }
1046.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { left = 1 }
                                    right: (/)
                                        right: lValue { varID = intVar }
                                        left: lValue { varID = intVar }
1048.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { left = 2 }
                                right: lValue { varID = intVar }
1050.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { right = 2 }
                                left: lValue { varID = intVar }
1054.                    assign (=)
                            lValue: lValue { varID = circle }
                            expr: (||) { right = false }
                                left: lValue { varID = intVar }
1056.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: (&&) { right = true }
                                            left: lValue { varID = rect }
                                        block: block { #stmts = 1 }
                                            stmts:
1060.                                            call voidMethod
                            expr: (&&) { left = true }
                                right: lValue { varID = dblVar }
                            block: block { #stmts = 1 }
                                stmts:
1057.                                call voidMethod
1062.                    while
                            expr: (&&)
                                right: lValue { varID = boolVar }
                                left: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
1063.                                break
1064.                    doWhile { iLineWhile = 1067 }
                            expr: (||)
                                right: lValue { varID = strVar }
                                left: lValue { varID = dblVar }
                            block: block { #stmts = 1 }
                                stmts:
1065.                                break
1071.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (<)
                                right: lValue { varID = rect }
                                left: lValue { varID = circle }
1073.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: (<=) { right = 10, left = "level" }
                                        block: block { #stmts = 1 }
                                            stmts:
1077.                                            call voidMethod
                            expr: (>) { right = false, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
1074.                                call voidMethod
1079.                    while
                            expr: (>=)
                                right: lValue { varID = rect, fieldID = visible }
                                left: (+) { right = 1, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
1080.                                break
1081.                    doWhile { iLineWhile = 1084 }
                            expr: (<) { left = 3.14 }
                                right: lValue { varID = text }
                            block: block { #stmts = 1 }
                                stmts:
1082.                                break
1089.                    if
                            expr: (!=) { left = "" }
                                right: lValue { varID = strVar }
                            block: block { #stmts = 1 }
                                stmts:
1090.                                call voidMethod
1092.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (==) { right = "circles" }
                                    left: lValue { varID = circle, fieldID = group }
1103.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (==)
                                right: lValue { varID = rect }
                                left: lValue { varID = boolVar }
1105.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (!=) { right = true }
                                left: lValue { varID = rect }
1107.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (==) { left = "3.14" }
                                right: staticField { fieldID = PI, class = Math }
1109.                    for
                            expr: (!=)
                                right: lValue { varID = strVar }
                                left: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
1110.                                call voidMethod
1112.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (==) { right = true }
                                left: lValue { varID = strVar }
1114.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (!=) { right = false, left = "false" }
1115.                    doWhile { iLineWhile = 1118 }
                            expr: (==) { right = false, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
1116.                                call voidMethod
1120.                    while
                            expr: (!=) { right = 0 }
                                left: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
1121.                                call voidMethod
1123.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: (!=) { left = 1 }
                                            right: lValue { varID = circle }
                                        block: block { #stmts = 1 }
                                            stmts:
1127.                                            call voidMethod
                            expr: (==) { right = 1 }
                                left: lValue { varID = rect }
                            block: block { #stmts = 1 }
                                stmts:
1124.                                call voidMethod
1131.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (=)
                                    right: lValue { varID = rect }
                                    left: lValue { varID = circle }
1133.                    while
                            expr: (=) { right = false }
                                left: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
1134.                                assign (=) { expr = true }
                                        lValue: lValue { varID = boolVar }
1136.                    if
                            expr: (=) { right = 100 }
                                left: lValue { varID = rect, fieldID = x }
                            block: block { #stmts = 1 }
                                stmts:
1137.                                call setSpeed { #exprs = 2 }
                                        lValue: lValue { varID = rect }
                                        exprs:
                                            unaryOp (neg) { expr = 1 }
1137.                                        (0)
1139.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: parens
                                expr: (=) { right = 2 }
                                    left: (+) { right = 1, left = 1 }
1141.                    if
                            expr: (=) { right = 1 }
                                left: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
1142.                                call println { #exprs = 1, class = ct }
                                        exprs:
1142.                                        ("oops")
1146.                    call println { #exprs = 1, class = ct }
                            exprs:
                                call voidMethod
1148.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: call println { class = ct }
1154.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (|) { right = 1, left = 2 }
1156.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (^) { right = 1, left = 2 }
1158.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (&) { right = 1, left = 2 }
1160.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (>>>) { right = 1, left = 2 }
1162.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (>>) { right = 1, left = 2 }
1164.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (<<) { right = 1, left = 2 }
1170.        func start { #paramVars = 0, isPublic = true, vt = void }
                block: block { iLineEnd = 1172, #stmts = 0, iLineBegin = 1171 }
        vars:
  3.        var classLevelInt { vt = int, isGlobal = true, initExpr = 0 }
  4.        var classLevelDouble { vt = double, isGlobal = true, initExpr = 0 }
  5.        var classLevelBoolean { vt = boolean, isGlobal = true, initExpr = false }
  6.        var classLevelString { vt = String, isGlobal = true, initExpr = "" }
  7.        var classLevelGameObj { vt = GameObj, isGlobal = true }
  8.        var classLevelIntArr { vt = array of int, isGlobal = true }
                initExpr: newArray { vtElement = 0, lengthExpr = 10 }
  9.        var classLevelUnassignedVar { vt = GameObj, isGlobal = true }
