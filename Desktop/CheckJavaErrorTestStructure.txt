    program CheckJavaErrorTestCode { #funcs = 57, #vars = 6 }
        funcs:
 12.        func voidMethod { #paramVars = 0, vt = void }
                block: block { iLineEnd = 15, #stmts = 1, iLineBegin = 13 }
                    stmts:
 14.                    return
 16.        func voidMethodWithParams { #paramVars = 5, vt = void }
                paramVars:
 16.                var p1 { vt = int, isGlobal = false }
 16.                var p2 { vt = double, isGlobal = false }
 16.                var p3 { vt = boolean, isGlobal = false }
 16.                var p4 { vt = String, isGlobal = false }
 16.                var p5 { vt = GameObj, isGlobal = false }
                block: block { iLineEnd = 18, #stmts = 0, iLineBegin = 17 }
 22.        func noErrorsMethod { #paramVars = 0, vt = GameObj }
                block: block { iLineEnd = 74, #stmts = 12, iLineBegin = 23 }
                    stmts:
 24.                    call println { lValue = out, #exprs = 1, class = System }
                            exprs:
 24.                            ("Hello world")
 25.                    assign (=)
                            lValue: lValue { varID = classLevelGameObj }
                            expr: call rect { #exprs = 4, class = ct }
                                exprs:
 25.                                (0)
 25.                                (0)
 25.                                (10)
 25.                                (10)
 26.                    var returnValue { vt = GameObj, initExpr = null }
 27.                    var boolVar { vt = boolean, initExpr = false }
 28.                    var intArrayInitWithExpressions { vt = array of int }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    (+) { right = 2, left = 1 }
                                    (+) { right = 50 }
                                        left: (*) { right = 4, left = 3 }
                                    (+) { right = 3 }
                                        left: parens
                                            expr: (-) { right = 890, left = 67 }
 29.                    var gObjArrayInitWithCTCalls { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
                                    call rect { #exprs = 4, class = ct }
                                        exprs:
 29.                                        (50)
 29.                                        (50)
 29.                                        (10)
 29.                                        (10)
                                    call text { #exprs = 4, class = ct }
                                        exprs:
 29.                                        ("text")
 29.                                        (50)
 29.                                        (50)
 29.                                        (10)
 30.                    var dblArrayInitWithExpressionsAndIntPromotion { vt = array of double }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
                                    (+) { right = 2, left = 1 }
                                    (/) { right = 2 }
                                        left: (*) { right = 7, left = 3.4 }
 34.                    for
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 42, #stmts = 3, iLineBegin = 35 }
                                stmts:
 36.                                call println { class = ct }
 37.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
 40.                                            break
                                        expr: lValue { varID = boolVar }
                                        block: block { #stmts = 1 }
                                            stmts:
 38.                                            call println { class = ct }
 41.                                call println { class = ct }
 43.                    while
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 48, #stmts = 2, iLineBegin = 44 }
                                stmts:
 45.                                if
                                        expr: lValue { varID = boolVar }
                                        block: block { #stmts = 1 }
                                            stmts:
 46.                                            break
 47.                                call println { class = ct }
 49.                    doWhile { iLineWhile = 55 }
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 54, #stmts = 2, iLineBegin = 50 }
                                stmts:
 51.                                call println { class = ct }
 52.                                if
                                        expr: lValue { varID = boolVar }
                                        block: block { #stmts = 1 }
                                            stmts:
 53.                                            break
 57.                    for
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 61, #stmts = 1, iLineBegin = 58 }
                                stmts:
 59.                                if
                                        expr: lValue { varID = boolVar }
                                        block: block { #stmts = 1 }
                                            stmts:
 60.                                            return
                                                    expr: lValue { varID = returnValue }
 62.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { iLineEnd = 73, #stmts = 1, iLineBegin = 71 }
                                            stmts:
 72.                                            return
                                                    expr: lValue { varID = returnValue }
                                        expr: lValue { varID = boolVar }
                                        block: block { iLineEnd = 69, #stmts = 1, iLineBegin = 67 }
                                            stmts:
 68.                                            return
                                                    expr: lValue { varID = returnValue }
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 65, #stmts = 1, iLineBegin = 63 }
                                stmts:
 64.                                return
                                        expr: lValue { varID = returnValue }
 75.        func testErrors2 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 213, #stmts = 64, iLineBegin = 76 }
                    stmts:
 77.                    var intVar { vt = int, initExpr = 0 }
 78.                    var dblVar { vt = double, initExpr = 0 }
 79.                    var boolVar { vt = boolean, initExpr = false }
 80.                    var strVar { vt = String, initExpr = "" }
 81.                    var rect { vt = GameObj }
                            initExpr: call rect { #exprs = 4, class = ct }
                                exprs:
 81.                                (50)
 81.                                (50)
 81.                                (10)
 81.                                (10)
 82.                    var circle { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
 82.                                (50)
 82.                                (50)
 82.                                (10)
 83.                    var text { vt = GameObj }
                            initExpr: call text { #exprs = 4, class = ct }
                                exprs:
 83.                                ("text")
 83.                                (50)
 83.                                (50)
 83.                                (10)
 84.                    var image { vt = GameObj }
                            initExpr: call image { #exprs = 4, class = ct }
                                exprs:
 84.                                ("bogusFileName.png")
 84.                                (50)
 84.                                (50)
 84.                                (10)
 85.                    var intArr { vt = array of int }
                            initExpr: newArray { vtElement = 0, lengthExpr = 10 }
 86.                    var dblArr { vt = array of double }
                            initExpr: newArray { vtElement = 1, lengthExpr = 10 }
 87.                    var boolArr { vt = array of boolean }
                            initExpr: newArray { vtElement = true, lengthExpr = 10 }
 88.                    var strArr { vt = array of String }
                            initExpr: newArray { vtElement = "String", lengthExpr = 10 }
 89.                    var objArr { vt = array of GameObj }
                            initExpr: newArray { vtElement = "GameObj", lengthExpr = 10 }
 93.                    call onMousePress { #exprs = 3 }
                            exprs:
                                lValue { varID = rect }
                                lValue { varID = rect, fieldID = x }
                                lValue { varID = rect, fieldID = y }
 95.                    var line { vt = GameObj }
                            initExpr: call line { #exprs = 4 }
                                exprs:
 95.                                (50)
 95.                                (50)
 95.                                (10)
 95.                                (10)
 97.                    call println
 99.                    call undefinedFunc
101.                    assign (=)
                            lValue: lValue { varID = rect }
                            expr: call rec { #exprs = 4, class = ct }
                                exprs:
101.                                (0)
101.                                (0)
101.                                (1)
101.                                (1)
103.                    call printLine { class = ct }
105.                    call foo { class = ct }
109.                    call bar { lValue = foo, class = System }
111.                    call println { lValue = err, #exprs = 1, class = System }
                            exprs:
111.                            ("File opening failed:")
113.                    var stdev { vt = double }
                            initExpr: call foo { #exprs = 1, class = Math }
                                exprs:
                                    lValue { varID = doubleVar }
115.                    call getWidht { #exprs = 1 }
                            lValue: lValue { varID = rect }
                            exprs:
                                lValue { varID = dblVar }
117.                    call equality { #exprs = 1 }
                            lValue: lValue { varID = strVar }
                            exprs:
                                lValue { varID = classLevelString }
119.                    call foo
                            lValue: lValue { varID = rect }
121.                    call concat { #exprs = 1 }
                            lValue: lValue { varID = rect, fieldID = group }
                            exprs:
                                call getText
                                    lValue: lValue { varID = text }
123.                    call setSize { #exprs = 2 }
                            lValue: lValue { varID = classLevelString }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = dblVar }
125.                    call size
                            lValue: lValue { varID = strVar }
127.                    call delete
                            lValue: lValue { varID = objArr }
129.                    call delete
                            lValue: lValue { varID = intVar }
131.                    call print { class = ct }
133.                    if
                            expr: (<) { right = 0 }
                                left: call min { #exprs = 1, class = Math }
                                    exprs:
133.                                    (1)
                            block: block { #stmts = 1 }
                                stmts:
134.                                call voidMethod
136.                    call voidMethodWithParams
138.                    if
                            expr: (<) { right = 0 }
                                left: call min { #exprs = 3, class = Math }
                                    exprs:
138.                                    (1)
138.                                    (2)
138.                                    (3)
                            block: block { #stmts = 1 }
                                stmts:
139.                                call voidMethod
141.                    var minOf3 { vt = double }
                            initExpr: call min { #exprs = 3, class = Math }
                                exprs:
141.                                (1)
141.                                (2)
141.                                (3)
143.                    call voidMethod { #exprs = 1 }
                            exprs:
143.                            (1)
145.                    call println { #exprs = 2, class = ct }
                            exprs:
145.                            ("hello")
145.                            ("world")
147.                    call println { #exprs = 1, class = ct }
                            exprs:
                                call distance { #exprs = 4, class = ct }
                                    exprs:
                                        call round { #exprs = 1, class = ct }
                                            exprs:
                                                lValue { varID = rect, fieldID = x }
                                        lValue { varID = rect, fieldID = y }
                                        lValue { varID = circle }
                                        lValue { varID = circle, fieldID = y }
149.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: call max { #exprs = 2, class = Math }
                                exprs:
                                    lValue { varID = intVar }
                                    lValue { varID = strVar }
150.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = intVar }
                                lValue { varID = boolVar }
                                lValue { varID = strVar }
                                lValue { varID = rect }
152.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = dblVar }
                                lValue { varID = boolVar }
                                lValue { varID = strVar }
                                lValue { varID = intVar }
154.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = dblVar }
                                lValue { varID = strVar }
                                lValue { varID = strVar }
                                lValue { varID = rect }
156.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = boolVar }
                                lValue { varID = boolVar }
                                lValue { varID = strVar }
                                lValue { varID = rect }
158.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = dblVar }
                                lValue { varID = dblVar }
                                lValue { varID = boolVar }
                                lValue { varID = strVar }
                                lValue { varID = rect }
160.                    for
                            expr: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
161.                                call println { class = ct }
162.                    doWhile { iLineWhile = 165 }
                            expr: (+) { right = "" }
                                left: parens
                                    expr: (==) { right = 2e0 }
                                        left: (+) { right = 1.0, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
163.                                call println { class = ct }
167.                    while
                            expr: (+) { right = "" }
                                left: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
169.                                assign (+=) { expr = 1 }
                                        lValue: lValue { varID = rect, fieldID = group }
171.                    assign (+=) { expr = false }
                            lValue: lValue { varID = boolVar }
173.                    assign (*=)
                            lValue: lValue { varID = dblVar }
                            expr: lValue { varID = rect }
175.                    assign (+=)
                            lValue: lValue { varID = dblVar }
                            expr: (+) { right = "" }
                                left: lValue { varID = boolVar }
177.                    assign (+=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = boolVar }
179.                    assign (/=)
                            lValue: lValue { varID = intVar }
                            expr: (*)
                                right: lValue { varID = rect, fieldID = x }
                                left: lValue { varID = classLevelInt }
181.                    assign (*=) { expr = 1e0 }
                            lValue: lValue { varID = intVar }
183.                    assign (-=)
                            lValue: lValue { varID = classLevelInt }
                            expr: lValue { varID = classLevelDouble }
185.                    assign (+=) { expr = 1.0 }
                            lValue: lValue { varID = intVar }
187.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: lValue { varID = intVar }
                                        block: block { #stmts = 1 }
                                            stmts:
191.                                            call println { class = ct }
                            expr: lValue { varID = dblVar }
                            block: block { #stmts = 1 }
                                stmts:
188.                                call println { class = ct }
193.                    if { expr = 0 }
                            block: block { #stmts = 1 }
                                stmts:
194.                                call println { class = ct }
196.                    forArray { expr = null }
196.                        var: var x { vt = int, isGlobal = false }
                            block: block { #stmts = 1 }
                                stmts:
197.                                break
199.                    forArray
199.                        var: var x { vt = int, isGlobal = false }
                            expr: lValue { varID = image }
                            block: block { #stmts = 1 }
                                stmts:
200.                                break
202.                    forArray
202.                        var: var x { vt = int, isGlobal = false }
                            expr: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
203.                                break
205.                    forArray
205.                        var: var x { vt = GameObj, isGlobal = false }
                            expr: lValue { varID = classLevelIntArr }
                            block: block { #stmts = 1 }
                                stmts:
206.                                break
208.                    forArray
208.                        var: var x { vt = boolean, isGlobal = false }
                            expr: newArray { vtElement = "String", lengthExpr = 10 }
                            block: block { #stmts = 1 }
                                stmts:
209.                                break
211.                    forArray
211.                        var: var x { vt = int, isGlobal = false }
                            expr: lValue { varID = dblArr }
                            block: block { #stmts = 1 }
                                stmts:
212.                                break
214.        func voidFuncReturnsValue6 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 223, #stmts = 3, iLineBegin = 215 }
                    stmts:
216.                    var r { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
216.                                (0)
216.                                (0)
216.                                (1)
217.                    while
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
218.                                if
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { #stmts = 1 }
                                            stmts:
220.                                            return
                                                    expr: lValue { varID = r }
222.                    return
                            expr: lValue { varID = r }
224.        func voidFuncReturnsValue5 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 232, #stmts = 3, iLineBegin = 225 }
                    stmts:
226.                    var r { vt = GameObj, initExpr = null }
227.                    for
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
229.                                return
                                        expr: lValue { varID = r }
231.                    return
                            expr: lValue { varID = r }
233.        func voidFuncReturnsValue4 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 241, #stmts = 3, iLineBegin = 234 }
                    stmts:
235.                    var r { vt = String, initExpr = null }
236.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
238.                                return
                                        expr: lValue { varID = r }
240.                    return
                            expr: lValue { varID = r }
242.        func voidFuncReturnsValue3 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 250, #stmts = 3, iLineBegin = 243 }
                    stmts:
244.                    var r { vt = String, initExpr = "" }
245.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
247.                                return
                                        expr: lValue { varID = r }
249.                    return
                            expr: lValue { varID = r }
251.        func voidFuncReturnsValue2 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 259, #stmts = 3, iLineBegin = 252 }
                    stmts:
253.                    var r { vt = boolean, initExpr = false }
254.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
256.                                return
                                        expr: lValue { varID = r }
258.                    return
                            expr: lValue { varID = r }
260.        func voidFuncReturnsValue1 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 265, #stmts = 2, iLineBegin = 261 }
                    stmts:
262.                    var r { vt = double, initExpr = 0 }
264.                    return
                            expr: lValue { varID = r }
266.        func funcWrongReturnValueType7 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 270, #stmts = 1, iLineBegin = 267 }
                    stmts:
269.                    return
                            expr: (*) { right = 1.0 }
                                left: lValue { varID = classLevelInt }
271.        func funcWrongReturnValueType6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 280, #stmts = 3, iLineBegin = 272 }
                    stmts:
273.                    var r { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
273.                                (0)
273.                                (0)
273.                                (1)
274.                    while
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
275.                                if
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { #stmts = 1 }
                                            stmts:
277.                                            return
                                                    expr: lValue { varID = r }
279.                    return
                            expr: lValue { varID = r }
281.        func funcWrongReturnValueType5 { #paramVars = 0, vt = String }
                block: block { iLineEnd = 289, #stmts = 3, iLineBegin = 282 }
                    stmts:
283.                    var r { vt = GameObj, initExpr = null }
284.                    for
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
286.                                return
                                        expr: lValue { varID = r }
288.                    return
                            expr: lValue { varID = r }
290.        func funcWrongReturnValueType4 { #paramVars = 0, vt = GameObj }
                block: block { iLineEnd = 298, #stmts = 3, iLineBegin = 291 }
                    stmts:
292.                    var r { vt = String, initExpr = null }
293.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
295.                                return
                                        expr: lValue { varID = r }
297.                    return
                            expr: lValue { varID = r }
299.        func funcWrongReturnValueType3 { #paramVars = 0, vt = boolean }
                block: block { iLineEnd = 307, #stmts = 3, iLineBegin = 300 }
                    stmts:
301.                    var r { vt = String, initExpr = "" }
302.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
304.                                return
                                        expr: lValue { varID = r }
306.                    return
                            expr: lValue { varID = r }
308.        func funcWrongReturnValueType2 { #paramVars = 0, vt = double }
                block: block { iLineEnd = 316, #stmts = 3, iLineBegin = 309 }
                    stmts:
310.                    var r { vt = boolean, initExpr = false }
311.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
313.                                return
                                        expr: lValue { varID = r }
315.                    return
                            expr: lValue { varID = r }
317.        func funcWrongReturnValueType1 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 322, #stmts = 2, iLineBegin = 318 }
                    stmts:
319.                    var r { vt = double, initExpr = 0 }
321.                    return
                            expr: lValue { varID = r }
323.        func funcNoReturnValue6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 331, #stmts = 3, iLineBegin = 324 }
                    stmts:
325.                    var r { vt = int, initExpr = 0 }
326.                    while
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
327.                                if
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { #stmts = 1 }
                                            stmts:
329.                                            return
330.                    return
                            expr: lValue { varID = r }
332.        func funcNoReturnValue5 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 339, #stmts = 3, iLineBegin = 333 }
                    stmts:
334.                    var r { vt = int, initExpr = 0 }
335.                    for
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
337.                                return
338.                    return
                            expr: lValue { varID = r }
340.        func funcNoReturnValue4 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 348, #stmts = 3, iLineBegin = 341 }
                    stmts:
342.                    var r { vt = int, initExpr = 0 }
343.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
345.                                return
347.                    return
349.        func funcNoReturnValue3 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 356, #stmts = 3, iLineBegin = 350 }
                    stmts:
351.                    var r { vt = int, initExpr = 0 }
352.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
354.                                return
355.                    return
                            expr: lValue { varID = r }
357.        func funcNoReturnValue2 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 364, #stmts = 3, iLineBegin = 358 }
                    stmts:
359.                    var r { vt = int, initExpr = 0 }
360.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
361.                                return
                                        expr: lValue { varID = r }
363.                    return
365.        func funcNoReturnValue1 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 369, #stmts = 1, iLineBegin = 366 }
                    stmts:
368.                    return
370.        func funcBreakStmtErrors { #paramVars = 0, vt = void }
                block: block { iLineEnd = 385, #stmts = 2, iLineBegin = 371 }
                    stmts:
372.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
382.                                            break
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { #stmts = 1 }
                                            stmts:
379.                                            break
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 376, #stmts = 1, iLineBegin = 373 }
                                stmts:
375.                                break
384.                    break
386.        func funcUnreachableStmt8 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 403, #stmts = 3, iLineBegin = 387 }
                    stmts:
388.                    var r { vt = int, initExpr = 0 }
389.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 401, #stmts = 1, iLineBegin = 390 }
                                stmts:
391.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
                                                if
                                                    expr: (==) { right = 3 }
                                                        left: (+) { right = 1, left = 1 }
                                                    block: block { iLineEnd = 400, #stmts = 2, iLineBegin = 396 }
                                                        stmts:
397.                                                        return
                                                                expr: lValue { varID = r }
399.                                                        call println { class = ct }
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { iLineEnd = 394, #stmts = 1, iLineBegin = 392 }
                                            stmts:
393.                                            call println { class = ct }
402.                    return
                            expr: lValue { varID = r }
404.        func funcUnreachableStmt7 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 414, #stmts = 3, iLineBegin = 405 }
                    stmts:
406.                    var r { vt = int, initExpr = 0 }
407.                    while
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 412, #stmts = 2, iLineBegin = 408 }
                                stmts:
409.                                return
                                        expr: lValue { varID = r }
411.                                call println { class = ct }
413.                    return
                            expr: lValue { varID = r }
415.        func funcUnreachableStmt6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 429, #stmts = 3, iLineBegin = 416 }
                    stmts:
417.                    var r { vt = int, initExpr = 0 }
418.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: (==) { right = 3 }
                                            left: (+) { right = 1, left = 1 }
                                        block: block { iLineEnd = 427, #stmts = 2, iLineBegin = 423 }
                                            stmts:
424.                                            return
                                                    expr: lValue { varID = r }
426.                                            call println { class = ct }
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 421, #stmts = 1, iLineBegin = 419 }
                                stmts:
420.                                call println { class = ct }
428.                    return
                            expr: lValue { varID = r }
430.        func funcUnreachableStmt5 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 444, #stmts = 3, iLineBegin = 431 }
                    stmts:
432.                    var r { vt = int, initExpr = 0 }
433.                    if
                            elseBlock: block { iLineEnd = 442, #stmts = 2, iLineBegin = 438 }
                                stmts:
439.                                return
                                        expr: lValue { varID = r }
441.                                call println { class = ct }
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 436, #stmts = 1, iLineBegin = 434 }
                                stmts:
435.                                call println { class = ct }
443.                    return
                            expr: lValue { varID = r }
445.        func funcUnreachableStmt4 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 456, #stmts = 3, iLineBegin = 446 }
                    stmts:
447.                    var r { vt = int, initExpr = 0 }
448.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 454, #stmts = 2, iLineBegin = 449 }
                                stmts:
450.                                return
                                        expr: lValue { varID = r }
452.                                if
                                        expr: (==) { right = 2 }
                                            left: (+) { right = 1, left = 1 }
                                        block: block { #stmts = 1 }
                                            stmts:
453.                                            call println { class = ct }
455.                    return
                            expr: lValue { varID = r }
457.        func funcUnreachableStmt3 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 466, #stmts = 5, iLineBegin = 458 }
                    stmts:
459.                    var r { vt = int, initExpr = 0 }
460.                    return
                            expr: lValue { varID = r }
462.                    for
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
463.                                break
464.                    call println { class = ct }
465.                    return
                            expr: lValue { varID = r }
467.        func funcUnreachableStmt2 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 476, #stmts = 5, iLineBegin = 468 }
                    stmts:
469.                    var r { vt = int, initExpr = 0 }
470.                    return
                            expr: lValue { varID = r }
472.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
473.                                call println { class = ct }
474.                    call println { class = ct }
475.                    return
                            expr: lValue { varID = r }
477.        func funcUnreachableStmt1 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 483, #stmts = 3, iLineBegin = 478 }
                    stmts:
479.                    return
481.                    call println { class = ct }
482.                    call println { class = ct }
484.        func funcMissingReturn10 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 497, #stmts = 4, iLineBegin = 485 }
                    stmts:
486.                    var r { vt = int, initExpr = 0 }
487.                    var boolVar1 { vt = boolean, initExpr = false }
488.                    var boolVar2 { vt = boolean, initExpr = false }
489.                    if
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
490.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
                                                if
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
495.                                                        return
                                                                expr: lValue { varID = r }
                                                    expr: lValue { varID = boolVar2 }
                                                    block: block { #stmts = 1 }
                                                        stmts:
493.                                                        return
                                                                expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar1 }
                                        block: block { #stmts = 1 }
                                            stmts:
491.                                            call println { class = ct }
498.        func funcMissingReturn9 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 509, #stmts = 4, iLineBegin = 499 }
                    stmts:
500.                    var r { vt = int, initExpr = 0 }
501.                    var boolVar1 { vt = boolean, initExpr = false }
502.                    var boolVar2 { vt = boolean, initExpr = false }
503.                    if
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
504.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
507.                                            call println { class = ct }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
505.                                            return
                                                    expr: lValue { varID = r }
510.        func funcMissingReturn8 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 521, #stmts = 4, iLineBegin = 511 }
                    stmts:
512.                    var r { vt = int, initExpr = 0 }
513.                    var boolVar1 { vt = boolean, initExpr = false }
514.                    var boolVar2 { vt = boolean, initExpr = false }
515.                    if
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
516.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
519.                                            return
                                                    expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
517.                                            return
                                                    expr: lValue { varID = r }
522.        func funcMissingReturn7 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 534, #stmts = 4, iLineBegin = 523 }
                    stmts:
524.                    var r { vt = int, initExpr = 0 }
525.                    var boolVar1 { vt = boolean, initExpr = false }
526.                    var boolVar2 { vt = boolean, initExpr = true }
527.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
532.                                            return
                                                    expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
530.                                            call println { class = ct }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
528.                                call println { class = ct }
535.        func funcMissingReturn6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 547, #stmts = 4, iLineBegin = 536 }
                    stmts:
537.                    var r { vt = int, initExpr = 0 }
538.                    var boolVar1 { vt = boolean, initExpr = false }
539.                    var boolVar2 { vt = boolean, initExpr = true }
540.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
545.                                            call println { class = ct }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
543.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
541.                                call println { class = ct }
548.        func funcMissingReturn5 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 560, #stmts = 4, iLineBegin = 549 }
                    stmts:
550.                    var r { vt = int, initExpr = 0 }
551.                    var boolVar1 { vt = boolean, initExpr = false }
552.                    var boolVar2 { vt = boolean, initExpr = true }
553.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
558.                                            call println { class = ct }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
556.                                            call println { class = ct }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
554.                                return
                                        expr: lValue { varID = r }
561.        func funcMissingReturn4 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 569, #stmts = 2, iLineBegin = 562 }
                    stmts:
563.                    var boolVar { vt = boolean, initExpr = false }
564.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
567.                                call println { class = ct }
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
565.                                call println { class = ct }
570.        func funcMissingReturn2 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 577, #stmts = 3, iLineBegin = 571 }
                    stmts:
572.                    var r { vt = int, initExpr = 0 }
573.                    var boolVar { vt = boolean, initExpr = false }
574.                    if
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
575.                                return
                                        expr: lValue { varID = r }
578.        func funcMissingReturn1 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 581, #stmts = 0, iLineBegin = 579 }
582.        func funcPathMissingReturn4Brackets { #paramVars = 0, vt = int }
                block: block { iLineEnd = 596, #stmts = 4, iLineBegin = 583 }
                    stmts:
584.                    var r { vt = int, initExpr = 0 }
585.                    var boolVar1 { vt = boolean, initExpr = false }
586.                    var boolVar2 { vt = boolean, initExpr = false }
587.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: lValue { varID = boolVar2 }
                                        block: block { iLineEnd = 595, #stmts = 1, iLineBegin = 592 }
                                            stmts:
593.                                            call println { class = ct }
                            expr: lValue { varID = boolVar1 }
                            block: block { iLineEnd = 590, #stmts = 1, iLineBegin = 588 }
                                stmts:
589.                                return
                                        expr: lValue { varID = r }
597.        func funcPathMissingReturn3Brackets { #paramVars = 0, vt = int }
                block: block { iLineEnd = 611, #stmts = 4, iLineBegin = 598 }
                    stmts:
599.                    var r { vt = int, initExpr = 0 }
600.                    var boolVar1 { vt = boolean, initExpr = false }
601.                    var boolVar2 { vt = boolean, initExpr = false }
602.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: lValue { varID = boolVar2 }
                                        block: block { iLineEnd = 610, #stmts = 1, iLineBegin = 608 }
                                            stmts:
609.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { iLineEnd = 606, #stmts = 1, iLineBegin = 603 }
                                stmts:
604.                                call println { class = ct }
612.        func funcPathMissingReturn2Brackets { #paramVars = 0, vt = int }
                block: block { iLineEnd = 625, #stmts = 3, iLineBegin = 613 }
                    stmts:
614.                    var r { vt = int, initExpr = 0 }
615.                    var boolVar { vt = boolean, initExpr = false }
616.                    if
                            elseBlock: block { iLineEnd = 624, #stmts = 1, iLineBegin = 621 }
                                stmts:
622.                                call println { class = ct }
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 619, #stmts = 1, iLineBegin = 617 }
                                stmts:
618.                                return
                                        expr: lValue { varID = r }
626.        func funcPathMissingReturn1Brackets { #paramVars = 0, vt = int }
                block: block { iLineEnd = 639, #stmts = 3, iLineBegin = 627 }
                    stmts:
628.                    var r { vt = int, initExpr = 0 }
629.                    var boolVar { vt = boolean, initExpr = false }
630.                    if
                            elseBlock: block { iLineEnd = 638, #stmts = 1, iLineBegin = 636 }
                                stmts:
637.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 634, #stmts = 1, iLineBegin = 631 }
                                stmts:
632.                                call println { class = ct }
640.        func funcPathMissingReturn10 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 655, #stmts = 4, iLineBegin = 641 }
                    stmts:
642.                    var r { vt = int, initExpr = 0 }
643.                    var boolVar1 { vt = boolean, initExpr = false }
644.                    var boolVar2 { vt = boolean, initExpr = false }
645.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
654.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
646.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
                                                if
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
652.                                                        call println { class = ct }
                                                    expr: lValue { varID = boolVar2 }
                                                    block: block { #stmts = 1 }
                                                        stmts:
649.                                                        return
                                                                expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar1 }
                                        block: block { #stmts = 1 }
                                            stmts:
647.                                            return
                                                    expr: lValue { varID = r }
656.        func funcPathMissingReturn9 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 671, #stmts = 4, iLineBegin = 657 }
                    stmts:
658.                    var r { vt = int, initExpr = 0 }
659.                    var boolVar1 { vt = boolean, initExpr = false }
660.                    var boolVar2 { vt = boolean, initExpr = false }
661.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
670.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
662.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
                                                if
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
668.                                                        return
                                                                expr: lValue { varID = r }
                                                    expr: lValue { varID = boolVar2 }
                                                    block: block { #stmts = 1 }
                                                        stmts:
666.                                                        call println { class = ct }
                                        expr: lValue { varID = boolVar1 }
                                        block: block { #stmts = 1 }
                                            stmts:
663.                                            return
                                                    expr: lValue { varID = r }
672.        func funcPathMissingReturn8 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 687, #stmts = 4, iLineBegin = 673 }
                    stmts:
674.                    var r { vt = int, initExpr = 0 }
675.                    var boolVar1 { vt = boolean, initExpr = false }
676.                    var boolVar2 { vt = boolean, initExpr = false }
677.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
686.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
678.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
                                                if
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
684.                                                        return
                                                                expr: lValue { varID = r }
                                                    expr: lValue { varID = boolVar2 }
                                                    block: block { #stmts = 1 }
                                                        stmts:
682.                                                        return
                                                                expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar1 }
                                        block: block { #stmts = 1 }
                                            stmts:
680.                                            call println { class = ct }
688.        func funcPathMissingReturn7 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 700, #stmts = 4, iLineBegin = 689 }
                    stmts:
690.                    var r { vt = int, initExpr = 0 }
691.                    var boolVar1 { vt = boolean, initExpr = false }
692.                    var boolVar2 { vt = boolean, initExpr = false }
693.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
699.                                            return
                                                    expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
697.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
695.                                call println { class = ct }
701.        func funcPathMissingReturn6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 713, #stmts = 4, iLineBegin = 702 }
                    stmts:
703.                    var r { vt = int, initExpr = 0 }
704.                    var boolVar1 { vt = boolean, initExpr = false }
705.                    var boolVar2 { vt = boolean, initExpr = false }
706.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
712.                                            return
                                                    expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
710.                                            call println { class = ct }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
707.                                return
                                        expr: lValue { varID = r }
714.        func funcPathMissingReturn5 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 726, #stmts = 4, iLineBegin = 715 }
                    stmts:
716.                    var r { vt = int, initExpr = 0 }
717.                    var boolVar1 { vt = boolean, initExpr = false }
718.                    var boolVar2 { vt = boolean, initExpr = false }
719.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
725.                                            call println { class = ct }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
722.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
720.                                return
                                        expr: lValue { varID = r }
727.        func funcPathMissingReturn4 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 737, #stmts = 4, iLineBegin = 728 }
                    stmts:
729.                    var r { vt = int, initExpr = 0 }
730.                    var boolVar1 { vt = boolean, initExpr = false }
731.                    var boolVar2 { vt = boolean, initExpr = false }
732.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
736.                                            call println { class = ct }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
733.                                return
                                        expr: lValue { varID = r }
738.        func funcPathMissingReturn3 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 748, #stmts = 4, iLineBegin = 739 }
                    stmts:
740.                    var r { vt = int, initExpr = 0 }
741.                    var boolVar1 { vt = boolean, initExpr = false }
742.                    var boolVar2 { vt = boolean, initExpr = false }
743.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
747.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
745.                                call println { class = ct }
749.        func funcPathMissingReturn2 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 758, #stmts = 3, iLineBegin = 750 }
                    stmts:
751.                    var r { vt = int, initExpr = 0 }
752.                    var boolVar { vt = boolean, initExpr = false }
753.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
757.                                call println { class = ct }
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
754.                                return
                                        expr: lValue { varID = r }
759.        func funcPathMissingReturn1 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 768, #stmts = 3, iLineBegin = 760 }
                    stmts:
761.                    var r { vt = int, initExpr = 0 }
762.                    var boolVar { vt = boolean, initExpr = false }
763.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
767.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
765.                                call println { class = ct }
770.        func testErrors1 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1064, #stmts = 109, iLineBegin = 771 }
                    stmts:
772.                    var intVar { vt = int, initExpr = 1 }
773.                    var dblVar { vt = double, initExpr = 1.2 }
774.                    var boolVar { vt = boolean, initExpr = false }
775.                    var strVar { vt = String, initExpr = "" }
776.                    var rect { vt = GameObj }
                            initExpr: call rect { #exprs = 4, class = ct }
                                exprs:
776.                                (50)
776.                                (50)
776.                                (10)
776.                                (10)
777.                    var circle { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
777.                                (50)
777.                                (50)
777.                                (10)
778.                    var text { vt = GameObj }
                            initExpr: call text { #exprs = 4, class = ct }
                                exprs:
778.                                ("text")
778.                                (50)
778.                                (50)
778.                                (10)
779.                    var image { vt = GameObj }
                            initExpr: call image { #exprs = 4, class = ct }
                                exprs:
779.                                ("bogusFileName.png")
779.                                (50)
779.                                (50)
779.                                (10)
780.                    var intArr { vt = array of int }
                            initExpr: newArray { vtElement = 0, lengthExpr = 10 }
781.                    var dblArr { vt = array of double }
                            initExpr: newArray { vtElement = 1, lengthExpr = 10 }
782.                    var boolArr { vt = array of boolean }
                            initExpr: newArray { vtElement = true, lengthExpr = 10 }
783.                    var strArr { vt = array of String }
                            initExpr: newArray { vtElement = "String", lengthExpr = 10 }
784.                    var objArr { vt = array of GameObj }
                            initExpr: newArray { vtElement = "GameObj", lengthExpr = 10 }
787.                    assign (=)
                            lValue: lValue { varID = circle, fieldID = x }
                            expr: (+) { right = 314 }
                                left: cast { vtCast = 0 }
                                    expr: lValue { varID = intVar }
789.                    assign (=)
                            lValue: lValue { varID = circle, fieldID = x }
                            expr: cast { vtCast = 0 }
                                expr: parens
                                    expr: (+) { right = 314 }
                                        left: lValue { varID = intVar }
791.                    assign (=)
                            lValue: lValue { varID = objArr }
                            expr: newArray { vtElement = "GameObj" }
                                lengthExpr: (*) { left = 2 }
                                    right: cast { vtCast = 0 }
                                        expr: lValue { varID = objArr }
793.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: cast { vtCast = 1 }
                                expr: parens
                                    expr: (*) { right = 2.3, left = 10 }
795.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = group }
                            expr: cast { vtCast = "String" }
                                expr: lValue { varID = circle, fieldID = group }
797.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: staticField { fieldID = P, class = Math }
801.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: unaryOp (neg)
                                expr: lValue { varID = rect }
803.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: unaryOp (neg)
                                expr: lValue { varID = strVar }
807.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: unaryOp (not)
                                expr: lValue { varID = intVar }
811.                    assign (=)
                            lValue: lValue { varID = objArr }
                            expr: newArray { vtElement = "GameObj", lengthExpr = "ten" }
813.                    assign (=)
                            lValue: lValue { varID = strArr }
                            expr: newArray { vtElement = "String" }
                                lengthExpr: (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = intVar }
815.                    assign (=)
                            lValue: lValue { varID = boolArr }
                            expr: newArray { vtElement = true }
                                lengthExpr: (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = intVar }
817.                    assign (=)
                            lValue: lValue { varID = dblArr }
                            expr: newArray { vtElement = 1 }
                                lengthExpr: lValue { varID = dblVar }
819.                    assign (=)
                            lValue: lValue { varID = intArr }
                            expr: newArray { vtElement = 0, lengthExpr = 10.0 }
840.                    var arrInit9 { vt = array of String }
                            initExpr: arrayInit { #exprs = 1 }
                                exprs:
                                    newArray { vtElement = "String" }
                                        lengthExpr: lValue { varID = intVar }
842.                    var arrInit8 { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    lValue { varID = rect }
                                    lValue { varID = intArr }
                                    lValue { varID = text }
844.                    var arrInit7 { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    lValue { varID = rect }
                                    lValue { varID = image }
                                    lValue { varID = objArr }
848.                    var arrInit6 { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    call rect { #exprs = 4, class = ct }
                                        exprs:
848.                                        (50)
848.                                        (50)
848.                                        (10)
848.                                        (10)
                                    lValue { varID = text }
848.                                (0)
850.                    var arrInit5 { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
850.                                ("circle")
                                    lValue { varID = circle }
852.                    var arrInit4 { vt = array of String }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    (+) { right = 1 }
                                        left: lValue { varID = strVar }
                                    lValue { varID = intVar }
                                    (+) { right = 2 }
                                        left: lValue { varID = intVar }
854.                    var arrInit3 { vt = array of boolean }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
854.                                (false)
                                    lValue { varID = boolVar }
854.                                (null)
856.                    var arrInit2 { vt = array of double }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
                                    lValue { varID = circle }
856.                                (0.5)
858.                    var arrInit1 { vt = array of int }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
858.                                (1)
858.                                ("1")
863.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = strVar }
                                    left: lValue { varID = objArr }
865.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = strVar }
                                    left: lValue { varID = strArr }
867.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = strVar }
                                    left: lValue { varID = boolArr }
869.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = dblArr }
                                    left: lValue { varID = strVar }
871.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intArr }
                                    left: lValue { varID = strVar }
875.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = intArr }
877.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = rect }
879.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = boolVar }
881.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = intArr }
883.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = rect }
885.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = boolVar }
887.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intArr }
                                    left: lValue { varID = dblVar }
889.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = rect }
                                    left: lValue { varID = dblVar }
891.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = boolVar }
                                    left: lValue { varID = dblVar }
893.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intArr }
                                    left: lValue { varID = intVar }
895.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = rect }
                                    left: lValue { varID = intVar }
897.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = boolVar }
                                    left: lValue { varID = intVar }
899.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { left = 1 }
                                right: parens
                                    expr: (+) { right = 1 }
                                        left: (+)
                                            right: lValue { varID = intArr }
                                            left: lValue { varID = boolVar }
901.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: (+)
                                right: lValue { varID = rect }
                                left: lValue { varID = boolVar }
903.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (+)
                                right: (/) { right = 2 }
                                    left: lValue { varID = dblVar }
                                left: lValue { varID = boolVar }
905.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (-) { right = 1 }
                                left: (+)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = boolVar }
907.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (+)
                                right: lValue { varID = boolVar }
                                left: lValue { varID = boolVar }
909.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: (+)
                                right: lValue { varID = text }
                                left: lValue { varID = circle }
911.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = width }
                            expr: (+) { left = 2 }
                                right: lValue { varID = rect }
913.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { right = false }
                                    left: lValue { varID = rect, fieldID = x }
917.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (-) { right = ".txt" }
                                left: lValue { varID = strVar }
919.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (%)
                                right: lValue { varID = text }
                                left: lValue { varID = rect, fieldID = group }
921.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { right = 10 }
                                left: lValue { varID = circle }
923.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = width }
                            expr: (*) { right = 2 }
                                left: lValue { varID = rect }
925.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: (-) { left = 100 }
                                right: lValue { varID = rect }
929.                    var intArrayInitWithExpressions { vt = array of int }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
                                    (+) { left = 1 }
                                        right: (/) { right = 1, left = 2 }
                                    (/) { right = 2 }
                                        left: parens
                                            expr: (+) { right = 1, left = 3 }
931.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (==) { right = 1 }
                                left: (/)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = intVar }
933.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { right = 3 }
                                left: unaryOp (neg) { expr = 10 }
935.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { left = 10 }
                                right: unaryOp (neg) { expr = 3 }
937.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { right = 5, left = 123 }
939.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { right = 3 }
                                left: parens
                                    expr: (+) { right = 2, left = 1 }
941.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { left = 1 }
                                right: parens
                                    expr: (+) { right = 3, left = 2 }
943.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: (/) { right = 1 }
                                left: lValue { varID = intVar }
945.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { left = 1 }
                                    right: (/)
                                        right: lValue { varID = intVar }
                                        left: lValue { varID = intVar }
947.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { left = 2 }
                                right: lValue { varID = intVar }
949.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { right = 2 }
                                left: lValue { varID = intVar }
953.                    assign (=)
                            lValue: lValue { varID = circle }
                            expr: (||) { right = false }
                                left: lValue { varID = intVar }
955.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: (&&) { right = true }
                                            left: lValue { varID = rect }
                                        block: block { #stmts = 1 }
                                            stmts:
959.                                            call voidMethod
                            expr: (&&) { left = true }
                                right: lValue { varID = dblVar }
                            block: block { #stmts = 1 }
                                stmts:
956.                                call voidMethod
961.                    while
                            expr: (&&)
                                right: lValue { varID = boolVar }
                                left: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
962.                                break
963.                    doWhile { iLineWhile = 966 }
                            expr: (||)
                                right: lValue { varID = strVar }
                                left: lValue { varID = dblVar }
                            block: block { #stmts = 1 }
                                stmts:
964.                                break
970.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (<)
                                right: lValue { varID = rect }
                                left: lValue { varID = circle }
972.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: (<=) { right = 10, left = "level" }
                                        block: block { #stmts = 1 }
                                            stmts:
976.                                            call voidMethod
                            expr: (>) { right = false, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
973.                                call voidMethod
978.                    while
                            expr: (>=)
                                right: lValue { varID = rect, fieldID = visible }
                                left: (+) { right = 1, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
979.                                break
980.                    doWhile { iLineWhile = 983 }
                            expr: (<) { left = 3.14 }
                                right: lValue { varID = text }
                            block: block { #stmts = 1 }
                                stmts:
981.                                break
988.                    if
                            expr: (!=) { left = "" }
                                right: lValue { varID = strVar }
                            block: block { #stmts = 1 }
                                stmts:
989.                                call voidMethod
991.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (==) { right = "circles" }
                                    left: lValue { varID = circle, fieldID = group }
1002.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (==)
                                right: lValue { varID = rect }
                                left: lValue { varID = boolVar }
1004.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (!=) { right = true }
                                left: lValue { varID = rect }
1006.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (==) { left = "3.14" }
                                right: staticField { fieldID = PI, class = Math }
1008.                    for
                            expr: (!=)
                                right: lValue { varID = strVar }
                                left: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
1009.                                call voidMethod
1011.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (==) { right = true }
                                left: lValue { varID = strVar }
1013.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (!=) { right = false, left = "false" }
1014.                    doWhile { iLineWhile = 1017 }
                            expr: (==) { right = false, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
1015.                                call voidMethod
1019.                    while
                            expr: (!=) { right = 0 }
                                left: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
1020.                                call voidMethod
1022.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
                                    if
                                        expr: (!=) { left = 1 }
                                            right: lValue { varID = circle }
                                        block: block { #stmts = 1 }
                                            stmts:
1026.                                            call voidMethod
                            expr: (==) { right = 1 }
                                left: lValue { varID = rect }
                            block: block { #stmts = 1 }
                                stmts:
1023.                                call voidMethod
1030.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (=)
                                    right: lValue { varID = rect }
                                    left: lValue { varID = circle }
1032.                    while
                            expr: (=) { right = false }
                                left: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
1033.                                assign (=) { expr = true }
                                        lValue: lValue { varID = boolVar }
1035.                    if
                            expr: (=) { right = 100 }
                                left: lValue { varID = rect, fieldID = x }
                            block: block { #stmts = 1 }
                                stmts:
1036.                                call setSpeed { #exprs = 2 }
                                        lValue: lValue { varID = rect }
                                        exprs:
                                            unaryOp (neg) { expr = 1 }
1036.                                        (0)
1038.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: parens
                                expr: (=) { right = 2 }
                                    left: (+) { right = 1, left = 1 }
1040.                    if
                            expr: (=) { right = 1 }
                                left: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
1041.                                call println { #exprs = 1, class = ct }
                                        exprs:
1041.                                        ("oops")
1045.                    call println { #exprs = 1, class = ct }
                            exprs:
                                call voidMethod
1047.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: call println { class = ct }
1053.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (|) { right = 1, left = 2 }
1055.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (^) { right = 1, left = 2 }
1057.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (&) { right = 1, left = 2 }
1059.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (>>>) { right = 1, left = 2 }
1061.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (>>) { right = 1, left = 2 }
1063.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (<<) { right = 1, left = 2 }
1069.        func start { #paramVars = 0, isPublic = true, vt = void }
                block: block { iLineEnd = 1071, #stmts = 0, iLineBegin = 1070 }
        vars:
  3.        var classLevelInt { vt = int, isGlobal = true, initExpr = 0 }
  4.        var classLevelDouble { vt = double, isGlobal = true, initExpr = 0 }
  5.        var classLevelBoolean { vt = boolean, isGlobal = true, initExpr = false }
  6.        var classLevelString { vt = String, isGlobal = true, initExpr = "" }
  7.        var classLevelGameObj { vt = GameObj, isGlobal = true }
  8.        var classLevelIntArr { vt = array of int, isGlobal = true }
                initExpr: newArray { vtElement = 0, lengthExpr = 10 }
