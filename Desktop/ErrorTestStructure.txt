    program ErrorTest { #funcs = 45, #vars = 20 }
        funcs:
 40.        func main { isStatic = true, vt = void, #paramVars = 1, isPublic = true, #stmts = 1 }
                paramVars:
 40.                var args { vt = array of String, isGlobal = false }
                stmts:
 43.                call run { #exprs = 1 }
                        lValue: lValue { varID = Code12 }
                        exprs:
                            new ErrorTest
 48.        func emptyFunc { #paramVars = 0, vt = void, #stmts = 0 }
 51.        func voidFunc { #paramVars = 0, vt = void, #stmts = 1 }
                stmts:
 53.                var i { vt = int }
                        initExpr: literal { token = 0 }
 55.        func intFunc { #paramVars = 0, vt = int, #stmts = 2 }
                stmts:
 57.                var i { vt = int }
                        initExpr: literal { token = 1 }
 58.                return
                        expr: lValue { varID = i }
 60.        func dblFunc { #paramVars = 0, vt = double, #stmts = 2 }
                stmts:
 62.                var d { vt = double }
                        initExpr: literal { token = 0.0 }
 63.                return
                        expr: lValue { varID = d }
 65.        func boolFunc { #paramVars = 0, vt = boolean, #stmts = 2 }
                stmts:
 67.                var b { vt = boolean }
                        initExpr: literal { token = true }
 68.                return
                        expr: lValue { varID = b }
 70.        func strFunc { #paramVars = 0, vt = String, #stmts = 2 }
                stmts:
 72.                var s { vt = String }
                        initExpr: literal { token = "" }
 73.                return
                        expr: lValue { varID = s }
 75.        func gObjFunc { #paramVars = 0, vt = GameObj, #stmts = 1 }
                stmts:
 77.                return
                        expr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0.0 }
                                literal { token = 0.0 }
                                literal { token = 1.0 }
 79.        func intArrFuncInt { #paramVars = 1, vt = array of int, #stmts = 1 }
                paramVars:
 79.                var n { vt = int, isGlobal = false }
                stmts:
 81.                return
                        expr: newArray { vt = int }
                            lengthExpr: lValue { varID = n }
 83.        func intFuncInt { #paramVars = 1, vt = int, #stmts = 1 }
                paramVars:
 83.                var i { vt = int, isGlobal = false }
                stmts:
 85.                return
                        expr: (+)
                            right: literal { token = 1 }
                            left: (*)
                                right: literal { token = 2 }
                                left: lValue { varID = i }
 87.        func dblFuncIntDbl { #paramVars = 2, vt = double, #stmts = 1 }
                paramVars:
 87.                var i { vt = int, isGlobal = false }
 87.                var d { vt = double, isGlobal = false }
                stmts:
 89.                return
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
 91.        func boolFuncBoolStringGameObj { #paramVars = 3, vt = boolean, #stmts = 1 }
                paramVars:
 91.                var b { vt = boolean, isGlobal = false }
 91.                var s { vt = String, isGlobal = false }
 91.                var g { vt = GameObj, isGlobal = false }
                stmts:
 93.                return
                        expr: (&&)
                            right: lValue { varID = g, fieldID = visible }
                            left: (&&)
                                right: call equals { #exprs = 1 }
                                    lValue: lValue { varID = s }
                                    exprs:
                                        literal { token = "" }
                                left: lValue { varID = b }
 95.        func recursiveFunc { #paramVars = 1, vt = int, #stmts = 2 }
                paramVars:
 95.                var i { vt = int, isGlobal = false }
                stmts:
 97.                if { #stmts = 1 }
                        expr: (<=)
                            right: literal { token = 0 }
                            left: lValue { varID = i }
                        stmts:
 98.                        return
                                expr: literal { token = 0 }
 99.                return
                        expr: (+)
                            right: call recursiveFunc { #exprs = 1 }
                                exprs:
                                    (-)
                                        right: literal { token = 1 }
                                        left: lValue { varID = i }
                            left: literal { token = 1 }
101.        func multiLineFuncDecl { #paramVars = 3, vt = void, #stmts = 1 }
                paramVars:
101.                var arg1 { vt = int, isGlobal = false }
102.                var arg2 { vt = double, isGlobal = false }
103.                var arg3 { vt = boolean, isGlobal = false }
                stmts:
105.                call log { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = arg1 }
                            lValue { varID = arg2 }
                            lValue { varID = arg3 }
109.        func start { #paramVars = 0, isPublic = true, vt = int, #stmts = 412 }
                stmts:
113.                var LIMIT { vt = int, isConst = true }
                        initExpr: literal { token = 100 }
115.                var i { vt = int }
                        initExpr: literal { token = 3 }
116.                assign (=)
                        lValue: lValue { varID = i }
                        expr: unaryOp (neg)
                            expr: literal { token = 5 }
117.                assign (++)
                        lValue: lValue { varID = i }
118.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (+)
                            right: literal { token = 1 }
                            left: lValue { varID = i }
119.                assign (+=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 1 }
120.                assign (-=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 2 }
121.                assign (*=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 3 }
122.                assign (/=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 4 }
123.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intFunc
124.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intFuncInt { #exprs = 1 }
                            exprs:
                                (-)
                                    right: (*)
                                        right: lValue { varID = i }
                                        left: literal { token = 345 }
                                    left: (-)
                                        right: parens
                                            expr: (+)
                                                right: lValue { varID = i }
                                                left: lValue { varID = i }
                                        left: lValue { varID = i }
125.                var foo { vt = int }
                        initExpr: (+)
                            right: literal { token = 4 }
                            left: lValue { varID = i }
126.                var score { vt = int }
                        initExpr: literal { token = 500 }
127.                var j { vt = int }
127.                var k { vt = int }
128.                var exponentialNumberNoDot { vt = double }
                        initExpr: literal { token = 12e10 }
129.                var exponentialNumberWithDot { vt = double }
                        initExpr: literal { token = 3.42e2 }
130.                var expontialNumberWithDecimalPlaces { vt = double }
                        initExpr: literal { token = 6.62e-34 }
131.                var d { vt = double }
                        initExpr: literal { token = 3.14 }
132.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 100 }
133.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = .5 }
134.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 1.2345e6 }
135.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 1.2345e+67 }
136.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = .12e0 }
137.                assign (=)
                        lValue: lValue { varID = d }
                        expr: unaryOp (neg)
                            expr: literal { token = .123e-123 }
138.                assign (=)
                        lValue: lValue { varID = d }
                        expr: unaryOp (neg)
                            expr: literal { token = .5 }
139.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: literal { token = 2 }
                            left: lValue { varID = d }
140.                assign (++)
                        lValue: lValue { varID = d }
141.                assign (+=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 0.5 }
142.                assign (-=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 7 }
143.                assign (*=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 8 }
144.                assign (/=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 8.0 }
145.                var d2 { vt = double }
                        initExpr: literal { token = 3 }
146.                var d3 { vt = double }
                        initExpr: (+)
                            right: (*)
                                right: parens
                                    expr: (+)
                                        right: lValue { varID = d }
                                        left: lValue { varID = d2 }
                                left: literal { token = 2 }
                            left: lValue { varID = d }
147.                var x1 { vt = double }
147.                var x2 { vt = double }
147.                var y1 { vt = double }
147.                var y2 { vt = double }
148.                assign (=)
                        lValue: lValue { varID = x1 }
                        expr: literal { token = 1 }
149.                assign (=)
                        lValue: lValue { varID = x2 }
                        expr: literal { token = 2.0 }
150.                assign (=)
                        lValue: lValue { varID = y1 }
                        expr: literal { token = .5e+1 }
151.                assign (=)
                        lValue: lValue { varID = y2 }
                        expr: unaryOp (neg)
                            expr: literal { token = .5e-1 }
152.                var eps { vt = double }
                        initExpr: literal { token = 1e-4 }
153.                var name { vt = String }
                        initExpr: literal { token = "Einstein" }
154.                var b { vt = boolean }
                        initExpr: literal { token = true }
155.                var b2 { vt = boolean }
                        initExpr: literal { token = false }
156.                var b3 { vt = boolean }
                        initExpr: (||)
                            right: lValue { varID = b2 }
                            left: lValue { varID = b }
157.                var s { vt = String }
                        initExpr: literal { token = "A string variable" }
158.                assign (=)
                        lValue: lValue { varID = s }
                        expr: lValue { varID = s }
159.                assign (=)
                        lValue: lValue { varID = s }
                        expr: literal { token = null }
161.                var colors { vt = array of String }
                        initExpr: arrayInit { #exprs = 5 }
                            exprs:
                                literal { token = "black" }
                                literal { token = "white" }
                                literal { token = "red" }
                                literal { token = "green" }
                                literal { token = "blue" }
162.                assign (=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 100 }
163.                var strArr { vt = array of String }
                        initExpr: newArray { vt = String }
                            lengthExpr: lValue { varID = i }
164.                assign (=)
                        lValue: lValue { varID = strArr }
                        expr: lValue { varID = colors }
165.                var intArr { vt = array of int }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
                                literal { token = 3 }
166.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: newArray { vt = int }
                            lengthExpr: literal { token = 100 }
167.                var intArr2 { vt = array of int }
                        initExpr: newArray { vt = int }
                            lengthExpr: call length
                                lValue: lValue { varID = s }
168.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: lValue { varID = intArr2 }
169.                var dblArr { vt = array of double }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1.1 }
                                literal { token = 2.2 }
                                literal { token = 3.3 }
170.                var dblArr2 { vt = array of double }
                        initExpr: newArray { vt = double }
                            lengthExpr: literal { token = 100 }
171.                assign (=)
                        lValue: lValue { varID = dblArr }
                        expr: lValue { varID = dblArr2 }
172.                var gObjArr { vt = array of GameObj }
                        initExpr: newArray { vt = GameObj }
                            lengthExpr: (*)
                                right: literal { token = 2 }
                                left: lValue { varID = i }
174.                call voidFunc
175.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intFunc
176.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call dblFunc
177.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call boolFunc
178.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call strFunc
179.                var gObj { vt = GameObj }
                        initExpr: call gObjFunc
180.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: call intArrFuncInt { #exprs = 1 }
                            exprs:
                                lValue { varID = i }
181.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intFuncInt { #exprs = 1 }
                            exprs:
                                lValue { varID = i }
182.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call dblFuncIntDbl { #exprs = 2 }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = d }
183.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call boolFuncBoolStringGameObj { #exprs = 3 }
                            exprs:
                                lValue { varID = b }
                                lValue { varID = s }
                                lValue { varID = gObj }
184.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call recursiveFunc { #exprs = 1 }
                            exprs:
                                literal { token = 2 }
186.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (/)
                            right: literal { token = 1 }
                            left: literal { token = 5 }
187.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (/)
                            right: literal { token = 20 }
                            left: literal { token = 100 }
188.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (+)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
189.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (-)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
190.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (*)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
191.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (%)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
192.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (-)
                            right: lValue { varID = i }
                            left: (+)
                                right: lValue { varID = i }
                                left: (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
193.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (*)
                            right: parens
                                expr: (-)
                                    right: lValue { varID = i }
                                    left: parens
                                        expr: (+)
                                            right: lValue { varID = i }
                                            left: lValue { varID = i }
                            left: lValue { varID = i }
194.                assign (=)
                        lValue: lValue { varID = d }
                        expr: lValue { varID = i }
195.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
196.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
197.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
198.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
199.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (%)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
200.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
201.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
202.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
203.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
204.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (%)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
205.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
206.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
207.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
208.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
209.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (%)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
210.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: (*)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
                            left: (-)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
211.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = i }
                            left: (+)
                                right: (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
                                left: lValue { varID = d }
212.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: (*)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
                            left: (*)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
213.                assign (=)
                        lValue: lValue { varID = d }
                        expr: parens
                            expr: (-)
                                right: (*)
                                    right: lValue { varID = d }
                                    left: lValue { varID = d }
                                left: (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
214.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = s }
215.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: literal { token = "s" }
                            left: (+)
                                right: lValue { varID = s }
                                left: lValue { varID = s }
216.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = i }
                            left: lValue { varID = s }
217.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = s }
218.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = b }
                            left: lValue { varID = s }
219.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = gObj }
                            left: lValue { varID = s }
220.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = i }
221.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = d }
222.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = b }
223.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = gObj }
224.                assign (=)
                        lValue: lValue { varID = b }
                        expr: lValue { varID = b }
225.                assign (=)
                        lValue: lValue { varID = b }
                        expr: unaryOp (not)
                            expr: lValue { varID = b }
226.                assign (=)
                        lValue: lValue { varID = b }
                        expr: parens
                            expr: lValue { varID = b }
227.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
228.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
229.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
230.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
231.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
232.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = gObj }
                            left: lValue { varID = gObj }
233.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
234.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
235.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
236.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
237.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
238.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = gObj }
                            left: lValue { varID = gObj }
239.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
240.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
241.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
242.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
243.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
244.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
245.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
246.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
247.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
248.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
249.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
250.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
251.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
252.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
253.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
254.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
255.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (||)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
256.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (&&)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
257.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: literal { token = 2 }
                            left: literal { token = 1 }
258.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: literal { token = 2 }
                            left: literal { token = 1.1 }
259.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: literal { token = 2 }
                            left: literal { token = 1 }
260.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: literal { token = 2.2 }
                            left: literal { token = 1 }
261.                assign (=)
                        lValue: lValue { varID = b2 }
                        expr: (||)
                            right: (&&)
                                right: (==)
                                    right: lValue { varID = b }
                                    left: lValue { varID = b }
                                left: lValue { varID = b3 }
                            left: lValue { varID = b2 }
262.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: literal { token = 0 }
                            left: (%)
                                right: literal { token = 2 }
                                left: lValue { varID = i }
263.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (&&)
                            right: lValue { varID = b }
                            left: parens
                                expr: (||)
                                    right: lValue { varID = b }
                                    left: lValue { varID = b }
264.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (&&)
                            right: parens
                                expr: (<)
                                    right: literal { token = 0.0001 }
                                    left: (-)
                                        right: literal { token = 3.14159 }
                                        left: lValue { varID = Math, fieldID = PI }
                            left: parens
                                expr: (==)
                                    right: literal { token = 2 }
                                    left: (+)
                                        right: literal { token = 1 }
                                        left: literal { token = 1 }
266.                if { #elseStmts = 1, #stmts = 1 }
                        expr: (==)
                            right: literal { token = 0 }
                            left: lValue { varID = i }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 1 }
                                expr: (<=)
                                    right: literal { token = 10 }
                                    left: lValue { varID = i }
                                elseStmts:
271.                                assign (*=)
                                        lValue: lValue { varID = i }
                                        expr: literal { token = 5 }
                                stmts:
269.                                assign (++)
                                        lValue: lValue { varID = i }
                        stmts:
267.                        call setBackColor { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    lValue { varID = colors }
                                        indexExpr: lValue { varID = i }
273.                if { #elseStmts = 1, #stmts = 2 }
                        expr: (>)
                            right: literal { token = 0 }
                            left: lValue { varID = i }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 2 }
                                expr: (<=)
                                    right: literal { token = 10 }
                                    left: lValue { varID = i }
                                elseStmts:
                                    if { #elseStmts = 2, #stmts = 1 }
                                        expr: lValue { varID = b }
                                        elseStmts:
287.                                        var tempStr { vt = String }
                                                initExpr: literal { token = "I'll be " }
288.                                        assign (=)
                                                lValue: lValue { varID = tempStr }
                                                expr: (+)
                                                    right: literal { token = "out of scope soon" }
                                                    left: lValue { varID = tempStr }
                                        stmts:
284.                                        assign (++)
                                                lValue: lValue { varID = i }
                                stmts:
280.                                assign (=)
                                        lValue: lValue { varID = d }
                                        expr: literal { token = 7 }
281.                                call setSoundVolume { #exprs = 1 }
                                        lValue: lValue { varID = ct }
                                        exprs:
                                            literal { token = 1 }
                        stmts:
275.                        assign (=)
                                lValue: lValue { varID = j }
                                expr: literal { token = 0 }
276.                        assign (=)
                                lValue: lValue { varID = k }
                                expr: literal { token = 0 }
290.                if { #stmts = 1 }
                        expr: (&&)
                            right: (<=)
                                right: lValue { varID = eps }
                                left: call distance { #exprs = 4 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = x1 }
                                        lValue { varID = y1 }
                                        lValue { varID = x2 }
                                        lValue { varID = y2 }
                            left: call isError { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    call tan { #exprs = 1 }
                                        lValue: lValue { varID = Math }
                                        exprs:
                                            lValue { varID = d }
                        stmts:
291.                        call println { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = "oops" }
293.                for { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
294.                        for { #stmts = 1 }
                                stmts:
295.                                for { #stmts = 1 }
295.                                    initStmt: assign (=)
                                            lValue: lValue { varID = i }
                                            expr: literal { token = 0 }
                                        stmts:
296.                                        for { #stmts = 1 }
                                                expr: (<)
                                                    right: literal { token = 10 }
                                                    left: lValue { varID = i }
                                                stmts:
297.                                                for { #stmts = 1 }
297.                                                    nextStmt: assign (++)
                                                            lValue: lValue { varID = i }
                                                        stmts:
298.                                                        for { #stmts = 1 }
                                                                expr: lValue { varID = b }
                                                                stmts:
299.                                                                assign (=)
                                                                        lValue: lValue { varID = d }
                                                                        expr: literal { token = 0 }
300.                for { #stmts = 2 }
300.                    initStmt: var ii { vt = int, isGlobal = false }
                            initExpr: literal { token = 0 }
                        expr: (<)
                            right: literal { token = 10 }
                            left: lValue { varID = ii }
300.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
302.                        for { #stmts = 1 }
302.                            initStmt: var jj { vt = int, isGlobal = false }
                                    initExpr: literal { token = 0 }
                                expr: (!=)
                                    right: literal { token = 10 }
                                    left: lValue { varID = jj }
302.                            nextStmt: assign (+=)
                                    lValue: lValue { varID = jj }
                                    expr: literal { token = 1 }
                                stmts:
303.                                if { #stmts = 1 }
                                        expr: (||)
                                            right: (==)
                                                right: literal { token = 0 }
                                                left: lValue { varID = jj }
                                            left: (==)
                                                right: literal { token = 0 }
                                                left: lValue { varID = ii }
                                        stmts:
304.                                        break
305.                        break
307.                for { #stmts = 2 }
307.                    initStmt: var ii { vt = int, isGlobal = false }
                            initExpr: literal { token = 0 }
                        expr: (<)
                            right: literal { token = 10 }
                            left: lValue { varID = ii }
307.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
309.                        for { #stmts = 2 }
309.                            initStmt: var jj { vt = int, isGlobal = false }
                                    initExpr: literal { token = 0 }
                                expr: (!=)
                                    right: literal { token = 10 }
                                    left: lValue { varID = jj }
309.                            nextStmt: assign (+=)
                                    lValue: lValue { varID = jj }
                                    expr: literal { token = 1 }
                                stmts:
311.                                if { #stmts = 2 }
                                        expr: (&&)
                                            right: (==)
                                                right: literal { token = 0 }
                                                left: lValue { varID = jj }
                                            left: (==)
                                                right: literal { token = 0 }
                                                left: lValue { varID = ii }
                                        stmts:
313.                                        assign (=)
                                                lValue: lValue { varID = intArr }
                                                    indexExpr: lValue { varID = ii }
                                                expr: literal { token = 0 }
314.                                        break
316.                                break
318.                        break
320.                var xVar { vt = double }
                        initExpr: literal { token = 0 }
321.                var yVar { vt = double }
                        initExpr: literal { token = 1 }
322.                for { #stmts = 1 }
322.                    initStmt: var dx { vt = double, isGlobal = false }
                            initExpr: literal { token = .1 }
                        expr: (<)
                            right: literal { token = 1 }
                            left: lValue { varID = xVar }
322.                    nextStmt: assign (+=)
                            lValue: lValue { varID = xVar }
                            expr: lValue { varID = dx }
                        stmts:
323.                        for { #stmts = 1 }
323.                            initStmt: var dy { vt = double, isGlobal = false }
                                    initExpr: unaryOp (neg)
                                        expr: literal { token = .5 }
                                expr: (>)
                                    right: literal { token = 0 }
                                    left: lValue { varID = yVar }
323.                            nextStmt: assign (+=)
                                    lValue: lValue { varID = yVar }
                                    expr: lValue { varID = dy }
                                stmts:
324.                                assign (=)
                                        lValue: lValue { varID = d }
                                        expr: (-)
                                            right: (/)
                                                right: lValue { varID = dy }
                                                left: lValue { varID = yVar }
                                            left: (+)
                                                right: lValue { varID = dx }
                                                left: lValue { varID = xVar }
325.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: newArray { vt = int }
                            lengthExpr: literal { token = 1 }
326.                forArray { #stmts = 1 }
326.                    var: var a { vt = int, isGlobal = false }
                        expr: lValue { varID = intArr }
                        stmts:
327.                        assign (=)
                                lValue: lValue { varID = a }
                                expr: literal { token = 0 }
329.                while { #stmts = 1 }
                        expr: lValue { varID = b }
                        stmts:
330.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: literal { token = false }
331.                while { #stmts = 3 }
                        expr: lValue { varID = b }
                        stmts:
333.                        call voidFunc
334.                        assign (++)
                                lValue: lValue { varID = i }
335.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: literal { token = false }
337.                doWhile { #stmts = 1 }
                        expr: lValue { varID = b }
                        stmts:
338.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: literal { token = false }
340.                doWhile { #stmts = 1 }
                        expr: lValue { varID = b }
                        stmts:
342.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: literal { token = false }
346.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world" }
347.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: literal { token = "world" }
                                left: (+)
                                    right: literal { token = " " }
                                    left: literal { token = "Hello" }
348.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world\n" }
349.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
350.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
351.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = b }
352.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: literal { token = "i = " }
353.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: literal { token = "d = " }
354.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = name }
355.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = name }
                                left: (+)
                                    right: literal { token = " " }
                                    left: literal { token = "Hello" }
356.                var circleObj { vt = GameObj }
                        initExpr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50 }
                                literal { token = 50 }
                                literal { token = 20 }
357.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = circleObj }
358.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world" }
359.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: literal { token = "world" }
                                left: (+)
                                    right: literal { token = " " }
                                    left: literal { token = "Hello" }
360.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world\n" }
361.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
362.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
363.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = b }
364.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: literal { token = "i = " }
365.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: literal { token = "d = " }
366.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = name }
367.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = name }
                                left: (+)
                                    right: literal { token = " " }
                                    left: literal { token = "Hello" }
368.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = circleObj }
369.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
370.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
371.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = b }
372.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = circleObj }
373.                var obj2 { vt = GameObj }
                        initExpr: lValue { varID = circleObj }
374.                var obj3 { vt = GameObj }
                        initExpr: lValue { varID = obj2 }
375.                call log { #exprs = 9 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "circleObj = " }
                            lValue { varID = circleObj }
                            literal { token = "obj2 = " }
                            lValue { varID = obj2 }
                            literal { token = "obj3=" }
                            lValue { varID = obj3 }
                            literal { token = 3.14 }
                            lValue { varID = Math, fieldID = PI }
                            literal { token = 42 }
376.                call logm { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "message" }
                            literal { token = null }
377.                call logm { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "message" }
                            lValue { varID = obj2 }
                            lValue { varID = obj3 }
378.                call setOutputFile { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "output.txt" }
379.                call setOutputFile { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "output/nameList.txt" }
380.                var outputFilename { vt = String }
                        initExpr: literal { token = "output.txt" }
381.                call setOutputFile { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = outputFilename }
383.                call showAlert { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "alert meassage" }
384.                var message { vt = String }
                        initExpr: literal { token = "alert!" }
385.                call showAlert { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = message }
386.                var n { vt = int }
                        initExpr: call inputInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "enter a number: " }
387.                assign (=)
                        lValue: lValue { varID = n }
                        expr: call inputInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "enter a number: " }
388.                assign (=)
                        lValue: lValue { varID = n }
                        expr: call inputInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = message }
389.                var x { vt = double }
                        initExpr: call inputNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "enter a number: " }
390.                assign (=)
                        lValue: lValue { varID = x }
                        expr: call inputNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "enter a number: " }
391.                assign (=)
                        lValue: lValue { varID = x }
                        expr: call inputNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = message }
392.                var quit { vt = boolean }
                        initExpr: call inputYesNo { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "Quit?" }
393.                assign (=)
                        lValue: lValue { varID = quit }
                        expr: call inputYesNo { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = message }
394.                var inputStr { vt = String }
                        initExpr: call inputString { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "Quit?" }
395.                assign (=)
                        lValue: lValue { varID = inputStr }
                        expr: call inputString { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "Quit?" }
396.                assign (=)
                        lValue: lValue { varID = inputStr }
                        expr: call inputString { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = message }
398.                call setTitle { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Title" }
399.                var title { vt = String }
                        initExpr: literal { token = "Title" }
400.                call setTitle { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = title }
401.                call setTitle { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: (+)
                                    right: literal { token = " " }
                                    left: lValue { varID = title }
402.                call setTitle { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: lValue { varID = title }
403.                call setHeight { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (/)
                                right: literal { token = 16 }
                                left: (*)
                                    right: literal { token = 9 }
                                    left: literal { token = 100.0 }
404.                call setHeight { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
405.                call setHeight { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
406.                call setHeight { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: (*)
                                    right: literal { token = 4 }
                                    left: literal { token = 5 }
                                left: (*)
                                    right: lValue { varID = d }
                                    left: lValue { varID = i }
407.                var height { vt = double }
                        initExpr: call getHeight
                            lValue: lValue { varID = ct }
408.                assign (=)
                        lValue: lValue { varID = height }
                        expr: call getHeight
                            lValue: lValue { varID = ct }
409.                var width { vt = double }
                        initExpr: (-)
                            right: literal { token = 10 }
                            left: (*)
                                right: literal { token = 0.5 }
                                left: call getWidth
                                    lValue: lValue { varID = ct }
410.                assign (=)
                        lValue: lValue { varID = width }
                        expr: call getWidth
                            lValue: lValue { varID = ct }
411.                var pxPerUnit { vt = double }
                        initExpr: call getPixelsPerUnit
                            lValue: lValue { varID = ct }
412.                assign (=)
                        lValue: lValue { varID = pxPerUnit }
                        expr: call getPixelsPerUnit
                            lValue: lValue { varID = ct }
413.                var pixelWidth { vt = int }
                        initExpr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (*)
                                    right: call getPixelsPerUnit
                                        lValue: lValue { varID = ct }
                                    left: call getWidth
                                        lValue: lValue { varID = ct }
414.                var pixelHeight { vt = int }
                        initExpr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (*)
                                    right: call getPixelsPerUnit
                                        lValue: lValue { varID = ct }
                                    left: call getHeight
                                        lValue: lValue { varID = ct }
415.                var currentScreen { vt = String }
                        initExpr: call getScreen
                            lValue: lValue { varID = ct }
416.                assign (=)
                        lValue: lValue { varID = currentScreen }
                        expr: call getScreen
                            lValue: lValue { varID = ct }
417.                call clearScreen
                        lValue: lValue { varID = ct }
418.                call clearGroup { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "targets" }
419.                call clearGroup { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "" }
420.                call setBackColor { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "orange" }
421.                call setBackColor { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "light blue" }
422.                var backColor { vt = String }
                        initExpr: literal { token = "red" }
423.                call setBackColor { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = backColor }
424.                call setBackColorRGB { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 255 }
                            literal { token = 0 }
                            literal { token = 0 }
425.                call setBackColorRGB { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
                            lValue { varID = i }
                            lValue { varID = i }
426.                call setBackImage { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "background.png" }
427.                call setBackImage { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "C:\\Users\\ben\\Pictures\\landscape.jpg" }
428.                var filename { vt = String }
                        initExpr: literal { token = "landscape.png" }
429.                call setBackImage { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = filename }
431.                assign (=)
                        lValue: lValue { varID = x }
                        expr: literal { token = 50 }
432.                var y { vt = double }
                        initExpr: literal { token = 50 }
433.                var diameter { vt = double }
                        initExpr: literal { token = 10 }
434.                var circle { vt = GameObj }
                        initExpr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50 }
                                literal { token = 20 }
                                literal { token = 10 }
435.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50.0 }
                                literal { token = 20.0 }
                                literal { token = 10.0 }
436.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call circle { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50 }
                                literal { token = 20 }
                                literal { token = 10.5 }
                                literal { token = "blue" }
437.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = diameter }
438.                var color { vt = String }
                        initExpr: literal { token = "green" }
439.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call circle { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = diameter }
                                lValue { varID = color }
440.                var rect { vt = GameObj }
                        initExpr: call rect { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = width }
                                lValue { varID = height }
441.                assign (=)
                        lValue: lValue { varID = rect }
                        expr: call rect { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = width }
                                lValue { varID = height }
                                lValue { varID = color }
442.                assign (=)
                        lValue: lValue { varID = rect }
                        expr: call rect { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50.0 }
                                literal { token = 33.3 }
                                literal { token = 11.2 }
                                literal { token = 23.890 }
443.                assign (=)
                        lValue: lValue { varID = rect }
                        expr: call rect { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50 }
                                literal { token = 33 }
                                literal { token = 11 }
                                literal { token = 23 }
                                literal { token = "green" }
444.                var line { vt = GameObj }
                        initExpr: call line { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = d }
                                lValue { varID = width }
                                lValue { varID = height }
445.                assign (=)
                        lValue: lValue { varID = line }
                        expr: call line { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x1 }
                                lValue { varID = y1 }
                                lValue { varID = x2 }
                                lValue { varID = y2 }
                                lValue { varID = color }
446.                assign (=)
                        lValue: lValue { varID = line }
                        expr: call line { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0.0 }
                                literal { token = .0 }
                                literal { token = 100.0 }
                                literal { token = 95.0 }
447.                assign (=)
                        lValue: lValue { varID = line }
                        expr: call line { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 100 }
                                literal { token = 95 }
                                literal { token = "red" }
448.                var text { vt = GameObj }
                        initExpr: call text { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = height }
449.                assign (=)
                        lValue: lValue { varID = text }
                        expr: call text { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = height }
                                lValue { varID = color }
450.                assign (=)
                        lValue: lValue { varID = text }
                        expr: call text { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = score }
                                    left: literal { token = "Score: " }
                                literal { token = 20.0 }
                                literal { token = 90.0 }
                                literal { token = 10.0 }
451.                assign (=)
                        lValue: lValue { varID = text }
                        expr: call text { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = score }
                                    left: literal { token = "Score: " }
                                literal { token = 20 }
                                literal { token = 90 }
                                literal { token = 10 }
                                literal { token = "purple" }
452.                var img { vt = GameObj }
                        initExpr: call image { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = filename }
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = width }
453.                assign (=)
                        lValue: lValue { varID = img }
                        expr: call image { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "car.png" }
                                literal { token = 42 }
                                literal { token = 25 }
                                literal { token = 38.7 }
454.                assign (=)
                        lValue: lValue { varID = img }
                        expr: call image { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "C:\\Users\\john\\Pictures\\car.jpg" }
                                literal { token = 42 }
                                literal { token = 25 }
                                literal { token = 38 }
455.                var objs { vt = array of GameObj }
                        initExpr: arrayInit { #exprs = 5 }
                            exprs:
                                lValue { varID = circle }
                                lValue { varID = rect }
                                lValue { varID = line }
                                lValue { varID = text }
                                lValue { varID = img }
456.                assign (=)
                        lValue: lValue { varID = img }
                        expr: lValue { varID = rect }
458.                var mouseClicked { vt = boolean }
                        initExpr: call clicked
                            lValue: lValue { varID = ct }
459.                if { #stmts = 1 }
                        expr: call clicked
                            lValue: lValue { varID = ct }
                        stmts:
460.                        assign (=)
                                lValue: lValue { varID = mouseClicked }
                                expr: call clicked
                                    lValue: lValue { varID = ct }
461.                if { #stmts = 1 }
                        expr: (>)
                            right: literal { token = 50 }
                            left: call clickX
                                lValue: lValue { varID = ct }
                        stmts:
462.                        assign (=)
                                lValue: lValue { varID = x }
                                expr: call clickX
                                    lValue: lValue { varID = ct }
463.                assign (=)
                        lValue: lValue { varID = x }
                        expr: call clickX
                            lValue: lValue { varID = ct }
464.                if { #stmts = 1 }
                        expr: (<=)
                            right: lValue { varID = x }
                            left: call clickY
                                lValue: lValue { varID = ct }
                        stmts:
465.                        assign (=)
                                lValue: lValue { varID = y }
                                expr: call clickY
                                    lValue: lValue { varID = ct }
466.                assign (=)
                        lValue: lValue { varID = y }
                        expr: call clickY
                            lValue: lValue { varID = ct }
467.                var keyName { vt = String }
                        initExpr: literal { token = "space" }
468.                var keyPressed { vt = boolean }
                        initExpr: call keyPressed { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = keyName }
469.                if { #stmts = 1 }
                        expr: call keyPressed { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = keyName }
                        stmts:
470.                        if { #stmts = 1 }
                                expr: call keyPressed { #exprs = 1 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        literal { token = "up" }
                                stmts:
471.                                assign (=)
                                        lValue: lValue { varID = keyPressed }
                                        expr: call keyPressed { #exprs = 1 }
                                            lValue: lValue { varID = ct }
                                            exprs:
                                                literal { token = "up" }
472.                if { #stmts = 1 }
                        expr: call charTyped { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "+" }
                        stmts:
473.                        assign (++)
                                lValue: lValue { varID = x }
474.                var ch { vt = String }
                        initExpr: literal { token = "+" }
475.                if { #stmts = 1 }
                        expr: call charTyped { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = ch }
                        stmts:
476.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: call charTyped { #exprs = 1 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        literal { token = "+" }
477.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call charTyped { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = ch }
479.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call loadSound { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = filename }
480.                call loadSound { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "pow.wav" }
481.                if { #stmts = 1 }
                        expr: call loadSound { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "sounds/ding.mp3" }
                        stmts:
482.                        call sound { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = "sounds/ding.mp3" }
483.                call sound { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = filename }
484.                call setSoundVolume { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
485.                call setSoundVolume { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 1 }
486.                call setSoundVolume { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0.5 }
488.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call random { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
489.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call random { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 100 }
490.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
491.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
492.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 1.62 }
493.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = d }
494.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: (*)
                                        right: lValue { varID = i }
                                        left: lValue { varID = d }
                                    left: literal { token = 1 }
495.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                call distance { #exprs = 4 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = x1 }
                                        lValue { varID = y1 }
                                        lValue { varID = x2 }
                                        lValue { varID = y2 }
496.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call roundDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = i }
497.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call roundDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: literal { token = 1 }
                                    left: (*)
                                        right: lValue { varID = i }
                                        left: lValue { varID = d }
                                (*)
                                    right: literal { token = 2 }
                                    left: lValue { varID = i }
498.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call roundDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 2.71828182846 }
                                literal { token = 2 }
499.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call roundDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                call distance { #exprs = 4 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = x1 }
                                        lValue { varID = y1 }
                                        lValue { varID = x2 }
                                        lValue { varID = y2 }
                                literal { token = 1 }
500.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intDiv { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
501.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intDiv { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 5 }
                                literal { token = 2 }
502.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call isError { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
503.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call isError { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (/)
                                    right: lValue { varID = d }
                                    left: lValue { varID = d }
504.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call isError { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (/)
                                    right: lValue { varID = i }
                                    left: lValue { varID = d }
505.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call isError { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (/)
                                    right: literal { token = 0 }
                                    left: literal { token = 0.0 }
506.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call distance { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = circle, fieldID = x }
                                lValue { varID = circle, fieldID = y }
                                lValue { varID = rect, fieldID = x }
                                lValue { varID = rect, fieldID = y }
507.                if { #stmts = 1 }
                        expr: (<)
                            right: (/)
                                right: literal { token = 2 }
                                left: parens
                                    expr: (+)
                                        right: lValue { varID = rect, fieldID = width }
                                        left: lValue { varID = circle, fieldID = width }
                            left: call distance { #exprs = 4 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    lValue { varID = circle, fieldID = x }
                                    lValue { varID = circle, fieldID = y }
                                    lValue { varID = rect, fieldID = x }
                                    lValue { varID = rect, fieldID = y }
                        stmts:
508.                        assign (=)
                                lValue: lValue { varID = i }
                                expr: call getTimer
                                    lValue: lValue { varID = ct }
509.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (-)
                            right: lValue { varID = i }
                            left: call getTimer
                                lValue: lValue { varID = ct }
510.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call getVersion
                            lValue: lValue { varID = ct }
511.                call round { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            call getVersion
                                lValue: lValue { varID = ct }
513.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
514.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = d }
515.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = .707 }
516.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = Math, fieldID = PI }
517.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 6.0221409e+2 }
518.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call parseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
519.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call parseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "345" }
520.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
521.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "12345" }
522.                while { #stmts = 1 }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
                        stmts:
523.                        assign (=)
                                lValue: lValue { varID = d }
                                expr: call parseNumber { #exprs = 1 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = s }
524.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: literal { token = 100 }
                            left: call parseNumber { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = "123.45" }
525.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call canParseNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "543.210" }
526.                while { #stmts = 1 }
                        expr: call canParseNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
                        stmts:
527.                        assign (=)
                                lValue: lValue { varID = s }
                                expr: call formatDecimal { #exprs = 1 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = d }
528.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call formatDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = i }
529.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call formatDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
                                call intDiv { #exprs = 2 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        (*)
                                            right: lValue { varID = i }
                                            left: literal { token = 2 }
                                        lValue { varID = i }
530.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: literal { token = ":00" }
                            left: call formatDecimal { #exprs = 2 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = 6.0221 }
                                    literal { token = 7 }
531.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call formatInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
532.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call formatInt { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: literal { token = 1 }
                                    left: lValue { varID = i }
                                (+)
                                    right: lValue { varID = k }
                                    left: lValue { varID = j }
534.                assign (=)
                        lValue: lValue { varID = rect, fieldID = x }
                        expr: (-)
                            right: literal { token = 10 }
                            left: lValue { varID = circle, fieldID = y }
535.                assign (=)
                        lValue: lValue { varID = circle, fieldID = width }
                        expr: (*)
                            right: literal { token = 1.5 }
                            left: lValue { varID = circle, fieldID = height }
536.                assign (=)
                        lValue: lValue { varID = rect, fieldID = height }
                        expr: (*)
                            right: literal { token = 1.1 }
                            left: lValue { varID = img, fieldID = height }
537.                assign (=)
                        lValue: lValue { varID = line, fieldID = x }
                        expr: (+)
                            right: lValue { varID = line, fieldID = width }
                            left: lValue { varID = line, fieldID = x }
538.                assign (=)
                        lValue: lValue { varID = img, fieldID = width }
                        expr: (*)
                            right: literal { token = .9 }
                            left: lValue { varID = img, fieldID = width }
539.                assign (=)
                        lValue: lValue { varID = img, fieldID = xSpeed }
                        expr: literal { token = 0 }
540.                assign (=)
                        lValue: lValue { varID = img, fieldID = ySpeed }
                        expr: literal { token = .5 }
541.                assign (=)
                        lValue: lValue { varID = line, fieldID = lineWidth }
                        expr: literal { token = 3 }
542.                assign (=)
                        lValue: lValue { varID = img, fieldID = lineWidth }
                        expr: (*)
                            right: literal { token = 2 }
                            left: lValue { varID = line, fieldID = lineWidth }
543.                assign (=)
                        lValue: lValue { varID = rect, fieldID = visible }
                        expr: literal { token = false }
544.                assign (=)
                        lValue: lValue { varID = circle, fieldID = clickable }
                        expr: lValue { varID = circle, fieldID = visible }
545.                if { #stmts = 1 }
                        expr: lValue { varID = img, fieldID = visible }
                        stmts:
546.                        assign (=)
                                lValue: lValue { varID = img, fieldID = clickable }
                                expr: literal { token = true }
547.                if { #stmts = 1 }
                        expr: (!=)
                            right: literal { token = false }
                            left: lValue { varID = img, fieldID = clickable }
                        stmts:
548.                        assign (=)
                                lValue: lValue { varID = img, fieldID = autoDelete }
                                expr: lValue { varID = img, fieldID = visible }
549.                assign (=)
                        lValue: lValue { varID = line, fieldID = group }
                        expr: lValue { varID = s }
550.                assign (=)
                        lValue: lValue { varID = line, fieldID = autoDelete }
                        expr: (||)
                            right: (&&)
                                right: (==)
                                    right: literal { token = 1 }
                                    left: call indexOf { #exprs = 1 }
                                        lValue: lValue { varID = s }
                                        exprs:
                                            lValue { varID = line, fieldID = group }
                                left: call equals { #exprs = 1 }
                                    lValue: lValue { varID = s }
                                    exprs:
                                        literal { token = "world" }
                            left: call equals { #exprs = 1 }
                                lValue: lValue { varID = s }
                                exprs:
                                    literal { token = "hello" }
552.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call getType
                            lValue: lValue { varID = rect }
553.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: literal { token = "more text" }
                                left: call getText
                                    lValue: lValue { varID = text }
554.                call setText { #exprs = 1 }
                        lValue: lValue { varID = img }
                        exprs:
                            literal { token = "racecar.png" }
555.                call setText { #exprs = 1 }
                        lValue: lValue { varID = text }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: literal { token = "Score: " }
556.                call setText { #exprs = 1 }
                        lValue: lValue { varID = text }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: literal { token = "Score: " }
557.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            call toString
                                lValue: lValue { varID = line }
558.                call setSize { #exprs = 2 }
                        lValue: lValue { varID = img }
                        exprs:
                            (*)
                                right: literal { token = 1.1 }
                                left: lValue { varID = img, fieldID = width }
                            (*)
                                right: literal { token = 1.1 }
                                left: lValue { varID = img, fieldID = height }
559.                call align { #exprs = 1 }
                        lValue: lValue { varID = text }
                        exprs:
                            lValue { varID = s }
560.                call align { #exprs = 2 }
                        lValue: lValue { varID = text }
                        exprs:
                            lValue { varID = s }
                            literal { token = true }
561.                call align { #exprs = 2 }
                        lValue: lValue { varID = text }
                        exprs:
                            lValue { varID = s }
                            literal { token = false }
562.                call setFillColor { #exprs = 1 }
                        lValue: lValue { varID = circle }
                        exprs:
                            (+)
                                right: lValue { varID = s }
                                left: literal { token = "light" }
563.                call setFillColor { #exprs = 1 }
                        lValue: lValue { varID = circle }
                        exprs:
                            call getText
                                lValue: lValue { varID = text }
564.                call setFillColorRGB { #exprs = 3 }
                        lValue: lValue { varID = circle }
                        exprs:
                            lValue { varID = i }
                            lValue { varID = j }
                            lValue { varID = k }
565.                call setLineColor { #exprs = 1 }
                        lValue: lValue { varID = rect }
                        exprs:
                            lValue { varID = colors }
                                indexExpr: lValue { varID = i }
566.                call setLineColorRGB { #exprs = 3 }
                        lValue: lValue { varID = rect }
                        exprs:
                            lValue { varID = i }
                            (-)
                                right: lValue { varID = i }
                                left: literal { token = 255 }
                            literal { token = 0 }
567.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call getLayer
                            lValue: lValue { varID = rect }
568.                if { #stmts = 1 }
                        expr: (>=)
                            right: call getLayer
                                lValue: lValue { varID = circle }
                            left: call getLayer
                                lValue: lValue { varID = rect }
                        stmts:
569.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: call equals { #exprs = 1 }
                                    lValue: lValue { varID = colors }
                                        indexExpr: call getLayer
                                            lValue: lValue { varID = rect }
                                    exprs:
                                        literal { token = "green" }
570.                call setLayer { #exprs = 1 }
                        lValue: lValue { varID = img }
                        exprs:
                            unaryOp (neg)
                                expr: literal { token = 42 }
571.                call delete
                        lValue: lValue { varID = img }
572.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call clicked
                            lValue: lValue { varID = img }
573.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call containsPoint { #exprs = 2 }
                            lValue: lValue { varID = img }
                            exprs:
                                call clickX
                                    lValue: lValue { varID = ct }
                                call clickY
                                    lValue: lValue { varID = ct }
574.                if { #stmts = 1 }
                        expr: call containsPoint { #exprs = 2 }
                            lValue: lValue { varID = img }
                            exprs:
                                call clickX
                                    lValue: lValue { varID = ct }
                                call clickY
                                    lValue: lValue { varID = ct }
                        stmts:
575.                        while { #stmts = 1 }
                                expr: call hit { #exprs = 1 }
                                    lValue: lValue { varID = img }
                                    exprs:
                                        lValue { varID = rect }
                                stmts:
576.                                assign (=)
                                        lValue: lValue { varID = b }
                                        expr: (==)
                                            right: literal { token = true }
                                            left: call hit { #exprs = 1 }
                                                lValue: lValue { varID = img }
                                                exprs:
                                                    lValue { varID = rect }
578.                var e { vt = double }
                        initExpr: lValue { varID = Math, fieldID = E }
579.                var pi { vt = double }
                        initExpr: lValue { varID = Math, fieldID = PI }
580.                if { #stmts = 1 }
                        expr: (<)
                            right: lValue { varID = eps }
                            left: call abs { #exprs = 1 }
                                lValue: lValue { varID = Math }
                                exprs:
                                    (-)
                                        right: lValue { varID = img, fieldID = x }
                                        left: lValue { varID = rect, fieldID = x }
                        stmts:
581.                        assign (=)
                                lValue: lValue { varID = i }
                                expr: call abs { #exprs = 1 }
                                    lValue: lValue { varID = Math }
                                    exprs:
                                        lValue { varID = i }
582.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call acos { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                unaryOp (neg)
                                    expr: literal { token = 0.5 }
583.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call asin { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (/)
                                    right: literal { token = 2 }
                                    left: call sqrt { #exprs = 1 }
                                        lValue: lValue { varID = Math }
                                        exprs:
                                            literal { token = 3 }
584.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call atan { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (/)
                                    right: call sqrt { #exprs = 1 }
                                        lValue: lValue { varID = Math }
                                        exprs:
                                            literal { token = 2 }
                                    left: literal { token = 1 }
585.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call atan2 { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (-)
                                    right: lValue { varID = img, fieldID = x }
                                    left: call clickX
                                        lValue: lValue { varID = ct }
                                (-)
                                    right: lValue { varID = img, fieldID = y }
                                    left: call clickY
                                        lValue: lValue { varID = ct }
586.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call ceil { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
587.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call cos { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (/)
                                    right: literal { token = 2 }
                                    left: lValue { varID = Math, fieldID = PI }
588.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call cosh { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (*)
                                    right: literal { token = 2 }
                                    left: lValue { varID = Math, fieldID = PI }
589.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call exp { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (+)
                                    right: literal { token = 1 }
                                    left: (*)
                                        right: lValue { varID = Math, fieldID = PI }
                                        left: literal { token = 2 }
590.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call floor { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                unaryOp (neg)
                                    expr: literal { token = 1.67 }
591.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call log { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                literal { token = 32 }
592.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call log10 { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
593.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call max { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = d }
594.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call max { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
595.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call min { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = d }
596.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call min { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
597.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call pow { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = d }
598.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call sin { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
599.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call sinh { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
600.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call sqrt { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
601.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call tan { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
602.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call tanh { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
604.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call compareTo { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = s }
605.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call equals { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = s }
606.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call indexOf { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = s }
607.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call length
                            lValue: lValue { varID = s }
608.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call substring { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = i }
609.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call substring { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = i }
610.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call toLowerCase
                            lValue: lValue { varID = s }
611.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call toUpperCase
                            lValue: lValue { varID = s }
612.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call trim
                            lValue: lValue { varID = s }
614.                var coins { vt = array of GameObj }
615.                var walls { vt = array of GameObj }
616.                var multilineArrayInit { vt = array of int }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
                                literal { token = 3 }
621.                call log { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 1 }
                            literal { token = 2 }
                            literal { token = 3 }
623.                if { #stmts = 1 }
                        expr: (==)
                            right: literal { token = 1 }
                            left: call random { #exprs = 2 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = 1 }
                                    literal { token = 2 }
                        stmts:
624.                        call println { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = "heads" }
627.                call log { #exprs = 4 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 1 }
                            call random { #exprs = 2 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = 1 }
                                    literal { token = 100 }
                            literal { token = 3 }
                            literal { token = 4 }
634.        func ct { #paramVars = 0, vt = void, #stmts = 1 }
                stmts:
636.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world" }
640.        func int { #paramVars = 0, vt = double, #stmts = 1 }
                stmts:
642.                return
                        expr: literal { token = 0 }
645.        func foo { #paramVars = 2, vt = double, #stmts = 1 }
                paramVars:
645.                var i { vt = int, isGlobal = false }
645.                var boolean { vt = GameObj, isGlobal = false }
                stmts:
647.                return
                        expr: literal { token = 0 }
650.        func bar { #paramVars = 2, vt = boolean, #stmts = 1 }
                paramVars:
650.                var s { vt = String, isGlobal = false }
650.                var gameObj { vt = GameObj, isGlobal = false }
                stmts:
653.                return
                        expr: lValue { varID = TRUE }
656.        func Double { #paramVars = 1, vt = int, #stmts = 1 }
                paramVars:
656.                var x { vt = int, isGlobal = false }
                stmts:
658.                return
                        expr: (*)
                            right: lValue { varID = x }
                            left: literal { token = 2 }
662.        func voidFunc { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
662.                var i { vt = int, isGlobal = false }
665.        func func { #paramVars = 0, vt = void, #stmts = 0 }
669.        func FUNC { #paramVars = 0, vt = void, #stmts = 0 }
673.        func AnotherFunc { #paramVars = 0, vt = void, #stmts = 0 }
677.        func anotherfunc { #paramVars = 0, vt = void, #stmts = 0 }
681.        func expectedErrors { #paramVars = 0, vt = void, #stmts = 297 }
                stmts:
683.                var intVar { vt = int }
                        initExpr: literal { token = 1 }
684.                var dblVar { vt = double }
                        initExpr: literal { token = 1.0 }
685.                var boolVar { vt = boolean }
                        initExpr: literal { token = false }
686.                var strVar { vt = String }
                        initExpr: literal { token = "a" }
687.                var objVar { vt = GameObj }
                        initExpr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 10 }
688.                var intArr { vt = array of int }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
                                literal { token = 3 }
689.                var objArr { vt = array of GameObj }
                        initExpr: arrayInit { #exprs = 1 }
                            exprs:
                                lValue { varID = objVar }
692.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call setText { #exprs = 1 }
                            lValue: lValue { varID = objVar }
                            exprs:
                                literal { token = "circle" }
694.                var screen { vt = double }
                        initExpr: call setScreen { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "menu" }
696.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: call setHeight { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 150 }
698.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: call voidFunc
700.                var title { vt = GameObj }
                        initExpr: call setTitle { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "title" }
703.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = intVar }
705.                var b { vt = boolean }
                        initExpr: call intFuncInt { #exprs = 1 }
                            exprs:
                                literal { token = 2 }
707.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = visible }
                        expr: literal { token = 0 }
709.                var s { vt = String }
                        initExpr: lValue { varID = intVar }
711.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = intVar }
714.                var i { vt = int }
                        initExpr: literal { token = 3.4 }
716.                assign (=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 1.2 }
718.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (*)
                            right: literal { token = 3.4 }
                            left: literal { token = 10 }
720.                var j { vt = int }
                        initExpr: (+)
                            right: literal { token = 3.14 }
                            left: literal { token = 5 }
722.                var plancksConst { vt = int }
                        initExpr: literal { token = 6.62e-34 }
724.                var exponentialNumberNoDot { vt = int }
                        initExpr: literal { token = 12e10 }
726.                var exponentialNumberWithDot { vt = int }
                        initExpr: literal { token = 3.42e2 }
728.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = autoDelete }
                        expr: lValue { varID = dblVar }
730.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: literal { token = 3.14 }
732.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = dblVar }
735.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call clicked
                            lValue: lValue { varID = ct }
737.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = x }
                        expr: lValue { varID = boolVar }
739.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = xSpeed }
                        expr: literal { token = false }
741.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = group }
                        expr: lValue { varID = boolVar }
743.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = boolVar }
746.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = objVar, fieldID = group }
748.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = ySpeed }
                        expr: literal { token = "fast" }
750.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = strVar }
752.                var score { vt = GameObj }
                        initExpr: literal { token = "100 pts" }
755.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = objVar }
757.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = width }
                        expr: lValue { varID = objVar }
759.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = objVar }
761.                var circle { vt = String }
                        initExpr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 10 }
764.                var y { vt = int }
                        initExpr: call intFuncInt { #exprs = 1 }
                            exprs:
                                literal { token = 2.3 }
766.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call random { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0.0 }
                                literal { token = 10 }
768.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call random { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = false }
770.                call setBackColorRGB { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "red" }
                            literal { token = 0 }
                            literal { token = 0 }
772.                call setLayer { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = "front" }
774.                call roundDecimal { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 3.14159 }
                            lValue { varID = objVar }
776.                call substring { #exprs = 1 }
                        lValue: lValue { varID = strVar }
                        exprs:
                            lValue { varID = objVar }
779.                call pow { #exprs = 2 }
                        lValue: lValue { varID = Math }
                        exprs:
                            lValue { varID = boolVar }
                            literal { token = 3 }
781.                call dblFuncIntDbl { #exprs = 2 }
                        exprs:
                            literal { token = 0 }
                            literal { token = "pi" }
783.                call containsPoint { #exprs = 2 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            lValue { varID = strVar }
                            lValue { varID = dblVar }
785.                call exp { #exprs = 1 }
                        lValue: lValue { varID = Math }
                        exprs:
                            lValue { varID = objVar }
788.                call align { #exprs = 2 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = "left" }
                            literal { token = 0 }
790.                call boolFuncBoolStringGameObj { #exprs = 3 }
                        exprs:
                            lValue { varID = dblVar }
                            lValue { varID = strVar }
                            lValue { varID = objVar }
792.                call boolFuncBoolStringGameObj { #exprs = 3 }
                        exprs:
                            lValue { varID = strVar }
                            lValue { varID = objVar }
                            lValue { varID = boolVar }
794.                call boolFuncBoolStringGameObj { #exprs = 3 }
                        exprs:
                            lValue { varID = objVar }
                            lValue { varID = strVar }
                            lValue { varID = boolVar }
797.                call align { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            lValue { varID = intVar }
799.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call parseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 123 }
801.                call circle { #exprs = 4 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 1 }
                            literal { token = 1 }
803.                call setText { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = 1 }
805.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 1.0 }
807.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = boolVar }
809.                call align { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = true }
811.                call equals { #exprs = 1 }
                        lValue: lValue { varID = strVar }
                        exprs:
                            lValue { varID = objVar }
814.                call boolFuncBoolStringGameObj { #exprs = 3 }
                        exprs:
                            lValue { varID = boolVar }
                            lValue { varID = strVar }
                            literal { token = 42 }
816.                call hit { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = 0.0 }
818.                call hit { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = false }
820.                call hit { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = "the wall" }
823.                if { #stmts = 1 }
                        expr: (>)
                            right: literal { token = 0 }
                            left: call intFuncInt
                        stmts:
824.                        call voidFunc
826.                call dblFuncIntDbl
828.                call circle
                        lValue: lValue { varID = ct }
830.                call rect { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 10 }
832.                call circle { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
834.                call voidFunc { #exprs = 1 }
                        exprs:
                            literal { token = 1 }
836.                call setBackColor { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 255 }
                            literal { token = 0 }
                            literal { token = 0 }
838.                call delete { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = true }
840.                call setText { #exprs = 2 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = "circle" }
                            literal { token = "green" }
843.                var k { vt = int }
                        initExpr: (/)
                            right: literal { token = 2 }
                            left: literal { token = 3 }
845.                call random { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (/)
                                right: lValue { varID = intVar }
                                left: lValue { varID = intVar }
                            lValue { varID = intVar }
847.                assign (=)
                        lValue: lValue { varID = x }
                        expr: (+)
                            right: literal { token = 1 }
                            left: lValue { varID = x }
849.                for { #stmts = 1 }
849.                    initStmt: assign (=)
                            lValue: lValue { varID = x }
                            expr: literal { token = 0 }
                        expr: (<)
                            right: literal { token = 1 }
                            left: lValue { varID = x }
849.                    nextStmt: assign (++)
                            lValue: lValue { varID = x }
                        stmts:
850.                        call voidFunc
852.                call foo
854.                var j { vt = int }
                        initExpr: literal { token = 3 }
856.                var uninitializedVar { vt = int }
858.                if { #stmts = 1 }
                        expr: (<)
                            right: literal { token = 0 }
                            left: lValue { varID = uninitializedVar }
                        stmts:
859.                        assign (=)
                                lValue: lValue { varID = uninitializedVar }
                                expr: literal { token = 0 }
860.                var g { vt = GameObj }
862.                assign (=)
                        lValue: lValue { varID = g, fieldID = xSpeed }
                        expr: literal { token = 1 }
865.                var n
                        initExpr: literal { token = 100 }
867.                var gameOver
                        initExpr: literal { token = false }
869.                var r { vt = GameObj }
                        initExpr: call rectangle { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 10 }
                                literal { token = 10 }
871.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = isVisible }
                        expr: literal { token = false }
873.                call foo
                        lValue: lValue { varID = objVar }
876.                var ch
                        initExpr: literal { token = "A" }
878.                var obj
880.                call Circle { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 10 }
882.                call atan2 { #exprs = 2 }
                        lValue: lValue { varID = math }
                        exprs:
                            (-)
                                right: lValue { varID = r, fieldID = x }
                                left: call clickX
                                    lValue: lValue { varID = ct }
                            (-)
                                right: lValue { varID = r, fieldID = y }
                                left: call clickY
                                    lValue: lValue { varID = ct }
884.                call voidfunC
886.                assign (=)
                        lValue: lValue { varID = intvar }
                        expr: literal { token = 2 }
889.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: lValue { varID = Null }
891.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = NULL }
893.                while { #stmts = 1 }
                        expr: lValue { varID = True }
                        stmts:
894.                        call voidFunc
896.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = TRUE }
898.                if { #stmts = 1 }
                        expr: lValue { varID = False }
                        stmts:
899.                        call voidFunc
901.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = clickable }
                        expr: lValue { varID = FALSE }
904.                if { #stmts = 1 }
                        expr: (=)
                            right: literal { token = 0 }
                            left: lValue { varID = i }
                        stmts:
905.                        assign (=)
                                lValue: lValue { varID = i }
                                expr: literal { token = 0 }
907.                var intArr2 { vt = array of int }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
                                literal { token = 3.14 }
909.                var dblArr { vt = array of double }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = "two" }
                                literal { token = 3.14 }
911.                var strArr { vt = array of String }
                        initExpr: newArray { vt = GameObj }
                            lengthExpr: literal { token = 100 }
913.                var boolArr { vt = array of boolean }
                        initExpr: call intArrFuncInt { #exprs = 1 }
                            exprs:
                                literal { token = 10 }
915.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: newArray { vt = int }
                            lengthExpr: literal { token = 1.5 }
918.                assign (++)
                        lValue: lValue { varID = boolVar }
920.                assign (++)
                        lValue: lValue { varID = strVar }
922.                assign (++)
                        lValue: lValue { varID = objVar }
924.                assign (--)
                        lValue: lValue { varID = boolVar }
926.                assign (--)
                        lValue: lValue { varID = strVar }
928.                assign (--)
                        lValue: lValue { varID = objVar }
931.                forArray { #stmts = 1 }
931.                    var: var x { vt = int, isGlobal = false }
                        expr: lValue { varID = intVar }
                        stmts:
932.                        call voidFunc
934.                forArray { #stmts = 1 }
934.                    var: var x { vt = double, isGlobal = false }
                        expr: lValue { varID = dblVar }
                        stmts:
935.                        call voidFunc
937.                forArray { #stmts = 1 }
937.                    var: var x { vt = boolean, isGlobal = false }
                        expr: lValue { varID = boolVar }
                        stmts:
938.                        call voidFunc
940.                forArray { #stmts = 1 }
940.                    var: var x { vt = String, isGlobal = false }
                        expr: lValue { varID = strVar }
                        stmts:
941.                        call voidFunc
943.                forArray { #stmts = 1 }
943.                    var: var x { vt = GameObj, isGlobal = false }
                        expr: lValue { varID = objVar }
                        stmts:
944.                        call voidFunc
946.                forArray { #stmts = 1 }
946.                    var: var x { vt = GameObj, isGlobal = false }
                        expr: lValue { varID = strVar }
                        stmts:
947.                        call voidFunc
950.                forArray { #stmts = 1 }
950.                    var: var x { vt = double, isGlobal = false }
                        expr: lValue { varID = intArr }
                        stmts:
951.                        call voidFunc
953.                forArray { #stmts = 1 }
953.                    var: var x { vt = String, isGlobal = false }
                        expr: lValue { varID = objArr }
                        stmts:
954.                        call voidFunc
957.                for { #stmts = 1 }
                        expr: lValue { varID = intVar }
                        stmts:
958.                        call voidFunc
960.                for { #stmts = 1 }
                        expr: lValue { varID = dblVar }
                        stmts:
961.                        call voidFunc
963.                for { #stmts = 1 }
                        expr: lValue { varID = strVar }
                        stmts:
964.                        call voidFunc
966.                for { #stmts = 1 }
                        expr: lValue { varID = objVar }
                        stmts:
967.                        call voidFunc
969.                doWhile { #stmts = 1 }
                        expr: lValue { varID = intVar }
                        stmts:
970.                        call voidFunc
975.                while { #stmts = 1 }
                        expr: lValue { varID = dblVar }
                        stmts:
976.                        call voidFunc
978.                while { #stmts = 1 }
                        expr: lValue { varID = strVar }
                        stmts:
979.                        call voidFunc
981.                while { #stmts = 1 }
                        expr: lValue { varID = objVar }
                        stmts:
982.                        call voidFunc
985.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = intVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = intVar }
                                stmts:
989.                                call voidFunc
                        stmts:
986.                        call voidFunc
991.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = dblVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = dblVar }
                                stmts:
995.                                call voidFunc
                        stmts:
992.                        call voidFunc
997.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = strVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = strVar }
                                stmts:
1001.                                call voidFunc
                        stmts:
998.                        call voidFunc
1003.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = objVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = objVar }
                                stmts:
1007.                                call voidFunc
                        stmts:
1004.                        call voidFunc
1010.                var n
                        initExpr: literal { token = 100 }
1012.                var d
                        initExpr: literal { token = 100.0 }
1014.                var b
                        initExpr: literal { token = false }
1017.                assign (+=)
                        lValue: lValue { varID = strVar }
                        expr: literal { token = "hello" }
1019.                assign (-=)
                        lValue: lValue { varID = boolVar }
                        expr: literal { token = 1 }
1021.                assign (*=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = objVar }
1023.                assign (/=)
                        lValue: lValue { varID = objVar }
                        expr: literal { token = 3.14 }
1025.                assign (+=)
                        lValue: lValue { varID = intVar }
                        expr: literal { token = "hello" }
1027.                assign (-=)
                        lValue: lValue { varID = dblVar }
                        expr: call rect { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 1 }
                                literal { token = 2 }
1029.                assign (*=)
                        lValue: lValue { varID = intVar }
                        expr: literal { token = false }
1031.                assign (/=)
                        lValue: lValue { varID = dblVar }
                        expr: literal { token = true }
1033.                assign (+=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
1035.                assign (-=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
1037.                assign (*=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
1039.                assign (/=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
1041.                if { #stmts = 1 }
                        expr: (==)
                            right: literal { token = "s" }
                            left: lValue { varID = strVar }
                        stmts:
1042.                        call voidFunc
1045.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (^)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
1047.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (&)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
1049.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (|)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
1051.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (>>)
                            right: literal { token = 2 }
                            left: lValue { varID = i }
1053.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (<<)
                            right: literal { token = 2 }
                            left: lValue { varID = i }
1055.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (>>>)
                            right: literal { token = 2 }
                            left: lValue { varID = i }
1058.                var ct { vt = String }
1060.                var String { vt = int }
1062.                var GameObj { vt = double }
1064.                var lowercasefirst { vt = int }
                        initExpr: literal { token = 1 }
1066.                var lowerCaseFirst { vt = int }
                        initExpr: literal { token = 10 }
1067.                var upperCaseFirst { vt = GameObj }
                        initExpr: lValue { varID = objVar }
1069.                var uppercasefirst { vt = GameObj }
                        initExpr: literal { token = null }
1071.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: (+)
                            right: literal { token = 1 }
                            left: lValue { varID = dblvar }
1075.                var DouBle { vt = int }
1077.                var BooLean { vt = double }
1079.                var string { vt = boolean }
1082.                assign (=)
                        lValue: lValue { varID = intVar }
                            indexExpr: literal { token = 0 }
                        expr: literal { token = 1 }
1085.                assign (=)
                        lValue: lValue { varID = intArr }
                            indexExpr: lValue { varID = dblVar }
                        expr: literal { token = 1 }
1088.                var numObjs { vt = int }
                        initExpr: lValue { varID = objArr, fieldID = Length }
1091.                var len { vt = int }
                        initExpr: lValue { varID = strVar, fieldID = length }
1093.                var size { vt = int }
                        initExpr: lValue { varID = intVar, fieldID = size }
1096.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: unaryOp (neg)
                            expr: lValue { varID = objVar }
1099.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = visible }
                        expr: unaryOp (not)
                            expr: lValue { varID = intVar }
1102.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: (+)
                            right: lValue { varID = intArr }
                            left: lValue { varID = strVar }
1104.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: (+)
                            right: lValue { varID = strVar }
                            left: lValue { varID = intArr }
1107.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (+)
                            right: unaryOp (not)
                                expr: lValue { varID = boolVar }
                            left: lValue { varID = boolVar }
1109.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: (+)
                            right: lValue { varID = objVar }
                            left: lValue { varID = objVar }
1111.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: (+)
                            right: literal { token = 1 }
                            left: lValue { varID = intArr }
1113.                assign (=)
                        lValue: lValue { varID = objArr }
                        expr: (+)
                            right: lValue { varID = objVar }
                            left: lValue { varID = objArr }
1116.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: (-)
                            right: lValue { varID = intVar }
                            left: lValue { varID = strVar }
1118.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (*)
                            right: literal { token = 0 }
                            left: lValue { varID = boolVar }
1120.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: (/)
                            right: literal { token = 2 }
                            left: lValue { varID = objVar }
1122.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: (%)
                            right: literal { token = 2 }
                            left: lValue { varID = intArr }
1125.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: (&&)
                            right: literal { token = 1001 }
                            left: lValue { varID = intVar }
1127.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (||)
                            right: literal { token = 1010 }
                            left: lValue { varID = boolVar }
1130.                if { #stmts = 1 }
                        expr: (<)
                            right: lValue { varID = boolVar }
                            left: lValue { varID = boolVar }
                        stmts:
1131.                        call voidFunc
1133.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (>)
                            right: lValue { varID = dblVar }
                            left: lValue { varID = objVar }
1135.                while { #stmts = 1 }
                        expr: (<=)
                            right: lValue { varID = intVar }
                            left: lValue { varID = boolVar }
                        stmts:
1136.                        call voidFunc
1139.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: (>=)
                            right: lValue { varID = intArr }
                            left: lValue { varID = dblVar }
1142.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: (/)
                            right: literal { token = 2 }
                            left: literal { token = 1 }
1144.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: (/)
                            right: literal { token = 8 }
                            left: literal { token = 3 }
1147.                var intVar { vt = int }
                        initExpr: literal { token = 13 }
1149.                var objArr { vt = array of GameObj }
                        initExpr: newArray { vt = GameObj }
                            lengthExpr: literal { token = 10 }
1152.                call update
1154.                call start
1156.                call onMousePress { #exprs = 2 }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
1159.                call println { #exprs = 1 }
                        exprs:
                            literal { token = "Hello world" }
1161.                call setHeight { #exprs = 1 }
                        exprs:
                            literal { token = 150 }
1164.                call intFunc
1166.                call dblFuncIntDbl { #exprs = 2 }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0.1 }
1169.                call foo
                        lValue: lValue { varID = GameObj }
1171.                call foo
                        lValue: lValue { varID = String }
1173.                call foo
                        lValue: lValue { varID = Code12Program }
1175.                call foo
                        lValue: lValue { varID = Code12Program }
1178.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                            indexExpr: literal { token = 0 }
                        exprs:
                            lValue { varID = objVar }
1180.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: call tan { #exprs = 1 }
                            lValue: lValue { varID = Math }
                                indexExpr: lValue { varID = intVar }
                            exprs:
                                literal { token = 0 }
1183.                call voidFunc
                        lValue: lValue { varID = intArr }
1186.                call voidFunc
                        lValue: lValue { varID = intArr }
                            indexExpr: literal { token = 0 }
1188.                call foo
                        lValue: lValue { varID = boolVar }
1191.                call prnitln
                        lValue: lValue { varID = ct }
1193.                call circ { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 10 }
1196.                call foo
                        lValue: lValue { varID = objArr }
                            indexExpr: literal { token = 0 }
1198.                call foo
                        lValue: lValue { varID = Math }
1201.                call intFuncInt
1203.                call dblFuncIntDbl
1205.                call log
                        lValue: lValue { varID = ct }
1207.                call atan2
                        lValue: lValue { varID = Math }
1209.                call boolFuncBoolStringGameObj { #exprs = 2 }
                        exprs:
                            literal { token = false }
                            literal { token = "" }
1211.                call rect { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 10 }
1213.                call voidFunc { #exprs = 1 }
                        exprs:
                            lValue { varID = intVar }
1215.                call print { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "intVar =" }
                            lValue { varID = intVar }
1217.                call atan { #exprs = 2 }
                        lValue: lValue { varID = Math }
                        exprs:
                            literal { token = 4 }
                            literal { token = 3 }
1219.                call logm { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = intVar }
                            lValue { varID = objVar }
1221.                var indent { vt = String }
                        initExpr: literal { token = "2 Tabs" }
1223.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "1 Space + 2 Tabs" }
1225.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "2 Tabs" }
1227.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "8 Spaces" }
1229.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "2 Tabs" }
1231.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "4 Spaces + 1 Tab" }
1233.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "2 Tabs" }
1235.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1237.                        call voidFunc
1239.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1241.                        call voidFunc
1242.                if { #stmts = 2 }
                        expr: literal { token = false }
                        stmts:
1245.                        call voidFunc
1246.                        call voidFunc
1248.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1249.                        call voidFunc
1251.                call voidFunc
1252.                if { #stmts = 2 }
                        expr: literal { token = false }
                        stmts:
1254.                        call voidFunc
1256.                        call voidFunc
1258.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1261.                        call voidFunc
1263.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1265.                        call voidFunc
1268.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
1272.                        call voidFunc
                        stmts:
1269.                        call voidFunc
1273.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
1277.                        call voidFunc
                        stmts:
1274.                        call voidFunc
1278.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
1281.                        call voidFunc
                        stmts:
1279.                        call voidFunc
1283.                call voidFunc
1284.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
1289.                        call voidFunc
                        stmts:
1285.                        call voidFunc
1291.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: literal { token = false }
                                stmts:
1295.                                call voidFunc
                        stmts:
1292.                        call voidFunc
1296.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: literal { token = false }
                                stmts:
1301.                                call voidFunc
                        stmts:
1297.                        call voidFunc
1303.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 1 }
                                expr: literal { token = false }
                                elseStmts:
1309.                                call voidFunc
                                stmts:
1307.                                call voidFunc
                        stmts:
1304.                        call voidFunc
1310.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 1 }
                                expr: literal { token = false }
                                elseStmts:
1316.                                call voidFunc
                                stmts:
1313.                                call voidFunc
                        stmts:
1311.                        call voidFunc
1317.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 1 }
                                expr: literal { token = false }
                                elseStmts:
                                    if { #elseStmts = 1, #stmts = 1 }
                                        expr: literal { token = false }
                                        elseStmts:
1326.                                        call voidFunc
                                        stmts:
1323.                                        call voidFunc
                                stmts:
1320.                                call voidFunc
                        stmts:
1318.                        call voidFunc
1327.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1328.                        if { #elseStmts = 1, #stmts = 1 }
                                expr: literal { token = false }
                                elseStmts:
1332.                                call voidFunc
                                stmts:
1329.                                call voidFunc
1333.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1335.                        if { #elseStmts = 1, #stmts = 1 }
                                expr: literal { token = false }
                                elseStmts:
1341.                                call voidFunc
                                stmts:
1337.                                call voidFunc
1345.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1346.                        if { #elseStmts = 1, #stmts = 1 }
                                expr: literal { token = false }
                                elseStmts:
                                    if { #stmts = 1 }
                                        expr: literal { token = false }
                                        stmts:
1350.                                        call voidFunc
                                stmts:
1347.                                call voidFunc
1351.                for { #stmts = 1 }
1351.                    initStmt: var ii { vt = int, isGlobal = false }
                            initExpr: literal { token = 0 }
                        expr: (<)
                            right: literal { token = 100 }
                            left: lValue { varID = ii }
1351.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
1353.                        call voidFunc
1354.                for { #stmts = 1 }
1354.                    initStmt: var ii { vt = int, isGlobal = false }
                            initExpr: literal { token = 0 }
                        expr: (<)
                            right: literal { token = 100 }
                            left: lValue { varID = ii }
1354.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
1357.                        call voidFunc
1359.                for { #stmts = 1 }
1359.                    initStmt: var ii { vt = int, isGlobal = false }
                            initExpr: literal { token = 0 }
                        expr: (<)
                            right: literal { token = 100 }
                            left: lValue { varID = ii }
1359.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
1362.                        call voidFunc
1364.                while { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1366.                        call voidFunc
1367.                while { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1370.                        call voidFunc
1372.                while { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1373.                        call voidFunc
1375.                call voidFunc
1376.                doWhile { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1378.                        call voidFunc
1380.                doWhile { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1383.                        call voidFunc
1386.                doWhile { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1387.                        call voidFunc
1390.                var x1 { vt = int }
1392.                var x2 { vt = int }
1392.                var x3 { vt = int }
1393.                var circle { vt = GameObj }
                        initExpr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 10 }
1399.                call log { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 1 }
                            literal { token = 2 }
                            literal { token = 3 }
1400.                var multiLineArrInit { vt = array of int }
                        initExpr: arrayInit { #exprs = 2 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
1403.                var multiLineArrDec { vt = array of int }
                        initExpr: newArray { vt = int }
                            lengthExpr: call random { #exprs = 2 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = 1 }
                                    literal { token = 10 }
1408.                if { #elseStmts = 1, #stmts = 1 }
                        expr: (>)
                            right: literal { token = 3 }
                            left: call random { #exprs = 2 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = 1 }
                                    literal { token = 2 }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: (>)
                                    right: literal { token = 3 }
                                    left: call random { #exprs = 2 }
                                        lValue: lValue { varID = ct }
                                        exprs:
                                            literal { token = 1 }
                                            literal { token = 2 }
                                stmts:
1413.                                call voidFunc
                        stmts:
1409.                        call voidFunc
1416.                while { #stmts = 1 }
                        expr: (>)
                            right: literal { token = 3 }
                            left: call random { #exprs = 2 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = 1 }
                                    literal { token = 2 }
                        stmts:
1417.                        call voidFunc
1418.                doWhile { #stmts = 1 }
                        expr: (<)
                            right: literal { token = 0 }
                            left: call max { #exprs = 2 }
                                lValue: lValue { varID = Math }
                                exprs:
                                    literal { token = 1 }
                                    literal { token = 0 }
                        stmts:
1419.                        call voidFunc
1425.                for { #stmts = 1 }
                        expr: (<)
                            right: literal { token = 0 }
                            left: call max { #exprs = 2 }
                                lValue: lValue { varID = Math }
                                exprs:
                                    literal { token = 1 }
                                    literal { token = 0 }
                        stmts:
1426.                        call voidFunc
1427.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1428.                        call voidFunc
1430.                call voidFunc
1431.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
1434.                        call voidFunc
                        stmts:
1432.                        call voidFunc
1436.                call voidFunc
1437.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: literal { token = false }
                                stmts:
1440.                                call voidFunc
                        stmts:
1438.                        call voidFunc
1442.                call voidFunc
1443.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1444.                        call voidFunc
1446.                while { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1447.                        call voidFunc
1448.                for { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1449.                        call voidFunc
1451.                call voidFunc
1452.                while { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1453.                        call voidFunc
1455.                call voidFunc
1465.                var privateInt { vt = int }
                        initExpr: literal { token = 0 }
1467.                var publicDouble { vt = double }
                        initExpr: literal { token = 0 }
1469.                var halfIntVar { vt = double }
                        initExpr: (/)
                            right: literal { token = 2 }
                            left: cast { vt = int }
                                expr: lValue { varID = intVar }
1470.                if
                        expr: literal { token = false }
1472.                var bogusVarInit { vt = int }
                        initExpr: literal { token = 0 }
1473.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if
                                expr: literal { token = false }
                        stmts:
1474.                        call voidFunc
1477.                var bogusVarDecl { vt = int }
1478.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1479.                        call voidFunc
1482.                var bogusArrayInit { vt = array of int }
                        initExpr: arrayInit { #exprs = 1 }
                            exprs:
                                literal { token = 0 }
1483.                while
                        expr: literal { token = false }
1485.                var bogusArrayDecl { vt = array of int }
1519.        func myFunc { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
1519.                var myVar { vt = int, isGlobal = false }
1523.        func update { #paramVars = 0, vt = GameObj, #stmts = 0 }
1527.        func onMousePress { #paramVars = 3, vt = String, #stmts = 0 }
                paramVars:
1527.                var obj { vt = GameObj, isGlobal = false }
1527.                var x { vt = double, isGlobal = false }
1527.                var y { vt = double, isGlobal = false }
1531.        func onMousePress { #paramVars = 2, vt = void, #stmts = 0 }
                paramVars:
1531.                var x { vt = double, isGlobal = false }
1531.                var y { vt = double, isGlobal = false }
1535.        func onKeyPress { #paramVars = 3, vt = void, #stmts = 0 }
                paramVars:
1535.                var obj { vt = GameObj, isGlobal = false }
1535.                var x { vt = double, isGlobal = false }
1535.                var y { vt = double, isGlobal = false }
1539.        func onKeyRelease { #paramVars = 0, vt = void, #stmts = 0 }
1543.        func onMousePress { #paramVars = 3, vt = void, #stmts = 0 }
                paramVars:
1543.                var obj { vt = boolean, isGlobal = false }
1543.                var x { vt = double, isGlobal = false }
1543.                var y { vt = double, isGlobal = false }
1547.        func onMouseDrag { #paramVars = 3, vt = void, #stmts = 0 }
                paramVars:
1547.                var obj { vt = GameObj, isGlobal = false }
1547.                var x { vt = int, isGlobal = false }
1547.                var y { vt = double, isGlobal = false }
1551.        func onMouseRelease { #paramVars = 3, vt = void, #stmts = 0 }
                paramVars:
1551.                var obj { vt = GameObj, isGlobal = false }
1551.                var x { vt = double, isGlobal = false }
1551.                var y { vt = String, isGlobal = false }
1555.        func onKeyPress { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
1555.                var keyName { vt = double, isGlobal = false }
1559.        func onKeyRelease { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
1559.                var keyName { vt = int, isGlobal = false }
1563.        func onCharTyped { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
1563.                var keyName { vt = GameObj, isGlobal = false }
1567.        func overIndentedFunc { #paramVars = 0, vt = void, #stmts = 0 }
1571.        func underIndentedFunc { #paramVars = 0, vt = void, #stmts = 0 }
1574.        func funcWithUnindentedBody { #paramVars = 0, vt = int, #stmts = 1 }
                stmts:
1577.                return
                        expr: literal { token = 0 }
1579.        func multiLineFuncDef { #paramVars = 2, vt = void, #stmts = 0 }
                paramVars:
1579.                var arg1 { vt = int, isGlobal = false }
1581.                var arg2 { vt = int, isGlobal = false }
1584.        func multilineReturnFunc { #paramVars = 0, vt = int, #stmts = 1 }
                stmts:
1588.                return
                        expr: call max { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
1590.        func missingCurlyBracketFunc { #paramVars = 0, vt = void, stmts = false }
1592.        func lastFunc { #paramVars = 0, vt = void, #stmts = 0 }
        vars:
  7.        var myVar { vt = int, isGlobal = true }
                initExpr: literal { token = 1 }
  9.        var button { vt = GameObj, isGlobal = true }
                initExpr: call text { #exprs = 4 }
                    lValue: lValue { varID = ct }
                    exprs:
                        literal { token = "START" }
                        literal { token = 0 }
                        literal { token = 0 }
                        literal { token = 10 }
 11.        var intResult { vt = int, isGlobal = true }
                initExpr: call intFunc
 13.        var overIndentedInstanceVar { vt = int, isGlobal = true }
 15.        var underIndentedInstanceVar { vt = int, isGlobal = true }
 16.        var classLevelMultilineIntArray1 { vt = array of int, isGlobal = true }
                initExpr: arrayInit { #exprs = 2 }
                    exprs:
                        literal { token = 1 }
                        literal { token = 2 }
 19.        var classLevelMultilineIntArray2 { vt = array of int, isGlobal = true }
                initExpr: arrayInit { #exprs = 3 }
                    exprs:
                        literal { token = 1 }
                        literal { token = 2 }
                        literal { token = 3 }
 23.        var classLevelMultilineIntArray3 { vt = array of int, isGlobal = true }
                initExpr: newArray { vt = int }
                    lengthExpr: call max { #exprs = 2 }
                        lValue: lValue { varID = Math }
                        exprs:
                            literal { token = 1 }
                            literal { token = 2 }
 27.        var classLevelVarTypeMismatchIntDouble { vt = int, isGlobal = true }
                initExpr: literal { token = 0.1 }
 29.        var MAX_ENEMIES { vt = int, isConst = true, isGlobal = true }
                initExpr: literal { token = 100 }
 30.        var numEnemies { vt = int, isGlobal = true }
                initExpr: call min { #exprs = 2 }
                    lValue: lValue { varID = Math }
                    exprs:
                        literal { token = 1000 }
                        lValue { varID = MAX_ENEMIES }
 31.        var doubleArr { vt = array of double, isGlobal = true }
                initExpr: arrayInit { #exprs = 3 }
                    exprs:
                        literal { token = 1.0 }
                        literal { token = 2.0 }
                        literal { token = 3.0 }
 34.        var leftWall { vt = GameObj, isGlobal = true }
 34.        var rightWall { vt = GameObj, isGlobal = true }
 34.        var topWall { vt = GameObj, isGlobal = true }
 34.        var bottomWall { vt = GameObj, isGlobal = true }
 35.        var enemies { vt = array of GameObj, isGlobal = true }
 36.        var friends { vt = array of GameObj, isGlobal = true }
                initExpr: newArray { vt = GameObj }
                    lengthExpr: lValue { varID = MAX_ENEMIES }
 37.        var myPrivateVar { vt = int, isGlobal = true }
631.        var newWidth { vt = double, isGlobal = true }
                initExpr: call getWidth
                    lValue: lValue { varID = ct }
