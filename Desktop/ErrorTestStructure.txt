    program ErrorTest { #funcs = 48, #vars = 20 }
        funcs:
 40.        func main { isStatic = true, vt = void, #paramVars = 1, isPublic = true, #stmts = 1 }
                paramVars:
 40.                var args { vt = array of String, isGlobal = false }
                stmts:
 43.                call run { #exprs = 1 }
                        lValue: lValue { varID = Code12 }
                        exprs:
                            new ErrorTest
 48.        func emptyFunc { #paramVars = 0, vt = void, #stmts = 0 }
 51.        func voidFunc { #paramVars = 0, vt = void, #stmts = 1 }
                stmts:
 53.                var i { vt = int }
                        initExpr: literal { token = 0 }
 55.        func intFunc { #paramVars = 0, vt = int, #stmts = 2 }
                stmts:
 57.                var i { vt = int }
                        initExpr: literal { token = 1 }
 58.                return
                        expr: lValue { varID = i }
 60.        func dblFunc { #paramVars = 0, vt = double, #stmts = 2 }
                stmts:
 62.                var d { vt = double }
                        initExpr: literal { token = 0.0 }
 63.                return
                        expr: lValue { varID = d }
 65.        func boolFunc { #paramVars = 0, vt = boolean, #stmts = 2 }
                stmts:
 67.                var b { vt = boolean }
                        initExpr: literal { token = true }
 68.                return
                        expr: lValue { varID = b }
 70.        func strFunc { #paramVars = 0, vt = String, #stmts = 2 }
                stmts:
 72.                var s { vt = String }
                        initExpr: literal { token = "" }
 73.                return
                        expr: lValue { varID = s }
 75.        func gObjFunc { #paramVars = 0, vt = GameObj, #stmts = 1 }
                stmts:
 77.                return
                        expr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0.0 }
                                literal { token = 0.0 }
                                literal { token = 1.0 }
 79.        func intArrFuncInt { #paramVars = 1, vt = array of int, #stmts = 1 }
                paramVars:
 79.                var n { vt = int, isGlobal = false }
                stmts:
 81.                return
                        expr: newArray { vt = int }
                            lengthExpr: lValue { varID = n }
 83.        func intFuncInt { #paramVars = 1, vt = int, #stmts = 1 }
                paramVars:
 83.                var i { vt = int, isGlobal = false }
                stmts:
 85.                return
                        expr: (+)
                            right: literal { token = 1 }
                            left: (*)
                                right: literal { token = 2 }
                                left: lValue { varID = i }
 87.        func dblFuncIntDbl { #paramVars = 2, vt = double, #stmts = 1 }
                paramVars:
 87.                var i { vt = int, isGlobal = false }
 87.                var d { vt = double, isGlobal = false }
                stmts:
 89.                return
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
 91.        func boolFuncBoolStringGameObj { #paramVars = 3, vt = boolean, #stmts = 1 }
                paramVars:
 91.                var b { vt = boolean, isGlobal = false }
 91.                var s { vt = String, isGlobal = false }
 91.                var g { vt = GameObj, isGlobal = false }
                stmts:
 93.                return
                        expr: (&&)
                            right: lValue { varID = g, fieldID = visible }
                            left: (&&)
                                right: call equals { #exprs = 1 }
                                    lValue: lValue { varID = s }
                                    exprs:
                                        literal { token = "" }
                                left: lValue { varID = b }
 95.        func recursiveFunc { #paramVars = 1, vt = int, #stmts = 2 }
                paramVars:
 95.                var i { vt = int, isGlobal = false }
                stmts:
 97.                if { #stmts = 1 }
                        expr: (<=)
                            right: literal { token = 0 }
                            left: lValue { varID = i }
                        stmts:
 98.                        return
                                expr: literal { token = 0 }
 99.                return
                        expr: (+)
                            right: call recursiveFunc { #exprs = 1 }
                                exprs:
                                    (-)
                                        right: literal { token = 1 }
                                        left: lValue { varID = i }
                            left: literal { token = 1 }
101.        func multiLineFuncDecl { #paramVars = 3, vt = void, #stmts = 1 }
                paramVars:
101.                var arg1 { vt = int, isGlobal = false }
102.                var arg2 { vt = double, isGlobal = false }
103.                var arg3 { vt = boolean, isGlobal = false }
                stmts:
105.                call log { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = arg1 }
                            lValue { varID = arg2 }
                            lValue { varID = arg3 }
109.        func start { #paramVars = 0, isPublic = true, vt = int, #stmts = 412 }
                stmts:
113.                var LIMIT { vt = int, isConst = true }
                        initExpr: literal { token = 100 }
115.                var i { vt = int }
                        initExpr: literal { token = 3 }
116.                assign (=)
                        lValue: lValue { varID = i }
                        expr: unaryOp (neg)
                            expr: literal { token = 5 }
117.                assign (++)
                        lValue: lValue { varID = i }
118.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (+)
                            right: literal { token = 1 }
                            left: lValue { varID = i }
119.                assign (+=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 1 }
120.                assign (-=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 2 }
121.                assign (*=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 3 }
122.                assign (/=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 4 }
123.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intFunc
124.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intFuncInt { #exprs = 1 }
                            exprs:
                                (-)
                                    right: (*)
                                        right: lValue { varID = i }
                                        left: literal { token = 345 }
                                    left: (-)
                                        right: parens
                                            expr: (+)
                                                right: lValue { varID = i }
                                                left: lValue { varID = i }
                                        left: lValue { varID = i }
125.                var foo { vt = int }
                        initExpr: (+)
                            right: literal { token = 4 }
                            left: lValue { varID = i }
126.                var score { vt = int }
                        initExpr: literal { token = 500 }
127.                var j { vt = int }
127.                var k { vt = int }
128.                var exponentialNumberNoDot { vt = double }
                        initExpr: literal { token = 12e10 }
129.                var exponentialNumberWithDot { vt = double }
                        initExpr: literal { token = 3.42e2 }
130.                var expontialNumberWithDecimalPlaces { vt = double }
                        initExpr: literal { token = 6.62e-34 }
131.                var d { vt = double }
                        initExpr: literal { token = 3.14 }
132.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 100 }
133.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = .5 }
134.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 1.2345e6 }
135.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 1.2345e+67 }
136.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = .12e0 }
137.                assign (=)
                        lValue: lValue { varID = d }
                        expr: unaryOp (neg)
                            expr: literal { token = .123e-123 }
138.                assign (=)
                        lValue: lValue { varID = d }
                        expr: unaryOp (neg)
                            expr: literal { token = .5 }
139.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: literal { token = 2 }
                            left: lValue { varID = d }
140.                assign (++)
                        lValue: lValue { varID = d }
141.                assign (+=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 0.5 }
142.                assign (-=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 7 }
143.                assign (*=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 8 }
144.                assign (/=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 8.0 }
145.                var d2 { vt = double }
                        initExpr: literal { token = 3 }
146.                var d3 { vt = double }
                        initExpr: (+)
                            right: (*)
                                right: parens
                                    expr: (+)
                                        right: lValue { varID = d }
                                        left: lValue { varID = d2 }
                                left: literal { token = 2 }
                            left: lValue { varID = d }
147.                var x1 { vt = double }
147.                var x2 { vt = double }
147.                var y1 { vt = double }
147.                var y2 { vt = double }
148.                assign (=)
                        lValue: lValue { varID = x1 }
                        expr: literal { token = 1 }
149.                assign (=)
                        lValue: lValue { varID = x2 }
                        expr: literal { token = 2.0 }
150.                assign (=)
                        lValue: lValue { varID = y1 }
                        expr: literal { token = .5e+1 }
151.                assign (=)
                        lValue: lValue { varID = y2 }
                        expr: unaryOp (neg)
                            expr: literal { token = .5e-1 }
152.                var eps { vt = double }
                        initExpr: literal { token = 1e-4 }
153.                var name { vt = String }
                        initExpr: literal { token = "Einstein" }
154.                var b { vt = boolean }
                        initExpr: literal { token = true }
155.                var b2 { vt = boolean }
                        initExpr: literal { token = false }
156.                var b3 { vt = boolean }
                        initExpr: (||)
                            right: lValue { varID = b2 }
                            left: lValue { varID = b }
157.                var s { vt = String }
                        initExpr: literal { token = "A string variable" }
158.                assign (=)
                        lValue: lValue { varID = s }
                        expr: lValue { varID = s }
159.                assign (=)
                        lValue: lValue { varID = s }
                        expr: literal { token = null }
161.                var colors { vt = array of String }
                        initExpr: arrayInit { #exprs = 5 }
                            exprs:
                                literal { token = "black" }
                                literal { token = "white" }
                                literal { token = "red" }
                                literal { token = "green" }
                                literal { token = "blue" }
162.                assign (=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 100 }
163.                var strArr { vt = array of String }
                        initExpr: newArray { vt = String }
                            lengthExpr: lValue { varID = i }
164.                assign (=)
                        lValue: lValue { varID = strArr }
                        expr: lValue { varID = colors }
165.                var intArr { vt = array of int }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
                                literal { token = 3 }
166.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: newArray { vt = int }
                            lengthExpr: literal { token = 100 }
167.                var intArr2 { vt = array of int }
                        initExpr: newArray { vt = int }
                            lengthExpr: call length
                                lValue: lValue { varID = s }
168.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: lValue { varID = intArr2 }
169.                var dblArr { vt = array of double }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1.1 }
                                literal { token = 2.2 }
                                literal { token = 3.3 }
170.                var dblArr2 { vt = array of double }
                        initExpr: newArray { vt = double }
                            lengthExpr: literal { token = 100 }
171.                assign (=)
                        lValue: lValue { varID = dblArr }
                        expr: lValue { varID = dblArr2 }
172.                var gObjArr { vt = array of GameObj }
                        initExpr: newArray { vt = GameObj }
                            lengthExpr: (*)
                                right: literal { token = 2 }
                                left: lValue { varID = i }
174.                call voidFunc
175.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intFunc
176.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call dblFunc
177.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call boolFunc
178.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call strFunc
179.                var gObj { vt = GameObj }
                        initExpr: call gObjFunc
180.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: call intArrFuncInt { #exprs = 1 }
                            exprs:
                                lValue { varID = i }
181.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intFuncInt { #exprs = 1 }
                            exprs:
                                lValue { varID = i }
182.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call dblFuncIntDbl { #exprs = 2 }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = d }
183.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call boolFuncBoolStringGameObj { #exprs = 3 }
                            exprs:
                                lValue { varID = b }
                                lValue { varID = s }
                                lValue { varID = gObj }
184.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call recursiveFunc { #exprs = 1 }
                            exprs:
                                literal { token = 2 }
186.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (/)
                            right: literal { token = 1 }
                            left: literal { token = 5 }
187.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (/)
                            right: literal { token = 20 }
                            left: literal { token = 100 }
188.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (+)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
189.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (-)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
190.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (*)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
191.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (%)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
192.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (-)
                            right: lValue { varID = i }
                            left: (+)
                                right: lValue { varID = i }
                                left: (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
193.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (*)
                            right: parens
                                expr: (-)
                                    right: lValue { varID = i }
                                    left: parens
                                        expr: (+)
                                            right: lValue { varID = i }
                                            left: lValue { varID = i }
                            left: lValue { varID = i }
194.                assign (=)
                        lValue: lValue { varID = d }
                        expr: lValue { varID = i }
195.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
196.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
197.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
198.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
199.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (%)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
200.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
201.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
202.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
203.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
204.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (%)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
205.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
206.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
207.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
208.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
209.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (%)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
210.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: (*)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
                            left: (-)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
211.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = i }
                            left: (+)
                                right: (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
                                left: lValue { varID = d }
212.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: (*)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
                            left: (*)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
213.                assign (=)
                        lValue: lValue { varID = d }
                        expr: parens
                            expr: (-)
                                right: (*)
                                    right: lValue { varID = d }
                                    left: lValue { varID = d }
                                left: (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
214.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = s }
215.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: literal { token = "s" }
                            left: (+)
                                right: lValue { varID = s }
                                left: lValue { varID = s }
216.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = i }
                            left: lValue { varID = s }
217.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = s }
218.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = b }
                            left: lValue { varID = s }
219.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = gObj }
                            left: lValue { varID = s }
220.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = i }
221.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = d }
222.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = b }
223.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = gObj }
224.                assign (=)
                        lValue: lValue { varID = b }
                        expr: lValue { varID = b }
225.                assign (=)
                        lValue: lValue { varID = b }
                        expr: unaryOp (not)
                            expr: lValue { varID = b }
226.                assign (=)
                        lValue: lValue { varID = b }
                        expr: parens
                            expr: lValue { varID = b }
227.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
228.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
229.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
230.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
231.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
232.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = gObj }
                            left: lValue { varID = gObj }
233.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
234.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
235.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
236.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
237.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
238.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = gObj }
                            left: lValue { varID = gObj }
239.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
240.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
241.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
242.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
243.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
244.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
245.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
246.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
247.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
248.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
249.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
250.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
251.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
252.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
253.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
254.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
255.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (||)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
256.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (&&)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
257.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: literal { token = 2 }
                            left: literal { token = 1 }
258.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: literal { token = 2 }
                            left: literal { token = 1.1 }
259.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: literal { token = 2 }
                            left: literal { token = 1 }
260.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: literal { token = 2.2 }
                            left: literal { token = 1 }
261.                assign (=)
                        lValue: lValue { varID = b2 }
                        expr: (||)
                            right: (&&)
                                right: (==)
                                    right: lValue { varID = b }
                                    left: lValue { varID = b }
                                left: lValue { varID = b3 }
                            left: lValue { varID = b2 }
262.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: literal { token = 0 }
                            left: (%)
                                right: literal { token = 2 }
                                left: lValue { varID = i }
263.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (&&)
                            right: lValue { varID = b }
                            left: parens
                                expr: (||)
                                    right: lValue { varID = b }
                                    left: lValue { varID = b }
264.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (&&)
                            right: parens
                                expr: (<)
                                    right: literal { token = 0.0001 }
                                    left: (-)
                                        right: literal { token = 3.14159 }
                                        left: lValue { varID = Math, fieldID = PI }
                            left: parens
                                expr: (==)
                                    right: literal { token = 2 }
                                    left: (+)
                                        right: literal { token = 1 }
                                        left: literal { token = 1 }
266.                if { #elseStmts = 1, #stmts = 1 }
                        expr: (==)
                            right: literal { token = 0 }
                            left: lValue { varID = i }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 1 }
                                expr: (<=)
                                    right: literal { token = 10 }
                                    left: lValue { varID = i }
                                elseStmts:
271.                                assign (*=)
                                        lValue: lValue { varID = i }
                                        expr: literal { token = 5 }
                                stmts:
269.                                assign (++)
                                        lValue: lValue { varID = i }
                        stmts:
267.                        call setBackColor { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    lValue { varID = colors }
                                        indexExpr: lValue { varID = i }
273.                if { #elseStmts = 1, #stmts = 2 }
                        expr: (>)
                            right: literal { token = 0 }
                            left: lValue { varID = i }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 2 }
                                expr: (<=)
                                    right: literal { token = 10 }
                                    left: lValue { varID = i }
                                elseStmts:
                                    if { #elseStmts = 2, #stmts = 1 }
                                        expr: lValue { varID = b }
                                        elseStmts:
287.                                        var tempStr { vt = String }
                                                initExpr: literal { token = "I'll be " }
288.                                        assign (=)
                                                lValue: lValue { varID = tempStr }
                                                expr: (+)
                                                    right: literal { token = "out of scope soon" }
                                                    left: lValue { varID = tempStr }
                                        stmts:
284.                                        assign (++)
                                                lValue: lValue { varID = i }
                                stmts:
280.                                assign (=)
                                        lValue: lValue { varID = d }
                                        expr: literal { token = 7 }
281.                                call setSoundVolume { #exprs = 1 }
                                        lValue: lValue { varID = ct }
                                        exprs:
                                            literal { token = 1 }
                        stmts:
275.                        assign (=)
                                lValue: lValue { varID = j }
                                expr: literal { token = 0 }
276.                        assign (=)
                                lValue: lValue { varID = k }
                                expr: literal { token = 0 }
290.                if { #stmts = 1 }
                        expr: (&&)
                            right: (<=)
                                right: lValue { varID = eps }
                                left: call distance { #exprs = 4 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = x1 }
                                        lValue { varID = y1 }
                                        lValue { varID = x2 }
                                        lValue { varID = y2 }
                            left: call isError { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    call tan { #exprs = 1 }
                                        lValue: lValue { varID = Math }
                                        exprs:
                                            lValue { varID = d }
                        stmts:
291.                        call println { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = "oops" }
293.                for { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
294.                        for { #stmts = 1 }
                                stmts:
295.                                for { #stmts = 1 }
295.                                    initStmt: assign (=)
                                            lValue: lValue { varID = i }
                                            expr: literal { token = 0 }
                                        stmts:
296.                                        for { #stmts = 1 }
                                                expr: (<)
                                                    right: literal { token = 10 }
                                                    left: lValue { varID = i }
                                                stmts:
297.                                                for { #stmts = 1 }
297.                                                    nextStmt: assign (++)
                                                            lValue: lValue { varID = i }
                                                        stmts:
298.                                                        for { #stmts = 1 }
                                                                expr: lValue { varID = b }
                                                                stmts:
299.                                                                assign (=)
                                                                        lValue: lValue { varID = d }
                                                                        expr: literal { token = 0 }
300.                for { #stmts = 2 }
300.                    initStmt: var ii { vt = int, isGlobal = false }
                            initExpr: literal { token = 0 }
                        expr: (<)
                            right: literal { token = 10 }
                            left: lValue { varID = ii }
300.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
302.                        for { #stmts = 1 }
302.                            initStmt: var jj { vt = int, isGlobal = false }
                                    initExpr: literal { token = 0 }
                                expr: (!=)
                                    right: literal { token = 10 }
                                    left: lValue { varID = jj }
302.                            nextStmt: assign (+=)
                                    lValue: lValue { varID = jj }
                                    expr: literal { token = 1 }
                                stmts:
303.                                if { #stmts = 1 }
                                        expr: (||)
                                            right: (==)
                                                right: literal { token = 0 }
                                                left: lValue { varID = jj }
                                            left: (==)
                                                right: literal { token = 0 }
                                                left: lValue { varID = ii }
                                        stmts:
304.                                        break
305.                        break
307.                for { #stmts = 2 }
307.                    initStmt: var ii { vt = int, isGlobal = false }
                            initExpr: literal { token = 0 }
                        expr: (<)
                            right: literal { token = 10 }
                            left: lValue { varID = ii }
307.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
309.                        for { #stmts = 2 }
309.                            initStmt: var jj { vt = int, isGlobal = false }
                                    initExpr: literal { token = 0 }
                                expr: (!=)
                                    right: literal { token = 10 }
                                    left: lValue { varID = jj }
309.                            nextStmt: assign (+=)
                                    lValue: lValue { varID = jj }
                                    expr: literal { token = 1 }
                                stmts:
311.                                if { #stmts = 2 }
                                        expr: (&&)
                                            right: (==)
                                                right: literal { token = 0 }
                                                left: lValue { varID = jj }
                                            left: (==)
                                                right: literal { token = 0 }
                                                left: lValue { varID = ii }
                                        stmts:
313.                                        assign (=)
                                                lValue: lValue { varID = intArr }
                                                    indexExpr: lValue { varID = ii }
                                                expr: literal { token = 0 }
314.                                        break
316.                                break
318.                        break
320.                var xVar { vt = double }
                        initExpr: literal { token = 0 }
321.                var yVar { vt = double }
                        initExpr: literal { token = 1 }
322.                for { #stmts = 1 }
322.                    initStmt: var dx { vt = double, isGlobal = false }
                            initExpr: literal { token = .1 }
                        expr: (<)
                            right: literal { token = 1 }
                            left: lValue { varID = xVar }
322.                    nextStmt: assign (+=)
                            lValue: lValue { varID = xVar }
                            expr: lValue { varID = dx }
                        stmts:
323.                        for { #stmts = 1 }
323.                            initStmt: var dy { vt = double, isGlobal = false }
                                    initExpr: unaryOp (neg)
                                        expr: literal { token = .5 }
                                expr: (>)
                                    right: literal { token = 0 }
                                    left: lValue { varID = yVar }
323.                            nextStmt: assign (+=)
                                    lValue: lValue { varID = yVar }
                                    expr: lValue { varID = dy }
                                stmts:
324.                                assign (=)
                                        lValue: lValue { varID = d }
                                        expr: (-)
                                            right: (/)
                                                right: lValue { varID = dy }
                                                left: lValue { varID = yVar }
                                            left: (+)
                                                right: lValue { varID = dx }
                                                left: lValue { varID = xVar }
325.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: newArray { vt = int }
                            lengthExpr: literal { token = 1 }
326.                forArray { #stmts = 1 }
326.                    var: var a { vt = int, isGlobal = false }
                        expr: lValue { varID = intArr }
                        stmts:
327.                        assign (=)
                                lValue: lValue { varID = a }
                                expr: literal { token = 0 }
329.                while { #stmts = 1 }
                        expr: lValue { varID = b }
                        stmts:
330.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: literal { token = false }
331.                while { #stmts = 3 }
                        expr: lValue { varID = b }
                        stmts:
333.                        call voidFunc
334.                        assign (++)
                                lValue: lValue { varID = i }
335.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: literal { token = false }
337.                doWhile { #stmts = 1 }
                        expr: lValue { varID = b }
                        stmts:
338.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: literal { token = false }
340.                doWhile { #stmts = 1 }
                        expr: lValue { varID = b }
                        stmts:
342.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: literal { token = false }
346.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world" }
347.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: literal { token = "world" }
                                left: (+)
                                    right: literal { token = " " }
                                    left: literal { token = "Hello" }
348.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world\n" }
349.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
350.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
351.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = b }
352.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: literal { token = "i = " }
353.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: literal { token = "d = " }
354.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = name }
355.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = name }
                                left: (+)
                                    right: literal { token = " " }
                                    left: literal { token = "Hello" }
356.                var circleObj { vt = GameObj }
                        initExpr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50 }
                                literal { token = 50 }
                                literal { token = 20 }
357.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = circleObj }
358.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world" }
359.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: literal { token = "world" }
                                left: (+)
                                    right: literal { token = " " }
                                    left: literal { token = "Hello" }
360.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world\n" }
361.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
362.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
363.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = b }
364.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: literal { token = "i = " }
365.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: literal { token = "d = " }
366.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = name }
367.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = name }
                                left: (+)
                                    right: literal { token = " " }
                                    left: literal { token = "Hello" }
368.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = circleObj }
369.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
370.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
371.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = b }
372.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = circleObj }
373.                var obj2 { vt = GameObj }
                        initExpr: lValue { varID = circleObj }
374.                var obj3 { vt = GameObj }
                        initExpr: lValue { varID = obj2 }
375.                call log { #exprs = 9 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "circleObj = " }
                            lValue { varID = circleObj }
                            literal { token = "obj2 = " }
                            lValue { varID = obj2 }
                            literal { token = "obj3=" }
                            lValue { varID = obj3 }
                            literal { token = 3.14 }
                            lValue { varID = Math, fieldID = PI }
                            literal { token = 42 }
376.                call logm { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "message" }
                            literal { token = null }
377.                call logm { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "message" }
                            lValue { varID = obj2 }
                            lValue { varID = obj3 }
378.                call setOutputFile { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "output.txt" }
379.                call setOutputFile { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "output/nameList.txt" }
380.                var outputFilename { vt = String }
                        initExpr: literal { token = "output.txt" }
381.                call setOutputFile { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = outputFilename }
383.                call showAlert { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "alert meassage" }
384.                var message { vt = String }
                        initExpr: literal { token = "alert!" }
385.                call showAlert { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = message }
386.                var n { vt = int }
                        initExpr: call inputInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "enter a number: " }
387.                assign (=)
                        lValue: lValue { varID = n }
                        expr: call inputInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "enter a number: " }
388.                assign (=)
                        lValue: lValue { varID = n }
                        expr: call inputInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = message }
389.                var x { vt = double }
                        initExpr: call inputNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "enter a number: " }
390.                assign (=)
                        lValue: lValue { varID = x }
                        expr: call inputNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "enter a number: " }
391.                assign (=)
                        lValue: lValue { varID = x }
                        expr: call inputNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = message }
392.                var quit { vt = boolean }
                        initExpr: call inputYesNo { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "Quit?" }
393.                assign (=)
                        lValue: lValue { varID = quit }
                        expr: call inputYesNo { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = message }
394.                var inputStr { vt = String }
                        initExpr: call inputString { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "Quit?" }
395.                assign (=)
                        lValue: lValue { varID = inputStr }
                        expr: call inputString { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "Quit?" }
396.                assign (=)
                        lValue: lValue { varID = inputStr }
                        expr: call inputString { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = message }
398.                call setTitle { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Title" }
399.                var title { vt = String }
                        initExpr: literal { token = "Title" }
400.                call setTitle { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = title }
401.                call setTitle { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: (+)
                                    right: literal { token = " " }
                                    left: lValue { varID = title }
402.                call setTitle { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: lValue { varID = title }
403.                call setHeight { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (/)
                                right: literal { token = 16 }
                                left: (*)
                                    right: literal { token = 9 }
                                    left: literal { token = 100.0 }
404.                call setHeight { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
405.                call setHeight { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
406.                call setHeight { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: (*)
                                    right: literal { token = 4 }
                                    left: literal { token = 5 }
                                left: (*)
                                    right: lValue { varID = d }
                                    left: lValue { varID = i }
407.                var height { vt = double }
                        initExpr: call getHeight
                            lValue: lValue { varID = ct }
408.                assign (=)
                        lValue: lValue { varID = height }
                        expr: call getHeight
                            lValue: lValue { varID = ct }
409.                var width { vt = double }
                        initExpr: (-)
                            right: literal { token = 10 }
                            left: (*)
                                right: literal { token = 0.5 }
                                left: call getWidth
                                    lValue: lValue { varID = ct }
410.                assign (=)
                        lValue: lValue { varID = width }
                        expr: call getWidth
                            lValue: lValue { varID = ct }
411.                var pxPerUnit { vt = double }
                        initExpr: call getPixelsPerUnit
                            lValue: lValue { varID = ct }
412.                assign (=)
                        lValue: lValue { varID = pxPerUnit }
                        expr: call getPixelsPerUnit
                            lValue: lValue { varID = ct }
413.                var pixelWidth { vt = int }
                        initExpr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (*)
                                    right: call getPixelsPerUnit
                                        lValue: lValue { varID = ct }
                                    left: call getWidth
                                        lValue: lValue { varID = ct }
414.                var pixelHeight { vt = int }
                        initExpr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (*)
                                    right: call getPixelsPerUnit
                                        lValue: lValue { varID = ct }
                                    left: call getHeight
                                        lValue: lValue { varID = ct }
415.                var currentScreen { vt = String }
                        initExpr: call getScreen
                            lValue: lValue { varID = ct }
416.                assign (=)
                        lValue: lValue { varID = currentScreen }
                        expr: call getScreen
                            lValue: lValue { varID = ct }
417.                call clearScreen
                        lValue: lValue { varID = ct }
418.                call clearGroup { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "targets" }
419.                call clearGroup { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "" }
420.                call setBackColor { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "orange" }
421.                call setBackColor { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "light blue" }
422.                var backColor { vt = String }
                        initExpr: literal { token = "red" }
423.                call setBackColor { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = backColor }
424.                call setBackColorRGB { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 255 }
                            literal { token = 0 }
                            literal { token = 0 }
425.                call setBackColorRGB { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
                            lValue { varID = i }
                            lValue { varID = i }
426.                call setBackImage { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "background.png" }
427.                call setBackImage { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "C:\\Users\\ben\\Pictures\\landscape.jpg" }
428.                var filename { vt = String }
                        initExpr: literal { token = "landscape.png" }
429.                call setBackImage { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = filename }
431.                assign (=)
                        lValue: lValue { varID = x }
                        expr: literal { token = 50 }
432.                var y { vt = double }
                        initExpr: literal { token = 50 }
433.                var diameter { vt = double }
                        initExpr: literal { token = 10 }
434.                var circle { vt = GameObj }
                        initExpr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50 }
                                literal { token = 20 }
                                literal { token = 10 }
435.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50.0 }
                                literal { token = 20.0 }
                                literal { token = 10.0 }
436.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call circle { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50 }
                                literal { token = 20 }
                                literal { token = 10.5 }
                                literal { token = "blue" }
437.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = diameter }
438.                var color { vt = String }
                        initExpr: literal { token = "green" }
439.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call circle { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = diameter }
                                lValue { varID = color }
440.                var rect { vt = GameObj }
                        initExpr: call rect { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = width }
                                lValue { varID = height }
441.                assign (=)
                        lValue: lValue { varID = rect }
                        expr: call rect { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = width }
                                lValue { varID = height }
                                lValue { varID = color }
442.                assign (=)
                        lValue: lValue { varID = rect }
                        expr: call rect { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50.0 }
                                literal { token = 33.3 }
                                literal { token = 11.2 }
                                literal { token = 23.890 }
443.                assign (=)
                        lValue: lValue { varID = rect }
                        expr: call rect { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50 }
                                literal { token = 33 }
                                literal { token = 11 }
                                literal { token = 23 }
                                literal { token = "green" }
444.                var line { vt = GameObj }
                        initExpr: call line { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = d }
                                lValue { varID = width }
                                lValue { varID = height }
445.                assign (=)
                        lValue: lValue { varID = line }
                        expr: call line { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x1 }
                                lValue { varID = y1 }
                                lValue { varID = x2 }
                                lValue { varID = y2 }
                                lValue { varID = color }
446.                assign (=)
                        lValue: lValue { varID = line }
                        expr: call line { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0.0 }
                                literal { token = .0 }
                                literal { token = 100.0 }
                                literal { token = 95.0 }
447.                assign (=)
                        lValue: lValue { varID = line }
                        expr: call line { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 100 }
                                literal { token = 95 }
                                literal { token = "red" }
448.                var text { vt = GameObj }
                        initExpr: call text { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = height }
449.                assign (=)
                        lValue: lValue { varID = text }
                        expr: call text { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = height }
                                lValue { varID = color }
450.                assign (=)
                        lValue: lValue { varID = text }
                        expr: call text { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = score }
                                    left: literal { token = "Score: " }
                                literal { token = 20.0 }
                                literal { token = 90.0 }
                                literal { token = 10.0 }
451.                assign (=)
                        lValue: lValue { varID = text }
                        expr: call text { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = score }
                                    left: literal { token = "Score: " }
                                literal { token = 20 }
                                literal { token = 90 }
                                literal { token = 10 }
                                literal { token = "purple" }
452.                var img { vt = GameObj }
                        initExpr: call image { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = filename }
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = width }
453.                assign (=)
                        lValue: lValue { varID = img }
                        expr: call image { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "car.png" }
                                literal { token = 42 }
                                literal { token = 25 }
                                literal { token = 38.7 }
454.                assign (=)
                        lValue: lValue { varID = img }
                        expr: call image { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "C:\\Users\\john\\Pictures\\car.jpg" }
                                literal { token = 42 }
                                literal { token = 25 }
                                literal { token = 38 }
455.                var objs { vt = array of GameObj }
                        initExpr: arrayInit { #exprs = 5 }
                            exprs:
                                lValue { varID = circle }
                                lValue { varID = rect }
                                lValue { varID = line }
                                lValue { varID = text }
                                lValue { varID = img }
456.                assign (=)
                        lValue: lValue { varID = img }
                        expr: lValue { varID = rect }
458.                var mouseClicked { vt = boolean }
                        initExpr: call clicked
                            lValue: lValue { varID = ct }
459.                if { #stmts = 1 }
                        expr: call clicked
                            lValue: lValue { varID = ct }
                        stmts:
460.                        assign (=)
                                lValue: lValue { varID = mouseClicked }
                                expr: call clicked
                                    lValue: lValue { varID = ct }
461.                if { #stmts = 1 }
                        expr: (>)
                            right: literal { token = 50 }
                            left: call clickX
                                lValue: lValue { varID = ct }
                        stmts:
462.                        assign (=)
                                lValue: lValue { varID = x }
                                expr: call clickX
                                    lValue: lValue { varID = ct }
463.                assign (=)
                        lValue: lValue { varID = x }
                        expr: call clickX
                            lValue: lValue { varID = ct }
464.                if { #stmts = 1 }
                        expr: (<=)
                            right: lValue { varID = x }
                            left: call clickY
                                lValue: lValue { varID = ct }
                        stmts:
465.                        assign (=)
                                lValue: lValue { varID = y }
                                expr: call clickY
                                    lValue: lValue { varID = ct }
466.                assign (=)
                        lValue: lValue { varID = y }
                        expr: call clickY
                            lValue: lValue { varID = ct }
467.                var keyName { vt = String }
                        initExpr: literal { token = "space" }
468.                var keyPressed { vt = boolean }
                        initExpr: call keyPressed { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = keyName }
469.                if { #stmts = 1 }
                        expr: call keyPressed { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = keyName }
                        stmts:
470.                        if { #stmts = 1 }
                                expr: call keyPressed { #exprs = 1 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        literal { token = "up" }
                                stmts:
471.                                assign (=)
                                        lValue: lValue { varID = keyPressed }
                                        expr: call keyPressed { #exprs = 1 }
                                            lValue: lValue { varID = ct }
                                            exprs:
                                                literal { token = "up" }
472.                if { #stmts = 1 }
                        expr: call charTyped { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "+" }
                        stmts:
473.                        assign (++)
                                lValue: lValue { varID = x }
474.                var ch { vt = String }
                        initExpr: literal { token = "+" }
475.                if { #stmts = 1 }
                        expr: call charTyped { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = ch }
                        stmts:
476.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: call charTyped { #exprs = 1 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        literal { token = "+" }
477.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call charTyped { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = ch }
479.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call loadSound { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = filename }
480.                call loadSound { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "pow.wav" }
481.                if { #stmts = 1 }
                        expr: call loadSound { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "sounds/ding.mp3" }
                        stmts:
482.                        call sound { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = "sounds/ding.mp3" }
483.                call sound { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = filename }
484.                call setSoundVolume { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
485.                call setSoundVolume { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 1 }
486.                call setSoundVolume { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0.5 }
488.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call random { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
489.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call random { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 100 }
490.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
491.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
492.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 1.62 }
493.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = d }
494.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: (*)
                                        right: lValue { varID = i }
                                        left: lValue { varID = d }
                                    left: literal { token = 1 }
495.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                call distance { #exprs = 4 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = x1 }
                                        lValue { varID = y1 }
                                        lValue { varID = x2 }
                                        lValue { varID = y2 }
496.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call roundDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = i }
497.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call roundDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: literal { token = 1 }
                                    left: (*)
                                        right: lValue { varID = i }
                                        left: lValue { varID = d }
                                (*)
                                    right: literal { token = 2 }
                                    left: lValue { varID = i }
498.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call roundDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 2.71828182846 }
                                literal { token = 2 }
499.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call roundDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                call distance { #exprs = 4 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = x1 }
                                        lValue { varID = y1 }
                                        lValue { varID = x2 }
                                        lValue { varID = y2 }
                                literal { token = 1 }
500.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intDiv { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
501.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intDiv { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 5 }
                                literal { token = 2 }
502.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call isError { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
503.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call isError { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (/)
                                    right: lValue { varID = d }
                                    left: lValue { varID = d }
504.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call isError { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (/)
                                    right: lValue { varID = i }
                                    left: lValue { varID = d }
505.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call isError { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (/)
                                    right: literal { token = 0 }
                                    left: literal { token = 0.0 }
506.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call distance { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = circle, fieldID = x }
                                lValue { varID = circle, fieldID = y }
                                lValue { varID = rect, fieldID = x }
                                lValue { varID = rect, fieldID = y }
507.                if { #stmts = 1 }
                        expr: (<)
                            right: (/)
                                right: literal { token = 2 }
                                left: parens
                                    expr: (+)
                                        right: lValue { varID = rect, fieldID = width }
                                        left: lValue { varID = circle, fieldID = width }
                            left: call distance { #exprs = 4 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    lValue { varID = circle, fieldID = x }
                                    lValue { varID = circle, fieldID = y }
                                    lValue { varID = rect, fieldID = x }
                                    lValue { varID = rect, fieldID = y }
                        stmts:
508.                        assign (=)
                                lValue: lValue { varID = i }
                                expr: call getTimer
                                    lValue: lValue { varID = ct }
509.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (-)
                            right: lValue { varID = i }
                            left: call getTimer
                                lValue: lValue { varID = ct }
510.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call getVersion
                            lValue: lValue { varID = ct }
511.                call round { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            call getVersion
                                lValue: lValue { varID = ct }
513.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
514.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = d }
515.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = .707 }
516.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = Math, fieldID = PI }
517.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 6.0221409e+2 }
518.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call parseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
519.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call parseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "345" }
520.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
521.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "12345" }
522.                while { #stmts = 1 }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
                        stmts:
523.                        assign (=)
                                lValue: lValue { varID = d }
                                expr: call parseNumber { #exprs = 1 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = s }
524.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: literal { token = 100 }
                            left: call parseNumber { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = "123.45" }
525.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call canParseNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "543.210" }
526.                while { #stmts = 1 }
                        expr: call canParseNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
                        stmts:
527.                        assign (=)
                                lValue: lValue { varID = s }
                                expr: call formatDecimal { #exprs = 1 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = d }
528.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call formatDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = i }
529.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call formatDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
                                call intDiv { #exprs = 2 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        (*)
                                            right: lValue { varID = i }
                                            left: literal { token = 2 }
                                        lValue { varID = i }
530.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: literal { token = ":00" }
                            left: call formatDecimal { #exprs = 2 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = 6.0221 }
                                    literal { token = 7 }
531.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call formatInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
532.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call formatInt { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: literal { token = 1 }
                                    left: lValue { varID = i }
                                (+)
                                    right: lValue { varID = k }
                                    left: lValue { varID = j }
534.                assign (=)
                        lValue: lValue { varID = rect, fieldID = x }
                        expr: (-)
                            right: literal { token = 10 }
                            left: lValue { varID = circle, fieldID = y }
535.                assign (=)
                        lValue: lValue { varID = circle, fieldID = width }
                        expr: (*)
                            right: literal { token = 1.5 }
                            left: lValue { varID = circle, fieldID = height }
536.                assign (=)
                        lValue: lValue { varID = rect, fieldID = height }
                        expr: (*)
                            right: literal { token = 1.1 }
                            left: lValue { varID = img, fieldID = height }
537.                assign (=)
                        lValue: lValue { varID = line, fieldID = x }
                        expr: (+)
                            right: lValue { varID = line, fieldID = width }
                            left: lValue { varID = line, fieldID = x }
538.                assign (=)
                        lValue: lValue { varID = img, fieldID = width }
                        expr: (*)
                            right: literal { token = .9 }
                            left: lValue { varID = img, fieldID = width }
539.                assign (=)
                        lValue: lValue { varID = img, fieldID = xSpeed }
                        expr: literal { token = 0 }
540.                assign (=)
                        lValue: lValue { varID = img, fieldID = ySpeed }
                        expr: literal { token = .5 }
541.                assign (=)
                        lValue: lValue { varID = line, fieldID = lineWidth }
                        expr: literal { token = 3 }
542.                assign (=)
                        lValue: lValue { varID = img, fieldID = lineWidth }
                        expr: (*)
                            right: literal { token = 2 }
                            left: lValue { varID = line, fieldID = lineWidth }
543.                assign (=)
                        lValue: lValue { varID = rect, fieldID = visible }
                        expr: literal { token = false }
544.                assign (=)
                        lValue: lValue { varID = circle, fieldID = clickable }
                        expr: lValue { varID = circle, fieldID = visible }
545.                if { #stmts = 1 }
                        expr: lValue { varID = img, fieldID = visible }
                        stmts:
546.                        assign (=)
                                lValue: lValue { varID = img, fieldID = clickable }
                                expr: literal { token = true }
547.                if { #stmts = 1 }
                        expr: (!=)
                            right: literal { token = false }
                            left: lValue { varID = img, fieldID = clickable }
                        stmts:
548.                        assign (=)
                                lValue: lValue { varID = img, fieldID = autoDelete }
                                expr: lValue { varID = img, fieldID = visible }
549.                assign (=)
                        lValue: lValue { varID = line, fieldID = group }
                        expr: lValue { varID = s }
550.                assign (=)
                        lValue: lValue { varID = line, fieldID = autoDelete }
                        expr: (||)
                            right: (&&)
                                right: (==)
                                    right: literal { token = 1 }
                                    left: call indexOf { #exprs = 1 }
                                        lValue: lValue { varID = s }
                                        exprs:
                                            lValue { varID = line, fieldID = group }
                                left: call equals { #exprs = 1 }
                                    lValue: lValue { varID = s }
                                    exprs:
                                        literal { token = "world" }
                            left: call equals { #exprs = 1 }
                                lValue: lValue { varID = s }
                                exprs:
                                    literal { token = "hello" }
552.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call getType
                            lValue: lValue { varID = rect }
553.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: literal { token = "more text" }
                                left: call getText
                                    lValue: lValue { varID = text }
554.                call setText { #exprs = 1 }
                        lValue: lValue { varID = img }
                        exprs:
                            literal { token = "racecar.png" }
555.                call setText { #exprs = 1 }
                        lValue: lValue { varID = text }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: literal { token = "Score: " }
556.                call setText { #exprs = 1 }
                        lValue: lValue { varID = text }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: literal { token = "Score: " }
557.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            call toString
                                lValue: lValue { varID = line }
558.                call setSize { #exprs = 2 }
                        lValue: lValue { varID = img }
                        exprs:
                            (*)
                                right: literal { token = 1.1 }
                                left: lValue { varID = img, fieldID = width }
                            (*)
                                right: literal { token = 1.1 }
                                left: lValue { varID = img, fieldID = height }
559.                call align { #exprs = 1 }
                        lValue: lValue { varID = text }
                        exprs:
                            lValue { varID = s }
560.                call align { #exprs = 2 }
                        lValue: lValue { varID = text }
                        exprs:
                            lValue { varID = s }
                            literal { token = true }
561.                call align { #exprs = 2 }
                        lValue: lValue { varID = text }
                        exprs:
                            lValue { varID = s }
                            literal { token = false }
562.                call setFillColor { #exprs = 1 }
                        lValue: lValue { varID = circle }
                        exprs:
                            (+)
                                right: lValue { varID = s }
                                left: literal { token = "light" }
563.                call setFillColor { #exprs = 1 }
                        lValue: lValue { varID = circle }
                        exprs:
                            call getText
                                lValue: lValue { varID = text }
564.                call setFillColorRGB { #exprs = 3 }
                        lValue: lValue { varID = circle }
                        exprs:
                            lValue { varID = i }
                            lValue { varID = j }
                            lValue { varID = k }
565.                call setLineColor { #exprs = 1 }
                        lValue: lValue { varID = rect }
                        exprs:
                            lValue { varID = colors }
                                indexExpr: lValue { varID = i }
566.                call setLineColorRGB { #exprs = 3 }
                        lValue: lValue { varID = rect }
                        exprs:
                            lValue { varID = i }
                            (-)
                                right: lValue { varID = i }
                                left: literal { token = 255 }
                            literal { token = 0 }
567.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call getLayer
                            lValue: lValue { varID = rect }
568.                if { #stmts = 1 }
                        expr: (>=)
                            right: call getLayer
                                lValue: lValue { varID = circle }
                            left: call getLayer
                                lValue: lValue { varID = rect }
                        stmts:
569.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: call equals { #exprs = 1 }
                                    lValue: lValue { varID = colors }
                                        indexExpr: call getLayer
                                            lValue: lValue { varID = rect }
                                    exprs:
                                        literal { token = "green" }
570.                call setLayer { #exprs = 1 }
                        lValue: lValue { varID = img }
                        exprs:
                            unaryOp (neg)
                                expr: literal { token = 42 }
571.                call delete
                        lValue: lValue { varID = img }
572.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call clicked
                            lValue: lValue { varID = img }
573.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call containsPoint { #exprs = 2 }
                            lValue: lValue { varID = img }
                            exprs:
                                call clickX
                                    lValue: lValue { varID = ct }
                                call clickY
                                    lValue: lValue { varID = ct }
574.                if { #stmts = 1 }
                        expr: call containsPoint { #exprs = 2 }
                            lValue: lValue { varID = img }
                            exprs:
                                call clickX
                                    lValue: lValue { varID = ct }
                                call clickY
                                    lValue: lValue { varID = ct }
                        stmts:
575.                        while { #stmts = 1 }
                                expr: call hit { #exprs = 1 }
                                    lValue: lValue { varID = img }
                                    exprs:
                                        lValue { varID = rect }
                                stmts:
576.                                assign (=)
                                        lValue: lValue { varID = b }
                                        expr: (==)
                                            right: literal { token = true }
                                            left: call hit { #exprs = 1 }
                                                lValue: lValue { varID = img }
                                                exprs:
                                                    lValue { varID = rect }
578.                var e { vt = double }
                        initExpr: lValue { varID = Math, fieldID = E }
579.                var pi { vt = double }
                        initExpr: lValue { varID = Math, fieldID = PI }
580.                if { #stmts = 1 }
                        expr: (<)
                            right: lValue { varID = eps }
                            left: call abs { #exprs = 1 }
                                lValue: lValue { varID = Math }
                                exprs:
                                    (-)
                                        right: lValue { varID = img, fieldID = x }
                                        left: lValue { varID = rect, fieldID = x }
                        stmts:
581.                        assign (=)
                                lValue: lValue { varID = i }
                                expr: call abs { #exprs = 1 }
                                    lValue: lValue { varID = Math }
                                    exprs:
                                        lValue { varID = i }
582.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call acos { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                unaryOp (neg)
                                    expr: literal { token = 0.5 }
583.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call asin { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (/)
                                    right: literal { token = 2 }
                                    left: call sqrt { #exprs = 1 }
                                        lValue: lValue { varID = Math }
                                        exprs:
                                            literal { token = 3 }
584.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call atan { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (/)
                                    right: call sqrt { #exprs = 1 }
                                        lValue: lValue { varID = Math }
                                        exprs:
                                            literal { token = 2 }
                                    left: literal { token = 1 }
585.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call atan2 { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (-)
                                    right: lValue { varID = img, fieldID = x }
                                    left: call clickX
                                        lValue: lValue { varID = ct }
                                (-)
                                    right: lValue { varID = img, fieldID = y }
                                    left: call clickY
                                        lValue: lValue { varID = ct }
586.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call ceil { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
587.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call cos { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (/)
                                    right: literal { token = 2 }
                                    left: lValue { varID = Math, fieldID = PI }
588.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call cosh { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (*)
                                    right: literal { token = 2 }
                                    left: lValue { varID = Math, fieldID = PI }
589.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call exp { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (+)
                                    right: literal { token = 1 }
                                    left: (*)
                                        right: lValue { varID = Math, fieldID = PI }
                                        left: literal { token = 2 }
590.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call floor { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                unaryOp (neg)
                                    expr: literal { token = 1.67 }
591.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call log { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                literal { token = 32 }
592.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call log10 { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
593.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call max { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = d }
594.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call max { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
595.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call min { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = d }
596.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call min { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
597.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call pow { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = d }
598.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call sin { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
599.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call sinh { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
600.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call sqrt { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
601.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call tan { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
602.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call tanh { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
604.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call compareTo { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = s }
605.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call equals { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = s }
606.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call indexOf { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = s }
607.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call length
                            lValue: lValue { varID = s }
608.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call substring { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = i }
609.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call substring { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = i }
610.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call toLowerCase
                            lValue: lValue { varID = s }
611.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call toUpperCase
                            lValue: lValue { varID = s }
612.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call trim
                            lValue: lValue { varID = s }
614.                var coins { vt = array of GameObj }
615.                var walls { vt = array of GameObj }
616.                var multilineArrayInit { vt = array of int }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
                                literal { token = 3 }
621.                call log { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 1 }
                            literal { token = 2 }
                            literal { token = 3 }
623.                if { #stmts = 1 }
                        expr: (==)
                            right: literal { token = 1 }
                            left: call random { #exprs = 2 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = 1 }
                                    literal { token = 2 }
                        stmts:
624.                        call println { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = "heads" }
627.                call log { #exprs = 4 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 1 }
                            call random { #exprs = 2 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = 1 }
                                    literal { token = 100 }
                            literal { token = 3 }
                            literal { token = 4 }
630.        func returnValueAtEndOfBlockFunc { #paramVars = 0, vt = int, #stmts = 10 }
                stmts:
632.                var boolVar { vt = boolean }
                        initExpr: literal { token = false }
633.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = boolVar }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 1 }
                                expr: lValue { varID = boolVar }
                                elseStmts:
638.                                return
                                        expr: literal { token = 3 }
                                stmts:
636.                                return
                                        expr: literal { token = 2 }
                        stmts:
634.                        return
                                expr: literal { token = 1 }
640.                for { #stmts = 1 }
                        expr: lValue { varID = boolVar }
                        stmts:
641.                        return
                                expr: literal { token = 4 }
643.                while { #stmts = 1 }
                        expr: literal { token = true }
                        stmts:
644.                        return
                                expr: literal { token = 5 }
646.                doWhile { #stmts = 1 }
                        expr: lValue { varID = boolVar }
                        stmts:
647.                        return
                                expr: literal { token = 6 }
650.                if { #elseStmts = 1, #stmts = 2 }
                        expr: lValue { varID = boolVar }
                        elseStmts:
                            if { #elseStmts = 2, #stmts = 2 }
                                expr: lValue { varID = boolVar }
                                elseStmts:
662.                                call voidFunc
663.                                return
                                        expr: literal { token = 9 }
                                stmts:
657.                                call voidFunc
658.                                return
                                        expr: literal { token = 8 }
                        stmts:
652.                        call voidFunc
653.                        return
                                expr: literal { token = 7 }
666.                for { #stmts = 1 }
                        expr: lValue { varID = boolVar }
                        stmts:
668.                        return
                                expr: literal { token = 10 }
671.                while { #stmts = 1 }
                        expr: lValue { varID = boolVar }
                        stmts:
673.                        return
                                expr: literal { token = 11 }
676.                doWhile { #stmts = 1 }
                        expr: lValue { varID = boolVar }
                        stmts:
678.                        return
                                expr: literal { token = 12 }
682.                return
                        expr: literal { token = 13 }
685.        func returnVoidAtEndOfBlockFunc { #paramVars = 0, vt = void, #stmts = 10 }
                stmts:
687.                var boolVar { vt = boolean }
                        initExpr: literal { token = false }
688.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = boolVar }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 1 }
                                expr: lValue { varID = boolVar }
                                elseStmts:
693.                                return
                                stmts:
691.                                return
                        stmts:
689.                        return
695.                for { #stmts = 1 }
                        expr: lValue { varID = boolVar }
                        stmts:
696.                        return
698.                while { #stmts = 1 }
                        expr: literal { token = true }
                        stmts:
699.                        return
701.                doWhile { #stmts = 1 }
                        expr: lValue { varID = boolVar }
                        stmts:
702.                        return
705.                if { #elseStmts = 1, #stmts = 2 }
                        expr: lValue { varID = boolVar }
                        elseStmts:
                            if { #elseStmts = 2, #stmts = 2 }
                                expr: lValue { varID = boolVar }
                                elseStmts:
717.                                call voidFunc
718.                                return
                                stmts:
712.                                call voidFunc
713.                                return
                        stmts:
707.                        call voidFunc
708.                        return
721.                for { #stmts = 1 }
                        expr: lValue { varID = boolVar }
                        stmts:
723.                        return
726.                while { #stmts = 1 }
                        expr: lValue { varID = boolVar }
                        stmts:
728.                        return
731.                doWhile { #stmts = 1 }
                        expr: lValue { varID = boolVar }
                        stmts:
733.                        return
737.                return
744.        func ct { #paramVars = 0, vt = void, #stmts = 1 }
                stmts:
746.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world" }
750.        func int { #paramVars = 0, vt = double, #stmts = 1 }
                stmts:
752.                return
                        expr: literal { token = 0 }
755.        func foo { #paramVars = 2, vt = double, #stmts = 1 }
                paramVars:
755.                var i { vt = int, isGlobal = false }
755.                var boolean { vt = GameObj, isGlobal = false }
                stmts:
757.                return
                        expr: literal { token = 0 }
760.        func bar { #paramVars = 2, vt = boolean, #stmts = 1 }
                paramVars:
760.                var s { vt = String, isGlobal = false }
760.                var gameObj { vt = GameObj, isGlobal = false }
                stmts:
763.                return
                        expr: lValue { varID = TRUE }
766.        func Double { #paramVars = 1, vt = int, #stmts = 1 }
                paramVars:
766.                var x { vt = int, isGlobal = false }
                stmts:
768.                return
                        expr: (*)
                            right: lValue { varID = x }
                            left: literal { token = 2 }
772.        func voidFunc { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
772.                var i { vt = int, isGlobal = false }
775.        func func { #paramVars = 0, vt = void, #stmts = 0 }
779.        func FUNC { #paramVars = 0, vt = void, #stmts = 0 }
783.        func AnotherFunc { #paramVars = 0, vt = void, #stmts = 0 }
787.        func anotherfunc { #paramVars = 0, vt = void, #stmts = 0 }
791.        func expectedErrors { #paramVars = 0, vt = void, #stmts = 297 }
                stmts:
793.                var intVar { vt = int }
                        initExpr: literal { token = 1 }
794.                var dblVar { vt = double }
                        initExpr: literal { token = 1.0 }
795.                var boolVar { vt = boolean }
                        initExpr: literal { token = false }
796.                var strVar { vt = String }
                        initExpr: literal { token = "a" }
797.                var objVar { vt = GameObj }
                        initExpr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 10 }
798.                var intArr { vt = array of int }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
                                literal { token = 3 }
799.                var objArr { vt = array of GameObj }
                        initExpr: arrayInit { #exprs = 1 }
                            exprs:
                                lValue { varID = objVar }
802.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call setText { #exprs = 1 }
                            lValue: lValue { varID = objVar }
                            exprs:
                                literal { token = "circle" }
804.                var screen { vt = double }
                        initExpr: call setScreen { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "menu" }
806.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: call setHeight { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 150 }
808.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: call voidFunc
810.                var title { vt = GameObj }
                        initExpr: call setTitle { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "title" }
813.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = intVar }
815.                var b { vt = boolean }
                        initExpr: call intFuncInt { #exprs = 1 }
                            exprs:
                                literal { token = 2 }
817.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = visible }
                        expr: literal { token = 0 }
819.                var s { vt = String }
                        initExpr: lValue { varID = intVar }
821.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = intVar }
824.                var i { vt = int }
                        initExpr: literal { token = 3.4 }
826.                assign (=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 1.2 }
828.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (*)
                            right: literal { token = 3.4 }
                            left: literal { token = 10 }
830.                var j { vt = int }
                        initExpr: (+)
                            right: literal { token = 3.14 }
                            left: literal { token = 5 }
832.                var plancksConst { vt = int }
                        initExpr: literal { token = 6.62e-34 }
834.                var exponentialNumberNoDot { vt = int }
                        initExpr: literal { token = 12e10 }
836.                var exponentialNumberWithDot { vt = int }
                        initExpr: literal { token = 3.42e2 }
838.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = autoDelete }
                        expr: lValue { varID = dblVar }
840.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: literal { token = 3.14 }
842.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = dblVar }
845.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call clicked
                            lValue: lValue { varID = ct }
847.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = x }
                        expr: lValue { varID = boolVar }
849.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = xSpeed }
                        expr: literal { token = false }
851.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = group }
                        expr: lValue { varID = boolVar }
853.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = boolVar }
856.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = objVar, fieldID = group }
858.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = ySpeed }
                        expr: literal { token = "fast" }
860.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = strVar }
862.                var score { vt = GameObj }
                        initExpr: literal { token = "100 pts" }
865.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = objVar }
867.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = width }
                        expr: lValue { varID = objVar }
869.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = objVar }
871.                var circle { vt = String }
                        initExpr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 10 }
874.                var y { vt = int }
                        initExpr: call intFuncInt { #exprs = 1 }
                            exprs:
                                literal { token = 2.3 }
876.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call random { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0.0 }
                                literal { token = 10 }
878.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call random { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = false }
880.                call setBackColorRGB { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "red" }
                            literal { token = 0 }
                            literal { token = 0 }
882.                call setLayer { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = "front" }
884.                call roundDecimal { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 3.14159 }
                            lValue { varID = objVar }
886.                call substring { #exprs = 1 }
                        lValue: lValue { varID = strVar }
                        exprs:
                            lValue { varID = objVar }
889.                call pow { #exprs = 2 }
                        lValue: lValue { varID = Math }
                        exprs:
                            lValue { varID = boolVar }
                            literal { token = 3 }
891.                call dblFuncIntDbl { #exprs = 2 }
                        exprs:
                            literal { token = 0 }
                            literal { token = "pi" }
893.                call containsPoint { #exprs = 2 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            lValue { varID = strVar }
                            lValue { varID = dblVar }
895.                call exp { #exprs = 1 }
                        lValue: lValue { varID = Math }
                        exprs:
                            lValue { varID = objVar }
898.                call align { #exprs = 2 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = "left" }
                            literal { token = 0 }
900.                call boolFuncBoolStringGameObj { #exprs = 3 }
                        exprs:
                            lValue { varID = dblVar }
                            lValue { varID = strVar }
                            lValue { varID = objVar }
902.                call boolFuncBoolStringGameObj { #exprs = 3 }
                        exprs:
                            lValue { varID = strVar }
                            lValue { varID = objVar }
                            lValue { varID = boolVar }
904.                call boolFuncBoolStringGameObj { #exprs = 3 }
                        exprs:
                            lValue { varID = objVar }
                            lValue { varID = strVar }
                            lValue { varID = boolVar }
907.                call align { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            lValue { varID = intVar }
909.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call parseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 123 }
911.                call circle { #exprs = 4 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 1 }
                            literal { token = 1 }
913.                call setText { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = 1 }
915.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 1.0 }
917.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = boolVar }
919.                call align { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = true }
921.                call equals { #exprs = 1 }
                        lValue: lValue { varID = strVar }
                        exprs:
                            lValue { varID = objVar }
924.                call boolFuncBoolStringGameObj { #exprs = 3 }
                        exprs:
                            lValue { varID = boolVar }
                            lValue { varID = strVar }
                            literal { token = 42 }
926.                call hit { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = 0.0 }
928.                call hit { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = false }
930.                call hit { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = "the wall" }
933.                if { #stmts = 1 }
                        expr: (>)
                            right: literal { token = 0 }
                            left: call intFuncInt
                        stmts:
934.                        call voidFunc
936.                call dblFuncIntDbl
938.                call circle
                        lValue: lValue { varID = ct }
940.                call rect { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 10 }
942.                call circle { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
944.                call voidFunc { #exprs = 1 }
                        exprs:
                            literal { token = 1 }
946.                call setBackColor { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 255 }
                            literal { token = 0 }
                            literal { token = 0 }
948.                call delete { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = true }
950.                call setText { #exprs = 2 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = "circle" }
                            literal { token = "green" }
953.                var k { vt = int }
                        initExpr: (/)
                            right: literal { token = 2 }
                            left: literal { token = 3 }
955.                call random { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (/)
                                right: lValue { varID = intVar }
                                left: lValue { varID = intVar }
                            lValue { varID = intVar }
957.                assign (=)
                        lValue: lValue { varID = x }
                        expr: (+)
                            right: literal { token = 1 }
                            left: lValue { varID = x }
959.                for { #stmts = 1 }
959.                    initStmt: assign (=)
                            lValue: lValue { varID = x }
                            expr: literal { token = 0 }
                        expr: (<)
                            right: literal { token = 1 }
                            left: lValue { varID = x }
959.                    nextStmt: assign (++)
                            lValue: lValue { varID = x }
                        stmts:
960.                        call voidFunc
962.                call foo
964.                var j { vt = int }
                        initExpr: literal { token = 3 }
966.                var uninitializedVar { vt = int }
968.                if { #stmts = 1 }
                        expr: (<)
                            right: literal { token = 0 }
                            left: lValue { varID = uninitializedVar }
                        stmts:
969.                        assign (=)
                                lValue: lValue { varID = uninitializedVar }
                                expr: literal { token = 0 }
970.                var g { vt = GameObj }
972.                assign (=)
                        lValue: lValue { varID = g, fieldID = xSpeed }
                        expr: literal { token = 1 }
975.                var n
                        initExpr: literal { token = 100 }
977.                var gameOver
                        initExpr: literal { token = false }
979.                var r { vt = GameObj }
                        initExpr: call rectangle { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 10 }
                                literal { token = 10 }
981.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = isVisible }
                        expr: literal { token = false }
983.                call foo
                        lValue: lValue { varID = objVar }
986.                var ch
                        initExpr: literal { token = "A" }
988.                var obj
990.                call Circle { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 10 }
992.                call atan2 { #exprs = 2 }
                        lValue: lValue { varID = math }
                        exprs:
                            (-)
                                right: lValue { varID = r, fieldID = x }
                                left: call clickX
                                    lValue: lValue { varID = ct }
                            (-)
                                right: lValue { varID = r, fieldID = y }
                                left: call clickY
                                    lValue: lValue { varID = ct }
994.                call voidfunC
996.                assign (=)
                        lValue: lValue { varID = intvar }
                        expr: literal { token = 2 }
999.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: lValue { varID = Null }
1001.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = NULL }
1003.                while { #stmts = 1 }
                        expr: lValue { varID = True }
                        stmts:
1004.                        call voidFunc
1006.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = TRUE }
1008.                if { #stmts = 1 }
                        expr: lValue { varID = False }
                        stmts:
1009.                        call voidFunc
1011.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = clickable }
                        expr: lValue { varID = FALSE }
1014.                if { #stmts = 1 }
                        expr: (=)
                            right: literal { token = 0 }
                            left: lValue { varID = i }
                        stmts:
1015.                        assign (=)
                                lValue: lValue { varID = i }
                                expr: literal { token = 0 }
1017.                var intArr2 { vt = array of int }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
                                literal { token = 3.14 }
1019.                var dblArr { vt = array of double }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = "two" }
                                literal { token = 3.14 }
1021.                var strArr { vt = array of String }
                        initExpr: newArray { vt = GameObj }
                            lengthExpr: literal { token = 100 }
1023.                var boolArr { vt = array of boolean }
                        initExpr: call intArrFuncInt { #exprs = 1 }
                            exprs:
                                literal { token = 10 }
1025.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: newArray { vt = int }
                            lengthExpr: literal { token = 1.5 }
1028.                assign (++)
                        lValue: lValue { varID = boolVar }
1030.                assign (++)
                        lValue: lValue { varID = strVar }
1032.                assign (++)
                        lValue: lValue { varID = objVar }
1034.                assign (--)
                        lValue: lValue { varID = boolVar }
1036.                assign (--)
                        lValue: lValue { varID = strVar }
1038.                assign (--)
                        lValue: lValue { varID = objVar }
1041.                forArray { #stmts = 1 }
1041.                    var: var x { vt = int, isGlobal = false }
                        expr: lValue { varID = intVar }
                        stmts:
1042.                        call voidFunc
1044.                forArray { #stmts = 1 }
1044.                    var: var x { vt = double, isGlobal = false }
                        expr: lValue { varID = dblVar }
                        stmts:
1045.                        call voidFunc
1047.                forArray { #stmts = 1 }
1047.                    var: var x { vt = boolean, isGlobal = false }
                        expr: lValue { varID = boolVar }
                        stmts:
1048.                        call voidFunc
1050.                forArray { #stmts = 1 }
1050.                    var: var x { vt = String, isGlobal = false }
                        expr: lValue { varID = strVar }
                        stmts:
1051.                        call voidFunc
1053.                forArray { #stmts = 1 }
1053.                    var: var x { vt = GameObj, isGlobal = false }
                        expr: lValue { varID = objVar }
                        stmts:
1054.                        call voidFunc
1056.                forArray { #stmts = 1 }
1056.                    var: var x { vt = GameObj, isGlobal = false }
                        expr: lValue { varID = strVar }
                        stmts:
1057.                        call voidFunc
1060.                forArray { #stmts = 1 }
1060.                    var: var x { vt = double, isGlobal = false }
                        expr: lValue { varID = intArr }
                        stmts:
1061.                        call voidFunc
1063.                forArray { #stmts = 1 }
1063.                    var: var x { vt = String, isGlobal = false }
                        expr: lValue { varID = objArr }
                        stmts:
1064.                        call voidFunc
1067.                for { #stmts = 1 }
                        expr: lValue { varID = intVar }
                        stmts:
1068.                        call voidFunc
1070.                for { #stmts = 1 }
                        expr: lValue { varID = dblVar }
                        stmts:
1071.                        call voidFunc
1073.                for { #stmts = 1 }
                        expr: lValue { varID = strVar }
                        stmts:
1074.                        call voidFunc
1076.                for { #stmts = 1 }
                        expr: lValue { varID = objVar }
                        stmts:
1077.                        call voidFunc
1079.                doWhile { #stmts = 1 }
                        expr: lValue { varID = intVar }
                        stmts:
1080.                        call voidFunc
1085.                while { #stmts = 1 }
                        expr: lValue { varID = dblVar }
                        stmts:
1086.                        call voidFunc
1088.                while { #stmts = 1 }
                        expr: lValue { varID = strVar }
                        stmts:
1089.                        call voidFunc
1091.                while { #stmts = 1 }
                        expr: lValue { varID = objVar }
                        stmts:
1092.                        call voidFunc
1095.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = intVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = intVar }
                                stmts:
1099.                                call voidFunc
                        stmts:
1096.                        call voidFunc
1101.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = dblVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = dblVar }
                                stmts:
1105.                                call voidFunc
                        stmts:
1102.                        call voidFunc
1107.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = strVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = strVar }
                                stmts:
1111.                                call voidFunc
                        stmts:
1108.                        call voidFunc
1113.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = objVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = objVar }
                                stmts:
1117.                                call voidFunc
                        stmts:
1114.                        call voidFunc
1120.                var n
                        initExpr: literal { token = 100 }
1122.                var d
                        initExpr: literal { token = 100.0 }
1124.                var b
                        initExpr: literal { token = false }
1127.                assign (+=)
                        lValue: lValue { varID = strVar }
                        expr: literal { token = "hello" }
1129.                assign (-=)
                        lValue: lValue { varID = boolVar }
                        expr: literal { token = 1 }
1131.                assign (*=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = objVar }
1133.                assign (/=)
                        lValue: lValue { varID = objVar }
                        expr: literal { token = 3.14 }
1135.                assign (+=)
                        lValue: lValue { varID = intVar }
                        expr: literal { token = "hello" }
1137.                assign (-=)
                        lValue: lValue { varID = dblVar }
                        expr: call rect { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 1 }
                                literal { token = 2 }
1139.                assign (*=)
                        lValue: lValue { varID = intVar }
                        expr: literal { token = false }
1141.                assign (/=)
                        lValue: lValue { varID = dblVar }
                        expr: literal { token = true }
1143.                assign (+=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
1145.                assign (-=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
1147.                assign (*=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
1149.                assign (/=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
1151.                if { #stmts = 1 }
                        expr: (==)
                            right: literal { token = "s" }
                            left: lValue { varID = strVar }
                        stmts:
1152.                        call voidFunc
1155.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (^)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
1157.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (&)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
1159.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (|)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
1161.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (>>)
                            right: literal { token = 2 }
                            left: lValue { varID = i }
1163.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (<<)
                            right: literal { token = 2 }
                            left: lValue { varID = i }
1165.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (>>>)
                            right: literal { token = 2 }
                            left: lValue { varID = i }
1168.                var ct { vt = String }
1170.                var String { vt = int }
1172.                var GameObj { vt = double }
1174.                var lowercasefirst { vt = int }
                        initExpr: literal { token = 1 }
1176.                var lowerCaseFirst { vt = int }
                        initExpr: literal { token = 10 }
1177.                var upperCaseFirst { vt = GameObj }
                        initExpr: lValue { varID = objVar }
1179.                var uppercasefirst { vt = GameObj }
                        initExpr: literal { token = null }
1181.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: (+)
                            right: literal { token = 1 }
                            left: lValue { varID = dblvar }
1185.                var DouBle { vt = int }
1187.                var BooLean { vt = double }
1189.                var string { vt = boolean }
1192.                assign (=)
                        lValue: lValue { varID = intVar }
                            indexExpr: literal { token = 0 }
                        expr: literal { token = 1 }
1195.                assign (=)
                        lValue: lValue { varID = intArr }
                            indexExpr: lValue { varID = dblVar }
                        expr: literal { token = 1 }
1198.                var numObjs { vt = int }
                        initExpr: lValue { varID = objArr, fieldID = Length }
1201.                var len { vt = int }
                        initExpr: lValue { varID = strVar, fieldID = length }
1203.                var size { vt = int }
                        initExpr: lValue { varID = intVar, fieldID = size }
1206.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: unaryOp (neg)
                            expr: lValue { varID = objVar }
1209.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = visible }
                        expr: unaryOp (not)
                            expr: lValue { varID = intVar }
1212.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: (+)
                            right: lValue { varID = intArr }
                            left: lValue { varID = strVar }
1214.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: (+)
                            right: lValue { varID = strVar }
                            left: lValue { varID = intArr }
1217.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (+)
                            right: unaryOp (not)
                                expr: lValue { varID = boolVar }
                            left: lValue { varID = boolVar }
1219.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: (+)
                            right: lValue { varID = objVar }
                            left: lValue { varID = objVar }
1221.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: (+)
                            right: literal { token = 1 }
                            left: lValue { varID = intArr }
1223.                assign (=)
                        lValue: lValue { varID = objArr }
                        expr: (+)
                            right: lValue { varID = objVar }
                            left: lValue { varID = objArr }
1226.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: (-)
                            right: lValue { varID = intVar }
                            left: lValue { varID = strVar }
1228.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (*)
                            right: literal { token = 0 }
                            left: lValue { varID = boolVar }
1230.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: (/)
                            right: literal { token = 2 }
                            left: lValue { varID = objVar }
1232.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: (%)
                            right: literal { token = 2 }
                            left: lValue { varID = intArr }
1235.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: (&&)
                            right: literal { token = 1001 }
                            left: lValue { varID = intVar }
1237.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (||)
                            right: literal { token = 1010 }
                            left: lValue { varID = boolVar }
1240.                if { #stmts = 1 }
                        expr: (<)
                            right: lValue { varID = boolVar }
                            left: lValue { varID = boolVar }
                        stmts:
1241.                        call voidFunc
1243.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (>)
                            right: lValue { varID = dblVar }
                            left: lValue { varID = objVar }
1245.                while { #stmts = 1 }
                        expr: (<=)
                            right: lValue { varID = intVar }
                            left: lValue { varID = boolVar }
                        stmts:
1246.                        call voidFunc
1249.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: (>=)
                            right: lValue { varID = intArr }
                            left: lValue { varID = dblVar }
1252.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: (/)
                            right: literal { token = 2 }
                            left: literal { token = 1 }
1254.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: (/)
                            right: literal { token = 8 }
                            left: literal { token = 3 }
1257.                var intVar { vt = int }
                        initExpr: literal { token = 13 }
1259.                var objArr { vt = array of GameObj }
                        initExpr: newArray { vt = GameObj }
                            lengthExpr: literal { token = 10 }
1262.                call update
1264.                call start
1266.                call onMousePress { #exprs = 2 }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
1269.                call println { #exprs = 1 }
                        exprs:
                            literal { token = "Hello world" }
1271.                call setHeight { #exprs = 1 }
                        exprs:
                            literal { token = 150 }
1274.                call intFunc
1276.                call dblFuncIntDbl { #exprs = 2 }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0.1 }
1279.                call foo
                        lValue: lValue { varID = GameObj }
1281.                call foo
                        lValue: lValue { varID = String }
1283.                call foo
                        lValue: lValue { varID = Code12Program }
1285.                call foo
                        lValue: lValue { varID = Code12Program }
1288.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                            indexExpr: literal { token = 0 }
                        exprs:
                            lValue { varID = objVar }
1290.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: call tan { #exprs = 1 }
                            lValue: lValue { varID = Math }
                                indexExpr: lValue { varID = intVar }
                            exprs:
                                literal { token = 0 }
1293.                call voidFunc
                        lValue: lValue { varID = intArr }
1296.                call voidFunc
                        lValue: lValue { varID = intArr }
                            indexExpr: literal { token = 0 }
1298.                call foo
                        lValue: lValue { varID = boolVar }
1301.                call prnitln
                        lValue: lValue { varID = ct }
1303.                call circ { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 10 }
1306.                call foo
                        lValue: lValue { varID = objArr }
                            indexExpr: literal { token = 0 }
1308.                call foo
                        lValue: lValue { varID = Math }
1311.                call intFuncInt
1313.                call dblFuncIntDbl
1315.                call log
                        lValue: lValue { varID = ct }
1317.                call atan2
                        lValue: lValue { varID = Math }
1319.                call boolFuncBoolStringGameObj { #exprs = 2 }
                        exprs:
                            literal { token = false }
                            literal { token = "" }
1321.                call rect { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 10 }
1323.                call voidFunc { #exprs = 1 }
                        exprs:
                            lValue { varID = intVar }
1325.                call print { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "intVar =" }
                            lValue { varID = intVar }
1327.                call atan { #exprs = 2 }
                        lValue: lValue { varID = Math }
                        exprs:
                            literal { token = 4 }
                            literal { token = 3 }
1329.                call logm { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = intVar }
                            lValue { varID = objVar }
1331.                var indent { vt = String }
                        initExpr: literal { token = "2 Tabs" }
1333.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "1 Space + 2 Tabs" }
1335.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "2 Tabs" }
1337.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "8 Spaces" }
1339.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "2 Tabs" }
1341.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "4 Spaces + 1 Tab" }
1343.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "2 Tabs" }
1345.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1347.                        call voidFunc
1349.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1351.                        call voidFunc
1352.                if { #stmts = 2 }
                        expr: literal { token = false }
                        stmts:
1355.                        call voidFunc
1356.                        call voidFunc
1358.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1359.                        call voidFunc
1361.                call voidFunc
1362.                if { #stmts = 2 }
                        expr: literal { token = false }
                        stmts:
1364.                        call voidFunc
1366.                        call voidFunc
1368.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1371.                        call voidFunc
1373.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1375.                        call voidFunc
1378.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
1382.                        call voidFunc
                        stmts:
1379.                        call voidFunc
1383.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
1387.                        call voidFunc
                        stmts:
1384.                        call voidFunc
1388.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
1391.                        call voidFunc
                        stmts:
1389.                        call voidFunc
1393.                call voidFunc
1394.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
1399.                        call voidFunc
                        stmts:
1395.                        call voidFunc
1401.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: literal { token = false }
                                stmts:
1405.                                call voidFunc
                        stmts:
1402.                        call voidFunc
1406.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: literal { token = false }
                                stmts:
1411.                                call voidFunc
                        stmts:
1407.                        call voidFunc
1413.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 1 }
                                expr: literal { token = false }
                                elseStmts:
1419.                                call voidFunc
                                stmts:
1417.                                call voidFunc
                        stmts:
1414.                        call voidFunc
1420.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 1 }
                                expr: literal { token = false }
                                elseStmts:
1426.                                call voidFunc
                                stmts:
1423.                                call voidFunc
                        stmts:
1421.                        call voidFunc
1427.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 1 }
                                expr: literal { token = false }
                                elseStmts:
                                    if { #elseStmts = 1, #stmts = 1 }
                                        expr: literal { token = false }
                                        elseStmts:
1436.                                        call voidFunc
                                        stmts:
1433.                                        call voidFunc
                                stmts:
1430.                                call voidFunc
                        stmts:
1428.                        call voidFunc
1437.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1438.                        if { #elseStmts = 1, #stmts = 1 }
                                expr: literal { token = false }
                                elseStmts:
1442.                                call voidFunc
                                stmts:
1439.                                call voidFunc
1443.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1445.                        if { #elseStmts = 1, #stmts = 1 }
                                expr: literal { token = false }
                                elseStmts:
1451.                                call voidFunc
                                stmts:
1447.                                call voidFunc
1455.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1456.                        if { #elseStmts = 1, #stmts = 1 }
                                expr: literal { token = false }
                                elseStmts:
                                    if { #stmts = 1 }
                                        expr: literal { token = false }
                                        stmts:
1460.                                        call voidFunc
                                stmts:
1457.                                call voidFunc
1461.                for { #stmts = 1 }
1461.                    initStmt: var ii { vt = int, isGlobal = false }
                            initExpr: literal { token = 0 }
                        expr: (<)
                            right: literal { token = 100 }
                            left: lValue { varID = ii }
1461.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
1463.                        call voidFunc
1464.                for { #stmts = 1 }
1464.                    initStmt: var ii { vt = int, isGlobal = false }
                            initExpr: literal { token = 0 }
                        expr: (<)
                            right: literal { token = 100 }
                            left: lValue { varID = ii }
1464.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
1467.                        call voidFunc
1469.                for { #stmts = 1 }
1469.                    initStmt: var ii { vt = int, isGlobal = false }
                            initExpr: literal { token = 0 }
                        expr: (<)
                            right: literal { token = 100 }
                            left: lValue { varID = ii }
1469.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
1472.                        call voidFunc
1474.                while { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1476.                        call voidFunc
1477.                while { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1480.                        call voidFunc
1482.                while { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1483.                        call voidFunc
1485.                call voidFunc
1486.                doWhile { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1488.                        call voidFunc
1490.                doWhile { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1493.                        call voidFunc
1496.                doWhile { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1497.                        call voidFunc
1500.                var x1 { vt = int }
1502.                var x2 { vt = int }
1502.                var x3 { vt = int }
1503.                var circle { vt = GameObj }
                        initExpr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 10 }
1509.                call log { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 1 }
                            literal { token = 2 }
                            literal { token = 3 }
1510.                var multiLineArrInit { vt = array of int }
                        initExpr: arrayInit { #exprs = 2 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
1513.                var multiLineArrDec { vt = array of int }
                        initExpr: newArray { vt = int }
                            lengthExpr: call random { #exprs = 2 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = 1 }
                                    literal { token = 10 }
1518.                if { #elseStmts = 1, #stmts = 1 }
                        expr: (>)
                            right: literal { token = 3 }
                            left: call random { #exprs = 2 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = 1 }
                                    literal { token = 2 }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: (>)
                                    right: literal { token = 3 }
                                    left: call random { #exprs = 2 }
                                        lValue: lValue { varID = ct }
                                        exprs:
                                            literal { token = 1 }
                                            literal { token = 2 }
                                stmts:
1523.                                call voidFunc
                        stmts:
1519.                        call voidFunc
1526.                while { #stmts = 1 }
                        expr: (>)
                            right: literal { token = 3 }
                            left: call random { #exprs = 2 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = 1 }
                                    literal { token = 2 }
                        stmts:
1527.                        call voidFunc
1528.                doWhile { #stmts = 1 }
                        expr: (<)
                            right: literal { token = 0 }
                            left: call max { #exprs = 2 }
                                lValue: lValue { varID = Math }
                                exprs:
                                    literal { token = 1 }
                                    literal { token = 0 }
                        stmts:
1529.                        call voidFunc
1535.                for { #stmts = 1 }
                        expr: (<)
                            right: literal { token = 0 }
                            left: call max { #exprs = 2 }
                                lValue: lValue { varID = Math }
                                exprs:
                                    literal { token = 1 }
                                    literal { token = 0 }
                        stmts:
1536.                        call voidFunc
1537.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1538.                        call voidFunc
1540.                call voidFunc
1541.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
1544.                        call voidFunc
                        stmts:
1542.                        call voidFunc
1546.                call voidFunc
1547.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: literal { token = false }
                                stmts:
1550.                                call voidFunc
                        stmts:
1548.                        call voidFunc
1552.                call voidFunc
1553.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1554.                        call voidFunc
1556.                while { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1557.                        call voidFunc
1558.                for { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1559.                        call voidFunc
1561.                call voidFunc
1562.                while { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1563.                        call voidFunc
1565.                call voidFunc
1575.                var privateInt { vt = int }
                        initExpr: literal { token = 0 }
1577.                var publicDouble { vt = double }
                        initExpr: literal { token = 0 }
1579.                var halfIntVar { vt = double }
                        initExpr: (/)
                            right: literal { token = 2 }
                            left: cast { vt = int }
                                expr: lValue { varID = intVar }
1580.                if
                        expr: literal { token = false }
1582.                var bogusVarInit { vt = int }
                        initExpr: literal { token = 0 }
1583.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if
                                expr: literal { token = false }
                        stmts:
1584.                        call voidFunc
1587.                var bogusVarDecl { vt = int }
1588.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1589.                        call voidFunc
1592.                var bogusArrayInit { vt = array of int }
                        initExpr: arrayInit { #exprs = 1 }
                            exprs:
                                literal { token = 0 }
1593.                while
                        expr: literal { token = false }
1595.                var bogusArrayDecl { vt = array of int }
1629.        func myFunc { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
1629.                var myVar { vt = int, isGlobal = false }
1633.        func update { #paramVars = 0, vt = GameObj, #stmts = 0 }
1637.        func onMousePress { #paramVars = 3, vt = String, #stmts = 0 }
                paramVars:
1637.                var obj { vt = GameObj, isGlobal = false }
1637.                var x { vt = double, isGlobal = false }
1637.                var y { vt = double, isGlobal = false }
1641.        func onMousePress { #paramVars = 2, vt = void, #stmts = 0 }
                paramVars:
1641.                var x { vt = double, isGlobal = false }
1641.                var y { vt = double, isGlobal = false }
1645.        func onKeyPress { #paramVars = 3, vt = void, #stmts = 0 }
                paramVars:
1645.                var obj { vt = GameObj, isGlobal = false }
1645.                var x { vt = double, isGlobal = false }
1645.                var y { vt = double, isGlobal = false }
1649.        func onKeyRelease { #paramVars = 0, vt = void, #stmts = 0 }
1653.        func onMousePress { #paramVars = 3, vt = void, #stmts = 0 }
                paramVars:
1653.                var obj { vt = boolean, isGlobal = false }
1653.                var x { vt = double, isGlobal = false }
1653.                var y { vt = double, isGlobal = false }
1657.        func onMouseDrag { #paramVars = 3, vt = void, #stmts = 0 }
                paramVars:
1657.                var obj { vt = GameObj, isGlobal = false }
1657.                var x { vt = int, isGlobal = false }
1657.                var y { vt = double, isGlobal = false }
1661.        func onMouseRelease { #paramVars = 3, vt = void, #stmts = 0 }
                paramVars:
1661.                var obj { vt = GameObj, isGlobal = false }
1661.                var x { vt = double, isGlobal = false }
1661.                var y { vt = String, isGlobal = false }
1665.        func onKeyPress { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
1665.                var keyName { vt = double, isGlobal = false }
1669.        func onKeyRelease { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
1669.                var keyName { vt = int, isGlobal = false }
1673.        func onCharTyped { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
1673.                var keyName { vt = GameObj, isGlobal = false }
1677.        func overIndentedFunc { #paramVars = 0, vt = void, #stmts = 0 }
1681.        func underIndentedFunc { #paramVars = 0, vt = void, #stmts = 0 }
1684.        func funcWithUnindentedBody { #paramVars = 0, vt = int, #stmts = 1 }
                stmts:
1687.                return
                        expr: literal { token = 0 }
1689.        func multiLineFuncDef { #paramVars = 2, vt = void, #stmts = 0 }
                paramVars:
1689.                var arg1 { vt = int, isGlobal = false }
1691.                var arg2 { vt = int, isGlobal = false }
1694.        func multilineReturnFunc { #paramVars = 0, vt = int, #stmts = 1 }
                stmts:
1698.                return
                        expr: call max { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
1700.        func returnBeforeBlockEndErrorsFunc { #paramVars = 0, vt = void, #stmts = 7 }
                stmts:
1703.                return
1704.                var boolVar { vt = boolean }
                        initExpr: literal { token = false }
1705.                if { #elseStmts = 1, #stmts = 2 }
                        expr: lValue { varID = boolVar }
                        elseStmts:
                            if { #elseStmts = 2, #stmts = 2 }
                                expr: lValue { varID = boolVar }
                                elseStmts:
1720.                                return
1721.                                call voidFunc
                                stmts:
1714.                                return
1715.                                call voidFunc
                        stmts:
1708.                        return
1709.                        call voidFunc
1724.                return
1726.                for { #stmts = 2 }
                        expr: lValue { varID = boolVar }
                        stmts:
1729.                        return
1730.                        call voidFunc
1733.                while { #stmts = 2 }
                        expr: lValue { varID = boolVar }
                        stmts:
1736.                        return
1737.                        call voidFunc
1740.                doWhile { #stmts = 2 }
                        expr: lValue { varID = boolVar }
                        stmts:
1743.                        return
1744.                        call voidFunc
1748.        func missingCurlyBracketFunc { #paramVars = 0, vt = void, stmts = false }
1750.        func lastFunc { #paramVars = 0, vt = void, #stmts = 0 }
        vars:
  7.        var myVar { vt = int, isGlobal = true }
                initExpr: literal { token = 1 }
  9.        var button { vt = GameObj, isGlobal = true }
                initExpr: call text { #exprs = 4 }
                    lValue: lValue { varID = ct }
                    exprs:
                        literal { token = "START" }
                        literal { token = 0 }
                        literal { token = 0 }
                        literal { token = 10 }
 11.        var intResult { vt = int, isGlobal = true }
                initExpr: call intFunc
 13.        var overIndentedInstanceVar { vt = int, isGlobal = true }
 15.        var underIndentedInstanceVar { vt = int, isGlobal = true }
 16.        var classLevelMultilineIntArray1 { vt = array of int, isGlobal = true }
                initExpr: arrayInit { #exprs = 2 }
                    exprs:
                        literal { token = 1 }
                        literal { token = 2 }
 19.        var classLevelMultilineIntArray2 { vt = array of int, isGlobal = true }
                initExpr: arrayInit { #exprs = 3 }
                    exprs:
                        literal { token = 1 }
                        literal { token = 2 }
                        literal { token = 3 }
 23.        var classLevelMultilineIntArray3 { vt = array of int, isGlobal = true }
                initExpr: newArray { vt = int }
                    lengthExpr: call max { #exprs = 2 }
                        lValue: lValue { varID = Math }
                        exprs:
                            literal { token = 1 }
                            literal { token = 2 }
 27.        var classLevelVarTypeMismatchIntDouble { vt = int, isGlobal = true }
                initExpr: literal { token = 0.1 }
 29.        var MAX_ENEMIES { vt = int, isConst = true, isGlobal = true }
                initExpr: literal { token = 100 }
 30.        var numEnemies { vt = int, isGlobal = true }
                initExpr: call min { #exprs = 2 }
                    lValue: lValue { varID = Math }
                    exprs:
                        literal { token = 1000 }
                        lValue { varID = MAX_ENEMIES }
 31.        var doubleArr { vt = array of double, isGlobal = true }
                initExpr: arrayInit { #exprs = 3 }
                    exprs:
                        literal { token = 1.0 }
                        literal { token = 2.0 }
                        literal { token = 3.0 }
 34.        var leftWall { vt = GameObj, isGlobal = true }
 34.        var rightWall { vt = GameObj, isGlobal = true }
 34.        var topWall { vt = GameObj, isGlobal = true }
 34.        var bottomWall { vt = GameObj, isGlobal = true }
 35.        var enemies { vt = array of GameObj, isGlobal = true }
 36.        var friends { vt = array of GameObj, isGlobal = true }
                initExpr: newArray { vt = GameObj }
                    lengthExpr: lValue { varID = MAX_ENEMIES }
 37.        var myPrivateVar { vt = int, isGlobal = true }
741.        var newWidth { vt = double, isGlobal = true }
                initExpr: call getWidth
                    lValue: lValue { varID = ct }
