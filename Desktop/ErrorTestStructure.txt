    program ErrorTest { #funcs = 36, #vars = 4 }
        funcs:
 18.        func emptyFunc { typeID = void, #stmts = 0, #params = 0 }
 21.        func voidFunc { typeID = void, #stmts = 1, #params = 0 }
                stmts:
 23.                var i { typeID = int, isLocal = true }
                        initExpr: literal { token = 0 }
 25.        func intFunc { typeID = int, #stmts = 2, #params = 0 }
                stmts:
 27.                var i { typeID = int, isLocal = true }
                        initExpr: literal { token = 1 }
 28.                return
                        expr: lValue { varID = i }
 30.        func dblFunc { typeID = double, #stmts = 2, #params = 0 }
                stmts:
 32.                var d { typeID = double, isLocal = true }
                        initExpr: literal { token = 0.0 }
 33.                return
                        expr: lValue { varID = d }
 35.        func boolFunc { typeID = boolean, #stmts = 2, #params = 0 }
                stmts:
 37.                var b { typeID = boolean, isLocal = true }
                        initExpr: literal { token = true }
 38.                return
                        expr: lValue { varID = b }
 40.        func strFunc { typeID = String, #stmts = 2, #params = 0 }
                stmts:
 42.                var s { typeID = String, isLocal = true }
                        initExpr: literal { token = "" }
 43.                return
                        expr: lValue { varID = s }
 45.        func gObjFunc { typeID = GameObj, #stmts = 1, #params = 0 }
                stmts:
 47.                return
                        expr: call { #exprs = 3 }
                            lValue: lValue { varID = ct, fieldID = circle }
                            exprs:
                                literal { token = 0.0 }
                                literal { token = 0.0 }
                                literal { token = 1.0 }
 49.        func intArrFuncInt { typeID = int, #stmts = 1, isArray = true, #params = 1 }
                stmts:
 51.                return
                        expr: newArray { typeID = int }
                            lengthExpr: lValue { varID = n }
                params:
                    param n { typeID = int }
 53.        func intFuncInt { typeID = int, #stmts = 1, #params = 1 }
                stmts:
 55.                return
                        expr: (+)
                            right: literal { token = 1 }
                            left: (*)
                                right: literal { token = 2 }
                                left: lValue { varID = i }
                params:
                    param i { typeID = int }
 57.        func dblFuncIntDbl { typeID = double, #stmts = 1, #params = 2 }
                stmts:
 59.                return
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
                params:
                    param i { typeID = int }
                    param d { typeID = double }
 61.        func boolFuncBoolStringGameObj { typeID = boolean, #stmts = 1, #params = 3 }
                stmts:
 63.                return
                        expr: (&&)
                            right: lValue { varID = g, fieldID = visible }
                            left: (&&)
                                right: call { #exprs = 1 }
                                    lValue: lValue { varID = s, fieldID = equals }
                                    exprs:
                                        literal { token = "" }
                                left: lValue { varID = b }
                params:
                    param b { typeID = boolean }
                    param s { typeID = String }
                    param g { typeID = GameObj }
 65.        func recursiveFunc { typeID = int, #stmts = 2, #params = 1 }
                stmts:
 67.                if { #stmts = 1 }
                        expr: (<=)
                            right: literal { token = 0 }
                            left: lValue { varID = i }
                        stmts:
 68.                        return
                                expr: literal { token = 0 }
 69.                return
                        expr: (+)
                            right: call { #exprs = 1 }
                                lValue: lValue { varID = recursiveFunc }
                                exprs:
                                    (-)
                                        right: literal { token = 1 }
                                        left: lValue { varID = i }
                            left: literal { token = 1 }
                params:
                    param i { typeID = int }
 74.        func start { typeID = int, #stmts = 405, isPublic = true, #params = 0 }
                stmts:
 79.                var i { typeID = int, isLocal = true }
                        initExpr: literal { token = 3 }
 80.                assign (=)
                        lValue: lValue { varID = i }
                        expr: unaryOp (-)
                            expr: literal { token = 5 }
 81.                assign (++)
                        lValue: lValue { varID = i }
 82.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (+)
                            right: literal { token = 1 }
                            left: lValue { varID = i }
 83.                assign (+=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 1 }
 84.                assign (-=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 2 }
 85.                assign (*=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 3 }
 86.                assign (/=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 4 }
 87.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call
                            lValue: lValue { varID = intFunc }
 88.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = intFuncInt }
                            exprs:
                                (-)
                                    right: (*)
                                        right: lValue { varID = i }
                                        left: literal { token = 345 }
                                    left: (-)
                                        right: parens
                                            expr: (+)
                                                right: lValue { varID = i }
                                                left: lValue { varID = i }
                                        left: lValue { varID = i }
 89.                var foo { typeID = int, isLocal = true }
                        initExpr: (+)
                            right: literal { token = 4 }
                            left: lValue { varID = i }
 90.                var score { typeID = int, isLocal = true }
                        initExpr: literal { token = 500 }
 91.                var j { typeID = int, isLocal = true }
 91.                var k { typeID = int, isLocal = true }
 92.                var exponentialNumberNoDot { typeID = double, isLocal = true }
                        initExpr: literal { token = 12e10 }
 93.                var exponentialNumberWithDot { typeID = double, isLocal = true }
                        initExpr: literal { token = 3.42e2 }
 94.                var expontialNumberWithDecimalPlaces { typeID = double, isLocal = true }
                        initExpr: literal { token = 6.62e-34 }
 95.                var d { typeID = double, isLocal = true }
                        initExpr: literal { token = 3.14 }
 96.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 100 }
 97.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = .5 }
 98.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 1.2345e6 }
 99.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 1.2345e+67 }
100.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = .12e0 }
101.                assign (=)
                        lValue: lValue { varID = d }
                        expr: unaryOp (-)
                            expr: literal { token = .123e-456 }
102.                assign (=)
                        lValue: lValue { varID = d }
                        expr: unaryOp (-)
                            expr: literal { token = .5 }
103.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: literal { token = 2 }
                            left: lValue { varID = d }
104.                assign (++)
                        lValue: lValue { varID = d }
105.                assign (+=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 0.5 }
106.                assign (-=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 7 }
107.                assign (*=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 8 }
108.                assign (/=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 8.0 }
109.                var d2 { typeID = double, isLocal = true }
                        initExpr: literal { token = 3 }
110.                var d3 { typeID = double, isLocal = true }
                        initExpr: (+)
                            right: (*)
                                right: parens
                                    expr: (+)
                                        right: lValue { varID = d }
                                        left: lValue { varID = d2 }
                                left: literal { token = 2 }
                            left: lValue { varID = d }
111.                var x1 { typeID = double, isLocal = true }
111.                var x2 { typeID = double, isLocal = true }
111.                var y1 { typeID = double, isLocal = true }
111.                var y2 { typeID = double, isLocal = true }
112.                assign (=)
                        lValue: lValue { varID = x1 }
                        expr: literal { token = 1 }
113.                assign (=)
                        lValue: lValue { varID = x2 }
                        expr: literal { token = 2.0 }
114.                assign (=)
                        lValue: lValue { varID = y1 }
                        expr: literal { token = .5e+1 }
115.                assign (=)
                        lValue: lValue { varID = y2 }
                        expr: unaryOp (-)
                            expr: literal { token = .5e-1 }
116.                var eps { typeID = double, isLocal = true }
                        initExpr: literal { token = 1e-4 }
117.                var name { typeID = String, isLocal = true }
                        initExpr: literal { token = "Einstein" }
118.                var b { typeID = boolean, isLocal = true }
                        initExpr: literal { token = true }
119.                var b2 { typeID = boolean, isLocal = true }
                        initExpr: literal { token = false }
120.                var b3 { typeID = boolean, isLocal = true }
                        initExpr: (||)
                            right: lValue { varID = b2 }
                            left: lValue { varID = b }
121.                var s { typeID = String, isLocal = true }
                        initExpr: literal { token = "A string variable" }
122.                assign (=)
                        lValue: lValue { varID = s }
                        expr: lValue { varID = s }
123.                assign (=)
                        lValue: lValue { varID = s }
                        expr: literal { token = null }
126.                var colors { typeID = String, isArray = true, isLocal = true }
                        initExpr: arrayInit { #exprs = 5 }
                            exprs:
                                literal { token = "black" }
                                literal { token = "white" }
                                literal { token = "red" }
                                literal { token = "green" }
                                literal { token = "blue" }
127.                assign (=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 100 }
128.                var strArr { typeID = String, isArray = true, isLocal = true }
                        initExpr: newArray { typeID = String }
                            lengthExpr: lValue { varID = i }
129.                assign (=)
                        lValue: lValue { varID = strArr }
                        expr: lValue { varID = colors }
130.                var intArr { typeID = int, isArray = true, isLocal = true }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
                                literal { token = 3 }
131.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: newArray { typeID = int }
                            lengthExpr: literal { token = 100 }
132.                var intArr2 { typeID = int, isArray = true, isLocal = true }
                        initExpr: newArray { typeID = int }
                            lengthExpr: call
                                lValue: lValue { varID = s, fieldID = length }
133.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: lValue { varID = intArr2 }
134.                var dblArr { typeID = double, isArray = true, isLocal = true }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1.1 }
                                literal { token = 2.2 }
                                literal { token = 3.3 }
135.                var dblArr2 { typeID = double, isArray = true, isLocal = true }
                        initExpr: newArray { typeID = double }
                            lengthExpr: literal { token = 100 }
136.                assign (=)
                        lValue: lValue { varID = dblArr }
                        expr: lValue { varID = dblArr2 }
137.                var gObjArr { typeID = GameObj, isArray = true, isLocal = true }
                        initExpr: newArray { typeID = GameObj }
                            lengthExpr: (*)
                                right: literal { token = 2 }
                                left: lValue { varID = i }
140.                call
                        lValue: lValue { varID = voidFunc }
141.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call
                            lValue: lValue { varID = intFunc }
142.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call
                            lValue: lValue { varID = dblFunc }
143.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call
                            lValue: lValue { varID = boolFunc }
144.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call
                            lValue: lValue { varID = strFunc }
145.                var gObj { typeID = GameObj, isLocal = true }
                        initExpr: call
                            lValue: lValue { varID = gObjFunc }
146.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = intArrFuncInt }
                            exprs:
                                lValue { varID = i }
147.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = intFuncInt }
                            exprs:
                                lValue { varID = i }
148.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 2 }
                            lValue: lValue { varID = dblFuncIntDbl }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = d }
149.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call { #exprs = 3 }
                            lValue: lValue { varID = boolFuncBoolStringGameObj }
                            exprs:
                                lValue { varID = b }
                                lValue { varID = s }
                                lValue { varID = gObj }
150.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = recursiveFunc }
                            exprs:
                                literal { token = 2 }
153.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (/)
                            right: literal { token = 1 }
                            left: literal { token = 5 }
154.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (/)
                            right: literal { token = 20 }
                            left: literal { token = 100 }
155.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (+)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
156.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (-)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
157.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (*)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
158.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (%)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
159.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (-)
                            right: lValue { varID = i }
                            left: (+)
                                right: lValue { varID = i }
                                left: (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
160.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (*)
                            right: parens
                                expr: (-)
                                    right: lValue { varID = i }
                                    left: parens
                                        expr: (+)
                                            right: lValue { varID = i }
                                            left: lValue { varID = i }
                            left: lValue { varID = i }
161.                assign (=)
                        lValue: lValue { varID = d }
                        expr: lValue { varID = i }
162.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
163.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
164.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
165.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
166.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (%)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
167.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
168.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
169.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
170.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
171.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (%)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
172.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
173.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
174.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
175.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
176.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (%)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
177.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: (*)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
                            left: (-)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
178.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = i }
                            left: (+)
                                right: (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
                                left: lValue { varID = d }
179.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: (*)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
                            left: (*)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
180.                assign (=)
                        lValue: lValue { varID = d }
                        expr: parens
                            expr: (-)
                                right: (*)
                                    right: lValue { varID = d }
                                    left: lValue { varID = d }
                                left: (*)
                                    right: parens
                                        expr: lValue { varID = i }
                                    left: lValue { varID = i }
181.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = s }
182.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: literal { token = "s" }
                            left: (+)
                                right: lValue { varID = s }
                                left: lValue { varID = s }
183.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = i }
                            left: lValue { varID = s }
184.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = s }
185.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = b }
                            left: lValue { varID = s }
186.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = gObj }
                            left: lValue { varID = s }
187.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = i }
188.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = d }
189.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = b }
190.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = gObj }
191.                assign (=)
                        lValue: lValue { varID = b }
                        expr: lValue { varID = b }
192.                assign (=)
                        lValue: lValue { varID = b }
                        expr: unaryOp (!)
                            expr: lValue { varID = b }
193.                assign (=)
                        lValue: lValue { varID = b }
                        expr: parens
                            expr: lValue { varID = b }
194.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
195.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
196.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
197.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
198.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
199.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = gObj }
                            left: lValue { varID = gObj }
200.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
201.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
202.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
203.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
204.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
205.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = gObj }
                            left: lValue { varID = gObj }
206.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
207.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
208.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
209.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
210.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
211.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
212.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
213.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
214.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
215.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
216.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
217.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
218.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
219.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
220.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
221.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
222.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (||)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
223.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (&&)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
224.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: literal { token = 2 }
                            left: literal { token = 1 }
225.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: literal { token = 2 }
                            left: literal { token = 1.1 }
226.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: literal { token = 2 }
                            left: literal { token = 1 }
227.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: literal { token = 2.2 }
                            left: literal { token = 1 }
228.                assign (=)
                        lValue: lValue { varID = b2 }
                        expr: (||)
                            right: (&&)
                                right: (==)
                                    right: lValue { varID = b }
                                    left: lValue { varID = b }
                                left: lValue { varID = b3 }
                            left: lValue { varID = b2 }
229.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: literal { token = 0 }
                            left: (%)
                                right: literal { token = 2 }
                                left: lValue { varID = i }
230.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (&&)
                            right: lValue { varID = b }
                            left: parens
                                expr: (||)
                                    right: lValue { varID = b }
                                    left: lValue { varID = b }
231.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (&&)
                            right: parens
                                expr: (<)
                                    right: literal { token = 0.0001 }
                                    left: (-)
                                        right: literal { token = 3.14159 }
                                        left: lValue { varID = Math, fieldID = PI }
                            left: parens
                                expr: (==)
                                    right: literal { token = 2 }
                                    left: (+)
                                        right: literal { token = 1 }
                                        left: literal { token = 1 }
234.                if { #elseStmts = 1, #stmts = 1 }
                        expr: (==)
                            right: literal { token = 0 }
                            left: lValue { varID = i }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 1 }
                                expr: (<=)
                                    right: literal { token = 10 }
                                    left: lValue { varID = i }
                                elseStmts:
239.                                assign (*=)
                                        lValue: lValue { varID = i }
                                        expr: literal { token = 5 }
                                stmts:
237.                                assign (++)
                                        lValue: lValue { varID = i }
                        stmts:
235.                        call { #exprs = 1 }
                                lValue: lValue { varID = ct, fieldID = setBackColor }
                                exprs:
                                    lValue { varID = colors }
                                        indexExpr: lValue { varID = i }
241.                if { #elseStmts = 1, #stmts = 2 }
                        expr: (>)
                            right: literal { token = 0 }
                            left: lValue { varID = i }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 2 }
                                expr: (<=)
                                    right: literal { token = 10 }
                                    left: lValue { varID = i }
                                elseStmts:
                                    if { #elseStmts = 2, #stmts = 1 }
                                        expr: lValue { varID = b }
                                        elseStmts:
255.                                        var tempStr { typeID = String, isLocal = true }
                                                initExpr: literal { token = "I'll be " }
256.                                        assign (=)
                                                lValue: lValue { varID = tempStr }
                                                expr: (+)
                                                    right: literal { token = "out of scope soon" }
                                                    left: lValue { varID = tempStr }
                                        stmts:
252.                                        assign (++)
                                                lValue: lValue { varID = i }
                                stmts:
248.                                assign (=)
                                        lValue: lValue { varID = d }
                                        expr: literal { token = 7 }
249.                                call { #exprs = 1 }
                                        lValue: lValue { varID = ct, fieldID = setSoundVolume }
                                        exprs:
                                            literal { token = 1 }
                        stmts:
243.                        assign (=)
                                lValue: lValue { varID = j }
                                expr: literal { token = 0 }
244.                        assign (=)
                                lValue: lValue { varID = k }
                                expr: literal { token = 0 }
258.                if { #stmts = 1 }
                        expr: (&&)
                            right: (<=)
                                right: lValue { varID = eps }
                                left: call { #exprs = 4 }
                                    lValue: lValue { varID = ct, fieldID = distance }
                                    exprs:
                                        lValue { varID = x1 }
                                        lValue { varID = y1 }
                                        lValue { varID = x2 }
                                        lValue { varID = y2 }
                            left: call { #exprs = 1 }
                                lValue: lValue { varID = ct, fieldID = isError }
                                exprs:
                                    call { #exprs = 1 }
                                        lValue: lValue { varID = Math, fieldID = tan }
                                        exprs:
                                            lValue { varID = d }
                        stmts:
259.                        call { #exprs = 1 }
                                lValue: lValue { varID = ct, fieldID = println }
                                exprs:
                                    literal { token = "oops" }
262.                for { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
263.                        for { #stmts = 1 }
                                stmts:
264.                                for { #stmts = 1 }
                                        initStmt: assign (=)
                                            lValue: lValue { varID = i }
                                            expr: literal { token = 0 }
                                        stmts:
265.                                        for { #stmts = 1 }
                                                expr: (<)
                                                    right: literal { token = 10 }
                                                    left: lValue { varID = i }
                                                stmts:
266.                                                for { #stmts = 1 }
                                                        nextStmt: assign (++)
                                                            lValue: lValue { varID = i }
                                                        stmts:
267.                                                        for { #stmts = 1 }
                                                                expr: lValue { varID = b }
                                                                stmts:
268.                                                                assign (=)
                                                                        lValue: lValue { varID = d }
                                                                        expr: literal { token = 0 }
270.                for { #stmts = 2 }
                        expr: (<)
                            right: literal { token = 10 }
                            left: lValue { varID = ii }
270.                    initStmt: var ii { typeID = int, isLocal = true }
                            initExpr: literal { token = 0 }
                        nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
272.                        for { #stmts = 1 }
                                expr: (!=)
                                    right: literal { token = 10 }
                                    left: lValue { varID = jj }
272.                            initStmt: var jj { typeID = int, isLocal = true }
                                    initExpr: literal { token = 0 }
                                nextStmt: assign (+=)
                                    lValue: lValue { varID = jj }
                                    expr: literal { token = 1 }
                                stmts:
273.                                if { #stmts = 1 }
                                        expr: (||)
                                            right: (==)
                                                right: literal { token = 0 }
                                                left: lValue { varID = jj }
                                            left: (==)
                                                right: literal { token = 0 }
                                                left: lValue { varID = ii }
                                        stmts:
274.                                        break
275.                        break
278.                for { #stmts = 2 }
                        expr: (<)
                            right: literal { token = 10 }
                            left: lValue { varID = ii }
278.                    initStmt: var ii { typeID = int, isLocal = true }
                            initExpr: literal { token = 0 }
                        nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
280.                        for { #stmts = 2 }
                                expr: (!=)
                                    right: literal { token = 10 }
                                    left: lValue { varID = jj }
280.                            initStmt: var jj { typeID = int, isLocal = true }
                                    initExpr: literal { token = 0 }
                                nextStmt: assign (+=)
                                    lValue: lValue { varID = jj }
                                    expr: literal { token = 1 }
                                stmts:
282.                                if { #stmts = 2 }
                                        expr: (&&)
                                            right: (==)
                                                right: literal { token = 0 }
                                                left: lValue { varID = jj }
                                            left: (==)
                                                right: literal { token = 0 }
                                                left: lValue { varID = ii }
                                        stmts:
284.                                        assign (=)
                                                lValue: lValue { varID = intArr }
                                                    indexExpr: lValue { varID = ii }
                                                expr: literal { token = 0 }
285.                                        break
287.                                break
289.                        break
292.                var xVar { typeID = double, isLocal = true }
                        initExpr: literal { token = 0 }
293.                var yVar { typeID = double, isLocal = true }
                        initExpr: literal { token = 1 }
294.                for { #stmts = 1 }
                        expr: (<)
                            right: literal { token = 1 }
                            left: lValue { varID = xVar }
294.                    initStmt: var dx { typeID = double, isLocal = true }
                            initExpr: literal { token = .1 }
                        nextStmt: assign (+=)
                            lValue: lValue { varID = xVar }
                            expr: lValue { varID = dx }
                        stmts:
295.                        for { #stmts = 1 }
                                expr: (>)
                                    right: literal { token = 0 }
                                    left: lValue { varID = yVar }
295.                            initStmt: var dy { typeID = double, isLocal = true }
                                    initExpr: unaryOp (-)
                                        expr: literal { token = .5 }
                                nextStmt: assign (+=)
                                    lValue: lValue { varID = yVar }
                                    expr: lValue { varID = dy }
                                stmts:
296.                                assign (=)
                                        lValue: lValue { varID = d }
                                        expr: (-)
                                            right: (/)
                                                right: lValue { varID = dy }
                                                left: lValue { varID = yVar }
                                            left: (+)
                                                right: lValue { varID = dx }
                                                left: lValue { varID = xVar }
298.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: newArray { typeID = int }
                            lengthExpr: literal { token = 1 }
299.                forArray { typeID = int, varID = a, arrayID = intArr, #stmts = 1 }
                        stmts:
300.                        assign (=)
                                lValue: lValue { varID = a }
                                expr: literal { token = 0 }
303.                while { #stmts = 1 }
                        expr: lValue { varID = b }
                        stmts:
304.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: literal { token = false }
306.                while { #stmts = 3 }
                        expr: lValue { varID = b }
                        stmts:
308.                        call
                                lValue: lValue { varID = voidFunc }
309.                        assign (++)
                                lValue: lValue { varID = i }
310.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: literal { token = false }
313.                doWhile { #stmts = 1 }
                        expr: lValue { varID = b }
                        stmts:
314.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: literal { token = false }
317.                doWhile { #stmts = 1 }
                        expr: lValue { varID = b }
                        stmts:
319.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: literal { token = false }
324.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = print }
                        exprs:
                            literal { token = "Hello world" }
325.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = print }
                        exprs:
                            (+)
                                right: literal { token = "world" }
                                left: (+)
                                    right: literal { token = " " }
                                    left: literal { token = "Hello" }
326.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = print }
                        exprs:
                            literal { token = "Hello world\n" }
327.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = print }
                        exprs:
                            lValue { varID = i }
328.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = print }
                        exprs:
                            lValue { varID = d }
329.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = print }
                        exprs:
                            lValue { varID = b }
330.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = print }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: literal { token = "i = " }
331.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = print }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: literal { token = "d = " }
332.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = print }
                        exprs:
                            lValue { varID = name }
333.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = print }
                        exprs:
                            (+)
                                right: lValue { varID = name }
                                left: (+)
                                    right: literal { token = " " }
                                    left: literal { token = "Hello" }
334.                var circleObj { typeID = GameObj, isLocal = true }
                        initExpr: call { #exprs = 3 }
                            lValue: lValue { varID = ct, fieldID = circle }
                            exprs:
                                literal { token = 50 }
                                literal { token = 50 }
                                literal { token = 20 }
335.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = print }
                        exprs:
                            lValue { varID = circleObj }
336.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = println }
                        exprs:
                            literal { token = "Hello world" }
337.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = println }
                        exprs:
                            (+)
                                right: literal { token = "world" }
                                left: (+)
                                    right: literal { token = " " }
                                    left: literal { token = "Hello" }
338.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = println }
                        exprs:
                            literal { token = "Hello world\n" }
339.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = println }
                        exprs:
                            lValue { varID = i }
340.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = println }
                        exprs:
                            lValue { varID = d }
341.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = println }
                        exprs:
                            lValue { varID = b }
342.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = println }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: literal { token = "i = " }
343.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = println }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: literal { token = "d = " }
344.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = println }
                        exprs:
                            lValue { varID = name }
345.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = println }
                        exprs:
                            (+)
                                right: lValue { varID = name }
                                left: (+)
                                    right: literal { token = " " }
                                    left: literal { token = "Hello" }
346.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = println }
                        exprs:
                            lValue { varID = circleObj }
347.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = log }
                        exprs:
                            lValue { varID = i }
348.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = log }
                        exprs:
                            lValue { varID = d }
349.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = log }
                        exprs:
                            lValue { varID = b }
350.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = log }
                        exprs:
                            lValue { varID = circleObj }
351.                var obj2 { typeID = GameObj, isLocal = true }
                        initExpr: lValue { varID = circleObj }
352.                var obj3 { typeID = GameObj, isLocal = true }
                        initExpr: lValue { varID = obj2 }
353.                call { #exprs = 9 }
                        lValue: lValue { varID = ct, fieldID = log }
                        exprs:
                            literal { token = "circleObj = " }
                            lValue { varID = circleObj }
                            literal { token = "obj2 = " }
                            lValue { varID = obj2 }
                            literal { token = "obj3=" }
                            lValue { varID = obj3 }
                            literal { token = 3.14 }
                            lValue { varID = Math, fieldID = PI }
                            literal { token = 42 }
354.                call { #exprs = 2 }
                        lValue: lValue { varID = ct, fieldID = logm }
                        exprs:
                            literal { token = "message" }
                            literal { token = null }
355.                call { #exprs = 3 }
                        lValue: lValue { varID = ct, fieldID = logm }
                        exprs:
                            literal { token = "message" }
                            lValue { varID = obj2 }
                            lValue { varID = obj3 }
356.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = setOutputFile }
                        exprs:
                            literal { token = "output.txt" }
357.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = setOutputFile }
                        exprs:
                            literal { token = "output/nameList.txt" }
358.                var outputFilename { typeID = String, isLocal = true }
                        initExpr: literal { token = "output.txt" }
359.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = setOutputFile }
                        exprs:
                            lValue { varID = outputFilename }
362.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = showAlert }
                        exprs:
                            literal { token = "alert meassage" }
363.                var message { typeID = String, isLocal = true }
                        initExpr: literal { token = "alert!" }
364.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = showAlert }
                        exprs:
                            lValue { varID = message }
365.                var n { typeID = int, isLocal = true }
                        initExpr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = inputInt }
                            exprs:
                                literal { token = "enter a number: " }
366.                assign (=)
                        lValue: lValue { varID = n }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = inputInt }
                            exprs:
                                literal { token = "enter a number: " }
367.                assign (=)
                        lValue: lValue { varID = n }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = inputInt }
                            exprs:
                                lValue { varID = message }
368.                var x { typeID = double, isLocal = true }
                        initExpr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = inputNumber }
                            exprs:
                                literal { token = "enter a number: " }
369.                assign (=)
                        lValue: lValue { varID = x }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = inputNumber }
                            exprs:
                                literal { token = "enter a number: " }
370.                assign (=)
                        lValue: lValue { varID = x }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = inputNumber }
                            exprs:
                                lValue { varID = message }
371.                var quit { typeID = boolean, isLocal = true }
                        initExpr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = inputYesNo }
                            exprs:
                                literal { token = "Quit?" }
372.                assign (=)
                        lValue: lValue { varID = quit }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = inputYesNo }
                            exprs:
                                lValue { varID = message }
373.                var inputStr { typeID = String, isLocal = true }
                        initExpr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = inputString }
                            exprs:
                                literal { token = "Quit?" }
374.                assign (=)
                        lValue: lValue { varID = inputStr }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = inputString }
                            exprs:
                                literal { token = "Quit?" }
375.                assign (=)
                        lValue: lValue { varID = inputStr }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = inputString }
                            exprs:
                                lValue { varID = message }
378.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = setTitle }
                        exprs:
                            literal { token = "Title" }
379.                var title { typeID = String, isLocal = true }
                        initExpr: literal { token = "Title" }
380.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = setTitle }
                        exprs:
                            lValue { varID = title }
381.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = setTitle }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: (+)
                                    right: literal { token = " " }
                                    left: lValue { varID = title }
382.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = setTitle }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: lValue { varID = title }
383.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = setHeight }
                        exprs:
                            (/)
                                right: literal { token = 16 }
                                left: (*)
                                    right: literal { token = 9 }
                                    left: literal { token = 100.0 }
384.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = setHeight }
                        exprs:
                            lValue { varID = i }
385.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = setHeight }
                        exprs:
                            lValue { varID = d }
386.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = setHeight }
                        exprs:
                            (+)
                                right: (*)
                                    right: literal { token = 4 }
                                    left: literal { token = 5 }
                                left: (*)
                                    right: lValue { varID = d }
                                    left: lValue { varID = i }
387.                var height { typeID = double, isLocal = true }
                        initExpr: call
                            lValue: lValue { varID = ct, fieldID = getHeight }
388.                assign (=)
                        lValue: lValue { varID = height }
                        expr: call
                            lValue: lValue { varID = ct, fieldID = getHeight }
389.                var width { typeID = double, isLocal = true }
                        initExpr: (-)
                            right: literal { token = 10 }
                            left: (*)
                                right: literal { token = 0.5 }
                                left: call
                                    lValue: lValue { varID = ct, fieldID = getWidth }
390.                assign (=)
                        lValue: lValue { varID = width }
                        expr: call
                            lValue: lValue { varID = ct, fieldID = getWidth }
391.                var pxPerUnit { typeID = double, isLocal = true }
                        initExpr: call
                            lValue: lValue { varID = ct, fieldID = getPixelsPerUnit }
392.                assign (=)
                        lValue: lValue { varID = pxPerUnit }
                        expr: call
                            lValue: lValue { varID = ct, fieldID = getPixelsPerUnit }
393.                var pixelWidth { typeID = int, isLocal = true }
                        initExpr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = round }
                            exprs:
                                (*)
                                    right: call
                                        lValue: lValue { varID = ct, fieldID = getPixelsPerUnit }
                                    left: call
                                        lValue: lValue { varID = ct, fieldID = getWidth }
394.                var pixelHeight { typeID = int, isLocal = true }
                        initExpr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = round }
                            exprs:
                                (*)
                                    right: call
                                        lValue: lValue { varID = ct, fieldID = getPixelsPerUnit }
                                    left: call
                                        lValue: lValue { varID = ct, fieldID = getHeight }
395.                var currentScreen { typeID = String, isLocal = true }
                        initExpr: call
                            lValue: lValue { varID = ct, fieldID = getScreen }
396.                assign (=)
                        lValue: lValue { varID = currentScreen }
                        expr: call
                            lValue: lValue { varID = ct, fieldID = getScreen }
397.                call
                        lValue: lValue { varID = ct, fieldID = clearScreen }
398.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = clearGroup }
                        exprs:
                            literal { token = "targets" }
399.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = clearGroup }
                        exprs:
                            literal { token = "" }
400.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = setBackColor }
                        exprs:
                            literal { token = "orange" }
401.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = setBackColor }
                        exprs:
                            literal { token = "light blue" }
402.                var backColor { typeID = String, isLocal = true }
                        initExpr: literal { token = "red" }
403.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = setBackColor }
                        exprs:
                            lValue { varID = backColor }
404.                call { #exprs = 3 }
                        lValue: lValue { varID = ct, fieldID = setBackColorRGB }
                        exprs:
                            literal { token = 255 }
                            literal { token = 0 }
                            literal { token = 0 }
405.                call { #exprs = 3 }
                        lValue: lValue { varID = ct, fieldID = setBackColorRGB }
                        exprs:
                            lValue { varID = i }
                            lValue { varID = i }
                            lValue { varID = i }
406.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = setBackImage }
                        exprs:
                            literal { token = "background.png" }
407.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = setBackImage }
                        exprs:
                            literal { token = "C:\\Users\\ben\\Pictures\\landscape.jpg" }
408.                var filename { typeID = String, isLocal = true }
                        initExpr: literal { token = "landscape.png" }
409.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = setBackImage }
                        exprs:
                            lValue { varID = filename }
411.                assign (=)
                        lValue: lValue { varID = x }
                        expr: literal { token = 50 }
412.                var y { typeID = double, isLocal = true }
                        initExpr: literal { token = 50 }
413.                var diameter { typeID = double, isLocal = true }
                        initExpr: literal { token = 10 }
414.                var circle { typeID = GameObj, isLocal = true }
                        initExpr: call { #exprs = 3 }
                            lValue: lValue { varID = ct, fieldID = circle }
                            exprs:
                                literal { token = 50 }
                                literal { token = 20 }
                                literal { token = 10 }
415.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call { #exprs = 3 }
                            lValue: lValue { varID = ct, fieldID = circle }
                            exprs:
                                literal { token = 50.0 }
                                literal { token = 20.0 }
                                literal { token = 10.0 }
416.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call { #exprs = 4 }
                            lValue: lValue { varID = ct, fieldID = circle }
                            exprs:
                                literal { token = 50 }
                                literal { token = 20 }
                                literal { token = 10.5 }
                                literal { token = "blue" }
417.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call { #exprs = 3 }
                            lValue: lValue { varID = ct, fieldID = circle }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = diameter }
418.                var color { typeID = String, isLocal = true }
                        initExpr: literal { token = "green" }
419.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call { #exprs = 4 }
                            lValue: lValue { varID = ct, fieldID = circle }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = diameter }
                                lValue { varID = color }
420.                var rect { typeID = GameObj, isLocal = true }
                        initExpr: call { #exprs = 4 }
                            lValue: lValue { varID = ct, fieldID = rect }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = width }
                                lValue { varID = height }
421.                assign (=)
                        lValue: lValue { varID = rect }
                        expr: call { #exprs = 5 }
                            lValue: lValue { varID = ct, fieldID = rect }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = width }
                                lValue { varID = height }
                                lValue { varID = color }
422.                assign (=)
                        lValue: lValue { varID = rect }
                        expr: call { #exprs = 4 }
                            lValue: lValue { varID = ct, fieldID = rect }
                            exprs:
                                literal { token = 50.0 }
                                literal { token = 33.3 }
                                literal { token = 11.2 }
                                literal { token = 23.890 }
423.                assign (=)
                        lValue: lValue { varID = rect }
                        expr: call { #exprs = 5 }
                            lValue: lValue { varID = ct, fieldID = rect }
                            exprs:
                                literal { token = 50 }
                                literal { token = 33 }
                                literal { token = 11 }
                                literal { token = 23 }
                                literal { token = "green" }
424.                var line { typeID = GameObj, isLocal = true }
                        initExpr: call { #exprs = 4 }
                            lValue: lValue { varID = ct, fieldID = line }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = d }
                                lValue { varID = width }
                                lValue { varID = height }
425.                assign (=)
                        lValue: lValue { varID = line }
                        expr: call { #exprs = 5 }
                            lValue: lValue { varID = ct, fieldID = line }
                            exprs:
                                lValue { varID = x1 }
                                lValue { varID = y1 }
                                lValue { varID = x2 }
                                lValue { varID = y2 }
                                lValue { varID = color }
426.                assign (=)
                        lValue: lValue { varID = line }
                        expr: call { #exprs = 4 }
                            lValue: lValue { varID = ct, fieldID = line }
                            exprs:
                                literal { token = 0.0 }
                                literal { token = .0 }
                                literal { token = 100.0 }
                                literal { token = 95.0 }
427.                assign (=)
                        lValue: lValue { varID = line }
                        expr: call { #exprs = 5 }
                            lValue: lValue { varID = ct, fieldID = line }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 100 }
                                literal { token = 95 }
                                literal { token = "red" }
428.                var text { typeID = GameObj, isLocal = true }
                        initExpr: call { #exprs = 4 }
                            lValue: lValue { varID = ct, fieldID = text }
                            exprs:
                                lValue { varID = s }
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = height }
429.                assign (=)
                        lValue: lValue { varID = text }
                        expr: call { #exprs = 5 }
                            lValue: lValue { varID = ct, fieldID = text }
                            exprs:
                                lValue { varID = s }
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = height }
                                lValue { varID = color }
430.                assign (=)
                        lValue: lValue { varID = text }
                        expr: call { #exprs = 4 }
                            lValue: lValue { varID = ct, fieldID = text }
                            exprs:
                                (+)
                                    right: lValue { varID = score }
                                    left: literal { token = "Score: " }
                                literal { token = 20.0 }
                                literal { token = 90.0 }
                                literal { token = 10.0 }
431.                assign (=)
                        lValue: lValue { varID = text }
                        expr: call { #exprs = 5 }
                            lValue: lValue { varID = ct, fieldID = text }
                            exprs:
                                (+)
                                    right: lValue { varID = score }
                                    left: literal { token = "Score: " }
                                literal { token = 20 }
                                literal { token = 90 }
                                literal { token = 10 }
                                literal { token = "purple" }
432.                var img { typeID = GameObj, isLocal = true }
                        initExpr: call { #exprs = 4 }
                            lValue: lValue { varID = ct, fieldID = image }
                            exprs:
                                lValue { varID = filename }
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = width }
433.                assign (=)
                        lValue: lValue { varID = img }
                        expr: call { #exprs = 4 }
                            lValue: lValue { varID = ct, fieldID = image }
                            exprs:
                                literal { token = "car.png" }
                                literal { token = 42 }
                                literal { token = 25 }
                                literal { token = 38.7 }
434.                assign (=)
                        lValue: lValue { varID = img }
                        expr: call { #exprs = 4 }
                            lValue: lValue { varID = ct, fieldID = image }
                            exprs:
                                literal { token = "C:\\Users\\john\\Pictures\\car.jpg" }
                                literal { token = 42 }
                                literal { token = 25 }
                                literal { token = 38 }
435.                var objs { typeID = GameObj, isArray = true, isLocal = true }
                        initExpr: arrayInit { #exprs = 5 }
                            exprs:
                                lValue { varID = circle }
                                lValue { varID = rect }
                                lValue { varID = line }
                                lValue { varID = text }
                                lValue { varID = img }
436.                assign (=)
                        lValue: lValue { varID = img }
                        expr: lValue { varID = rect }
438.                var mouseClicked { typeID = boolean, isLocal = true }
                        initExpr: call
                            lValue: lValue { varID = ct, fieldID = clicked }
439.                if { #stmts = 1 }
                        expr: call
                            lValue: lValue { varID = ct, fieldID = clicked }
                        stmts:
440.                        assign (=)
                                lValue: lValue { varID = mouseClicked }
                                expr: call
                                    lValue: lValue { varID = ct, fieldID = clicked }
441.                if { #stmts = 1 }
                        expr: (>)
                            right: literal { token = 50 }
                            left: call
                                lValue: lValue { varID = ct, fieldID = clickX }
                        stmts:
442.                        assign (=)
                                lValue: lValue { varID = x }
                                expr: call
                                    lValue: lValue { varID = ct, fieldID = clickX }
443.                assign (=)
                        lValue: lValue { varID = x }
                        expr: call
                            lValue: lValue { varID = ct, fieldID = clickX }
444.                if { #stmts = 1 }
                        expr: (<=)
                            right: lValue { varID = x }
                            left: call
                                lValue: lValue { varID = ct, fieldID = clickY }
                        stmts:
445.                        assign (=)
                                lValue: lValue { varID = y }
                                expr: call
                                    lValue: lValue { varID = ct, fieldID = clickY }
446.                assign (=)
                        lValue: lValue { varID = y }
                        expr: call
                            lValue: lValue { varID = ct, fieldID = clickY }
447.                var keyName { typeID = String, isLocal = true }
                        initExpr: literal { token = "space" }
448.                var keyPressed { typeID = boolean, isLocal = true }
                        initExpr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = keyPressed }
                            exprs:
                                lValue { varID = keyName }
449.                if { #stmts = 1 }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = keyPressed }
                            exprs:
                                lValue { varID = keyName }
                        stmts:
450.                        if { #stmts = 1 }
                                expr: call { #exprs = 1 }
                                    lValue: lValue { varID = ct, fieldID = keyPressed }
                                    exprs:
                                        literal { token = "up" }
                                stmts:
451.                                assign (=)
                                        lValue: lValue { varID = keyPressed }
                                        expr: call { #exprs = 1 }
                                            lValue: lValue { varID = ct, fieldID = keyPressed }
                                            exprs:
                                                literal { token = "up" }
452.                if { #stmts = 1 }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = charTyped }
                            exprs:
                                literal { token = "+" }
                        stmts:
453.                        assign (++)
                                lValue: lValue { varID = x }
454.                var ch { typeID = String, isLocal = true }
                        initExpr: literal { token = "+" }
455.                if { #stmts = 1 }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = charTyped }
                            exprs:
                                lValue { varID = ch }
                        stmts:
456.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: call { #exprs = 1 }
                                    lValue: lValue { varID = ct, fieldID = charTyped }
                                    exprs:
                                        literal { token = "+" }
457.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = charTyped }
                            exprs:
                                lValue { varID = ch }
459.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = loadSound }
                            exprs:
                                lValue { varID = filename }
460.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = loadSound }
                        exprs:
                            literal { token = "pow.wav" }
461.                if { #stmts = 1 }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = loadSound }
                            exprs:
                                literal { token = "sounds/ding.mp3" }
                        stmts:
462.                        call { #exprs = 1 }
                                lValue: lValue { varID = ct, fieldID = sound }
                                exprs:
                                    literal { token = "sounds/ding.mp3" }
463.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = sound }
                        exprs:
                            lValue { varID = filename }
464.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = setSoundVolume }
                        exprs:
                            lValue { varID = d }
465.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = setSoundVolume }
                        exprs:
                            literal { token = 1 }
466.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = setSoundVolume }
                        exprs:
                            literal { token = 0.5 }
468.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call { #exprs = 2 }
                            lValue: lValue { varID = ct, fieldID = random }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
469.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call { #exprs = 2 }
                            lValue: lValue { varID = ct, fieldID = random }
                            exprs:
                                literal { token = 0 }
                                literal { token = 100 }
470.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = round }
                            exprs:
                                lValue { varID = d }
471.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = round }
                            exprs:
                                lValue { varID = i }
472.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = round }
                            exprs:
                                literal { token = 1.62 }
473.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = round }
                            exprs:
                                (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = d }
474.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = round }
                            exprs:
                                (+)
                                    right: (*)
                                        right: lValue { varID = i }
                                        left: lValue { varID = d }
                                    left: literal { token = 1 }
475.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = round }
                            exprs:
                                call { #exprs = 4 }
                                    lValue: lValue { varID = ct, fieldID = distance }
                                    exprs:
                                        lValue { varID = x1 }
                                        lValue { varID = y1 }
                                        lValue { varID = x2 }
                                        lValue { varID = y2 }
476.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 2 }
                            lValue: lValue { varID = ct, fieldID = roundDecimal }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = i }
477.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 2 }
                            lValue: lValue { varID = ct, fieldID = roundDecimal }
                            exprs:
                                (+)
                                    right: literal { token = 1 }
                                    left: (*)
                                        right: lValue { varID = i }
                                        left: lValue { varID = d }
                                (*)
                                    right: literal { token = 2 }
                                    left: lValue { varID = i }
478.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 2 }
                            lValue: lValue { varID = ct, fieldID = roundDecimal }
                            exprs:
                                literal { token = 2.71828182846 }
                                literal { token = 2 }
479.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 2 }
                            lValue: lValue { varID = ct, fieldID = roundDecimal }
                            exprs:
                                call { #exprs = 4 }
                                    lValue: lValue { varID = ct, fieldID = distance }
                                    exprs:
                                        lValue { varID = x1 }
                                        lValue { varID = y1 }
                                        lValue { varID = x2 }
                                        lValue { varID = y2 }
                                literal { token = 1 }
480.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call { #exprs = 2 }
                            lValue: lValue { varID = ct, fieldID = intDiv }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
481.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call { #exprs = 2 }
                            lValue: lValue { varID = ct, fieldID = intDiv }
                            exprs:
                                literal { token = 5 }
                                literal { token = 2 }
482.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = isError }
                            exprs:
                                lValue { varID = d }
483.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = isError }
                            exprs:
                                (/)
                                    right: lValue { varID = d }
                                    left: lValue { varID = d }
484.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = isError }
                            exprs:
                                (/)
                                    right: lValue { varID = i }
                                    left: lValue { varID = d }
485.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = isError }
                            exprs:
                                (/)
                                    right: literal { token = 0 }
                                    left: literal { token = 0.0 }
486.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 4 }
                            lValue: lValue { varID = ct, fieldID = distance }
                            exprs:
                                lValue { varID = circle, fieldID = x }
                                lValue { varID = circle, fieldID = y }
                                lValue { varID = rect, fieldID = x }
                                lValue { varID = rect, fieldID = y }
487.                if { #stmts = 1 }
                        expr: (<)
                            right: (/)
                                right: literal { token = 2 }
                                left: parens
                                    expr: (+)
                                        right: lValue { varID = rect, fieldID = width }
                                        left: lValue { varID = circle, fieldID = width }
                            left: call { #exprs = 4 }
                                lValue: lValue { varID = ct, fieldID = distance }
                                exprs:
                                    lValue { varID = circle, fieldID = x }
                                    lValue { varID = circle, fieldID = y }
                                    lValue { varID = rect, fieldID = x }
                                    lValue { varID = rect, fieldID = y }
                        stmts:
488.                        assign (=)
                                lValue: lValue { varID = i }
                                expr: call
                                    lValue: lValue { varID = ct, fieldID = getTimer }
489.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (-)
                            right: lValue { varID = i }
                            left: call
                                lValue: lValue { varID = ct, fieldID = getTimer }
490.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call
                            lValue: lValue { varID = ct, fieldID = getVersion }
491.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = round }
                        exprs:
                            call
                                lValue: lValue { varID = ct, fieldID = getVersion }
493.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = toInt }
                            exprs:
                                lValue { varID = d }
494.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = toInt }
                            exprs:
                                (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = d }
495.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = toInt }
                            exprs:
                                literal { token = .707 }
496.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = toInt }
                            exprs:
                                lValue { varID = Math, fieldID = PI }
497.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = toInt }
                            exprs:
                                literal { token = 6.0221409e+2 }
498.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = parseInt }
                            exprs:
                                lValue { varID = s }
499.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = parseInt }
                            exprs:
                                literal { token = "345" }
500.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = canParseInt }
                            exprs:
                                lValue { varID = s }
501.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = canParseInt }
                            exprs:
                                literal { token = "12345" }
502.                while { #stmts = 1 }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = canParseInt }
                            exprs:
                                lValue { varID = s }
                        stmts:
503.                        assign (=)
                                lValue: lValue { varID = d }
                                expr: call { #exprs = 1 }
                                    lValue: lValue { varID = ct, fieldID = parseNumber }
                                    exprs:
                                        lValue { varID = s }
504.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: literal { token = 100 }
                            left: call { #exprs = 1 }
                                lValue: lValue { varID = ct, fieldID = parseNumber }
                                exprs:
                                    literal { token = "123.45" }
505.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = canParseNumber }
                            exprs:
                                literal { token = "543.210" }
506.                while { #stmts = 1 }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = canParseNumber }
                            exprs:
                                lValue { varID = s }
                        stmts:
507.                        assign (=)
                                lValue: lValue { varID = s }
                                expr: call { #exprs = 1 }
                                    lValue: lValue { varID = ct, fieldID = formatDecimal }
                                    exprs:
                                        lValue { varID = d }
508.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call { #exprs = 2 }
                            lValue: lValue { varID = ct, fieldID = formatDecimal }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = i }
509.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call { #exprs = 2 }
                            lValue: lValue { varID = ct, fieldID = formatDecimal }
                            exprs:
                                lValue { varID = d }
                                call { #exprs = 2 }
                                    lValue: lValue { varID = ct, fieldID = intDiv }
                                    exprs:
                                        (*)
                                            right: lValue { varID = i }
                                            left: literal { token = 2 }
                                        lValue { varID = i }
510.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: literal { token = ":00" }
                            left: call { #exprs = 2 }
                                lValue: lValue { varID = ct, fieldID = formatDecimal }
                                exprs:
                                    literal { token = 6.0221 }
                                    literal { token = 7 }
511.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = formatInt }
                            exprs:
                                lValue { varID = i }
512.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call { #exprs = 2 }
                            lValue: lValue { varID = ct, fieldID = formatInt }
                            exprs:
                                (+)
                                    right: literal { token = 1 }
                                    left: lValue { varID = i }
                                (+)
                                    right: lValue { varID = k }
                                    left: lValue { varID = j }
514.                assign (=)
                        lValue: lValue { varID = rect, fieldID = x }
                        expr: (-)
                            right: literal { token = 10 }
                            left: lValue { varID = circle, fieldID = y }
515.                assign (=)
                        lValue: lValue { varID = circle, fieldID = width }
                        expr: (*)
                            right: literal { token = 1.5 }
                            left: lValue { varID = circle, fieldID = height }
516.                assign (=)
                        lValue: lValue { varID = rect, fieldID = height }
                        expr: (*)
                            right: literal { token = 1.1 }
                            left: lValue { varID = img, fieldID = height }
517.                assign (=)
                        lValue: lValue { varID = line, fieldID = x }
                        expr: (+)
                            right: lValue { varID = line, fieldID = width }
                            left: lValue { varID = line, fieldID = x }
518.                assign (=)
                        lValue: lValue { varID = img, fieldID = width }
                        expr: (*)
                            right: literal { token = .9 }
                            left: lValue { varID = img, fieldID = width }
519.                assign (=)
                        lValue: lValue { varID = img, fieldID = xSpeed }
                        expr: literal { token = 0 }
520.                assign (=)
                        lValue: lValue { varID = img, fieldID = ySpeed }
                        expr: literal { token = .5 }
521.                assign (=)
                        lValue: lValue { varID = line, fieldID = lineWidth }
                        expr: literal { token = 3 }
522.                assign (=)
                        lValue: lValue { varID = img, fieldID = lineWidth }
                        expr: (*)
                            right: literal { token = 2 }
                            left: lValue { varID = line, fieldID = lineWidth }
523.                assign (=)
                        lValue: lValue { varID = rect, fieldID = visible }
                        expr: literal { token = false }
524.                assign (=)
                        lValue: lValue { varID = circle, fieldID = clickable }
                        expr: lValue { varID = circle, fieldID = visible }
525.                if { #stmts = 1 }
                        expr: lValue { varID = img, fieldID = visible }
                        stmts:
526.                        assign (=)
                                lValue: lValue { varID = img, fieldID = clickable }
                                expr: literal { token = true }
527.                if { #stmts = 1 }
                        expr: (!=)
                            right: literal { token = false }
                            left: lValue { varID = img, fieldID = clickable }
                        stmts:
528.                        assign (=)
                                lValue: lValue { varID = img, fieldID = autoDelete }
                                expr: lValue { varID = img, fieldID = visible }
529.                assign (=)
                        lValue: lValue { varID = line, fieldID = group }
                        expr: lValue { varID = s }
530.                assign (=)
                        lValue: lValue { varID = line, fieldID = autoDelete }
                        expr: (||)
                            right: (&&)
                                right: (==)
                                    right: literal { token = 1 }
                                    left: call { #exprs = 1 }
                                        lValue: lValue { varID = s, fieldID = indexOf }
                                        exprs:
                                            lValue { varID = line, fieldID = group }
                                left: call { #exprs = 1 }
                                    lValue: lValue { varID = s, fieldID = equals }
                                    exprs:
                                        literal { token = "world" }
                            left: call { #exprs = 1 }
                                lValue: lValue { varID = s, fieldID = equals }
                                exprs:
                                    literal { token = "hello" }
532.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call
                            lValue: lValue { varID = rect, fieldID = getType }
533.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = println }
                        exprs:
                            (+)
                                right: literal { token = "more text" }
                                left: call
                                    lValue: lValue { varID = text, fieldID = getText }
534.                call { #exprs = 1 }
                        lValue: lValue { varID = img, fieldID = setText }
                        exprs:
                            literal { token = "racecar.png" }
535.                call { #exprs = 1 }
                        lValue: lValue { varID = text, fieldID = setText }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: literal { token = "Score: " }
536.                call { #exprs = 1 }
                        lValue: lValue { varID = text, fieldID = setText }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: literal { token = "Score: " }
537.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = log }
                        exprs:
                            call
                                lValue: lValue { varID = line, fieldID = toString }
538.                call { #exprs = 2 }
                        lValue: lValue { varID = img, fieldID = setSize }
                        exprs:
                            (*)
                                right: literal { token = 1.1 }
                                left: lValue { varID = img, fieldID = width }
                            (*)
                                right: literal { token = 1.1 }
                                left: lValue { varID = img, fieldID = height }
539.                call { #exprs = 1 }
                        lValue: lValue { varID = text, fieldID = align }
                        exprs:
                            lValue { varID = s }
540.                call { #exprs = 2 }
                        lValue: lValue { varID = text, fieldID = align }
                        exprs:
                            lValue { varID = s }
                            literal { token = true }
541.                call { #exprs = 2 }
                        lValue: lValue { varID = text, fieldID = align }
                        exprs:
                            lValue { varID = s }
                            literal { token = false }
542.                call { #exprs = 1 }
                        lValue: lValue { varID = circle, fieldID = setFillColor }
                        exprs:
                            (+)
                                right: lValue { varID = s }
                                left: literal { token = "light" }
543.                call { #exprs = 1 }
                        lValue: lValue { varID = circle, fieldID = setFillColor }
                        exprs:
                            call
                                lValue: lValue { varID = text, fieldID = getText }
544.                call { #exprs = 3 }
                        lValue: lValue { varID = circle, fieldID = setFillColorRGB }
                        exprs:
                            lValue { varID = i }
                            lValue { varID = j }
                            lValue { varID = k }
545.                call { #exprs = 1 }
                        lValue: lValue { varID = rect, fieldID = setLineColor }
                        exprs:
                            lValue { varID = colors }
                                indexExpr: lValue { varID = i }
546.                call { #exprs = 3 }
                        lValue: lValue { varID = rect, fieldID = setLineColorRGB }
                        exprs:
                            lValue { varID = i }
                            (-)
                                right: lValue { varID = i }
                                left: literal { token = 255 }
                            literal { token = 0 }
547.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call
                            lValue: lValue { varID = rect, fieldID = getLayer }
548.                if { #stmts = 1 }
                        expr: (>=)
                            right: call
                                lValue: lValue { varID = circle, fieldID = getLayer }
                            left: call
                                lValue: lValue { varID = rect, fieldID = getLayer }
                        stmts:
549.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: call { #exprs = 1 }
                                    lValue: lValue { varID = colors, fieldID = equals }
                                        indexExpr: call
                                            lValue: lValue { varID = rect, fieldID = getLayer }
                                    exprs:
                                        literal { token = "green" }
550.                call { #exprs = 1 }
                        lValue: lValue { varID = img, fieldID = setLayer }
                        exprs:
                            unaryOp (-)
                                expr: literal { token = 42 }
551.                call
                        lValue: lValue { varID = img, fieldID = delete }
552.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call
                            lValue: lValue { varID = img, fieldID = clicked }
553.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call { #exprs = 2 }
                            lValue: lValue { varID = img, fieldID = containsPoint }
                            exprs:
                                call
                                    lValue: lValue { varID = ct, fieldID = clickX }
                                call
                                    lValue: lValue { varID = ct, fieldID = clickY }
554.                if { #stmts = 1 }
                        expr: call { #exprs = 2 }
                            lValue: lValue { varID = img, fieldID = containsPoint }
                            exprs:
                                call
                                    lValue: lValue { varID = ct, fieldID = clickX }
                                call
                                    lValue: lValue { varID = ct, fieldID = clickY }
                        stmts:
555.                        while { #stmts = 1 }
                                expr: call { #exprs = 1 }
                                    lValue: lValue { varID = img, fieldID = hit }
                                    exprs:
                                        lValue { varID = rect }
                                stmts:
556.                                assign (=)
                                        lValue: lValue { varID = b }
                                        expr: (==)
                                            right: literal { token = true }
                                            left: call { #exprs = 1 }
                                                lValue: lValue { varID = img, fieldID = hit }
                                                exprs:
                                                    lValue { varID = rect }
558.                var e { typeID = double, isLocal = true }
                        initExpr: lValue { varID = Math, fieldID = E }
559.                var pi { typeID = double, isLocal = true }
                        initExpr: lValue { varID = Math, fieldID = PI }
560.                if { #stmts = 1 }
                        expr: (<)
                            right: lValue { varID = eps }
                            left: call { #exprs = 1 }
                                lValue: lValue { varID = Math, fieldID = abs }
                                exprs:
                                    (-)
                                        right: lValue { varID = img, fieldID = x }
                                        left: lValue { varID = rect, fieldID = x }
                        stmts:
561.                        assign (=)
                                lValue: lValue { varID = i }
                                expr: call { #exprs = 1 }
                                    lValue: lValue { varID = Math, fieldID = abs }
                                    exprs:
                                        lValue { varID = i }
562.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = Math, fieldID = acos }
                            exprs:
                                unaryOp (-)
                                    expr: literal { token = 0.5 }
563.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = Math, fieldID = asin }
                            exprs:
                                (/)
                                    right: literal { token = 2 }
                                    left: call { #exprs = 1 }
                                        lValue: lValue { varID = Math, fieldID = sqrt }
                                        exprs:
                                            literal { token = 3 }
564.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = Math, fieldID = atan }
                            exprs:
                                (/)
                                    right: call { #exprs = 1 }
                                        lValue: lValue { varID = Math, fieldID = sqrt }
                                        exprs:
                                            literal { token = 2 }
                                    left: literal { token = 1 }
565.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 2 }
                            lValue: lValue { varID = Math, fieldID = atan2 }
                            exprs:
                                (-)
                                    right: lValue { varID = img, fieldID = x }
                                    left: call
                                        lValue: lValue { varID = ct, fieldID = clickX }
                                (-)
                                    right: lValue { varID = img, fieldID = y }
                                    left: call
                                        lValue: lValue { varID = ct, fieldID = clickY }
566.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = Math, fieldID = ceil }
                            exprs:
                                lValue { varID = d }
567.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = Math, fieldID = cos }
                            exprs:
                                (/)
                                    right: literal { token = 2 }
                                    left: lValue { varID = Math, fieldID = PI }
568.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = Math, fieldID = cosh }
                            exprs:
                                (*)
                                    right: literal { token = 2 }
                                    left: lValue { varID = Math, fieldID = PI }
569.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = Math, fieldID = exp }
                            exprs:
                                (+)
                                    right: literal { token = 1 }
                                    left: (*)
                                        right: lValue { varID = Math, fieldID = PI }
                                        left: literal { token = 2 }
570.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = Math, fieldID = floor }
                            exprs:
                                unaryOp (-)
                                    expr: literal { token = 1.67 }
571.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = Math, fieldID = log }
                            exprs:
                                literal { token = 32 }
572.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = Math, fieldID = log10 }
                            exprs:
                                lValue { varID = d }
573.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 2 }
                            lValue: lValue { varID = Math, fieldID = max }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = d }
574.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call { #exprs = 2 }
                            lValue: lValue { varID = Math, fieldID = max }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
575.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 2 }
                            lValue: lValue { varID = Math, fieldID = min }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = d }
576.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call { #exprs = 2 }
                            lValue: lValue { varID = Math, fieldID = min }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
577.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 2 }
                            lValue: lValue { varID = Math, fieldID = pow }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = d }
578.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = Math, fieldID = sin }
                            exprs:
                                lValue { varID = d }
579.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = Math, fieldID = sinh }
                            exprs:
                                lValue { varID = d }
580.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = Math, fieldID = sqrt }
                            exprs:
                                lValue { varID = d }
581.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = Math, fieldID = tan }
                            exprs:
                                lValue { varID = d }
582.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = Math, fieldID = tanh }
                            exprs:
                                lValue { varID = d }
584.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = s, fieldID = compareTo }
                            exprs:
                                lValue { varID = s }
585.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = s, fieldID = equals }
                            exprs:
                                lValue { varID = s }
586.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = s, fieldID = indexOf }
                            exprs:
                                lValue { varID = s }
587.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call
                            lValue: lValue { varID = s, fieldID = length }
588.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = s, fieldID = substring }
                            exprs:
                                lValue { varID = i }
589.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = s, fieldID = substring }
                            exprs:
                                lValue { varID = i }
590.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call
                            lValue: lValue { varID = s, fieldID = toLowerCase }
591.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call
                            lValue: lValue { varID = s, fieldID = toUpperCase }
592.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call
                            lValue: lValue { varID = s, fieldID = trim }
600.        func ct { typeID = void, #stmts = 1, #params = 0 }
                stmts:
602.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = println }
                        exprs:
                            literal { token = "Hello world" }
606.        func int { typeID = double, #stmts = 1, #params = 0 }
                stmts:
608.                return
                        expr: literal { token = 0 }
611.        func foo { typeID = double, #stmts = 1, #params = 2 }
                stmts:
613.                return
                        expr: literal { token = 0 }
                params:
                    param i { typeID = int }
                    param boolean { typeID = GameObj }
616.        func bar { typeID = boolean, #stmts = 1, #params = 2 }
                stmts:
619.                return
                        expr: lValue { varID = TRUE }
                params:
                    param s { typeID = String }
                    param gameObj { typeID = GameObj }
622.        func Double { typeID = int, #stmts = 1, #params = 1 }
                stmts:
624.                return
                        expr: (*)
                            right: lValue { varID = x }
                            left: literal { token = 2 }
                params:
                    param x { typeID = int }
628.        func voidFunc { typeID = void, #stmts = 0, #params = 1 }
                params:
                    param i { typeID = int }
631.        func func { typeID = void, #stmts = 0, #params = 0 }
635.        func FUNC { typeID = void, #stmts = 0, #params = 0 }
638.        func AnotherFunc { typeID = void, #stmts = 0, #params = 0 }
642.        func anotherfunc { typeID = void, #stmts = 0, #params = 0 }
646.        func expectedErrors { typeID = void, #stmts = 229, #params = 0 }
                stmts:
648.                var intVar { typeID = int, isLocal = true }
                        initExpr: literal { token = 1 }
649.                var dblVar { typeID = double, isLocal = true }
                        initExpr: literal { token = 1.0 }
650.                var boolVar { typeID = boolean, isLocal = true }
                        initExpr: literal { token = false }
651.                var strVar { typeID = String, isLocal = true }
                        initExpr: literal { token = "a" }
652.                var objVar { typeID = GameObj, isLocal = true }
                        initExpr: call { #exprs = 3 }
                            lValue: lValue { varID = ct, fieldID = circle }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 10 }
653.                var intArr { typeID = int, isArray = true, isLocal = true }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
                                literal { token = 3 }
654.                var objArr { typeID = GameObj, isArray = true, isLocal = true }
                        initExpr: arrayInit { #exprs = 1 }
                            exprs:
                                lValue { varID = objVar }
657.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = objVar, fieldID = setText }
                            exprs:
                                literal { token = "circle" }
659.                var screen { typeID = double, isLocal = true }
                        initExpr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = setScreen }
                            exprs:
                                literal { token = "menu" }
661.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = setHeight }
                            exprs:
                                literal { token = 150 }
663.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: call
                            lValue: lValue { varID = voidFunc }
665.                var title { typeID = GameObj, isLocal = true }
                        initExpr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = setTitle }
                            exprs:
                                literal { token = "title" }
668.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = intVar }
670.                var b { typeID = boolean, isLocal = true }
                        initExpr: call { #exprs = 1 }
                            lValue: lValue { varID = intFuncInt }
                            exprs:
                                literal { token = 2 }
672.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = visible }
                        expr: literal { token = 0 }
674.                var s { typeID = String, isLocal = true }
                        initExpr: lValue { varID = intVar }
676.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = intVar }
679.                var i { typeID = int, isLocal = true }
                        initExpr: literal { token = 3.4 }
681.                assign (=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 1.2 }
683.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (*)
                            right: literal { token = 3.4 }
                            left: literal { token = 10 }
685.                var j { typeID = int, isLocal = true }
                        initExpr: (+)
                            right: literal { token = 3.14 }
                            left: literal { token = 5 }
687.                var plancksConst { typeID = int, isLocal = true }
                        initExpr: literal { token = 6.62e-34 }
689.                var exponentialNumberNoDot { typeID = int, isLocal = true }
                        initExpr: literal { token = 12e10 }
691.                var exponentialNumberWithDot { typeID = int, isLocal = true }
                        initExpr: literal { token = 3.42e2 }
693.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = autoDelete }
                        expr: lValue { varID = dblVar }
695.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: literal { token = 3.14 }
697.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = dblVar }
700.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call
                            lValue: lValue { varID = ct, fieldID = clicked }
702.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = x }
                        expr: lValue { varID = boolVar }
704.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = xSpeed }
                        expr: literal { token = false }
706.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = group }
                        expr: lValue { varID = boolVar }
708.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = boolVar }
711.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = objVar, fieldID = group }
713.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = ySpeed }
                        expr: literal { token = "fast" }
715.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = strVar }
717.                var score { typeID = GameObj, isLocal = true }
                        initExpr: literal { token = "100 pts" }
720.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = objVar }
722.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = width }
                        expr: lValue { varID = objVar }
724.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = objVar }
726.                var circle { typeID = String, isLocal = true }
                        initExpr: call { #exprs = 3 }
                            lValue: lValue { varID = ct, fieldID = circle }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 10 }
729.                var y { typeID = int, isLocal = true }
                        initExpr: call { #exprs = 1 }
                            lValue: lValue { varID = intFuncInt }
                            exprs:
                                literal { token = 2.3 }
731.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call { #exprs = 2 }
                            lValue: lValue { varID = ct, fieldID = random }
                            exprs:
                                literal { token = 0.0 }
                                literal { token = 10 }
733.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call { #exprs = 2 }
                            lValue: lValue { varID = ct, fieldID = random }
                            exprs:
                                literal { token = 0 }
                                literal { token = false }
735.                call { #exprs = 3 }
                        lValue: lValue { varID = ct, fieldID = setBackColorRGB }
                        exprs:
                            literal { token = "red" }
                            literal { token = 0 }
                            literal { token = 0 }
737.                call { #exprs = 1 }
                        lValue: lValue { varID = objVar, fieldID = setLayer }
                        exprs:
                            literal { token = "front" }
739.                call { #exprs = 2 }
                        lValue: lValue { varID = ct, fieldID = roundDecimal }
                        exprs:
                            literal { token = 3.14159 }
                            lValue { varID = objVar }
741.                call { #exprs = 1 }
                        lValue: lValue { varID = strVar, fieldID = substring }
                        exprs:
                            lValue { varID = objVar }
744.                call { #exprs = 2 }
                        lValue: lValue { varID = Math, fieldID = pow }
                        exprs:
                            lValue { varID = boolVar }
                            literal { token = 3 }
746.                call { #exprs = 2 }
                        lValue: lValue { varID = dblFuncIntDbl }
                        exprs:
                            literal { token = 0 }
                            literal { token = "pi" }
748.                call { #exprs = 2 }
                        lValue: lValue { varID = objVar, fieldID = containsPoint }
                        exprs:
                            lValue { varID = strVar }
                            lValue { varID = dblVar }
750.                call { #exprs = 1 }
                        lValue: lValue { varID = Math, fieldID = exp }
                        exprs:
                            lValue { varID = objVar }
753.                call { #exprs = 2 }
                        lValue: lValue { varID = objVar, fieldID = align }
                        exprs:
                            literal { token = "left" }
                            literal { token = 0 }
755.                call { #exprs = 3 }
                        lValue: lValue { varID = boolFuncBoolStringGameObj }
                        exprs:
                            lValue { varID = dblVar }
                            lValue { varID = strVar }
                            lValue { varID = objVar }
757.                call { #exprs = 3 }
                        lValue: lValue { varID = boolFuncBoolStringGameObj }
                        exprs:
                            lValue { varID = strVar }
                            lValue { varID = objVar }
                            lValue { varID = boolVar }
759.                call { #exprs = 3 }
                        lValue: lValue { varID = boolFuncBoolStringGameObj }
                        exprs:
                            lValue { varID = objVar }
                            lValue { varID = strVar }
                            lValue { varID = boolVar }
762.                call { #exprs = 1 }
                        lValue: lValue { varID = objVar, fieldID = align }
                        exprs:
                            lValue { varID = intVar }
764.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = parseInt }
                            exprs:
                                literal { token = 123 }
766.                call { #exprs = 4 }
                        lValue: lValue { varID = ct, fieldID = circle }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 1 }
                            literal { token = 1 }
768.                call { #exprs = 1 }
                        lValue: lValue { varID = objVar, fieldID = setText }
                        exprs:
                            literal { token = 1 }
770.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = canParseInt }
                            exprs:
                                literal { token = 1.0 }
772.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = ct, fieldID = canParseInt }
                            exprs:
                                lValue { varID = boolVar }
774.                call { #exprs = 1 }
                        lValue: lValue { varID = objVar, fieldID = align }
                        exprs:
                            literal { token = true }
776.                call { #exprs = 1 }
                        lValue: lValue { varID = strVar, fieldID = equals }
                        exprs:
                            lValue { varID = objVar }
779.                call { #exprs = 3 }
                        lValue: lValue { varID = boolFuncBoolStringGameObj }
                        exprs:
                            lValue { varID = boolVar }
                            lValue { varID = strVar }
                            literal { token = 42 }
781.                call { #exprs = 1 }
                        lValue: lValue { varID = objVar, fieldID = hit }
                        exprs:
                            literal { token = 0.0 }
783.                call { #exprs = 1 }
                        lValue: lValue { varID = objVar, fieldID = hit }
                        exprs:
                            literal { token = false }
785.                call { #exprs = 1 }
                        lValue: lValue { varID = objVar, fieldID = hit }
                        exprs:
                            literal { token = "the wall" }
788.                if { #stmts = 1 }
                        expr: (>)
                            right: literal { token = 0 }
                            left: call
                                lValue: lValue { varID = intFuncInt }
                        stmts:
790.                        call
                                lValue: lValue { varID = dblFuncIntDbl }
792.                call
                        lValue: lValue { varID = ct, fieldID = circle }
794.                call { #exprs = 3 }
                        lValue: lValue { varID = ct, fieldID = rect }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 10 }
796.                call { #exprs = 2 }
                        lValue: lValue { varID = ct, fieldID = circle }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
798.                call { #exprs = 1 }
                        lValue: lValue { varID = voidFunc }
                        exprs:
                            literal { token = 1 }
800.                call { #exprs = 3 }
                        lValue: lValue { varID = ct, fieldID = setBackColor }
                        exprs:
                            literal { token = 255 }
                            literal { token = 0 }
                            literal { token = 0 }
802.                call { #exprs = 1 }
                        lValue: lValue { varID = objVar, fieldID = delete }
                        exprs:
                            literal { token = true }
804.                call { #exprs = 2 }
                        lValue: lValue { varID = objVar, fieldID = setText }
                        exprs:
                            literal { token = "circle" }
                            literal { token = "green" }
807.                var k { typeID = int, isLocal = true }
                        initExpr: (/)
                            right: literal { token = 2 }
                            left: lValue { varID = i }
809.                call { #exprs = 2 }
                        lValue: lValue { varID = ct, fieldID = random }
                        exprs:
                            (/)
                                right: lValue { varID = intVar }
                                left: lValue { varID = intVar }
                            lValue { varID = intVar }
811.                assign (=)
                        lValue: lValue { varID = x }
                        expr: (+)
                            right: literal { token = 1 }
                            left: lValue { varID = x }
813.                for { #stmts = 1 }
                        expr: (<)
                            right: literal { token = 1 }
                            left: lValue { varID = x }
                        initStmt: assign (=)
                            lValue: lValue { varID = x }
                            expr: literal { token = 0 }
                        nextStmt: assign (++)
                            lValue: lValue { varID = x }
                        stmts:
815.                        call
                                lValue: lValue { varID = foo }
817.                var j { typeID = int, isLocal = true }
                        initExpr: literal { token = 3 }
819.                var uninitializedVar { typeID = int, isLocal = true }
821.                if { #stmts = 1 }
                        expr: (<)
                            right: literal { token = 0 }
                            left: lValue { varID = uninitializedVar }
                        stmts:
822.                        assign (=)
                                lValue: lValue { varID = uninitializedVar }
                                expr: literal { token = 0 }
823.                var g { typeID = GameObj, isLocal = true }
825.                assign (=)
                        lValue: lValue { varID = g, fieldID = xSpeed }
                        expr: literal { token = 1 }
828.                var n { typeID = integer, isLocal = true }
                        initExpr: literal { token = 100 }
830.                var gameOver { typeID = bool, isLocal = true }
                        initExpr: literal { token = false }
832.                var r { typeID = GameObj, isLocal = true }
                        initExpr: call { #exprs = 4 }
                            lValue: lValue { varID = ct, fieldID = rectangle }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 10 }
                                literal { token = 10 }
834.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = isVisible }
                        expr: literal { token = false }
836.                call
                        lValue: lValue { varID = objVar, fieldID = foo }
839.                var ch { typeID = string, isLocal = true }
                        initExpr: literal { token = "A" }
841.                var obj { typeID = gameObj, isLocal = true }
843.                call { #exprs = 3 }
                        lValue: lValue { varID = ct, fieldID = Circle }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 10 }
845.                call { #exprs = 2 }
                        lValue: lValue { varID = math, fieldID = atan2 }
                        exprs:
                            (-)
                                right: lValue { varID = r, fieldID = x }
                                left: call
                                    lValue: lValue { varID = ct, fieldID = clickX }
                            (-)
                                right: lValue { varID = r, fieldID = y }
                                left: call
                                    lValue: lValue { varID = ct, fieldID = clickY }
847.                call
                        lValue: lValue { varID = voidfunC }
849.                assign (=)
                        lValue: lValue { varID = intvar }
                        expr: literal { token = 2 }
852.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: lValue { varID = Null }
854.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = NULL }
856.                while { #stmts = 1 }
                        expr: lValue { varID = True }
                        stmts:
858.                        assign (=)
                                lValue: lValue { varID = boolVar }
                                expr: lValue { varID = TRUE }
860.                if { #stmts = 1 }
                        expr: lValue { varID = False }
                        stmts:
862.                        assign (=)
                                lValue: lValue { varID = objVar, fieldID = clickable }
                                expr: lValue { varID = FALSE }
865.                if { #stmts = 1 }
                        expr: (=)
                            right: literal { token = 0 }
                            left: lValue { varID = i }
                        stmts:
866.                        assign (=)
                                lValue: lValue { varID = i }
                                expr: literal { token = 0 }
868.                var intArr2 { typeID = int, isArray = true, isLocal = true }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
                                literal { token = 3.14 }
870.                var dblArr { typeID = double, isArray = true, isLocal = true }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = "two" }
                                literal { token = 3.14 }
872.                var strArr { typeID = String, isArray = true, isLocal = true }
                        initExpr: newArray { typeID = GameObj }
                            lengthExpr: literal { token = 100 }
874.                var boolArr { typeID = boolean, isArray = true, isLocal = true }
                        initExpr: call { #exprs = 1 }
                            lValue: lValue { varID = intArrFuncInt }
                            exprs:
                                literal { token = 10 }
876.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: newArray { typeID = int }
                            lengthExpr: literal { token = 1.5 }
879.                assign (++)
                        lValue: lValue { varID = boolVar }
881.                assign (++)
                        lValue: lValue { varID = strVar }
883.                assign (++)
                        lValue: lValue { varID = objVar }
885.                assign (--)
                        lValue: lValue { varID = boolVar }
887.                assign (--)
                        lValue: lValue { varID = strVar }
889.                assign (--)
                        lValue: lValue { varID = objVar }
892.                forArray { typeID = int, varID = x, arrayID = intVar, #stmts = 1 }
                        stmts:
893.                        call
                                lValue: lValue { varID = voidFunc }
895.                forArray { typeID = double, varID = x, arrayID = dblVar, #stmts = 1 }
                        stmts:
896.                        call
                                lValue: lValue { varID = voidFunc }
898.                forArray { typeID = boolean, varID = x, arrayID = boolVar, #stmts = 1 }
                        stmts:
899.                        call
                                lValue: lValue { varID = voidFunc }
901.                forArray { typeID = String, varID = x, arrayID = strVar, #stmts = 1 }
                        stmts:
902.                        call
                                lValue: lValue { varID = voidFunc }
904.                forArray { typeID = GameObj, varID = x, arrayID = objVar, #stmts = 1 }
                        stmts:
905.                        call
                                lValue: lValue { varID = voidFunc }
907.                forArray { typeID = GameObj, varID = x, arrayID = strVar, #stmts = 1 }
                        stmts:
908.                        call
                                lValue: lValue { varID = voidFunc }
911.                forArray { typeID = double, varID = x, arrayID = intArr, #stmts = 1 }
                        stmts:
912.                        call
                                lValue: lValue { varID = voidFunc }
914.                forArray { typeID = String, varID = x, arrayID = objArr, #stmts = 1 }
                        stmts:
915.                        call
                                lValue: lValue { varID = voidFunc }
918.                for { #stmts = 1 }
                        expr: lValue { varID = intVar }
                        stmts:
919.                        call
                                lValue: lValue { varID = voidFunc }
921.                for { #stmts = 1 }
                        expr: lValue { varID = dblVar }
                        stmts:
922.                        call
                                lValue: lValue { varID = voidFunc }
924.                for { #stmts = 1 }
                        expr: lValue { varID = strVar }
                        stmts:
925.                        call
                                lValue: lValue { varID = voidFunc }
927.                for { #stmts = 1 }
                        expr: lValue { varID = objVar }
                        stmts:
928.                        call
                                lValue: lValue { varID = voidFunc }
930.                doWhile { #stmts = 1 }
                        expr: lValue { varID = intVar }
                        stmts:
931.                        call
                                lValue: lValue { varID = voidFunc }
936.                while { #stmts = 1 }
                        expr: lValue { varID = dblVar }
                        stmts:
937.                        call
                                lValue: lValue { varID = voidFunc }
939.                while { #stmts = 1 }
                        expr: lValue { varID = strVar }
                        stmts:
940.                        call
                                lValue: lValue { varID = voidFunc }
942.                while { #stmts = 1 }
                        expr: lValue { varID = objVar }
                        stmts:
943.                        call
                                lValue: lValue { varID = voidFunc }
946.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = intVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = intVar }
                                stmts:
950.                                call
                                        lValue: lValue { varID = voidFunc }
                        stmts:
947.                        call
                                lValue: lValue { varID = voidFunc }
952.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = dblVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = dblVar }
                                stmts:
956.                                call
                                        lValue: lValue { varID = voidFunc }
                        stmts:
953.                        call
                                lValue: lValue { varID = voidFunc }
958.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = strVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = strVar }
                                stmts:
962.                                call
                                        lValue: lValue { varID = voidFunc }
                        stmts:
959.                        call
                                lValue: lValue { varID = voidFunc }
964.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = objVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = objVar }
                                stmts:
968.                                call
                                        lValue: lValue { varID = voidFunc }
                        stmts:
965.                        call
                                lValue: lValue { varID = voidFunc }
971.                var n { typeID = Integer, isLocal = true }
                        initExpr: literal { token = 100 }
973.                var d { typeID = Double, isLocal = true }
                        initExpr: literal { token = 100.0 }
975.                var b { typeID = Boolean, isLocal = true }
                        initExpr: literal { token = false }
978.                assign (+=)
                        lValue: lValue { varID = strVar }
                        expr: literal { token = "hello" }
980.                assign (-=)
                        lValue: lValue { varID = boolVar }
                        expr: literal { token = 1 }
982.                assign (*=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = objVar }
984.                assign (/=)
                        lValue: lValue { varID = objVar }
                        expr: literal { token = 3.14 }
986.                assign (+=)
                        lValue: lValue { varID = intVar }
                        expr: literal { token = "hello" }
988.                assign (-=)
                        lValue: lValue { varID = dblVar }
                        expr: call { #exprs = 4 }
                            lValue: lValue { varID = ct, fieldID = rect }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 1 }
                                literal { token = 2 }
990.                assign (*=)
                        lValue: lValue { varID = intVar }
                        expr: literal { token = false }
992.                assign (/=)
                        lValue: lValue { varID = dblVar }
                        expr: literal { token = true }
994.                assign (+=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
996.                assign (-=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
998.                assign (*=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
1000.                assign (/=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
1002.                if { #stmts = 1 }
                        expr: (==)
                            right: literal { token = "s" }
                            left: lValue { varID = strVar }
                        stmts:
1003.                        call
                                lValue: lValue { varID = voidFunc }
1006.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (^)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
1008.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (&)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
1010.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (|)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
1012.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (>>)
                            right: literal { token = 2 }
                            left: lValue { varID = i }
1014.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (<<)
                            right: literal { token = 2 }
                            left: lValue { varID = i }
1016.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (>>>)
                            right: literal { token = 2 }
                            left: lValue { varID = i }
1019.                var ct { typeID = String, isLocal = true }
1021.                var String { typeID = int, isLocal = true }
1023.                var GameObj { typeID = double, isLocal = true }
1025.                var lowercasefirst { typeID = int, isLocal = true }
                        initExpr: literal { token = 1 }
1027.                var lowerCaseFirst { typeID = int, isLocal = true }
                        initExpr: literal { token = 10 }
1028.                var upperCaseFirst { typeID = GameObj, isLocal = true }
                        initExpr: lValue { varID = objVar }
1030.                var uppercasefirst { typeID = GameObj, isLocal = true }
                        initExpr: literal { token = null }
1032.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: (+)
                            right: literal { token = 1 }
                            left: lValue { varID = dblvar }
1036.                var DouBle { typeID = int, isLocal = true }
1038.                var BooLean { typeID = double, isLocal = true }
1040.                var string { typeID = boolean, isLocal = true }
1043.                assign (=)
                        lValue: lValue { varID = intVar }
                            indexExpr: literal { token = 0 }
                        expr: literal { token = 1 }
1046.                assign (=)
                        lValue: lValue { varID = intArr }
                            indexExpr: lValue { varID = dblVar }
                        expr: literal { token = 1 }
1049.                var numObjs { typeID = int, isLocal = true }
                        initExpr: lValue { varID = objArr, fieldID = Length }
1052.                var len { typeID = int, isLocal = true }
                        initExpr: lValue { varID = strVar, fieldID = length }
1054.                var size { typeID = int, isLocal = true }
                        initExpr: lValue { varID = intVar, fieldID = size }
1057.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: unaryOp (-)
                            expr: lValue { varID = objVar }
1060.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = visible }
                        expr: unaryOp (!)
                            expr: lValue { varID = intVar }
1063.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: (+)
                            right: lValue { varID = intArr }
                            left: lValue { varID = strVar }
1065.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: (+)
                            right: lValue { varID = strVar }
                            left: lValue { varID = intArr }
1068.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (+)
                            right: unaryOp (!)
                                expr: lValue { varID = boolVar }
                            left: lValue { varID = boolVar }
1070.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: (+)
                            right: lValue { varID = objVar }
                            left: lValue { varID = objVar }
1072.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: (+)
                            right: literal { token = 1 }
                            left: lValue { varID = intArr }
1074.                assign (=)
                        lValue: lValue { varID = objArr }
                        expr: (+)
                            right: lValue { varID = objVar }
                            left: lValue { varID = objArr }
1077.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: (-)
                            right: lValue { varID = intVar }
                            left: lValue { varID = strVar }
1079.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (*)
                            right: literal { token = 0 }
                            left: lValue { varID = boolVar }
1081.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: (/)
                            right: literal { token = 2 }
                            left: lValue { varID = objVar }
1083.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: (%)
                            right: literal { token = 2 }
                            left: lValue { varID = intArr }
1086.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: (&&)
                            right: literal { token = 1001 }
                            left: lValue { varID = intVar }
1088.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (||)
                            right: literal { token = 1010 }
                            left: lValue { varID = boolVar }
1091.                if { #stmts = 1 }
                        expr: (<)
                            right: lValue { varID = boolVar }
                            left: lValue { varID = boolVar }
                        stmts:
1092.                        call
                                lValue: lValue { varID = voidFunc }
1094.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (>)
                            right: lValue { varID = dblVar }
                            left: lValue { varID = objVar }
1096.                while { #stmts = 1 }
                        expr: (<=)
                            right: lValue { varID = intVar }
                            left: lValue { varID = boolVar }
                        stmts:
1097.                        call
                                lValue: lValue { varID = voidFunc }
1100.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: (>=)
                            right: lValue { varID = intArr }
                            left: lValue { varID = dblVar }
1103.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: (/)
                            right: literal { token = 2 }
                            left: literal { token = 1 }
1105.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: (/)
                            right: literal { token = 8 }
                            left: literal { token = 3 }
1108.                var intVar { typeID = int, isLocal = true }
                        initExpr: literal { token = 13 }
1110.                var objArr { typeID = GameObj, isArray = true, isLocal = true }
                        initExpr: newArray { typeID = GameObj }
                            lengthExpr: literal { token = 10 }
1113.                call
                        lValue: lValue { varID = update }
1115.                call
                        lValue: lValue { varID = start }
1117.                call { #exprs = 2 }
                        lValue: lValue { varID = onMousePress }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
1120.                call { #exprs = 1 }
                        lValue: lValue { varID = println }
                        exprs:
                            literal { token = "Hello world" }
1122.                call { #exprs = 1 }
                        lValue: lValue { varID = setHeight }
                        exprs:
                            literal { token = 150 }
1125.                call
                        lValue: lValue { varID = intFunc }
                            indexExpr: literal { token = 0 }
1127.                call { #exprs = 2 }
                        lValue: lValue { varID = dblFuncIntDbl }
                            indexExpr: lValue { varID = intVar }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0.1 }
1130.                call
                        lValue: lValue { varID = GameObj, fieldID = foo }
1132.                call
                        lValue: lValue { varID = String, fieldID = foo }
1134.                call
                        lValue: lValue { varID = Code12Program, fieldID = foo }
1136.                call
                        lValue: lValue { varID = Code12Program, fieldID = foo }
1139.                call { #exprs = 1 }
                        lValue: lValue { varID = ct, fieldID = log }
                            indexExpr: literal { token = 0 }
                        exprs:
                            lValue { varID = objVar }
1141.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: call { #exprs = 1 }
                            lValue: lValue { varID = Math, fieldID = tan }
                                indexExpr: lValue { varID = intVar }
                            exprs:
                                literal { token = 0 }
1144.                call
                        lValue: lValue { varID = intArr, fieldID = voidFunc }
1147.                call
                        lValue: lValue { varID = intArr, fieldID = voidFunc }
                            indexExpr: literal { token = 0 }
1149.                call
                        lValue: lValue { varID = boolVar, fieldID = foo }
1152.                call
                        lValue: lValue { varID = ct, fieldID = prnitln }
1154.                call { #exprs = 3 }
                        lValue: lValue { varID = ct, fieldID = circ }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 10 }
1157.                call
                        lValue: lValue { varID = objArr, fieldID = foo }
                            indexExpr: literal { token = 0 }
1159.                call
                        lValue: lValue { varID = Math, fieldID = foo }
1162.                call
                        lValue: lValue { varID = intFuncInt }
1164.                call
                        lValue: lValue { varID = dblFuncIntDbl }
1166.                call
                        lValue: lValue { varID = ct, fieldID = log }
1168.                call
                        lValue: lValue { varID = Math, fieldID = atan2 }
1170.                call { #exprs = 2 }
                        lValue: lValue { varID = boolFuncBoolStringGameObj }
                        exprs:
                            literal { token = false }
                            literal { token = "" }
1172.                call { #exprs = 3 }
                        lValue: lValue { varID = ct, fieldID = rect }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 10 }
1174.                call { #exprs = 1 }
                        lValue: lValue { varID = voidFunc }
                        exprs:
                            lValue { varID = intVar }
1176.                call { #exprs = 2 }
                        lValue: lValue { varID = ct, fieldID = print }
                        exprs:
                            literal { token = "intVar =" }
                            lValue { varID = intVar }
1178.                call { #exprs = 2 }
                        lValue: lValue { varID = Math, fieldID = atan }
                        exprs:
                            literal { token = 4 }
                            literal { token = 3 }
1180.                call { #exprs = 2 }
                        lValue: lValue { varID = ct, fieldID = logm }
                        exprs:
                            lValue { varID = intVar }
                            lValue { varID = objVar }
1182.                var indent { typeID = String, isLocal = true }
                        initExpr: literal { token = "2 Tabs" }
1184.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "1 Space + 2 Tabs" }
1186.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "2 Tabs" }
1188.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "8 Spaces" }
1190.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "2 Tabs" }
1191.                if { #stmts = 1 }
                        expr: literal { token = true }
                        stmts:
1192.                        call
                                lValue: lValue { varID = ct, fieldID = println }
1193.                if { #stmts = 1 }
                        expr: literal { token = true }
                        stmts:
1194.                        call
                                lValue: lValue { varID = ct, fieldID = println }
1196.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "4 Spaces + 1 Tab" }
1201.        func myFunc { typeID = void, #stmts = 0, #params = 1 }
                params:
                    param myVar { typeID = int }
1206.        func update { typeID = GameObj, #stmts = 0, #params = 0 }
1210.        func onMousePress { typeID = String, #stmts = 0, #params = 3 }
                params:
                    param obj { typeID = GameObj }
                    param x { typeID = double }
                    param y { typeID = double }
1214.        func onMousePress { typeID = void, #stmts = 0, #params = 2 }
                params:
                    param x { typeID = double }
                    param y { typeID = double }
1218.        func onKeyPress { typeID = void, #stmts = 0, #params = 3 }
                params:
                    param obj { typeID = GameObj }
                    param x { typeID = double }
                    param y { typeID = double }
1223.        func onKeyRelease { typeID = void, #stmts = 0, #params = 0 }
1228.        func onMousePress { typeID = void, #stmts = 0, #params = 3 }
                params:
                    param obj { typeID = boolean }
                    param x { typeID = double }
                    param y { typeID = double }
1233.        func onMouseDrag { typeID = void, #stmts = 0, #params = 3 }
                params:
                    param obj { typeID = GameObj }
                    param x { typeID = int }
                    param y { typeID = double }
1238.        func onMouseRelease { typeID = void, #stmts = 0, #params = 3 }
                params:
                    param obj { typeID = GameObj }
                    param x { typeID = double }
                    param y { typeID = String }
1243.        func onKeyPress { typeID = void, #stmts = 0, #params = 1 }
                params:
                    param keyName { typeID = double }
1248.        func onKeyRelease { typeID = void, #stmts = 0, #params = 1 }
                params:
                    param keyName { typeID = int }
1253.        func onCharTyped { typeID = void, #stmts = 0, #params = 1 }
                params:
                    param keyName { typeID = GameObj }
        vars:
  5.        var myVar { typeID = int }
                initExpr: literal { token = 1 }
  7.        var button { typeID = GameObj }
                initExpr: call { #exprs = 4 }
                    lValue: lValue { varID = ct, fieldID = text }
                    exprs:
                        literal { token = "START" }
                        literal { token = 0 }
                        literal { token = 0 }
                        literal { token = 10 }
  9.        var intResult { typeID = int }
                initExpr: call
                    lValue: lValue { varID = intFunc }
597.        var newWidth { typeID = double }
                initExpr: call
                    lValue: lValue { varID = ct, fieldID = getWidth }
