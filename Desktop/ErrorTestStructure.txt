    program ErrorTest { #funcs = 42, #vars = 19 }
        funcs:
 43.        func emptyFunc { #paramVars = 0, vt = void, #stmts = 0 }
 46.        func voidFunc { #paramVars = 0, vt = void, #stmts = 1 }
                stmts:
 48.                var i { vt = int }
                        initExpr: literal { token = 0 }
 50.        func intFunc { #paramVars = 0, vt = int, #stmts = 2 }
                stmts:
 52.                var i { vt = int }
                        initExpr: literal { token = 1 }
 53.                return
                        expr: lValue { varID = i }
 55.        func dblFunc { #paramVars = 0, vt = double, #stmts = 2 }
                stmts:
 57.                var d { vt = double }
                        initExpr: literal { token = 0.0 }
 58.                return
                        expr: lValue { varID = d }
 60.        func boolFunc { #paramVars = 0, vt = boolean, #stmts = 2 }
                stmts:
 62.                var b { vt = boolean }
                        initExpr: literal { token = true }
 63.                return
                        expr: lValue { varID = b }
 65.        func strFunc { #paramVars = 0, vt = String, #stmts = 2 }
                stmts:
 67.                var s { vt = String }
                        initExpr: literal { token = "" }
 68.                return
                        expr: lValue { varID = s }
 70.        func gObjFunc { #paramVars = 0, vt = GameObj, #stmts = 1 }
                stmts:
 72.                return
                        expr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0.0 }
                                literal { token = 0.0 }
                                literal { token = 1.0 }
 74.        func intArrFuncInt { #paramVars = 1, vt = array of int, #stmts = 1 }
                paramVars:
 74.                var n { vt = int, isGlobal = false }
                stmts:
 76.                return
                        expr: newArray { vt = int }
                            lengthExpr: lValue { varID = n }
 78.        func intFuncInt { #paramVars = 1, vt = int, #stmts = 1 }
                paramVars:
 78.                var i { vt = int, isGlobal = false }
                stmts:
 80.                return
                        expr: (+)
                            right: literal { token = 1 }
                            left: (*)
                                right: literal { token = 2 }
                                left: lValue { varID = i }
 82.        func dblFuncIntDbl { #paramVars = 2, vt = double, #stmts = 1 }
                paramVars:
 82.                var i { vt = int, isGlobal = false }
 82.                var d { vt = double, isGlobal = false }
                stmts:
 84.                return
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
 86.        func boolFuncBoolStringGameObj { #paramVars = 3, vt = boolean, #stmts = 1 }
                paramVars:
 86.                var b { vt = boolean, isGlobal = false }
 86.                var s { vt = String, isGlobal = false }
 86.                var g { vt = GameObj, isGlobal = false }
                stmts:
 88.                return
                        expr: (&&)
                            right: lValue { varID = g, fieldID = visible }
                            left: (&&)
                                right: call equals { #exprs = 1 }
                                    lValue: lValue { varID = s }
                                    exprs:
                                        literal { token = "" }
                                left: lValue { varID = b }
 90.        func recursiveFunc { #paramVars = 1, vt = int, #stmts = 2 }
                paramVars:
 90.                var i { vt = int, isGlobal = false }
                stmts:
 92.                if { #stmts = 1 }
                        expr: (<=)
                            right: literal { token = 0 }
                            left: lValue { varID = i }
                        stmts:
 93.                        return
                                expr: literal { token = 0 }
 94.                return
                        expr: (+)
                            right: call recursiveFunc { #exprs = 1 }
                                exprs:
                                    (-)
                                        right: literal { token = 1 }
                                        left: lValue { varID = i }
                            left: literal { token = 1 }
 96.        func multiLineFuncDecl { #paramVars = 3, vt = void, #stmts = 1 }
                paramVars:
 96.                var arg1 { vt = int, isGlobal = false }
 97.                var arg2 { vt = double, isGlobal = false }
 98.                var arg3 { vt = boolean, isGlobal = false }
                stmts:
100.                call log { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = arg1 }
                            lValue { varID = arg2 }
                            lValue { varID = arg3 }
104.        func start { #paramVars = 0, vt = int, isPublic = true, #stmts = 412 }
                stmts:
108.                var LIMIT { vt = int, isConst = true }
                        initExpr: literal { token = 100 }
110.                var i { vt = int }
                        initExpr: literal { token = 3 }
111.                assign (=)
                        lValue: lValue { varID = i }
                        expr: unaryOp (neg)
                            expr: literal { token = 5 }
112.                assign (++)
                        lValue: lValue { varID = i }
113.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (+)
                            right: literal { token = 1 }
                            left: lValue { varID = i }
114.                assign (+=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 1 }
115.                assign (-=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 2 }
116.                assign (*=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 3 }
117.                assign (/=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 4 }
118.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intFunc
119.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intFuncInt { #exprs = 1 }
                            exprs:
                                (-)
                                    right: (*)
                                        right: lValue { varID = i }
                                        left: literal { token = 345 }
                                    left: (-)
                                        right: parens
                                            expr: (+)
                                                right: lValue { varID = i }
                                                left: lValue { varID = i }
                                        left: lValue { varID = i }
120.                var foo { vt = int }
                        initExpr: (+)
                            right: literal { token = 4 }
                            left: lValue { varID = i }
121.                var score { vt = int }
                        initExpr: literal { token = 500 }
122.                var j { vt = int }
122.                var k { vt = int }
123.                var exponentialNumberNoDot { vt = double }
                        initExpr: literal { token = 12e10 }
124.                var exponentialNumberWithDot { vt = double }
                        initExpr: literal { token = 3.42e2 }
125.                var expontialNumberWithDecimalPlaces { vt = double }
                        initExpr: literal { token = 6.62e-34 }
126.                var d { vt = double }
                        initExpr: literal { token = 3.14 }
127.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 100 }
128.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = .5 }
129.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 1.2345e6 }
130.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 1.2345e+67 }
131.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = .12e0 }
132.                assign (=)
                        lValue: lValue { varID = d }
                        expr: unaryOp (neg)
                            expr: literal { token = .123e-123 }
133.                assign (=)
                        lValue: lValue { varID = d }
                        expr: unaryOp (neg)
                            expr: literal { token = .5 }
134.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: literal { token = 2 }
                            left: lValue { varID = d }
135.                assign (++)
                        lValue: lValue { varID = d }
136.                assign (+=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 0.5 }
137.                assign (-=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 7 }
138.                assign (*=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 8 }
139.                assign (/=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 8.0 }
140.                var d2 { vt = double }
                        initExpr: literal { token = 3 }
141.                var d3 { vt = double }
                        initExpr: (+)
                            right: (*)
                                right: parens
                                    expr: (+)
                                        right: lValue { varID = d }
                                        left: lValue { varID = d2 }
                                left: literal { token = 2 }
                            left: lValue { varID = d }
142.                var x1 { vt = double }
142.                var x2 { vt = double }
142.                var y1 { vt = double }
142.                var y2 { vt = double }
143.                assign (=)
                        lValue: lValue { varID = x1 }
                        expr: literal { token = 1 }
144.                assign (=)
                        lValue: lValue { varID = x2 }
                        expr: literal { token = 2.0 }
145.                assign (=)
                        lValue: lValue { varID = y1 }
                        expr: literal { token = .5e+1 }
146.                assign (=)
                        lValue: lValue { varID = y2 }
                        expr: unaryOp (neg)
                            expr: literal { token = .5e-1 }
147.                var eps { vt = double }
                        initExpr: literal { token = 1e-4 }
148.                var name { vt = String }
                        initExpr: literal { token = "Einstein" }
149.                var b { vt = boolean }
                        initExpr: literal { token = true }
150.                var b2 { vt = boolean }
                        initExpr: literal { token = false }
151.                var b3 { vt = boolean }
                        initExpr: (||)
                            right: lValue { varID = b2 }
                            left: lValue { varID = b }
152.                var s { vt = String }
                        initExpr: literal { token = "A string variable" }
153.                assign (=)
                        lValue: lValue { varID = s }
                        expr: lValue { varID = s }
154.                assign (=)
                        lValue: lValue { varID = s }
                        expr: literal { token = null }
156.                var colors { vt = array of String }
                        initExpr: arrayInit { #exprs = 5 }
                            exprs:
                                literal { token = "black" }
                                literal { token = "white" }
                                literal { token = "red" }
                                literal { token = "green" }
                                literal { token = "blue" }
157.                assign (=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 100 }
158.                var strArr { vt = array of String }
                        initExpr: newArray { vt = String }
                            lengthExpr: lValue { varID = i }
159.                assign (=)
                        lValue: lValue { varID = strArr }
                        expr: lValue { varID = colors }
160.                var intArr { vt = array of int }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
                                literal { token = 3 }
161.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: newArray { vt = int }
                            lengthExpr: literal { token = 100 }
162.                var intArr2 { vt = array of int }
                        initExpr: newArray { vt = int }
                            lengthExpr: call length
                                lValue: lValue { varID = s }
163.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: lValue { varID = intArr2 }
164.                var dblArr { vt = array of double }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1.1 }
                                literal { token = 2.2 }
                                literal { token = 3.3 }
165.                var dblArr2 { vt = array of double }
                        initExpr: newArray { vt = double }
                            lengthExpr: literal { token = 100 }
166.                assign (=)
                        lValue: lValue { varID = dblArr }
                        expr: lValue { varID = dblArr2 }
167.                var gObjArr { vt = array of GameObj }
                        initExpr: newArray { vt = GameObj }
                            lengthExpr: (*)
                                right: literal { token = 2 }
                                left: lValue { varID = i }
169.                call voidFunc
170.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intFunc
171.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call dblFunc
172.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call boolFunc
173.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call strFunc
174.                var gObj { vt = GameObj }
                        initExpr: call gObjFunc
175.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: call intArrFuncInt { #exprs = 1 }
                            exprs:
                                lValue { varID = i }
176.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intFuncInt { #exprs = 1 }
                            exprs:
                                lValue { varID = i }
177.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call dblFuncIntDbl { #exprs = 2 }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = d }
178.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call boolFuncBoolStringGameObj { #exprs = 3 }
                            exprs:
                                lValue { varID = b }
                                lValue { varID = s }
                                lValue { varID = gObj }
179.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call recursiveFunc { #exprs = 1 }
                            exprs:
                                literal { token = 2 }
181.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (/)
                            right: literal { token = 1 }
                            left: literal { token = 5 }
182.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (/)
                            right: literal { token = 20 }
                            left: literal { token = 100 }
183.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (+)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
184.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (-)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
185.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (*)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
186.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (%)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
187.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (-)
                            right: lValue { varID = i }
                            left: (+)
                                right: lValue { varID = i }
                                left: (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
188.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (*)
                            right: parens
                                expr: (-)
                                    right: lValue { varID = i }
                                    left: parens
                                        expr: (+)
                                            right: lValue { varID = i }
                                            left: lValue { varID = i }
                            left: lValue { varID = i }
189.                assign (=)
                        lValue: lValue { varID = d }
                        expr: lValue { varID = i }
190.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
191.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
192.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
193.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
194.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (%)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
195.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
196.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
197.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
198.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
199.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (%)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
200.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
201.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
202.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
203.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
204.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (%)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
205.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: (*)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
                            left: (-)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
206.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = i }
                            left: (+)
                                right: (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
                                left: lValue { varID = d }
207.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: (*)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
                            left: (*)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
208.                assign (=)
                        lValue: lValue { varID = d }
                        expr: parens
                            expr: (-)
                                right: (*)
                                    right: lValue { varID = d }
                                    left: lValue { varID = d }
                                left: (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
209.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = s }
210.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: literal { token = "s" }
                            left: (+)
                                right: lValue { varID = s }
                                left: lValue { varID = s }
211.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = i }
                            left: lValue { varID = s }
212.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = s }
213.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = b }
                            left: lValue { varID = s }
214.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = gObj }
                            left: lValue { varID = s }
215.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = i }
216.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = d }
217.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = b }
218.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = gObj }
219.                assign (=)
                        lValue: lValue { varID = b }
                        expr: lValue { varID = b }
220.                assign (=)
                        lValue: lValue { varID = b }
                        expr: unaryOp (not)
                            expr: lValue { varID = b }
221.                assign (=)
                        lValue: lValue { varID = b }
                        expr: parens
                            expr: lValue { varID = b }
222.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
223.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
224.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
225.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
226.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
227.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = gObj }
                            left: lValue { varID = gObj }
228.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
229.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
230.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
231.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
232.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
233.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = gObj }
                            left: lValue { varID = gObj }
234.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
235.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
236.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
237.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
238.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
239.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
240.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
241.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
242.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
243.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
244.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
245.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
246.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
247.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
248.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
249.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
250.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (||)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
251.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (&&)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
252.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: literal { token = 2 }
                            left: literal { token = 1 }
253.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: literal { token = 2 }
                            left: literal { token = 1.1 }
254.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: literal { token = 2 }
                            left: literal { token = 1 }
255.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: literal { token = 2.2 }
                            left: literal { token = 1 }
256.                assign (=)
                        lValue: lValue { varID = b2 }
                        expr: (||)
                            right: (&&)
                                right: (==)
                                    right: lValue { varID = b }
                                    left: lValue { varID = b }
                                left: lValue { varID = b3 }
                            left: lValue { varID = b2 }
257.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: literal { token = 0 }
                            left: (%)
                                right: literal { token = 2 }
                                left: lValue { varID = i }
258.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (&&)
                            right: lValue { varID = b }
                            left: parens
                                expr: (||)
                                    right: lValue { varID = b }
                                    left: lValue { varID = b }
259.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (&&)
                            right: parens
                                expr: (<)
                                    right: literal { token = 0.0001 }
                                    left: (-)
                                        right: literal { token = 3.14159 }
                                        left: lValue { varID = Math, fieldID = PI }
                            left: parens
                                expr: (==)
                                    right: literal { token = 2 }
                                    left: (+)
                                        right: literal { token = 1 }
                                        left: literal { token = 1 }
261.                if { #elseStmts = 1, #stmts = 1 }
                        expr: (==)
                            right: literal { token = 0 }
                            left: lValue { varID = i }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 1 }
                                expr: (<=)
                                    right: literal { token = 10 }
                                    left: lValue { varID = i }
                                elseStmts:
266.                                assign (*=)
                                        lValue: lValue { varID = i }
                                        expr: literal { token = 5 }
                                stmts:
264.                                assign (++)
                                        lValue: lValue { varID = i }
                        stmts:
262.                        call setBackColor { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    lValue { varID = colors }
                                        indexExpr: lValue { varID = i }
268.                if { #elseStmts = 1, #stmts = 2 }
                        expr: (>)
                            right: literal { token = 0 }
                            left: lValue { varID = i }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 2 }
                                expr: (<=)
                                    right: literal { token = 10 }
                                    left: lValue { varID = i }
                                elseStmts:
                                    if { #elseStmts = 2, #stmts = 1 }
                                        expr: lValue { varID = b }
                                        elseStmts:
282.                                        var tempStr { vt = String }
                                                initExpr: literal { token = "I'll be " }
283.                                        assign (=)
                                                lValue: lValue { varID = tempStr }
                                                expr: (+)
                                                    right: literal { token = "out of scope soon" }
                                                    left: lValue { varID = tempStr }
                                        stmts:
279.                                        assign (++)
                                                lValue: lValue { varID = i }
                                stmts:
275.                                assign (=)
                                        lValue: lValue { varID = d }
                                        expr: literal { token = 7 }
276.                                call setSoundVolume { #exprs = 1 }
                                        lValue: lValue { varID = ct }
                                        exprs:
                                            literal { token = 1 }
                        stmts:
270.                        assign (=)
                                lValue: lValue { varID = j }
                                expr: literal { token = 0 }
271.                        assign (=)
                                lValue: lValue { varID = k }
                                expr: literal { token = 0 }
285.                if { #stmts = 1 }
                        expr: (&&)
                            right: (<=)
                                right: lValue { varID = eps }
                                left: call distance { #exprs = 4 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = x1 }
                                        lValue { varID = y1 }
                                        lValue { varID = x2 }
                                        lValue { varID = y2 }
                            left: call isError { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    call tan { #exprs = 1 }
                                        lValue: lValue { varID = Math }
                                        exprs:
                                            lValue { varID = d }
                        stmts:
286.                        call println { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = "oops" }
288.                for { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
289.                        for { #stmts = 1 }
                                stmts:
290.                                for { #stmts = 1 }
290.                                    initStmt: assign (=)
                                            lValue: lValue { varID = i }
                                            expr: literal { token = 0 }
                                        stmts:
291.                                        for { #stmts = 1 }
                                                expr: (<)
                                                    right: literal { token = 10 }
                                                    left: lValue { varID = i }
                                                stmts:
292.                                                for { #stmts = 1 }
292.                                                    nextStmt: assign (++)
                                                            lValue: lValue { varID = i }
                                                        stmts:
293.                                                        for { #stmts = 1 }
                                                                expr: lValue { varID = b }
                                                                stmts:
294.                                                                assign (=)
                                                                        lValue: lValue { varID = d }
                                                                        expr: literal { token = 0 }
295.                for { #stmts = 2 }
295.                    initStmt: var ii { vt = int, isGlobal = false }
                            initExpr: literal { token = 0 }
                        expr: (<)
                            right: literal { token = 10 }
                            left: lValue { varID = ii }
295.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
297.                        for { #stmts = 1 }
297.                            initStmt: var jj { vt = int, isGlobal = false }
                                    initExpr: literal { token = 0 }
                                expr: (!=)
                                    right: literal { token = 10 }
                                    left: lValue { varID = jj }
297.                            nextStmt: assign (+=)
                                    lValue: lValue { varID = jj }
                                    expr: literal { token = 1 }
                                stmts:
298.                                if { #stmts = 1 }
                                        expr: (||)
                                            right: (==)
                                                right: literal { token = 0 }
                                                left: lValue { varID = jj }
                                            left: (==)
                                                right: literal { token = 0 }
                                                left: lValue { varID = ii }
                                        stmts:
299.                                        break
300.                        break
302.                for { #stmts = 2 }
302.                    initStmt: var ii { vt = int, isGlobal = false }
                            initExpr: literal { token = 0 }
                        expr: (<)
                            right: literal { token = 10 }
                            left: lValue { varID = ii }
302.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
304.                        for { #stmts = 2 }
304.                            initStmt: var jj { vt = int, isGlobal = false }
                                    initExpr: literal { token = 0 }
                                expr: (!=)
                                    right: literal { token = 10 }
                                    left: lValue { varID = jj }
304.                            nextStmt: assign (+=)
                                    lValue: lValue { varID = jj }
                                    expr: literal { token = 1 }
                                stmts:
306.                                if { #stmts = 2 }
                                        expr: (&&)
                                            right: (==)
                                                right: literal { token = 0 }
                                                left: lValue { varID = jj }
                                            left: (==)
                                                right: literal { token = 0 }
                                                left: lValue { varID = ii }
                                        stmts:
308.                                        assign (=)
                                                lValue: lValue { varID = intArr }
                                                    indexExpr: lValue { varID = ii }
                                                expr: literal { token = 0 }
309.                                        break
311.                                break
313.                        break
315.                var xVar { vt = double }
                        initExpr: literal { token = 0 }
316.                var yVar { vt = double }
                        initExpr: literal { token = 1 }
317.                for { #stmts = 1 }
317.                    initStmt: var dx { vt = double, isGlobal = false }
                            initExpr: literal { token = .1 }
                        expr: (<)
                            right: literal { token = 1 }
                            left: lValue { varID = xVar }
317.                    nextStmt: assign (+=)
                            lValue: lValue { varID = xVar }
                            expr: lValue { varID = dx }
                        stmts:
318.                        for { #stmts = 1 }
318.                            initStmt: var dy { vt = double, isGlobal = false }
                                    initExpr: unaryOp (neg)
                                        expr: literal { token = .5 }
                                expr: (>)
                                    right: literal { token = 0 }
                                    left: lValue { varID = yVar }
318.                            nextStmt: assign (+=)
                                    lValue: lValue { varID = yVar }
                                    expr: lValue { varID = dy }
                                stmts:
319.                                assign (=)
                                        lValue: lValue { varID = d }
                                        expr: (-)
                                            right: (/)
                                                right: lValue { varID = dy }
                                                left: lValue { varID = yVar }
                                            left: (+)
                                                right: lValue { varID = dx }
                                                left: lValue { varID = xVar }
320.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: newArray { vt = int }
                            lengthExpr: literal { token = 1 }
321.                forArray { #stmts = 1 }
321.                    var: var a { vt = int, isGlobal = false }
                        expr: lValue { varID = intArr }
                        stmts:
322.                        assign (=)
                                lValue: lValue { varID = a }
                                expr: literal { token = 0 }
324.                while { #stmts = 1 }
                        expr: lValue { varID = b }
                        stmts:
325.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: literal { token = false }
326.                while { #stmts = 3 }
                        expr: lValue { varID = b }
                        stmts:
328.                        call voidFunc
329.                        assign (++)
                                lValue: lValue { varID = i }
330.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: literal { token = false }
332.                doWhile { #stmts = 1 }
                        expr: lValue { varID = b }
                        stmts:
333.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: literal { token = false }
335.                doWhile { #stmts = 1 }
                        expr: lValue { varID = b }
                        stmts:
337.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: literal { token = false }
341.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world" }
342.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: literal { token = "world" }
                                left: (+)
                                    right: literal { token = " " }
                                    left: literal { token = "Hello" }
343.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world\n" }
344.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
345.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
346.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = b }
347.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: literal { token = "i = " }
348.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: literal { token = "d = " }
349.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = name }
350.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = name }
                                left: (+)
                                    right: literal { token = " " }
                                    left: literal { token = "Hello" }
351.                var circleObj { vt = GameObj }
                        initExpr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50 }
                                literal { token = 50 }
                                literal { token = 20 }
352.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = circleObj }
353.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world" }
354.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: literal { token = "world" }
                                left: (+)
                                    right: literal { token = " " }
                                    left: literal { token = "Hello" }
355.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world\n" }
356.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
357.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
358.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = b }
359.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: literal { token = "i = " }
360.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: literal { token = "d = " }
361.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = name }
362.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = name }
                                left: (+)
                                    right: literal { token = " " }
                                    left: literal { token = "Hello" }
363.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = circleObj }
364.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
365.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
366.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = b }
367.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = circleObj }
368.                var obj2 { vt = GameObj }
                        initExpr: lValue { varID = circleObj }
369.                var obj3 { vt = GameObj }
                        initExpr: lValue { varID = obj2 }
370.                call log { #exprs = 9 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "circleObj = " }
                            lValue { varID = circleObj }
                            literal { token = "obj2 = " }
                            lValue { varID = obj2 }
                            literal { token = "obj3=" }
                            lValue { varID = obj3 }
                            literal { token = 3.14 }
                            lValue { varID = Math, fieldID = PI }
                            literal { token = 42 }
371.                call logm { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "message" }
                            literal { token = null }
372.                call logm { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "message" }
                            lValue { varID = obj2 }
                            lValue { varID = obj3 }
373.                call setOutputFile { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "output.txt" }
374.                call setOutputFile { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "output/nameList.txt" }
375.                var outputFilename { vt = String }
                        initExpr: literal { token = "output.txt" }
376.                call setOutputFile { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = outputFilename }
378.                call showAlert { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "alert meassage" }
379.                var message { vt = String }
                        initExpr: literal { token = "alert!" }
380.                call showAlert { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = message }
381.                var n { vt = int }
                        initExpr: call inputInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "enter a number: " }
382.                assign (=)
                        lValue: lValue { varID = n }
                        expr: call inputInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "enter a number: " }
383.                assign (=)
                        lValue: lValue { varID = n }
                        expr: call inputInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = message }
384.                var x { vt = double }
                        initExpr: call inputNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "enter a number: " }
385.                assign (=)
                        lValue: lValue { varID = x }
                        expr: call inputNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "enter a number: " }
386.                assign (=)
                        lValue: lValue { varID = x }
                        expr: call inputNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = message }
387.                var quit { vt = boolean }
                        initExpr: call inputYesNo { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "Quit?" }
388.                assign (=)
                        lValue: lValue { varID = quit }
                        expr: call inputYesNo { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = message }
389.                var inputStr { vt = String }
                        initExpr: call inputString { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "Quit?" }
390.                assign (=)
                        lValue: lValue { varID = inputStr }
                        expr: call inputString { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "Quit?" }
391.                assign (=)
                        lValue: lValue { varID = inputStr }
                        expr: call inputString { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = message }
393.                call setTitle { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Title" }
394.                var title { vt = String }
                        initExpr: literal { token = "Title" }
395.                call setTitle { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = title }
396.                call setTitle { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: (+)
                                    right: literal { token = " " }
                                    left: lValue { varID = title }
397.                call setTitle { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: lValue { varID = title }
398.                call setHeight { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (/)
                                right: literal { token = 16 }
                                left: (*)
                                    right: literal { token = 9 }
                                    left: literal { token = 100.0 }
399.                call setHeight { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
400.                call setHeight { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
401.                call setHeight { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: (*)
                                    right: literal { token = 4 }
                                    left: literal { token = 5 }
                                left: (*)
                                    right: lValue { varID = d }
                                    left: lValue { varID = i }
402.                var height { vt = double }
                        initExpr: call getHeight
                            lValue: lValue { varID = ct }
403.                assign (=)
                        lValue: lValue { varID = height }
                        expr: call getHeight
                            lValue: lValue { varID = ct }
404.                var width { vt = double }
                        initExpr: (-)
                            right: literal { token = 10 }
                            left: (*)
                                right: literal { token = 0.5 }
                                left: call getWidth
                                    lValue: lValue { varID = ct }
405.                assign (=)
                        lValue: lValue { varID = width }
                        expr: call getWidth
                            lValue: lValue { varID = ct }
406.                var pxPerUnit { vt = double }
                        initExpr: call getPixelsPerUnit
                            lValue: lValue { varID = ct }
407.                assign (=)
                        lValue: lValue { varID = pxPerUnit }
                        expr: call getPixelsPerUnit
                            lValue: lValue { varID = ct }
408.                var pixelWidth { vt = int }
                        initExpr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (*)
                                    right: call getPixelsPerUnit
                                        lValue: lValue { varID = ct }
                                    left: call getWidth
                                        lValue: lValue { varID = ct }
409.                var pixelHeight { vt = int }
                        initExpr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (*)
                                    right: call getPixelsPerUnit
                                        lValue: lValue { varID = ct }
                                    left: call getHeight
                                        lValue: lValue { varID = ct }
410.                var currentScreen { vt = String }
                        initExpr: call getScreen
                            lValue: lValue { varID = ct }
411.                assign (=)
                        lValue: lValue { varID = currentScreen }
                        expr: call getScreen
                            lValue: lValue { varID = ct }
412.                call clearScreen
                        lValue: lValue { varID = ct }
413.                call clearGroup { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "targets" }
414.                call clearGroup { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "" }
415.                call setBackColor { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "orange" }
416.                call setBackColor { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "light blue" }
417.                var backColor { vt = String }
                        initExpr: literal { token = "red" }
418.                call setBackColor { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = backColor }
419.                call setBackColorRGB { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 255 }
                            literal { token = 0 }
                            literal { token = 0 }
420.                call setBackColorRGB { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
                            lValue { varID = i }
                            lValue { varID = i }
421.                call setBackImage { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "background.png" }
422.                call setBackImage { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "C:\\Users\\ben\\Pictures\\landscape.jpg" }
423.                var filename { vt = String }
                        initExpr: literal { token = "landscape.png" }
424.                call setBackImage { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = filename }
426.                assign (=)
                        lValue: lValue { varID = x }
                        expr: literal { token = 50 }
427.                var y { vt = double }
                        initExpr: literal { token = 50 }
428.                var diameter { vt = double }
                        initExpr: literal { token = 10 }
429.                var circle { vt = GameObj }
                        initExpr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50 }
                                literal { token = 20 }
                                literal { token = 10 }
430.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50.0 }
                                literal { token = 20.0 }
                                literal { token = 10.0 }
431.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call circle { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50 }
                                literal { token = 20 }
                                literal { token = 10.5 }
                                literal { token = "blue" }
432.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = diameter }
433.                var color { vt = String }
                        initExpr: literal { token = "green" }
434.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call circle { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = diameter }
                                lValue { varID = color }
435.                var rect { vt = GameObj }
                        initExpr: call rect { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = width }
                                lValue { varID = height }
436.                assign (=)
                        lValue: lValue { varID = rect }
                        expr: call rect { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = width }
                                lValue { varID = height }
                                lValue { varID = color }
437.                assign (=)
                        lValue: lValue { varID = rect }
                        expr: call rect { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50.0 }
                                literal { token = 33.3 }
                                literal { token = 11.2 }
                                literal { token = 23.890 }
438.                assign (=)
                        lValue: lValue { varID = rect }
                        expr: call rect { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50 }
                                literal { token = 33 }
                                literal { token = 11 }
                                literal { token = 23 }
                                literal { token = "green" }
439.                var line { vt = GameObj }
                        initExpr: call line { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = d }
                                lValue { varID = width }
                                lValue { varID = height }
440.                assign (=)
                        lValue: lValue { varID = line }
                        expr: call line { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x1 }
                                lValue { varID = y1 }
                                lValue { varID = x2 }
                                lValue { varID = y2 }
                                lValue { varID = color }
441.                assign (=)
                        lValue: lValue { varID = line }
                        expr: call line { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0.0 }
                                literal { token = .0 }
                                literal { token = 100.0 }
                                literal { token = 95.0 }
442.                assign (=)
                        lValue: lValue { varID = line }
                        expr: call line { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 100 }
                                literal { token = 95 }
                                literal { token = "red" }
443.                var text { vt = GameObj }
                        initExpr: call text { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = height }
444.                assign (=)
                        lValue: lValue { varID = text }
                        expr: call text { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = height }
                                lValue { varID = color }
445.                assign (=)
                        lValue: lValue { varID = text }
                        expr: call text { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = score }
                                    left: literal { token = "Score: " }
                                literal { token = 20.0 }
                                literal { token = 90.0 }
                                literal { token = 10.0 }
446.                assign (=)
                        lValue: lValue { varID = text }
                        expr: call text { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = score }
                                    left: literal { token = "Score: " }
                                literal { token = 20 }
                                literal { token = 90 }
                                literal { token = 10 }
                                literal { token = "purple" }
447.                var img { vt = GameObj }
                        initExpr: call image { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = filename }
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = width }
448.                assign (=)
                        lValue: lValue { varID = img }
                        expr: call image { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "car.png" }
                                literal { token = 42 }
                                literal { token = 25 }
                                literal { token = 38.7 }
449.                assign (=)
                        lValue: lValue { varID = img }
                        expr: call image { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "C:\\Users\\john\\Pictures\\car.jpg" }
                                literal { token = 42 }
                                literal { token = 25 }
                                literal { token = 38 }
450.                var objs { vt = array of GameObj }
                        initExpr: arrayInit { #exprs = 5 }
                            exprs:
                                lValue { varID = circle }
                                lValue { varID = rect }
                                lValue { varID = line }
                                lValue { varID = text }
                                lValue { varID = img }
451.                assign (=)
                        lValue: lValue { varID = img }
                        expr: lValue { varID = rect }
453.                var mouseClicked { vt = boolean }
                        initExpr: call clicked
                            lValue: lValue { varID = ct }
454.                if { #stmts = 1 }
                        expr: call clicked
                            lValue: lValue { varID = ct }
                        stmts:
455.                        assign (=)
                                lValue: lValue { varID = mouseClicked }
                                expr: call clicked
                                    lValue: lValue { varID = ct }
456.                if { #stmts = 1 }
                        expr: (>)
                            right: literal { token = 50 }
                            left: call clickX
                                lValue: lValue { varID = ct }
                        stmts:
457.                        assign (=)
                                lValue: lValue { varID = x }
                                expr: call clickX
                                    lValue: lValue { varID = ct }
458.                assign (=)
                        lValue: lValue { varID = x }
                        expr: call clickX
                            lValue: lValue { varID = ct }
459.                if { #stmts = 1 }
                        expr: (<=)
                            right: lValue { varID = x }
                            left: call clickY
                                lValue: lValue { varID = ct }
                        stmts:
460.                        assign (=)
                                lValue: lValue { varID = y }
                                expr: call clickY
                                    lValue: lValue { varID = ct }
461.                assign (=)
                        lValue: lValue { varID = y }
                        expr: call clickY
                            lValue: lValue { varID = ct }
462.                var keyName { vt = String }
                        initExpr: literal { token = "space" }
463.                var keyPressed { vt = boolean }
                        initExpr: call keyPressed { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = keyName }
464.                if { #stmts = 1 }
                        expr: call keyPressed { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = keyName }
                        stmts:
465.                        if { #stmts = 1 }
                                expr: call keyPressed { #exprs = 1 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        literal { token = "up" }
                                stmts:
466.                                assign (=)
                                        lValue: lValue { varID = keyPressed }
                                        expr: call keyPressed { #exprs = 1 }
                                            lValue: lValue { varID = ct }
                                            exprs:
                                                literal { token = "up" }
467.                if { #stmts = 1 }
                        expr: call charTyped { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "+" }
                        stmts:
468.                        assign (++)
                                lValue: lValue { varID = x }
469.                var ch { vt = String }
                        initExpr: literal { token = "+" }
470.                if { #stmts = 1 }
                        expr: call charTyped { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = ch }
                        stmts:
471.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: call charTyped { #exprs = 1 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        literal { token = "+" }
472.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call charTyped { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = ch }
474.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call loadSound { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = filename }
475.                call loadSound { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "pow.wav" }
476.                if { #stmts = 1 }
                        expr: call loadSound { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "sounds/ding.mp3" }
                        stmts:
477.                        call sound { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = "sounds/ding.mp3" }
478.                call sound { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = filename }
479.                call setSoundVolume { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
480.                call setSoundVolume { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 1 }
481.                call setSoundVolume { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0.5 }
483.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call random { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
484.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call random { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 100 }
485.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
486.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
487.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 1.62 }
488.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = d }
489.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: (*)
                                        right: lValue { varID = i }
                                        left: lValue { varID = d }
                                    left: literal { token = 1 }
490.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                call distance { #exprs = 4 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = x1 }
                                        lValue { varID = y1 }
                                        lValue { varID = x2 }
                                        lValue { varID = y2 }
491.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call roundDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = i }
492.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call roundDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: literal { token = 1 }
                                    left: (*)
                                        right: lValue { varID = i }
                                        left: lValue { varID = d }
                                (*)
                                    right: literal { token = 2 }
                                    left: lValue { varID = i }
493.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call roundDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 2.71828182846 }
                                literal { token = 2 }
494.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call roundDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                call distance { #exprs = 4 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = x1 }
                                        lValue { varID = y1 }
                                        lValue { varID = x2 }
                                        lValue { varID = y2 }
                                literal { token = 1 }
495.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intDiv { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
496.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intDiv { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 5 }
                                literal { token = 2 }
497.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call isError { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
498.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call isError { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (/)
                                    right: lValue { varID = d }
                                    left: lValue { varID = d }
499.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call isError { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (/)
                                    right: lValue { varID = i }
                                    left: lValue { varID = d }
500.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call isError { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (/)
                                    right: literal { token = 0 }
                                    left: literal { token = 0.0 }
501.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call distance { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = circle, fieldID = x }
                                lValue { varID = circle, fieldID = y }
                                lValue { varID = rect, fieldID = x }
                                lValue { varID = rect, fieldID = y }
502.                if { #stmts = 1 }
                        expr: (<)
                            right: (/)
                                right: literal { token = 2 }
                                left: parens
                                    expr: (+)
                                        right: lValue { varID = rect, fieldID = width }
                                        left: lValue { varID = circle, fieldID = width }
                            left: call distance { #exprs = 4 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    lValue { varID = circle, fieldID = x }
                                    lValue { varID = circle, fieldID = y }
                                    lValue { varID = rect, fieldID = x }
                                    lValue { varID = rect, fieldID = y }
                        stmts:
503.                        assign (=)
                                lValue: lValue { varID = i }
                                expr: call getTimer
                                    lValue: lValue { varID = ct }
504.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (-)
                            right: lValue { varID = i }
                            left: call getTimer
                                lValue: lValue { varID = ct }
505.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call getVersion
                            lValue: lValue { varID = ct }
506.                call round { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            call getVersion
                                lValue: lValue { varID = ct }
508.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
509.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = d }
510.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = .707 }
511.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = Math, fieldID = PI }
512.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 6.0221409e+2 }
513.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call parseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
514.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call parseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "345" }
515.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
516.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "12345" }
517.                while { #stmts = 1 }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
                        stmts:
518.                        assign (=)
                                lValue: lValue { varID = d }
                                expr: call parseNumber { #exprs = 1 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = s }
519.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: literal { token = 100 }
                            left: call parseNumber { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = "123.45" }
520.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call canParseNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "543.210" }
521.                while { #stmts = 1 }
                        expr: call canParseNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
                        stmts:
522.                        assign (=)
                                lValue: lValue { varID = s }
                                expr: call formatDecimal { #exprs = 1 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = d }
523.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call formatDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = i }
524.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call formatDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
                                call intDiv { #exprs = 2 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        (*)
                                            right: lValue { varID = i }
                                            left: literal { token = 2 }
                                        lValue { varID = i }
525.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: literal { token = ":00" }
                            left: call formatDecimal { #exprs = 2 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = 6.0221 }
                                    literal { token = 7 }
526.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call formatInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
527.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call formatInt { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: literal { token = 1 }
                                    left: lValue { varID = i }
                                (+)
                                    right: lValue { varID = k }
                                    left: lValue { varID = j }
529.                assign (=)
                        lValue: lValue { varID = rect, fieldID = x }
                        expr: (-)
                            right: literal { token = 10 }
                            left: lValue { varID = circle, fieldID = y }
530.                assign (=)
                        lValue: lValue { varID = circle, fieldID = width }
                        expr: (*)
                            right: literal { token = 1.5 }
                            left: lValue { varID = circle, fieldID = height }
531.                assign (=)
                        lValue: lValue { varID = rect, fieldID = height }
                        expr: (*)
                            right: literal { token = 1.1 }
                            left: lValue { varID = img, fieldID = height }
532.                assign (=)
                        lValue: lValue { varID = line, fieldID = x }
                        expr: (+)
                            right: lValue { varID = line, fieldID = width }
                            left: lValue { varID = line, fieldID = x }
533.                assign (=)
                        lValue: lValue { varID = img, fieldID = width }
                        expr: (*)
                            right: literal { token = .9 }
                            left: lValue { varID = img, fieldID = width }
534.                assign (=)
                        lValue: lValue { varID = img, fieldID = xSpeed }
                        expr: literal { token = 0 }
535.                assign (=)
                        lValue: lValue { varID = img, fieldID = ySpeed }
                        expr: literal { token = .5 }
536.                assign (=)
                        lValue: lValue { varID = line, fieldID = lineWidth }
                        expr: literal { token = 3 }
537.                assign (=)
                        lValue: lValue { varID = img, fieldID = lineWidth }
                        expr: (*)
                            right: literal { token = 2 }
                            left: lValue { varID = line, fieldID = lineWidth }
538.                assign (=)
                        lValue: lValue { varID = rect, fieldID = visible }
                        expr: literal { token = false }
539.                assign (=)
                        lValue: lValue { varID = circle, fieldID = clickable }
                        expr: lValue { varID = circle, fieldID = visible }
540.                if { #stmts = 1 }
                        expr: lValue { varID = img, fieldID = visible }
                        stmts:
541.                        assign (=)
                                lValue: lValue { varID = img, fieldID = clickable }
                                expr: literal { token = true }
542.                if { #stmts = 1 }
                        expr: (!=)
                            right: literal { token = false }
                            left: lValue { varID = img, fieldID = clickable }
                        stmts:
543.                        assign (=)
                                lValue: lValue { varID = img, fieldID = autoDelete }
                                expr: lValue { varID = img, fieldID = visible }
544.                assign (=)
                        lValue: lValue { varID = line, fieldID = group }
                        expr: lValue { varID = s }
545.                assign (=)
                        lValue: lValue { varID = line, fieldID = autoDelete }
                        expr: (||)
                            right: (&&)
                                right: (==)
                                    right: literal { token = 1 }
                                    left: call indexOf { #exprs = 1 }
                                        lValue: lValue { varID = s }
                                        exprs:
                                            lValue { varID = line, fieldID = group }
                                left: call equals { #exprs = 1 }
                                    lValue: lValue { varID = s }
                                    exprs:
                                        literal { token = "world" }
                            left: call equals { #exprs = 1 }
                                lValue: lValue { varID = s }
                                exprs:
                                    literal { token = "hello" }
547.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call getType
                            lValue: lValue { varID = rect }
548.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: literal { token = "more text" }
                                left: call getText
                                    lValue: lValue { varID = text }
549.                call setText { #exprs = 1 }
                        lValue: lValue { varID = img }
                        exprs:
                            literal { token = "racecar.png" }
550.                call setText { #exprs = 1 }
                        lValue: lValue { varID = text }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: literal { token = "Score: " }
551.                call setText { #exprs = 1 }
                        lValue: lValue { varID = text }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: literal { token = "Score: " }
552.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            call toString
                                lValue: lValue { varID = line }
553.                call setSize { #exprs = 2 }
                        lValue: lValue { varID = img }
                        exprs:
                            (*)
                                right: literal { token = 1.1 }
                                left: lValue { varID = img, fieldID = width }
                            (*)
                                right: literal { token = 1.1 }
                                left: lValue { varID = img, fieldID = height }
554.                call align { #exprs = 1 }
                        lValue: lValue { varID = text }
                        exprs:
                            lValue { varID = s }
555.                call align { #exprs = 2 }
                        lValue: lValue { varID = text }
                        exprs:
                            lValue { varID = s }
                            literal { token = true }
556.                call align { #exprs = 2 }
                        lValue: lValue { varID = text }
                        exprs:
                            lValue { varID = s }
                            literal { token = false }
557.                call setFillColor { #exprs = 1 }
                        lValue: lValue { varID = circle }
                        exprs:
                            (+)
                                right: lValue { varID = s }
                                left: literal { token = "light" }
558.                call setFillColor { #exprs = 1 }
                        lValue: lValue { varID = circle }
                        exprs:
                            call getText
                                lValue: lValue { varID = text }
559.                call setFillColorRGB { #exprs = 3 }
                        lValue: lValue { varID = circle }
                        exprs:
                            lValue { varID = i }
                            lValue { varID = j }
                            lValue { varID = k }
560.                call setLineColor { #exprs = 1 }
                        lValue: lValue { varID = rect }
                        exprs:
                            lValue { varID = colors }
                                indexExpr: lValue { varID = i }
561.                call setLineColorRGB { #exprs = 3 }
                        lValue: lValue { varID = rect }
                        exprs:
                            lValue { varID = i }
                            (-)
                                right: lValue { varID = i }
                                left: literal { token = 255 }
                            literal { token = 0 }
562.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call getLayer
                            lValue: lValue { varID = rect }
563.                if { #stmts = 1 }
                        expr: (>=)
                            right: call getLayer
                                lValue: lValue { varID = circle }
                            left: call getLayer
                                lValue: lValue { varID = rect }
                        stmts:
564.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: call equals { #exprs = 1 }
                                    lValue: lValue { varID = colors }
                                        indexExpr: call getLayer
                                            lValue: lValue { varID = rect }
                                    exprs:
                                        literal { token = "green" }
565.                call setLayer { #exprs = 1 }
                        lValue: lValue { varID = img }
                        exprs:
                            unaryOp (neg)
                                expr: literal { token = 42 }
566.                call delete
                        lValue: lValue { varID = img }
567.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call clicked
                            lValue: lValue { varID = img }
568.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call containsPoint { #exprs = 2 }
                            lValue: lValue { varID = img }
                            exprs:
                                call clickX
                                    lValue: lValue { varID = ct }
                                call clickY
                                    lValue: lValue { varID = ct }
569.                if { #stmts = 1 }
                        expr: call containsPoint { #exprs = 2 }
                            lValue: lValue { varID = img }
                            exprs:
                                call clickX
                                    lValue: lValue { varID = ct }
                                call clickY
                                    lValue: lValue { varID = ct }
                        stmts:
570.                        while { #stmts = 1 }
                                expr: call hit { #exprs = 1 }
                                    lValue: lValue { varID = img }
                                    exprs:
                                        lValue { varID = rect }
                                stmts:
571.                                assign (=)
                                        lValue: lValue { varID = b }
                                        expr: (==)
                                            right: literal { token = true }
                                            left: call hit { #exprs = 1 }
                                                lValue: lValue { varID = img }
                                                exprs:
                                                    lValue { varID = rect }
573.                var e { vt = double }
                        initExpr: lValue { varID = Math, fieldID = E }
574.                var pi { vt = double }
                        initExpr: lValue { varID = Math, fieldID = PI }
575.                if { #stmts = 1 }
                        expr: (<)
                            right: lValue { varID = eps }
                            left: call abs { #exprs = 1 }
                                lValue: lValue { varID = Math }
                                exprs:
                                    (-)
                                        right: lValue { varID = img, fieldID = x }
                                        left: lValue { varID = rect, fieldID = x }
                        stmts:
576.                        assign (=)
                                lValue: lValue { varID = i }
                                expr: call abs { #exprs = 1 }
                                    lValue: lValue { varID = Math }
                                    exprs:
                                        lValue { varID = i }
577.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call acos { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                unaryOp (neg)
                                    expr: literal { token = 0.5 }
578.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call asin { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (/)
                                    right: literal { token = 2 }
                                    left: call sqrt { #exprs = 1 }
                                        lValue: lValue { varID = Math }
                                        exprs:
                                            literal { token = 3 }
579.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call atan { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (/)
                                    right: call sqrt { #exprs = 1 }
                                        lValue: lValue { varID = Math }
                                        exprs:
                                            literal { token = 2 }
                                    left: literal { token = 1 }
580.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call atan2 { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (-)
                                    right: lValue { varID = img, fieldID = x }
                                    left: call clickX
                                        lValue: lValue { varID = ct }
                                (-)
                                    right: lValue { varID = img, fieldID = y }
                                    left: call clickY
                                        lValue: lValue { varID = ct }
581.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call ceil { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
582.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call cos { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (/)
                                    right: literal { token = 2 }
                                    left: lValue { varID = Math, fieldID = PI }
583.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call cosh { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (*)
                                    right: literal { token = 2 }
                                    left: lValue { varID = Math, fieldID = PI }
584.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call exp { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (+)
                                    right: literal { token = 1 }
                                    left: (*)
                                        right: lValue { varID = Math, fieldID = PI }
                                        left: literal { token = 2 }
585.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call floor { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                unaryOp (neg)
                                    expr: literal { token = 1.67 }
586.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call log { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                literal { token = 32 }
587.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call log10 { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
588.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call max { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = d }
589.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call max { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
590.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call min { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = d }
591.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call min { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
592.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call pow { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = d }
593.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call sin { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
594.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call sinh { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
595.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call sqrt { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
596.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call tan { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
597.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call tanh { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
599.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call compareTo { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = s }
600.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call equals { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = s }
601.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call indexOf { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = s }
602.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call length
                            lValue: lValue { varID = s }
603.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call substring { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = i }
604.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call substring { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = i }
605.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call toLowerCase
                            lValue: lValue { varID = s }
606.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call toUpperCase
                            lValue: lValue { varID = s }
607.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call trim
                            lValue: lValue { varID = s }
609.                var coins { vt = array of GameObj }
610.                var walls { vt = array of GameObj }
611.                var multilineArrayInit { vt = array of int }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
                                literal { token = 3 }
616.                call log { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 1 }
                            literal { token = 2 }
                            literal { token = 3 }
618.                if { #stmts = 1 }
                        expr: (==)
                            right: literal { token = 1 }
                            left: call random { #exprs = 2 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = 1 }
                                    literal { token = 2 }
                        stmts:
619.                        call println { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = "heads" }
622.                call log { #exprs = 4 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 1 }
                            call random { #exprs = 2 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = 1 }
                                    literal { token = 100 }
                            literal { token = 3 }
                            literal { token = 4 }
629.        func ct { #paramVars = 0, vt = void, #stmts = 1 }
                stmts:
631.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world" }
635.        func int { #paramVars = 0, vt = double, #stmts = 1 }
                stmts:
637.                return
                        expr: literal { token = 0 }
640.        func foo { #paramVars = 2, vt = double, #stmts = 1 }
                paramVars:
640.                var i { vt = int, isGlobal = false }
640.                var boolean { vt = GameObj, isGlobal = false }
                stmts:
642.                return
                        expr: literal { token = 0 }
645.        func bar { #paramVars = 2, vt = boolean, #stmts = 1 }
                paramVars:
645.                var s { vt = String, isGlobal = false }
645.                var gameObj { vt = GameObj, isGlobal = false }
                stmts:
648.                return
                        expr: lValue { varID = TRUE }
651.        func Double { #paramVars = 1, vt = int, #stmts = 1 }
                paramVars:
651.                var x { vt = int, isGlobal = false }
                stmts:
653.                return
                        expr: (*)
                            right: lValue { varID = x }
                            left: literal { token = 2 }
657.        func voidFunc { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
657.                var i { vt = int, isGlobal = false }
660.        func func { #paramVars = 0, vt = void, #stmts = 0 }
664.        func FUNC { #paramVars = 0, vt = void, #stmts = 0 }
668.        func AnotherFunc { #paramVars = 0, vt = void, #stmts = 0 }
672.        func anotherfunc { #paramVars = 0, vt = void, #stmts = 0 }
676.        func expectedErrors { #paramVars = 0, vt = void, #stmts = 286 }
                stmts:
678.                var intVar { vt = int }
                        initExpr: literal { token = 1 }
679.                var dblVar { vt = double }
                        initExpr: literal { token = 1.0 }
680.                var boolVar { vt = boolean }
                        initExpr: literal { token = false }
681.                var strVar { vt = String }
                        initExpr: literal { token = "a" }
682.                var objVar { vt = GameObj }
                        initExpr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 10 }
683.                var intArr { vt = array of int }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
                                literal { token = 3 }
684.                var objArr { vt = array of GameObj }
                        initExpr: arrayInit { #exprs = 1 }
                            exprs:
                                lValue { varID = objVar }
687.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call setText { #exprs = 1 }
                            lValue: lValue { varID = objVar }
                            exprs:
                                literal { token = "circle" }
689.                var screen { vt = double }
                        initExpr: call setScreen { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "menu" }
691.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: call setHeight { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 150 }
693.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: call voidFunc
695.                var title { vt = GameObj }
                        initExpr: call setTitle { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "title" }
698.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = intVar }
700.                var b { vt = boolean }
                        initExpr: call intFuncInt { #exprs = 1 }
                            exprs:
                                literal { token = 2 }
702.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = visible }
                        expr: literal { token = 0 }
704.                var s { vt = String }
                        initExpr: lValue { varID = intVar }
706.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = intVar }
709.                var i { vt = int }
                        initExpr: literal { token = 3.4 }
711.                assign (=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 1.2 }
713.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (*)
                            right: literal { token = 3.4 }
                            left: literal { token = 10 }
715.                var j { vt = int }
                        initExpr: (+)
                            right: literal { token = 3.14 }
                            left: literal { token = 5 }
717.                var plancksConst { vt = int }
                        initExpr: literal { token = 6.62e-34 }
719.                var exponentialNumberNoDot { vt = int }
                        initExpr: literal { token = 12e10 }
721.                var exponentialNumberWithDot { vt = int }
                        initExpr: literal { token = 3.42e2 }
723.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = autoDelete }
                        expr: lValue { varID = dblVar }
725.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: literal { token = 3.14 }
727.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = dblVar }
730.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call clicked
                            lValue: lValue { varID = ct }
732.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = x }
                        expr: lValue { varID = boolVar }
734.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = xSpeed }
                        expr: literal { token = false }
736.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = group }
                        expr: lValue { varID = boolVar }
738.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = boolVar }
741.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = objVar, fieldID = group }
743.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = ySpeed }
                        expr: literal { token = "fast" }
745.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = strVar }
747.                var score { vt = GameObj }
                        initExpr: literal { token = "100 pts" }
750.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = objVar }
752.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = width }
                        expr: lValue { varID = objVar }
754.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = objVar }
756.                var circle { vt = String }
                        initExpr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 10 }
759.                var y { vt = int }
                        initExpr: call intFuncInt { #exprs = 1 }
                            exprs:
                                literal { token = 2.3 }
761.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call random { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0.0 }
                                literal { token = 10 }
763.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call random { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = false }
765.                call setBackColorRGB { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "red" }
                            literal { token = 0 }
                            literal { token = 0 }
767.                call setLayer { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = "front" }
769.                call roundDecimal { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 3.14159 }
                            lValue { varID = objVar }
771.                call substring { #exprs = 1 }
                        lValue: lValue { varID = strVar }
                        exprs:
                            lValue { varID = objVar }
774.                call pow { #exprs = 2 }
                        lValue: lValue { varID = Math }
                        exprs:
                            lValue { varID = boolVar }
                            literal { token = 3 }
776.                call dblFuncIntDbl { #exprs = 2 }
                        exprs:
                            literal { token = 0 }
                            literal { token = "pi" }
778.                call containsPoint { #exprs = 2 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            lValue { varID = strVar }
                            lValue { varID = dblVar }
780.                call exp { #exprs = 1 }
                        lValue: lValue { varID = Math }
                        exprs:
                            lValue { varID = objVar }
783.                call align { #exprs = 2 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = "left" }
                            literal { token = 0 }
785.                call boolFuncBoolStringGameObj { #exprs = 3 }
                        exprs:
                            lValue { varID = dblVar }
                            lValue { varID = strVar }
                            lValue { varID = objVar }
787.                call boolFuncBoolStringGameObj { #exprs = 3 }
                        exprs:
                            lValue { varID = strVar }
                            lValue { varID = objVar }
                            lValue { varID = boolVar }
789.                call boolFuncBoolStringGameObj { #exprs = 3 }
                        exprs:
                            lValue { varID = objVar }
                            lValue { varID = strVar }
                            lValue { varID = boolVar }
792.                call align { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            lValue { varID = intVar }
794.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call parseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 123 }
796.                call circle { #exprs = 4 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 1 }
                            literal { token = 1 }
798.                call setText { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = 1 }
800.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 1.0 }
802.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = boolVar }
804.                call align { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = true }
806.                call equals { #exprs = 1 }
                        lValue: lValue { varID = strVar }
                        exprs:
                            lValue { varID = objVar }
809.                call boolFuncBoolStringGameObj { #exprs = 3 }
                        exprs:
                            lValue { varID = boolVar }
                            lValue { varID = strVar }
                            literal { token = 42 }
811.                call hit { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = 0.0 }
813.                call hit { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = false }
815.                call hit { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = "the wall" }
818.                if { #stmts = 1 }
                        expr: (>)
                            right: literal { token = 0 }
                            left: call intFuncInt
                        stmts:
819.                        call voidFunc
821.                call dblFuncIntDbl
823.                call circle
                        lValue: lValue { varID = ct }
825.                call rect { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 10 }
827.                call circle { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
829.                call voidFunc { #exprs = 1 }
                        exprs:
                            literal { token = 1 }
831.                call setBackColor { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 255 }
                            literal { token = 0 }
                            literal { token = 0 }
833.                call delete { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = true }
835.                call setText { #exprs = 2 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = "circle" }
                            literal { token = "green" }
838.                var k { vt = int }
                        initExpr: (/)
                            right: literal { token = 2 }
                            left: literal { token = 3 }
840.                call random { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (/)
                                right: lValue { varID = intVar }
                                left: lValue { varID = intVar }
                            lValue { varID = intVar }
842.                assign (=)
                        lValue: lValue { varID = x }
                        expr: (+)
                            right: literal { token = 1 }
                            left: lValue { varID = x }
844.                for { #stmts = 1 }
844.                    initStmt: assign (=)
                            lValue: lValue { varID = x }
                            expr: literal { token = 0 }
                        expr: (<)
                            right: literal { token = 1 }
                            left: lValue { varID = x }
844.                    nextStmt: assign (++)
                            lValue: lValue { varID = x }
                        stmts:
845.                        call voidFunc
847.                call foo
849.                var j { vt = int }
                        initExpr: literal { token = 3 }
851.                var uninitializedVar { vt = int }
853.                if { #stmts = 1 }
                        expr: (<)
                            right: literal { token = 0 }
                            left: lValue { varID = uninitializedVar }
                        stmts:
854.                        assign (=)
                                lValue: lValue { varID = uninitializedVar }
                                expr: literal { token = 0 }
855.                var g { vt = GameObj }
857.                assign (=)
                        lValue: lValue { varID = g, fieldID = xSpeed }
                        expr: literal { token = 1 }
860.                var n
                        initExpr: literal { token = 100 }
862.                var gameOver
                        initExpr: literal { token = false }
864.                var r { vt = GameObj }
                        initExpr: call rectangle { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 10 }
                                literal { token = 10 }
866.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = isVisible }
                        expr: literal { token = false }
868.                call foo
                        lValue: lValue { varID = objVar }
871.                var ch
                        initExpr: literal { token = "A" }
873.                var obj
875.                call Circle { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 10 }
877.                call atan2 { #exprs = 2 }
                        lValue: lValue { varID = math }
                        exprs:
                            (-)
                                right: lValue { varID = r, fieldID = x }
                                left: call clickX
                                    lValue: lValue { varID = ct }
                            (-)
                                right: lValue { varID = r, fieldID = y }
                                left: call clickY
                                    lValue: lValue { varID = ct }
879.                call voidfunC
881.                assign (=)
                        lValue: lValue { varID = intvar }
                        expr: literal { token = 2 }
884.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: lValue { varID = Null }
886.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = NULL }
888.                while { #stmts = 1 }
                        expr: lValue { varID = True }
                        stmts:
889.                        call voidFunc
891.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = TRUE }
893.                if { #stmts = 1 }
                        expr: lValue { varID = False }
                        stmts:
894.                        call voidFunc
896.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = clickable }
                        expr: lValue { varID = FALSE }
899.                if { #stmts = 1 }
                        expr: (=)
                            right: literal { token = 0 }
                            left: lValue { varID = i }
                        stmts:
900.                        assign (=)
                                lValue: lValue { varID = i }
                                expr: literal { token = 0 }
902.                var intArr2 { vt = array of int }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
                                literal { token = 3.14 }
904.                var dblArr { vt = array of double }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = "two" }
                                literal { token = 3.14 }
906.                var strArr { vt = array of String }
                        initExpr: newArray { vt = GameObj }
                            lengthExpr: literal { token = 100 }
908.                var boolArr { vt = array of boolean }
                        initExpr: call intArrFuncInt { #exprs = 1 }
                            exprs:
                                literal { token = 10 }
910.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: newArray { vt = int }
                            lengthExpr: literal { token = 1.5 }
913.                assign (++)
                        lValue: lValue { varID = boolVar }
915.                assign (++)
                        lValue: lValue { varID = strVar }
917.                assign (++)
                        lValue: lValue { varID = objVar }
919.                assign (--)
                        lValue: lValue { varID = boolVar }
921.                assign (--)
                        lValue: lValue { varID = strVar }
923.                assign (--)
                        lValue: lValue { varID = objVar }
926.                forArray { #stmts = 1 }
926.                    var: var x { vt = int, isGlobal = false }
                        expr: lValue { varID = intVar }
                        stmts:
927.                        call voidFunc
929.                forArray { #stmts = 1 }
929.                    var: var x { vt = double, isGlobal = false }
                        expr: lValue { varID = dblVar }
                        stmts:
930.                        call voidFunc
932.                forArray { #stmts = 1 }
932.                    var: var x { vt = boolean, isGlobal = false }
                        expr: lValue { varID = boolVar }
                        stmts:
933.                        call voidFunc
935.                forArray { #stmts = 1 }
935.                    var: var x { vt = String, isGlobal = false }
                        expr: lValue { varID = strVar }
                        stmts:
936.                        call voidFunc
938.                forArray { #stmts = 1 }
938.                    var: var x { vt = GameObj, isGlobal = false }
                        expr: lValue { varID = objVar }
                        stmts:
939.                        call voidFunc
941.                forArray { #stmts = 1 }
941.                    var: var x { vt = GameObj, isGlobal = false }
                        expr: lValue { varID = strVar }
                        stmts:
942.                        call voidFunc
945.                forArray { #stmts = 1 }
945.                    var: var x { vt = double, isGlobal = false }
                        expr: lValue { varID = intArr }
                        stmts:
946.                        call voidFunc
948.                forArray { #stmts = 1 }
948.                    var: var x { vt = String, isGlobal = false }
                        expr: lValue { varID = objArr }
                        stmts:
949.                        call voidFunc
952.                for { #stmts = 1 }
                        expr: lValue { varID = intVar }
                        stmts:
953.                        call voidFunc
955.                for { #stmts = 1 }
                        expr: lValue { varID = dblVar }
                        stmts:
956.                        call voidFunc
958.                for { #stmts = 1 }
                        expr: lValue { varID = strVar }
                        stmts:
959.                        call voidFunc
961.                for { #stmts = 1 }
                        expr: lValue { varID = objVar }
                        stmts:
962.                        call voidFunc
964.                doWhile { #stmts = 1 }
                        expr: lValue { varID = intVar }
                        stmts:
965.                        call voidFunc
970.                while { #stmts = 1 }
                        expr: lValue { varID = dblVar }
                        stmts:
971.                        call voidFunc
973.                while { #stmts = 1 }
                        expr: lValue { varID = strVar }
                        stmts:
974.                        call voidFunc
976.                while { #stmts = 1 }
                        expr: lValue { varID = objVar }
                        stmts:
977.                        call voidFunc
980.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = intVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = intVar }
                                stmts:
984.                                call voidFunc
                        stmts:
981.                        call voidFunc
986.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = dblVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = dblVar }
                                stmts:
990.                                call voidFunc
                        stmts:
987.                        call voidFunc
992.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = strVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = strVar }
                                stmts:
996.                                call voidFunc
                        stmts:
993.                        call voidFunc
998.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = objVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = objVar }
                                stmts:
1002.                                call voidFunc
                        stmts:
999.                        call voidFunc
1005.                var n
                        initExpr: literal { token = 100 }
1007.                var d
                        initExpr: literal { token = 100.0 }
1009.                var b
                        initExpr: literal { token = false }
1012.                assign (+=)
                        lValue: lValue { varID = strVar }
                        expr: literal { token = "hello" }
1014.                assign (-=)
                        lValue: lValue { varID = boolVar }
                        expr: literal { token = 1 }
1016.                assign (*=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = objVar }
1018.                assign (/=)
                        lValue: lValue { varID = objVar }
                        expr: literal { token = 3.14 }
1020.                assign (+=)
                        lValue: lValue { varID = intVar }
                        expr: literal { token = "hello" }
1022.                assign (-=)
                        lValue: lValue { varID = dblVar }
                        expr: call rect { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 1 }
                                literal { token = 2 }
1024.                assign (*=)
                        lValue: lValue { varID = intVar }
                        expr: literal { token = false }
1026.                assign (/=)
                        lValue: lValue { varID = dblVar }
                        expr: literal { token = true }
1028.                assign (+=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
1030.                assign (-=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
1032.                assign (*=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
1034.                assign (/=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
1036.                if { #stmts = 1 }
                        expr: (==)
                            right: literal { token = "s" }
                            left: lValue { varID = strVar }
                        stmts:
1037.                        call voidFunc
1040.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (^)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
1042.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (&)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
1044.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (|)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
1046.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (>>)
                            right: literal { token = 2 }
                            left: lValue { varID = i }
1048.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (<<)
                            right: literal { token = 2 }
                            left: lValue { varID = i }
1050.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (>>>)
                            right: literal { token = 2 }
                            left: lValue { varID = i }
1053.                var ct { vt = String }
1055.                var String { vt = int }
1057.                var GameObj { vt = double }
1059.                var lowercasefirst { vt = int }
                        initExpr: literal { token = 1 }
1061.                var lowerCaseFirst { vt = int }
                        initExpr: literal { token = 10 }
1062.                var upperCaseFirst { vt = GameObj }
                        initExpr: lValue { varID = objVar }
1064.                var uppercasefirst { vt = GameObj }
                        initExpr: literal { token = null }
1066.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: (+)
                            right: literal { token = 1 }
                            left: lValue { varID = dblvar }
1070.                var DouBle { vt = int }
1072.                var BooLean { vt = double }
1074.                var string { vt = boolean }
1077.                assign (=)
                        lValue: lValue { varID = intVar }
                            indexExpr: literal { token = 0 }
                        expr: literal { token = 1 }
1080.                assign (=)
                        lValue: lValue { varID = intArr }
                            indexExpr: lValue { varID = dblVar }
                        expr: literal { token = 1 }
1083.                var numObjs { vt = int }
                        initExpr: lValue { varID = objArr, fieldID = Length }
1086.                var len { vt = int }
                        initExpr: lValue { varID = strVar, fieldID = length }
1088.                var size { vt = int }
                        initExpr: lValue { varID = intVar, fieldID = size }
1091.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: unaryOp (neg)
                            expr: lValue { varID = objVar }
1094.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = visible }
                        expr: unaryOp (not)
                            expr: lValue { varID = intVar }
1097.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: (+)
                            right: lValue { varID = intArr }
                            left: lValue { varID = strVar }
1099.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: (+)
                            right: lValue { varID = strVar }
                            left: lValue { varID = intArr }
1102.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (+)
                            right: unaryOp (not)
                                expr: lValue { varID = boolVar }
                            left: lValue { varID = boolVar }
1104.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: (+)
                            right: lValue { varID = objVar }
                            left: lValue { varID = objVar }
1106.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: (+)
                            right: literal { token = 1 }
                            left: lValue { varID = intArr }
1108.                assign (=)
                        lValue: lValue { varID = objArr }
                        expr: (+)
                            right: lValue { varID = objVar }
                            left: lValue { varID = objArr }
1111.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: (-)
                            right: lValue { varID = intVar }
                            left: lValue { varID = strVar }
1113.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (*)
                            right: literal { token = 0 }
                            left: lValue { varID = boolVar }
1115.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: (/)
                            right: literal { token = 2 }
                            left: lValue { varID = objVar }
1117.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: (%)
                            right: literal { token = 2 }
                            left: lValue { varID = intArr }
1120.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: (&&)
                            right: literal { token = 1001 }
                            left: lValue { varID = intVar }
1122.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (||)
                            right: literal { token = 1010 }
                            left: lValue { varID = boolVar }
1125.                if { #stmts = 1 }
                        expr: (<)
                            right: lValue { varID = boolVar }
                            left: lValue { varID = boolVar }
                        stmts:
1126.                        call voidFunc
1128.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (>)
                            right: lValue { varID = dblVar }
                            left: lValue { varID = objVar }
1130.                while { #stmts = 1 }
                        expr: (<=)
                            right: lValue { varID = intVar }
                            left: lValue { varID = boolVar }
                        stmts:
1131.                        call voidFunc
1134.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: (>=)
                            right: lValue { varID = intArr }
                            left: lValue { varID = dblVar }
1137.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: (/)
                            right: literal { token = 2 }
                            left: literal { token = 1 }
1139.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: (/)
                            right: literal { token = 8 }
                            left: literal { token = 3 }
1142.                var intVar { vt = int }
                        initExpr: literal { token = 13 }
1144.                var objArr { vt = array of GameObj }
                        initExpr: newArray { vt = GameObj }
                            lengthExpr: literal { token = 10 }
1147.                call update
1149.                call start
1151.                call onMousePress { #exprs = 2 }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
1154.                call println { #exprs = 1 }
                        exprs:
                            literal { token = "Hello world" }
1156.                call setHeight { #exprs = 1 }
                        exprs:
                            literal { token = 150 }
1159.                call intFunc
1161.                call dblFuncIntDbl { #exprs = 2 }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0.1 }
1164.                call foo
                        lValue: lValue { varID = GameObj }
1166.                call foo
                        lValue: lValue { varID = String }
1168.                call foo
                        lValue: lValue { varID = Code12Program }
1170.                call foo
                        lValue: lValue { varID = Code12Program }
1173.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                            indexExpr: literal { token = 0 }
                        exprs:
                            lValue { varID = objVar }
1175.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: call tan { #exprs = 1 }
                            lValue: lValue { varID = Math }
                                indexExpr: lValue { varID = intVar }
                            exprs:
                                literal { token = 0 }
1178.                call voidFunc
                        lValue: lValue { varID = intArr }
1181.                call voidFunc
                        lValue: lValue { varID = intArr }
                            indexExpr: literal { token = 0 }
1183.                call foo
                        lValue: lValue { varID = boolVar }
1186.                call prnitln
                        lValue: lValue { varID = ct }
1188.                call circ { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 10 }
1191.                call foo
                        lValue: lValue { varID = objArr }
                            indexExpr: literal { token = 0 }
1193.                call foo
                        lValue: lValue { varID = Math }
1196.                call intFuncInt
1198.                call dblFuncIntDbl
1200.                call log
                        lValue: lValue { varID = ct }
1202.                call atan2
                        lValue: lValue { varID = Math }
1204.                call boolFuncBoolStringGameObj { #exprs = 2 }
                        exprs:
                            literal { token = false }
                            literal { token = "" }
1206.                call rect { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 10 }
1208.                call voidFunc { #exprs = 1 }
                        exprs:
                            lValue { varID = intVar }
1210.                call print { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "intVar =" }
                            lValue { varID = intVar }
1212.                call atan { #exprs = 2 }
                        lValue: lValue { varID = Math }
                        exprs:
                            literal { token = 4 }
                            literal { token = 3 }
1214.                call logm { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = intVar }
                            lValue { varID = objVar }
1216.                var indent { vt = String }
                        initExpr: literal { token = "2 Tabs" }
1218.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "1 Space + 2 Tabs" }
1220.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "2 Tabs" }
1222.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "8 Spaces" }
1224.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "2 Tabs" }
1226.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "4 Spaces + 1 Tab" }
1228.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "2 Tabs" }
1230.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1232.                        call voidFunc
1234.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1236.                        call voidFunc
1237.                if { #stmts = 2 }
                        expr: literal { token = false }
                        stmts:
1240.                        call voidFunc
1241.                        call voidFunc
1243.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1244.                        call voidFunc
1246.                call voidFunc
1247.                if { #stmts = 2 }
                        expr: literal { token = false }
                        stmts:
1249.                        call voidFunc
1251.                        call voidFunc
1253.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1256.                        call voidFunc
1258.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1260.                        call voidFunc
1263.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
1267.                        call voidFunc
                        stmts:
1264.                        call voidFunc
1268.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
1272.                        call voidFunc
                        stmts:
1269.                        call voidFunc
1273.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
1276.                        call voidFunc
                        stmts:
1274.                        call voidFunc
1278.                call voidFunc
1279.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
1284.                        call voidFunc
                        stmts:
1280.                        call voidFunc
1286.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: literal { token = false }
                                stmts:
1290.                                call voidFunc
                        stmts:
1287.                        call voidFunc
1291.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: literal { token = false }
                                stmts:
1296.                                call voidFunc
                        stmts:
1292.                        call voidFunc
1298.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 1 }
                                expr: literal { token = false }
                                elseStmts:
1304.                                call voidFunc
                                stmts:
1302.                                call voidFunc
                        stmts:
1299.                        call voidFunc
1305.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 1 }
                                expr: literal { token = false }
                                elseStmts:
1311.                                call voidFunc
                                stmts:
1308.                                call voidFunc
                        stmts:
1306.                        call voidFunc
1312.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 1 }
                                expr: literal { token = false }
                                elseStmts:
                                    if { #elseStmts = 1, #stmts = 1 }
                                        expr: literal { token = false }
                                        elseStmts:
1321.                                        call voidFunc
                                        stmts:
1318.                                        call voidFunc
                                stmts:
1315.                                call voidFunc
                        stmts:
1313.                        call voidFunc
1322.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1323.                        if { #elseStmts = 1, #stmts = 1 }
                                expr: literal { token = false }
                                elseStmts:
1327.                                call voidFunc
                                stmts:
1324.                                call voidFunc
1328.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1330.                        if { #elseStmts = 1, #stmts = 1 }
                                expr: literal { token = false }
                                elseStmts:
1336.                                call voidFunc
                                stmts:
1332.                                call voidFunc
1340.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1341.                        if { #elseStmts = 1, #stmts = 1 }
                                expr: literal { token = false }
                                elseStmts:
                                    if { #stmts = 1 }
                                        expr: literal { token = false }
                                        stmts:
1345.                                        call voidFunc
                                stmts:
1342.                                call voidFunc
1346.                for { #stmts = 1 }
1346.                    initStmt: var ii { vt = int, isGlobal = false }
                            initExpr: literal { token = 0 }
                        expr: (<)
                            right: literal { token = 100 }
                            left: lValue { varID = ii }
1346.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
1348.                        call voidFunc
1349.                for { #stmts = 1 }
1349.                    initStmt: var ii { vt = int, isGlobal = false }
                            initExpr: literal { token = 0 }
                        expr: (<)
                            right: literal { token = 100 }
                            left: lValue { varID = ii }
1349.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
1352.                        call voidFunc
1354.                for { #stmts = 1 }
1354.                    initStmt: var ii { vt = int, isGlobal = false }
                            initExpr: literal { token = 0 }
                        expr: (<)
                            right: literal { token = 100 }
                            left: lValue { varID = ii }
1354.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
1357.                        call voidFunc
1359.                while { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1361.                        call voidFunc
1362.                while { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1365.                        call voidFunc
1367.                while { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1368.                        call voidFunc
1370.                call voidFunc
1371.                doWhile { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1373.                        call voidFunc
1375.                doWhile { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1378.                        call voidFunc
1381.                doWhile { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1382.                        call voidFunc
1385.                var x1 { vt = int }
1387.                var x2 { vt = int }
1387.                var x3 { vt = int }
1388.                var circle { vt = GameObj }
                        initExpr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 10 }
1394.                call log { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 1 }
                            literal { token = 2 }
                            literal { token = 3 }
1395.                var multiLineArrInit { vt = array of int }
                        initExpr: arrayInit { #exprs = 2 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
1398.                var multiLineArrDec { vt = array of int }
                        initExpr: newArray { vt = int }
                            lengthExpr: call random { #exprs = 2 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = 1 }
                                    literal { token = 10 }
1403.                if { #elseStmts = 1, #stmts = 1 }
                        expr: (>)
                            right: literal { token = 3 }
                            left: call random { #exprs = 2 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = 1 }
                                    literal { token = 2 }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: (>)
                                    right: literal { token = 3 }
                                    left: call random { #exprs = 2 }
                                        lValue: lValue { varID = ct }
                                        exprs:
                                            literal { token = 1 }
                                            literal { token = 2 }
                                stmts:
1408.                                call voidFunc
                        stmts:
1404.                        call voidFunc
1411.                while { #stmts = 1 }
                        expr: (>)
                            right: literal { token = 3 }
                            left: call random { #exprs = 2 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = 1 }
                                    literal { token = 2 }
                        stmts:
1412.                        call voidFunc
1413.                doWhile { #stmts = 1 }
                        expr: (<)
                            right: literal { token = 0 }
                            left: call max { #exprs = 2 }
                                lValue: lValue { varID = Math }
                                exprs:
                                    literal { token = 1 }
                                    literal { token = 0 }
                        stmts:
1414.                        call voidFunc
1420.                for { #stmts = 1 }
                        expr: (<)
                            right: literal { token = 0 }
                            left: call max { #exprs = 2 }
                                lValue: lValue { varID = Math }
                                exprs:
                                    literal { token = 1 }
                                    literal { token = 0 }
                        stmts:
1421.                        call voidFunc
1422.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1423.                        call voidFunc
1425.                call voidFunc
1426.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
1429.                        call voidFunc
                        stmts:
1427.                        call voidFunc
1431.                call voidFunc
1432.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: literal { token = false }
                                stmts:
1435.                                call voidFunc
                        stmts:
1433.                        call voidFunc
1437.                call voidFunc
1438.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1439.                        call voidFunc
1441.                while { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1442.                        call voidFunc
1443.                for { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1444.                        call voidFunc
1446.                call voidFunc
1447.                while { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1448.                        call voidFunc
1450.                call voidFunc
1462.        func myFunc { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
1462.                var myVar { vt = int, isGlobal = false }
1466.        func update { #paramVars = 0, vt = GameObj, #stmts = 0 }
1470.        func onMousePress { #paramVars = 3, vt = String, #stmts = 0 }
                paramVars:
1470.                var obj { vt = GameObj, isGlobal = false }
1470.                var x { vt = double, isGlobal = false }
1470.                var y { vt = double, isGlobal = false }
1474.        func onMousePress { #paramVars = 2, vt = void, #stmts = 0 }
                paramVars:
1474.                var x { vt = double, isGlobal = false }
1474.                var y { vt = double, isGlobal = false }
1478.        func onKeyPress { #paramVars = 3, vt = void, #stmts = 0 }
                paramVars:
1478.                var obj { vt = GameObj, isGlobal = false }
1478.                var x { vt = double, isGlobal = false }
1478.                var y { vt = double, isGlobal = false }
1482.        func onKeyRelease { #paramVars = 0, vt = void, #stmts = 0 }
1486.        func onMousePress { #paramVars = 3, vt = void, #stmts = 0 }
                paramVars:
1486.                var obj { vt = boolean, isGlobal = false }
1486.                var x { vt = double, isGlobal = false }
1486.                var y { vt = double, isGlobal = false }
1490.        func onMouseDrag { #paramVars = 3, vt = void, #stmts = 0 }
                paramVars:
1490.                var obj { vt = GameObj, isGlobal = false }
1490.                var x { vt = int, isGlobal = false }
1490.                var y { vt = double, isGlobal = false }
1494.        func onMouseRelease { #paramVars = 3, vt = void, #stmts = 0 }
                paramVars:
1494.                var obj { vt = GameObj, isGlobal = false }
1494.                var x { vt = double, isGlobal = false }
1494.                var y { vt = String, isGlobal = false }
1498.        func onKeyPress { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
1498.                var keyName { vt = double, isGlobal = false }
1502.        func onKeyRelease { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
1502.                var keyName { vt = int, isGlobal = false }
1506.        func onCharTyped { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
1506.                var keyName { vt = GameObj, isGlobal = false }
1510.        func overIndentedFunc { #paramVars = 0, vt = void, #stmts = 0 }
1514.        func underIndentedFunc { #paramVars = 0, vt = void, #stmts = 0 }
1517.        func funcWithUnindentedBody { #paramVars = 0, vt = int, #stmts = 1 }
                stmts:
1520.                return
                        expr: literal { token = 0 }
1522.        func multiLineFuncDef { #paramVars = 2, vt = void, #stmts = 0 }
                paramVars:
1522.                var arg1 { vt = int, isGlobal = false }
1524.                var arg2 { vt = int, isGlobal = false }
1527.        func multilineReturnFunc { #paramVars = 0, vt = int, #stmts = 1 }
                stmts:
1531.                return
                        expr: call max { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
        vars:
  5.        var myVar { vt = int, isGlobal = true }
                initExpr: literal { token = 1 }
  7.        var button { vt = GameObj, isGlobal = true }
                initExpr: call text { #exprs = 4 }
                    lValue: lValue { varID = ct }
                    exprs:
                        literal { token = "START" }
                        literal { token = 0 }
                        literal { token = 0 }
                        literal { token = 10 }
  9.        var intResult { vt = int, isGlobal = true }
                initExpr: call intFunc
 11.        var overIndentedInstanceVar { vt = int, isGlobal = true }
 13.        var underIndentedInstanceVar { vt = int, isGlobal = true }
 14.        var classLevelMultilineIntArray1 { vt = array of int, isGlobal = true }
                initExpr: arrayInit { #exprs = 2 }
                    exprs:
                        literal { token = 1 }
                        literal { token = 2 }
 17.        var classLevelMultilineIntArray2 { vt = array of int, isGlobal = true }
                initExpr: arrayInit { #exprs = 3 }
                    exprs:
                        literal { token = 1 }
                        literal { token = 2 }
                        literal { token = 3 }
 21.        var classLevelMultilineIntArray3 { vt = array of int, isGlobal = true }
                initExpr: newArray { vt = int }
                    lengthExpr: call max { #exprs = 2 }
                        lValue: lValue { varID = Math }
                        exprs:
                            literal { token = 1 }
                            literal { token = 2 }
 25.        var classLevelVarTypeMismatchIntDouble { vt = int, isGlobal = true }
                initExpr: literal { token = 0.1 }
 27.        var MAX_ENEMIES { vt = int, isConst = true, isGlobal = true }
                initExpr: literal { token = 100 }
 28.        var numEnemies { vt = int, isGlobal = true }
                initExpr: call min { #exprs = 2 }
                    lValue: lValue { varID = Math }
                    exprs:
                        literal { token = 1000 }
                        lValue { varID = MAX_ENEMIES }
 29.        var doubleArr { vt = array of double, isGlobal = true }
                initExpr: arrayInit { #exprs = 3 }
                    exprs:
                        literal { token = 1.0 }
                        literal { token = 2.0 }
                        literal { token = 3.0 }
 32.        var leftWall { vt = GameObj, isGlobal = true }
 32.        var rightWall { vt = GameObj, isGlobal = true }
 32.        var topWall { vt = GameObj, isGlobal = true }
 32.        var bottomWall { vt = GameObj, isGlobal = true }
 33.        var enemies { vt = array of GameObj, isGlobal = true }
 34.        var friends { vt = array of GameObj, isGlobal = true }
                initExpr: newArray { vt = GameObj }
                    lengthExpr: lValue { varID = MAX_ENEMIES }
626.        var newWidth { vt = double, isGlobal = true }
                initExpr: call getWidth
                    lValue: lValue { varID = ct }
