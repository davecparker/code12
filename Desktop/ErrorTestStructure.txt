    program ErrorTest { #funcs = 41, #vars = 6 }
        funcs:
 22.        func emptyFunc { #paramVars = 0, vt = void, #stmts = 0 }
 25.        func voidFunc { #paramVars = 0, vt = void, #stmts = 1 }
                stmts:
 27.                var i { vt = int }
                        initExpr: literal { token = 0 }
 29.        func intFunc { #paramVars = 0, vt = int, #stmts = 2 }
                stmts:
 31.                var i { vt = int }
                        initExpr: literal { token = 1 }
 32.                return
                        expr: lValue { varID = i }
 34.        func dblFunc { #paramVars = 0, vt = double, #stmts = 2 }
                stmts:
 36.                var d { vt = double }
                        initExpr: literal { token = 0.0 }
 37.                return
                        expr: lValue { varID = d }
 39.        func boolFunc { #paramVars = 0, vt = boolean, #stmts = 2 }
                stmts:
 41.                var b { vt = boolean }
                        initExpr: literal { token = true }
 42.                return
                        expr: lValue { varID = b }
 44.        func strFunc { #paramVars = 0, vt = String, #stmts = 2 }
                stmts:
 46.                var s { vt = String }
                        initExpr: literal { token = "" }
 47.                return
                        expr: lValue { varID = s }
 49.        func gObjFunc { #paramVars = 0, vt = GameObj, #stmts = 1 }
                stmts:
 51.                return
                        expr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0.0 }
                                literal { token = 0.0 }
                                literal { token = 1.0 }
 53.        func intArrFuncInt { #paramVars = 1, vt = array of int, #stmts = 1 }
                paramVars:
 53.                var n { vt = int, isGlobal = false }
                stmts:
 55.                return
                        expr: newArray { vt = int }
                            lengthExpr: lValue { varID = n }
 57.        func intFuncInt { #paramVars = 1, vt = int, #stmts = 1 }
                paramVars:
 57.                var i { vt = int, isGlobal = false }
                stmts:
 59.                return
                        expr: (+)
                            right: literal { token = 1 }
                            left: (*)
                                right: literal { token = 2 }
                                left: lValue { varID = i }
 61.        func dblFuncIntDbl { #paramVars = 2, vt = double, #stmts = 1 }
                paramVars:
 61.                var i { vt = int, isGlobal = false }
 61.                var d { vt = double, isGlobal = false }
                stmts:
 63.                return
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
 65.        func boolFuncBoolStringGameObj { #paramVars = 3, vt = boolean, #stmts = 1 }
                paramVars:
 65.                var b { vt = boolean, isGlobal = false }
 65.                var s { vt = String, isGlobal = false }
 65.                var g { vt = GameObj, isGlobal = false }
                stmts:
 67.                return
                        expr: (&&)
                            right: lValue { varID = g, fieldID = visible }
                            left: (&&)
                                right: call equals { #exprs = 1 }
                                    lValue: lValue { varID = s }
                                    exprs:
                                        literal { token = "" }
                                left: lValue { varID = b }
 69.        func recursiveFunc { #paramVars = 1, vt = int, #stmts = 2 }
                paramVars:
 69.                var i { vt = int, isGlobal = false }
                stmts:
 71.                if { #stmts = 1 }
                        expr: (<=)
                            right: literal { token = 0 }
                            left: lValue { varID = i }
                        stmts:
 72.                        return
                                expr: literal { token = 0 }
 73.                return
                        expr: (+)
                            right: call recursiveFunc { #exprs = 1 }
                                exprs:
                                    (-)
                                        right: literal { token = 1 }
                                        left: lValue { varID = i }
                            left: literal { token = 1 }
 75.        func multiLineFuncDecl { #paramVars = 3, vt = void, #stmts = 1 }
                paramVars:
 75.                var arg1 { vt = int, isGlobal = false }
 76.                var arg2 { vt = double, isGlobal = false }
 77.                var arg3 { vt = boolean, isGlobal = false }
                stmts:
 79.                call log { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = arg1 }
                            lValue { varID = arg2 }
                            lValue { varID = arg3 }
 83.        func start { #paramVars = 0, vt = int, isPublic = true, #stmts = 412 }
                stmts:
 87.                var LIMIT { vt = int, isConst = true }
                        initExpr: literal { token = 100 }
 89.                var i { vt = int }
                        initExpr: literal { token = 3 }
 90.                assign (=)
                        lValue: lValue { varID = i }
                        expr: unaryOp (neg)
                            expr: literal { token = 5 }
 91.                assign (++)
                        lValue: lValue { varID = i }
 92.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (+)
                            right: literal { token = 1 }
                            left: lValue { varID = i }
 93.                assign (+=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 1 }
 94.                assign (-=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 2 }
 95.                assign (*=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 3 }
 96.                assign (/=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 4 }
 97.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intFunc
 98.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intFuncInt { #exprs = 1 }
                            exprs:
                                (-)
                                    right: (*)
                                        right: lValue { varID = i }
                                        left: literal { token = 345 }
                                    left: (-)
                                        right: parens
                                            expr: (+)
                                                right: lValue { varID = i }
                                                left: lValue { varID = i }
                                        left: lValue { varID = i }
 99.                var foo { vt = int }
                        initExpr: (+)
                            right: literal { token = 4 }
                            left: lValue { varID = i }
100.                var score { vt = int }
                        initExpr: literal { token = 500 }
101.                var j { vt = int }
101.                var k { vt = int }
102.                var exponentialNumberNoDot { vt = double }
                        initExpr: literal { token = 12e10 }
103.                var exponentialNumberWithDot { vt = double }
                        initExpr: literal { token = 3.42e2 }
104.                var expontialNumberWithDecimalPlaces { vt = double }
                        initExpr: literal { token = 6.62e-34 }
105.                var d { vt = double }
                        initExpr: literal { token = 3.14 }
106.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 100 }
107.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = .5 }
108.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 1.2345e6 }
109.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 1.2345e+67 }
110.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = .12e0 }
111.                assign (=)
                        lValue: lValue { varID = d }
                        expr: unaryOp (neg)
                            expr: literal { token = .123e-123 }
112.                assign (=)
                        lValue: lValue { varID = d }
                        expr: unaryOp (neg)
                            expr: literal { token = .5 }
113.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: literal { token = 2 }
                            left: lValue { varID = d }
114.                assign (++)
                        lValue: lValue { varID = d }
115.                assign (+=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 0.5 }
116.                assign (-=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 7 }
117.                assign (*=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 8 }
118.                assign (/=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 8.0 }
119.                var d2 { vt = double }
                        initExpr: literal { token = 3 }
120.                var d3 { vt = double }
                        initExpr: (+)
                            right: (*)
                                right: parens
                                    expr: (+)
                                        right: lValue { varID = d }
                                        left: lValue { varID = d2 }
                                left: literal { token = 2 }
                            left: lValue { varID = d }
121.                var x1 { vt = double }
121.                var x2 { vt = double }
121.                var y1 { vt = double }
121.                var y2 { vt = double }
122.                assign (=)
                        lValue: lValue { varID = x1 }
                        expr: literal { token = 1 }
123.                assign (=)
                        lValue: lValue { varID = x2 }
                        expr: literal { token = 2.0 }
124.                assign (=)
                        lValue: lValue { varID = y1 }
                        expr: literal { token = .5e+1 }
125.                assign (=)
                        lValue: lValue { varID = y2 }
                        expr: unaryOp (neg)
                            expr: literal { token = .5e-1 }
126.                var eps { vt = double }
                        initExpr: literal { token = 1e-4 }
127.                var name { vt = String }
                        initExpr: literal { token = "Einstein" }
128.                var b { vt = boolean }
                        initExpr: literal { token = true }
129.                var b2 { vt = boolean }
                        initExpr: literal { token = false }
130.                var b3 { vt = boolean }
                        initExpr: (||)
                            right: lValue { varID = b2 }
                            left: lValue { varID = b }
131.                var s { vt = String }
                        initExpr: literal { token = "A string variable" }
132.                assign (=)
                        lValue: lValue { varID = s }
                        expr: lValue { varID = s }
133.                assign (=)
                        lValue: lValue { varID = s }
                        expr: literal { token = null }
135.                var colors { vt = array of String }
                        initExpr: arrayInit { #exprs = 5 }
                            exprs:
                                literal { token = "black" }
                                literal { token = "white" }
                                literal { token = "red" }
                                literal { token = "green" }
                                literal { token = "blue" }
136.                assign (=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 100 }
137.                var strArr { vt = array of String }
                        initExpr: newArray { vt = String }
                            lengthExpr: lValue { varID = i }
138.                assign (=)
                        lValue: lValue { varID = strArr }
                        expr: lValue { varID = colors }
139.                var intArr { vt = array of int }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
                                literal { token = 3 }
140.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: newArray { vt = int }
                            lengthExpr: literal { token = 100 }
141.                var intArr2 { vt = array of int }
                        initExpr: newArray { vt = int }
                            lengthExpr: call length
                                lValue: lValue { varID = s }
142.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: lValue { varID = intArr2 }
143.                var dblArr { vt = array of double }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1.1 }
                                literal { token = 2.2 }
                                literal { token = 3.3 }
144.                var dblArr2 { vt = array of double }
                        initExpr: newArray { vt = double }
                            lengthExpr: literal { token = 100 }
145.                assign (=)
                        lValue: lValue { varID = dblArr }
                        expr: lValue { varID = dblArr2 }
146.                var gObjArr { vt = array of GameObj }
                        initExpr: newArray { vt = GameObj }
                            lengthExpr: (*)
                                right: literal { token = 2 }
                                left: lValue { varID = i }
148.                call voidFunc
149.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intFunc
150.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call dblFunc
151.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call boolFunc
152.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call strFunc
153.                var gObj { vt = GameObj }
                        initExpr: call gObjFunc
154.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: call intArrFuncInt { #exprs = 1 }
                            exprs:
                                lValue { varID = i }
155.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intFuncInt { #exprs = 1 }
                            exprs:
                                lValue { varID = i }
156.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call dblFuncIntDbl { #exprs = 2 }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = d }
157.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call boolFuncBoolStringGameObj { #exprs = 3 }
                            exprs:
                                lValue { varID = b }
                                lValue { varID = s }
                                lValue { varID = gObj }
158.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call recursiveFunc { #exprs = 1 }
                            exprs:
                                literal { token = 2 }
160.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (/)
                            right: literal { token = 1 }
                            left: literal { token = 5 }
161.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (/)
                            right: literal { token = 20 }
                            left: literal { token = 100 }
162.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (+)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
163.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (-)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
164.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (*)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
165.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (%)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
166.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (-)
                            right: lValue { varID = i }
                            left: (+)
                                right: lValue { varID = i }
                                left: (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
167.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (*)
                            right: parens
                                expr: (-)
                                    right: lValue { varID = i }
                                    left: parens
                                        expr: (+)
                                            right: lValue { varID = i }
                                            left: lValue { varID = i }
                            left: lValue { varID = i }
168.                assign (=)
                        lValue: lValue { varID = d }
                        expr: lValue { varID = i }
169.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
170.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
171.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
172.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
173.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (%)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
174.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
175.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
176.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
177.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
178.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (%)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
179.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
180.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
181.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
182.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
183.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (%)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
184.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: (*)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
                            left: (-)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
185.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = i }
                            left: (+)
                                right: (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
                                left: lValue { varID = d }
186.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: (*)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
                            left: (*)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
187.                assign (=)
                        lValue: lValue { varID = d }
                        expr: parens
                            expr: (-)
                                right: (*)
                                    right: lValue { varID = d }
                                    left: lValue { varID = d }
                                left: (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
188.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = s }
189.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: literal { token = "s" }
                            left: (+)
                                right: lValue { varID = s }
                                left: lValue { varID = s }
190.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = i }
                            left: lValue { varID = s }
191.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = s }
192.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = b }
                            left: lValue { varID = s }
193.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = gObj }
                            left: lValue { varID = s }
194.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = i }
195.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = d }
196.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = b }
197.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = gObj }
198.                assign (=)
                        lValue: lValue { varID = b }
                        expr: lValue { varID = b }
199.                assign (=)
                        lValue: lValue { varID = b }
                        expr: unaryOp (not)
                            expr: lValue { varID = b }
200.                assign (=)
                        lValue: lValue { varID = b }
                        expr: parens
                            expr: lValue { varID = b }
201.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
202.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
203.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
204.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
205.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
206.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = gObj }
                            left: lValue { varID = gObj }
207.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
208.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
209.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
210.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
211.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
212.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = gObj }
                            left: lValue { varID = gObj }
213.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
214.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
215.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
216.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
217.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
218.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
219.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
220.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
221.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
222.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
223.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
224.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
225.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
226.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
227.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
228.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
229.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (||)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
230.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (&&)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
231.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: literal { token = 2 }
                            left: literal { token = 1 }
232.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: literal { token = 2 }
                            left: literal { token = 1.1 }
233.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: literal { token = 2 }
                            left: literal { token = 1 }
234.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: literal { token = 2.2 }
                            left: literal { token = 1 }
235.                assign (=)
                        lValue: lValue { varID = b2 }
                        expr: (||)
                            right: (&&)
                                right: (==)
                                    right: lValue { varID = b }
                                    left: lValue { varID = b }
                                left: lValue { varID = b3 }
                            left: lValue { varID = b2 }
236.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: literal { token = 0 }
                            left: (%)
                                right: literal { token = 2 }
                                left: lValue { varID = i }
237.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (&&)
                            right: lValue { varID = b }
                            left: parens
                                expr: (||)
                                    right: lValue { varID = b }
                                    left: lValue { varID = b }
238.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (&&)
                            right: parens
                                expr: (<)
                                    right: literal { token = 0.0001 }
                                    left: (-)
                                        right: literal { token = 3.14159 }
                                        left: lValue { varID = Math, fieldID = PI }
                            left: parens
                                expr: (==)
                                    right: literal { token = 2 }
                                    left: (+)
                                        right: literal { token = 1 }
                                        left: literal { token = 1 }
240.                if { #elseStmts = 1, #stmts = 1 }
                        expr: (==)
                            right: literal { token = 0 }
                            left: lValue { varID = i }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 1 }
                                expr: (<=)
                                    right: literal { token = 10 }
                                    left: lValue { varID = i }
                                elseStmts:
245.                                assign (*=)
                                        lValue: lValue { varID = i }
                                        expr: literal { token = 5 }
                                stmts:
243.                                assign (++)
                                        lValue: lValue { varID = i }
                        stmts:
241.                        call setBackColor { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    lValue { varID = colors }
                                        indexExpr: lValue { varID = i }
247.                if { #elseStmts = 1, #stmts = 2 }
                        expr: (>)
                            right: literal { token = 0 }
                            left: lValue { varID = i }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 2 }
                                expr: (<=)
                                    right: literal { token = 10 }
                                    left: lValue { varID = i }
                                elseStmts:
                                    if { #elseStmts = 2, #stmts = 1 }
                                        expr: lValue { varID = b }
                                        elseStmts:
261.                                        var tempStr { vt = String }
                                                initExpr: literal { token = "I'll be " }
262.                                        assign (=)
                                                lValue: lValue { varID = tempStr }
                                                expr: (+)
                                                    right: literal { token = "out of scope soon" }
                                                    left: lValue { varID = tempStr }
                                        stmts:
258.                                        assign (++)
                                                lValue: lValue { varID = i }
                                stmts:
254.                                assign (=)
                                        lValue: lValue { varID = d }
                                        expr: literal { token = 7 }
255.                                call setSoundVolume { #exprs = 1 }
                                        lValue: lValue { varID = ct }
                                        exprs:
                                            literal { token = 1 }
                        stmts:
249.                        assign (=)
                                lValue: lValue { varID = j }
                                expr: literal { token = 0 }
250.                        assign (=)
                                lValue: lValue { varID = k }
                                expr: literal { token = 0 }
264.                if { #stmts = 1 }
                        expr: (&&)
                            right: (<=)
                                right: lValue { varID = eps }
                                left: call distance { #exprs = 4 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = x1 }
                                        lValue { varID = y1 }
                                        lValue { varID = x2 }
                                        lValue { varID = y2 }
                            left: call isError { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    call tan { #exprs = 1 }
                                        lValue: lValue { varID = Math }
                                        exprs:
                                            lValue { varID = d }
                        stmts:
265.                        call println { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = "oops" }
267.                for { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
268.                        for { #stmts = 1 }
                                stmts:
269.                                for { #stmts = 1 }
269.                                    initStmt: assign (=)
                                            lValue: lValue { varID = i }
                                            expr: literal { token = 0 }
                                        stmts:
270.                                        for { #stmts = 1 }
                                                expr: (<)
                                                    right: literal { token = 10 }
                                                    left: lValue { varID = i }
                                                stmts:
271.                                                for { #stmts = 1 }
271.                                                    nextStmt: assign (++)
                                                            lValue: lValue { varID = i }
                                                        stmts:
272.                                                        for { #stmts = 1 }
                                                                expr: lValue { varID = b }
                                                                stmts:
273.                                                                assign (=)
                                                                        lValue: lValue { varID = d }
                                                                        expr: literal { token = 0 }
274.                for { #stmts = 2 }
274.                    initStmt: var ii { vt = int, isGlobal = false }
                            initExpr: literal { token = 0 }
                        expr: (<)
                            right: literal { token = 10 }
                            left: lValue { varID = ii }
274.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
276.                        for { #stmts = 1 }
276.                            initStmt: var jj { vt = int, isGlobal = false }
                                    initExpr: literal { token = 0 }
                                expr: (!=)
                                    right: literal { token = 10 }
                                    left: lValue { varID = jj }
276.                            nextStmt: assign (+=)
                                    lValue: lValue { varID = jj }
                                    expr: literal { token = 1 }
                                stmts:
277.                                if { #stmts = 1 }
                                        expr: (||)
                                            right: (==)
                                                right: literal { token = 0 }
                                                left: lValue { varID = jj }
                                            left: (==)
                                                right: literal { token = 0 }
                                                left: lValue { varID = ii }
                                        stmts:
278.                                        break
279.                        break
281.                for { #stmts = 2 }
281.                    initStmt: var ii { vt = int, isGlobal = false }
                            initExpr: literal { token = 0 }
                        expr: (<)
                            right: literal { token = 10 }
                            left: lValue { varID = ii }
281.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
283.                        for { #stmts = 2 }
283.                            initStmt: var jj { vt = int, isGlobal = false }
                                    initExpr: literal { token = 0 }
                                expr: (!=)
                                    right: literal { token = 10 }
                                    left: lValue { varID = jj }
283.                            nextStmt: assign (+=)
                                    lValue: lValue { varID = jj }
                                    expr: literal { token = 1 }
                                stmts:
285.                                if { #stmts = 2 }
                                        expr: (&&)
                                            right: (==)
                                                right: literal { token = 0 }
                                                left: lValue { varID = jj }
                                            left: (==)
                                                right: literal { token = 0 }
                                                left: lValue { varID = ii }
                                        stmts:
287.                                        assign (=)
                                                lValue: lValue { varID = intArr }
                                                    indexExpr: lValue { varID = ii }
                                                expr: literal { token = 0 }
288.                                        break
290.                                break
292.                        break
294.                var xVar { vt = double }
                        initExpr: literal { token = 0 }
295.                var yVar { vt = double }
                        initExpr: literal { token = 1 }
296.                for { #stmts = 1 }
296.                    initStmt: var dx { vt = double, isGlobal = false }
                            initExpr: literal { token = .1 }
                        expr: (<)
                            right: literal { token = 1 }
                            left: lValue { varID = xVar }
296.                    nextStmt: assign (+=)
                            lValue: lValue { varID = xVar }
                            expr: lValue { varID = dx }
                        stmts:
297.                        for { #stmts = 1 }
297.                            initStmt: var dy { vt = double, isGlobal = false }
                                    initExpr: unaryOp (neg)
                                        expr: literal { token = .5 }
                                expr: (>)
                                    right: literal { token = 0 }
                                    left: lValue { varID = yVar }
297.                            nextStmt: assign (+=)
                                    lValue: lValue { varID = yVar }
                                    expr: lValue { varID = dy }
                                stmts:
298.                                assign (=)
                                        lValue: lValue { varID = d }
                                        expr: (-)
                                            right: (/)
                                                right: lValue { varID = dy }
                                                left: lValue { varID = yVar }
                                            left: (+)
                                                right: lValue { varID = dx }
                                                left: lValue { varID = xVar }
299.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: newArray { vt = int }
                            lengthExpr: literal { token = 1 }
300.                forArray { #stmts = 1 }
300.                    var: var a { vt = int, isGlobal = false }
                        expr: lValue { varID = intArr }
                        stmts:
301.                        assign (=)
                                lValue: lValue { varID = a }
                                expr: literal { token = 0 }
303.                while { #stmts = 1 }
                        expr: lValue { varID = b }
                        stmts:
304.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: literal { token = false }
305.                while { #stmts = 3 }
                        expr: lValue { varID = b }
                        stmts:
307.                        call voidFunc
308.                        assign (++)
                                lValue: lValue { varID = i }
309.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: literal { token = false }
311.                doWhile { #stmts = 1 }
                        expr: lValue { varID = b }
                        stmts:
312.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: literal { token = false }
314.                doWhile { #stmts = 1 }
                        expr: lValue { varID = b }
                        stmts:
316.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: literal { token = false }
320.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world" }
321.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: literal { token = "world" }
                                left: (+)
                                    right: literal { token = " " }
                                    left: literal { token = "Hello" }
322.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world\n" }
323.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
324.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
325.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = b }
326.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: literal { token = "i = " }
327.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: literal { token = "d = " }
328.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = name }
329.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = name }
                                left: (+)
                                    right: literal { token = " " }
                                    left: literal { token = "Hello" }
330.                var circleObj { vt = GameObj }
                        initExpr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50 }
                                literal { token = 50 }
                                literal { token = 20 }
331.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = circleObj }
332.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world" }
333.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: literal { token = "world" }
                                left: (+)
                                    right: literal { token = " " }
                                    left: literal { token = "Hello" }
334.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world\n" }
335.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
336.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
337.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = b }
338.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: literal { token = "i = " }
339.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: literal { token = "d = " }
340.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = name }
341.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = name }
                                left: (+)
                                    right: literal { token = " " }
                                    left: literal { token = "Hello" }
342.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = circleObj }
343.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
344.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
345.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = b }
346.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = circleObj }
347.                var obj2 { vt = GameObj }
                        initExpr: lValue { varID = circleObj }
348.                var obj3 { vt = GameObj }
                        initExpr: lValue { varID = obj2 }
349.                call log { #exprs = 9 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "circleObj = " }
                            lValue { varID = circleObj }
                            literal { token = "obj2 = " }
                            lValue { varID = obj2 }
                            literal { token = "obj3=" }
                            lValue { varID = obj3 }
                            literal { token = 3.14 }
                            lValue { varID = Math, fieldID = PI }
                            literal { token = 42 }
350.                call logm { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "message" }
                            literal { token = null }
351.                call logm { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "message" }
                            lValue { varID = obj2 }
                            lValue { varID = obj3 }
352.                call setOutputFile { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "output.txt" }
353.                call setOutputFile { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "output/nameList.txt" }
354.                var outputFilename { vt = String }
                        initExpr: literal { token = "output.txt" }
355.                call setOutputFile { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = outputFilename }
357.                call showAlert { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "alert meassage" }
358.                var message { vt = String }
                        initExpr: literal { token = "alert!" }
359.                call showAlert { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = message }
360.                var n { vt = int }
                        initExpr: call inputInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "enter a number: " }
361.                assign (=)
                        lValue: lValue { varID = n }
                        expr: call inputInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "enter a number: " }
362.                assign (=)
                        lValue: lValue { varID = n }
                        expr: call inputInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = message }
363.                var x { vt = double }
                        initExpr: call inputNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "enter a number: " }
364.                assign (=)
                        lValue: lValue { varID = x }
                        expr: call inputNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "enter a number: " }
365.                assign (=)
                        lValue: lValue { varID = x }
                        expr: call inputNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = message }
366.                var quit { vt = boolean }
                        initExpr: call inputYesNo { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "Quit?" }
367.                assign (=)
                        lValue: lValue { varID = quit }
                        expr: call inputYesNo { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = message }
368.                var inputStr { vt = String }
                        initExpr: call inputString { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "Quit?" }
369.                assign (=)
                        lValue: lValue { varID = inputStr }
                        expr: call inputString { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "Quit?" }
370.                assign (=)
                        lValue: lValue { varID = inputStr }
                        expr: call inputString { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = message }
372.                call setTitle { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Title" }
373.                var title { vt = String }
                        initExpr: literal { token = "Title" }
374.                call setTitle { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = title }
375.                call setTitle { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: (+)
                                    right: literal { token = " " }
                                    left: lValue { varID = title }
376.                call setTitle { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: lValue { varID = title }
377.                call setHeight { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (/)
                                right: literal { token = 16 }
                                left: (*)
                                    right: literal { token = 9 }
                                    left: literal { token = 100.0 }
378.                call setHeight { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
379.                call setHeight { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
380.                call setHeight { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: (*)
                                    right: literal { token = 4 }
                                    left: literal { token = 5 }
                                left: (*)
                                    right: lValue { varID = d }
                                    left: lValue { varID = i }
381.                var height { vt = double }
                        initExpr: call getHeight
                            lValue: lValue { varID = ct }
382.                assign (=)
                        lValue: lValue { varID = height }
                        expr: call getHeight
                            lValue: lValue { varID = ct }
383.                var width { vt = double }
                        initExpr: (-)
                            right: literal { token = 10 }
                            left: (*)
                                right: literal { token = 0.5 }
                                left: call getWidth
                                    lValue: lValue { varID = ct }
384.                assign (=)
                        lValue: lValue { varID = width }
                        expr: call getWidth
                            lValue: lValue { varID = ct }
385.                var pxPerUnit { vt = double }
                        initExpr: call getPixelsPerUnit
                            lValue: lValue { varID = ct }
386.                assign (=)
                        lValue: lValue { varID = pxPerUnit }
                        expr: call getPixelsPerUnit
                            lValue: lValue { varID = ct }
387.                var pixelWidth { vt = int }
                        initExpr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (*)
                                    right: call getPixelsPerUnit
                                        lValue: lValue { varID = ct }
                                    left: call getWidth
                                        lValue: lValue { varID = ct }
388.                var pixelHeight { vt = int }
                        initExpr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (*)
                                    right: call getPixelsPerUnit
                                        lValue: lValue { varID = ct }
                                    left: call getHeight
                                        lValue: lValue { varID = ct }
389.                var currentScreen { vt = String }
                        initExpr: call getScreen
                            lValue: lValue { varID = ct }
390.                assign (=)
                        lValue: lValue { varID = currentScreen }
                        expr: call getScreen
                            lValue: lValue { varID = ct }
391.                call clearScreen
                        lValue: lValue { varID = ct }
392.                call clearGroup { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "targets" }
393.                call clearGroup { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "" }
394.                call setBackColor { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "orange" }
395.                call setBackColor { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "light blue" }
396.                var backColor { vt = String }
                        initExpr: literal { token = "red" }
397.                call setBackColor { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = backColor }
398.                call setBackColorRGB { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 255 }
                            literal { token = 0 }
                            literal { token = 0 }
399.                call setBackColorRGB { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
                            lValue { varID = i }
                            lValue { varID = i }
400.                call setBackImage { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "background.png" }
401.                call setBackImage { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "C:\\Users\\ben\\Pictures\\landscape.jpg" }
402.                var filename { vt = String }
                        initExpr: literal { token = "landscape.png" }
403.                call setBackImage { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = filename }
405.                assign (=)
                        lValue: lValue { varID = x }
                        expr: literal { token = 50 }
406.                var y { vt = double }
                        initExpr: literal { token = 50 }
407.                var diameter { vt = double }
                        initExpr: literal { token = 10 }
408.                var circle { vt = GameObj }
                        initExpr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50 }
                                literal { token = 20 }
                                literal { token = 10 }
409.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50.0 }
                                literal { token = 20.0 }
                                literal { token = 10.0 }
410.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call circle { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50 }
                                literal { token = 20 }
                                literal { token = 10.5 }
                                literal { token = "blue" }
411.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = diameter }
412.                var color { vt = String }
                        initExpr: literal { token = "green" }
413.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call circle { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = diameter }
                                lValue { varID = color }
414.                var rect { vt = GameObj }
                        initExpr: call rect { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = width }
                                lValue { varID = height }
415.                assign (=)
                        lValue: lValue { varID = rect }
                        expr: call rect { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = width }
                                lValue { varID = height }
                                lValue { varID = color }
416.                assign (=)
                        lValue: lValue { varID = rect }
                        expr: call rect { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50.0 }
                                literal { token = 33.3 }
                                literal { token = 11.2 }
                                literal { token = 23.890 }
417.                assign (=)
                        lValue: lValue { varID = rect }
                        expr: call rect { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50 }
                                literal { token = 33 }
                                literal { token = 11 }
                                literal { token = 23 }
                                literal { token = "green" }
418.                var line { vt = GameObj }
                        initExpr: call line { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = d }
                                lValue { varID = width }
                                lValue { varID = height }
419.                assign (=)
                        lValue: lValue { varID = line }
                        expr: call line { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x1 }
                                lValue { varID = y1 }
                                lValue { varID = x2 }
                                lValue { varID = y2 }
                                lValue { varID = color }
420.                assign (=)
                        lValue: lValue { varID = line }
                        expr: call line { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0.0 }
                                literal { token = .0 }
                                literal { token = 100.0 }
                                literal { token = 95.0 }
421.                assign (=)
                        lValue: lValue { varID = line }
                        expr: call line { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 100 }
                                literal { token = 95 }
                                literal { token = "red" }
422.                var text { vt = GameObj }
                        initExpr: call text { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = height }
423.                assign (=)
                        lValue: lValue { varID = text }
                        expr: call text { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = height }
                                lValue { varID = color }
424.                assign (=)
                        lValue: lValue { varID = text }
                        expr: call text { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = score }
                                    left: literal { token = "Score: " }
                                literal { token = 20.0 }
                                literal { token = 90.0 }
                                literal { token = 10.0 }
425.                assign (=)
                        lValue: lValue { varID = text }
                        expr: call text { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = score }
                                    left: literal { token = "Score: " }
                                literal { token = 20 }
                                literal { token = 90 }
                                literal { token = 10 }
                                literal { token = "purple" }
426.                var img { vt = GameObj }
                        initExpr: call image { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = filename }
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = width }
427.                assign (=)
                        lValue: lValue { varID = img }
                        expr: call image { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "car.png" }
                                literal { token = 42 }
                                literal { token = 25 }
                                literal { token = 38.7 }
428.                assign (=)
                        lValue: lValue { varID = img }
                        expr: call image { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "C:\\Users\\john\\Pictures\\car.jpg" }
                                literal { token = 42 }
                                literal { token = 25 }
                                literal { token = 38 }
429.                var objs { vt = array of GameObj }
                        initExpr: arrayInit { #exprs = 5 }
                            exprs:
                                lValue { varID = circle }
                                lValue { varID = rect }
                                lValue { varID = line }
                                lValue { varID = text }
                                lValue { varID = img }
430.                assign (=)
                        lValue: lValue { varID = img }
                        expr: lValue { varID = rect }
432.                var mouseClicked { vt = boolean }
                        initExpr: call clicked
                            lValue: lValue { varID = ct }
433.                if { #stmts = 1 }
                        expr: call clicked
                            lValue: lValue { varID = ct }
                        stmts:
434.                        assign (=)
                                lValue: lValue { varID = mouseClicked }
                                expr: call clicked
                                    lValue: lValue { varID = ct }
435.                if { #stmts = 1 }
                        expr: (>)
                            right: literal { token = 50 }
                            left: call clickX
                                lValue: lValue { varID = ct }
                        stmts:
436.                        assign (=)
                                lValue: lValue { varID = x }
                                expr: call clickX
                                    lValue: lValue { varID = ct }
437.                assign (=)
                        lValue: lValue { varID = x }
                        expr: call clickX
                            lValue: lValue { varID = ct }
438.                if { #stmts = 1 }
                        expr: (<=)
                            right: lValue { varID = x }
                            left: call clickY
                                lValue: lValue { varID = ct }
                        stmts:
439.                        assign (=)
                                lValue: lValue { varID = y }
                                expr: call clickY
                                    lValue: lValue { varID = ct }
440.                assign (=)
                        lValue: lValue { varID = y }
                        expr: call clickY
                            lValue: lValue { varID = ct }
441.                var keyName { vt = String }
                        initExpr: literal { token = "space" }
442.                var keyPressed { vt = boolean }
                        initExpr: call keyPressed { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = keyName }
443.                if { #stmts = 1 }
                        expr: call keyPressed { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = keyName }
                        stmts:
444.                        if { #stmts = 1 }
                                expr: call keyPressed { #exprs = 1 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        literal { token = "up" }
                                stmts:
445.                                assign (=)
                                        lValue: lValue { varID = keyPressed }
                                        expr: call keyPressed { #exprs = 1 }
                                            lValue: lValue { varID = ct }
                                            exprs:
                                                literal { token = "up" }
446.                if { #stmts = 1 }
                        expr: call charTyped { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "+" }
                        stmts:
447.                        assign (++)
                                lValue: lValue { varID = x }
448.                var ch { vt = String }
                        initExpr: literal { token = "+" }
449.                if { #stmts = 1 }
                        expr: call charTyped { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = ch }
                        stmts:
450.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: call charTyped { #exprs = 1 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        literal { token = "+" }
451.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call charTyped { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = ch }
453.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call loadSound { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = filename }
454.                call loadSound { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "pow.wav" }
455.                if { #stmts = 1 }
                        expr: call loadSound { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "sounds/ding.mp3" }
                        stmts:
456.                        call sound { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = "sounds/ding.mp3" }
457.                call sound { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = filename }
458.                call setSoundVolume { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
459.                call setSoundVolume { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 1 }
460.                call setSoundVolume { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0.5 }
462.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call random { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
463.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call random { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 100 }
464.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
465.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
466.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 1.62 }
467.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = d }
468.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: (*)
                                        right: lValue { varID = i }
                                        left: lValue { varID = d }
                                    left: literal { token = 1 }
469.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                call distance { #exprs = 4 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = x1 }
                                        lValue { varID = y1 }
                                        lValue { varID = x2 }
                                        lValue { varID = y2 }
470.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call roundDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = i }
471.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call roundDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: literal { token = 1 }
                                    left: (*)
                                        right: lValue { varID = i }
                                        left: lValue { varID = d }
                                (*)
                                    right: literal { token = 2 }
                                    left: lValue { varID = i }
472.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call roundDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 2.71828182846 }
                                literal { token = 2 }
473.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call roundDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                call distance { #exprs = 4 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = x1 }
                                        lValue { varID = y1 }
                                        lValue { varID = x2 }
                                        lValue { varID = y2 }
                                literal { token = 1 }
474.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intDiv { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
475.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intDiv { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 5 }
                                literal { token = 2 }
476.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call isError { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
477.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call isError { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (/)
                                    right: lValue { varID = d }
                                    left: lValue { varID = d }
478.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call isError { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (/)
                                    right: lValue { varID = i }
                                    left: lValue { varID = d }
479.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call isError { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (/)
                                    right: literal { token = 0 }
                                    left: literal { token = 0.0 }
480.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call distance { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = circle, fieldID = x }
                                lValue { varID = circle, fieldID = y }
                                lValue { varID = rect, fieldID = x }
                                lValue { varID = rect, fieldID = y }
481.                if { #stmts = 1 }
                        expr: (<)
                            right: (/)
                                right: literal { token = 2 }
                                left: parens
                                    expr: (+)
                                        right: lValue { varID = rect, fieldID = width }
                                        left: lValue { varID = circle, fieldID = width }
                            left: call distance { #exprs = 4 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    lValue { varID = circle, fieldID = x }
                                    lValue { varID = circle, fieldID = y }
                                    lValue { varID = rect, fieldID = x }
                                    lValue { varID = rect, fieldID = y }
                        stmts:
482.                        assign (=)
                                lValue: lValue { varID = i }
                                expr: call getTimer
                                    lValue: lValue { varID = ct }
483.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (-)
                            right: lValue { varID = i }
                            left: call getTimer
                                lValue: lValue { varID = ct }
484.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call getVersion
                            lValue: lValue { varID = ct }
485.                call round { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            call getVersion
                                lValue: lValue { varID = ct }
487.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
488.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = d }
489.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = .707 }
490.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = Math, fieldID = PI }
491.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 6.0221409e+2 }
492.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call parseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
493.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call parseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "345" }
494.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
495.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "12345" }
496.                while { #stmts = 1 }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
                        stmts:
497.                        assign (=)
                                lValue: lValue { varID = d }
                                expr: call parseNumber { #exprs = 1 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = s }
498.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: literal { token = 100 }
                            left: call parseNumber { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = "123.45" }
499.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call canParseNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "543.210" }
500.                while { #stmts = 1 }
                        expr: call canParseNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
                        stmts:
501.                        assign (=)
                                lValue: lValue { varID = s }
                                expr: call formatDecimal { #exprs = 1 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = d }
502.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call formatDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = i }
503.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call formatDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
                                call intDiv { #exprs = 2 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        (*)
                                            right: lValue { varID = i }
                                            left: literal { token = 2 }
                                        lValue { varID = i }
504.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: literal { token = ":00" }
                            left: call formatDecimal { #exprs = 2 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = 6.0221 }
                                    literal { token = 7 }
505.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call formatInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
506.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call formatInt { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: literal { token = 1 }
                                    left: lValue { varID = i }
                                (+)
                                    right: lValue { varID = k }
                                    left: lValue { varID = j }
508.                assign (=)
                        lValue: lValue { varID = rect, fieldID = x }
                        expr: (-)
                            right: literal { token = 10 }
                            left: lValue { varID = circle, fieldID = y }
509.                assign (=)
                        lValue: lValue { varID = circle, fieldID = width }
                        expr: (*)
                            right: literal { token = 1.5 }
                            left: lValue { varID = circle, fieldID = height }
510.                assign (=)
                        lValue: lValue { varID = rect, fieldID = height }
                        expr: (*)
                            right: literal { token = 1.1 }
                            left: lValue { varID = img, fieldID = height }
511.                assign (=)
                        lValue: lValue { varID = line, fieldID = x }
                        expr: (+)
                            right: lValue { varID = line, fieldID = width }
                            left: lValue { varID = line, fieldID = x }
512.                assign (=)
                        lValue: lValue { varID = img, fieldID = width }
                        expr: (*)
                            right: literal { token = .9 }
                            left: lValue { varID = img, fieldID = width }
513.                assign (=)
                        lValue: lValue { varID = img, fieldID = xSpeed }
                        expr: literal { token = 0 }
514.                assign (=)
                        lValue: lValue { varID = img, fieldID = ySpeed }
                        expr: literal { token = .5 }
515.                assign (=)
                        lValue: lValue { varID = line, fieldID = lineWidth }
                        expr: literal { token = 3 }
516.                assign (=)
                        lValue: lValue { varID = img, fieldID = lineWidth }
                        expr: (*)
                            right: literal { token = 2 }
                            left: lValue { varID = line, fieldID = lineWidth }
517.                assign (=)
                        lValue: lValue { varID = rect, fieldID = visible }
                        expr: literal { token = false }
518.                assign (=)
                        lValue: lValue { varID = circle, fieldID = clickable }
                        expr: lValue { varID = circle, fieldID = visible }
519.                if { #stmts = 1 }
                        expr: lValue { varID = img, fieldID = visible }
                        stmts:
520.                        assign (=)
                                lValue: lValue { varID = img, fieldID = clickable }
                                expr: literal { token = true }
521.                if { #stmts = 1 }
                        expr: (!=)
                            right: literal { token = false }
                            left: lValue { varID = img, fieldID = clickable }
                        stmts:
522.                        assign (=)
                                lValue: lValue { varID = img, fieldID = autoDelete }
                                expr: lValue { varID = img, fieldID = visible }
523.                assign (=)
                        lValue: lValue { varID = line, fieldID = group }
                        expr: lValue { varID = s }
524.                assign (=)
                        lValue: lValue { varID = line, fieldID = autoDelete }
                        expr: (||)
                            right: (&&)
                                right: (==)
                                    right: literal { token = 1 }
                                    left: call indexOf { #exprs = 1 }
                                        lValue: lValue { varID = s }
                                        exprs:
                                            lValue { varID = line, fieldID = group }
                                left: call equals { #exprs = 1 }
                                    lValue: lValue { varID = s }
                                    exprs:
                                        literal { token = "world" }
                            left: call equals { #exprs = 1 }
                                lValue: lValue { varID = s }
                                exprs:
                                    literal { token = "hello" }
526.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call getType
                            lValue: lValue { varID = rect }
527.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: literal { token = "more text" }
                                left: call getText
                                    lValue: lValue { varID = text }
528.                call setText { #exprs = 1 }
                        lValue: lValue { varID = img }
                        exprs:
                            literal { token = "racecar.png" }
529.                call setText { #exprs = 1 }
                        lValue: lValue { varID = text }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: literal { token = "Score: " }
530.                call setText { #exprs = 1 }
                        lValue: lValue { varID = text }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: literal { token = "Score: " }
531.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            call toString
                                lValue: lValue { varID = line }
532.                call setSize { #exprs = 2 }
                        lValue: lValue { varID = img }
                        exprs:
                            (*)
                                right: literal { token = 1.1 }
                                left: lValue { varID = img, fieldID = width }
                            (*)
                                right: literal { token = 1.1 }
                                left: lValue { varID = img, fieldID = height }
533.                call align { #exprs = 1 }
                        lValue: lValue { varID = text }
                        exprs:
                            lValue { varID = s }
534.                call align { #exprs = 2 }
                        lValue: lValue { varID = text }
                        exprs:
                            lValue { varID = s }
                            literal { token = true }
535.                call align { #exprs = 2 }
                        lValue: lValue { varID = text }
                        exprs:
                            lValue { varID = s }
                            literal { token = false }
536.                call setFillColor { #exprs = 1 }
                        lValue: lValue { varID = circle }
                        exprs:
                            (+)
                                right: lValue { varID = s }
                                left: literal { token = "light" }
537.                call setFillColor { #exprs = 1 }
                        lValue: lValue { varID = circle }
                        exprs:
                            call getText
                                lValue: lValue { varID = text }
538.                call setFillColorRGB { #exprs = 3 }
                        lValue: lValue { varID = circle }
                        exprs:
                            lValue { varID = i }
                            lValue { varID = j }
                            lValue { varID = k }
539.                call setLineColor { #exprs = 1 }
                        lValue: lValue { varID = rect }
                        exprs:
                            lValue { varID = colors }
                                indexExpr: lValue { varID = i }
540.                call setLineColorRGB { #exprs = 3 }
                        lValue: lValue { varID = rect }
                        exprs:
                            lValue { varID = i }
                            (-)
                                right: lValue { varID = i }
                                left: literal { token = 255 }
                            literal { token = 0 }
541.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call getLayer
                            lValue: lValue { varID = rect }
542.                if { #stmts = 1 }
                        expr: (>=)
                            right: call getLayer
                                lValue: lValue { varID = circle }
                            left: call getLayer
                                lValue: lValue { varID = rect }
                        stmts:
543.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: call equals { #exprs = 1 }
                                    lValue: lValue { varID = colors }
                                        indexExpr: call getLayer
                                            lValue: lValue { varID = rect }
                                    exprs:
                                        literal { token = "green" }
544.                call setLayer { #exprs = 1 }
                        lValue: lValue { varID = img }
                        exprs:
                            unaryOp (neg)
                                expr: literal { token = 42 }
545.                call delete
                        lValue: lValue { varID = img }
546.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call clicked
                            lValue: lValue { varID = img }
547.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call containsPoint { #exprs = 2 }
                            lValue: lValue { varID = img }
                            exprs:
                                call clickX
                                    lValue: lValue { varID = ct }
                                call clickY
                                    lValue: lValue { varID = ct }
548.                if { #stmts = 1 }
                        expr: call containsPoint { #exprs = 2 }
                            lValue: lValue { varID = img }
                            exprs:
                                call clickX
                                    lValue: lValue { varID = ct }
                                call clickY
                                    lValue: lValue { varID = ct }
                        stmts:
549.                        while { #stmts = 1 }
                                expr: call hit { #exprs = 1 }
                                    lValue: lValue { varID = img }
                                    exprs:
                                        lValue { varID = rect }
                                stmts:
550.                                assign (=)
                                        lValue: lValue { varID = b }
                                        expr: (==)
                                            right: literal { token = true }
                                            left: call hit { #exprs = 1 }
                                                lValue: lValue { varID = img }
                                                exprs:
                                                    lValue { varID = rect }
552.                var e { vt = double }
                        initExpr: lValue { varID = Math, fieldID = E }
553.                var pi { vt = double }
                        initExpr: lValue { varID = Math, fieldID = PI }
554.                if { #stmts = 1 }
                        expr: (<)
                            right: lValue { varID = eps }
                            left: call abs { #exprs = 1 }
                                lValue: lValue { varID = Math }
                                exprs:
                                    (-)
                                        right: lValue { varID = img, fieldID = x }
                                        left: lValue { varID = rect, fieldID = x }
                        stmts:
555.                        assign (=)
                                lValue: lValue { varID = i }
                                expr: call abs { #exprs = 1 }
                                    lValue: lValue { varID = Math }
                                    exprs:
                                        lValue { varID = i }
556.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call acos { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                unaryOp (neg)
                                    expr: literal { token = 0.5 }
557.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call asin { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (/)
                                    right: literal { token = 2 }
                                    left: call sqrt { #exprs = 1 }
                                        lValue: lValue { varID = Math }
                                        exprs:
                                            literal { token = 3 }
558.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call atan { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (/)
                                    right: call sqrt { #exprs = 1 }
                                        lValue: lValue { varID = Math }
                                        exprs:
                                            literal { token = 2 }
                                    left: literal { token = 1 }
559.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call atan2 { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (-)
                                    right: lValue { varID = img, fieldID = x }
                                    left: call clickX
                                        lValue: lValue { varID = ct }
                                (-)
                                    right: lValue { varID = img, fieldID = y }
                                    left: call clickY
                                        lValue: lValue { varID = ct }
560.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call ceil { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
561.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call cos { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (/)
                                    right: literal { token = 2 }
                                    left: lValue { varID = Math, fieldID = PI }
562.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call cosh { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (*)
                                    right: literal { token = 2 }
                                    left: lValue { varID = Math, fieldID = PI }
563.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call exp { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (+)
                                    right: literal { token = 1 }
                                    left: (*)
                                        right: lValue { varID = Math, fieldID = PI }
                                        left: literal { token = 2 }
564.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call floor { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                unaryOp (neg)
                                    expr: literal { token = 1.67 }
565.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call log { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                literal { token = 32 }
566.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call log10 { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
567.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call max { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = d }
568.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call max { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
569.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call min { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = d }
570.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call min { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
571.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call pow { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = d }
572.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call sin { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
573.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call sinh { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
574.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call sqrt { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
575.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call tan { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
576.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call tanh { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
578.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call compareTo { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = s }
579.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call equals { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = s }
580.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call indexOf { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = s }
581.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call length
                            lValue: lValue { varID = s }
582.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call substring { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = i }
583.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call substring { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = i }
584.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call toLowerCase
                            lValue: lValue { varID = s }
585.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call toUpperCase
                            lValue: lValue { varID = s }
586.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call trim
                            lValue: lValue { varID = s }
588.                var coins { vt = array of GameObj }
589.                var walls { vt = array of GameObj }
590.                var multilineArrayInit { vt = array of int }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
                                literal { token = 3 }
595.                call log { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 1 }
                            literal { token = 2 }
                            literal { token = 3 }
597.                if { #stmts = 1 }
                        expr: (==)
                            right: literal { token = 1 }
                            left: call random { #exprs = 2 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = 1 }
                                    literal { token = 2 }
                        stmts:
598.                        call println { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = "heads" }
601.                call log { #exprs = 4 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 1 }
                            call random { #exprs = 2 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = 1 }
                                    literal { token = 100 }
                            literal { token = 3 }
                            literal { token = 4 }
608.        func ct { #paramVars = 0, vt = void, #stmts = 1 }
                stmts:
610.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world" }
614.        func int { #paramVars = 0, vt = double, #stmts = 1 }
                stmts:
616.                return
                        expr: literal { token = 0 }
619.        func foo { #paramVars = 2, vt = double, #stmts = 1 }
                paramVars:
619.                var i { vt = int, isGlobal = false }
619.                var boolean { vt = GameObj, isGlobal = false }
                stmts:
621.                return
                        expr: literal { token = 0 }
624.        func bar { #paramVars = 2, vt = boolean, #stmts = 1 }
                paramVars:
624.                var s { vt = String, isGlobal = false }
624.                var gameObj { vt = GameObj, isGlobal = false }
                stmts:
627.                return
                        expr: lValue { varID = TRUE }
630.        func Double { #paramVars = 1, vt = int, #stmts = 1 }
                paramVars:
630.                var x { vt = int, isGlobal = false }
                stmts:
632.                return
                        expr: (*)
                            right: lValue { varID = x }
                            left: literal { token = 2 }
636.        func voidFunc { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
636.                var i { vt = int, isGlobal = false }
639.        func func { #paramVars = 0, vt = void, #stmts = 0 }
643.        func FUNC { #paramVars = 0, vt = void, #stmts = 0 }
647.        func AnotherFunc { #paramVars = 0, vt = void, #stmts = 0 }
651.        func anotherfunc { #paramVars = 0, vt = void, #stmts = 0 }
655.        func expectedErrors { #paramVars = 0, vt = void, #stmts = 281 }
                stmts:
657.                var intVar { vt = int }
                        initExpr: literal { token = 1 }
658.                var dblVar { vt = double }
                        initExpr: literal { token = 1.0 }
659.                var boolVar { vt = boolean }
                        initExpr: literal { token = false }
660.                var strVar { vt = String }
                        initExpr: literal { token = "a" }
661.                var objVar { vt = GameObj }
                        initExpr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 10 }
662.                var intArr { vt = array of int }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
                                literal { token = 3 }
663.                var objArr { vt = array of GameObj }
                        initExpr: arrayInit { #exprs = 1 }
                            exprs:
                                lValue { varID = objVar }
666.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call setText { #exprs = 1 }
                            lValue: lValue { varID = objVar }
                            exprs:
                                literal { token = "circle" }
668.                var screen { vt = double }
                        initExpr: call setScreen { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "menu" }
670.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: call setHeight { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 150 }
672.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: call voidFunc
674.                var title { vt = GameObj }
                        initExpr: call setTitle { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "title" }
677.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = intVar }
679.                var b { vt = boolean }
                        initExpr: call intFuncInt { #exprs = 1 }
                            exprs:
                                literal { token = 2 }
681.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = visible }
                        expr: literal { token = 0 }
683.                var s { vt = String }
                        initExpr: lValue { varID = intVar }
685.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = intVar }
688.                var i { vt = int }
                        initExpr: literal { token = 3.4 }
690.                assign (=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 1.2 }
692.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (*)
                            right: literal { token = 3.4 }
                            left: literal { token = 10 }
694.                var j { vt = int }
                        initExpr: (+)
                            right: literal { token = 3.14 }
                            left: literal { token = 5 }
696.                var plancksConst { vt = int }
                        initExpr: literal { token = 6.62e-34 }
698.                var exponentialNumberNoDot { vt = int }
                        initExpr: literal { token = 12e10 }
700.                var exponentialNumberWithDot { vt = int }
                        initExpr: literal { token = 3.42e2 }
702.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = autoDelete }
                        expr: lValue { varID = dblVar }
704.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: literal { token = 3.14 }
706.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = dblVar }
709.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call clicked
                            lValue: lValue { varID = ct }
711.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = x }
                        expr: lValue { varID = boolVar }
713.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = xSpeed }
                        expr: literal { token = false }
715.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = group }
                        expr: lValue { varID = boolVar }
717.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = boolVar }
720.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = objVar, fieldID = group }
722.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = ySpeed }
                        expr: literal { token = "fast" }
724.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = strVar }
726.                var score { vt = GameObj }
                        initExpr: literal { token = "100 pts" }
729.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = objVar }
731.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = width }
                        expr: lValue { varID = objVar }
733.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = objVar }
735.                var circle { vt = String }
                        initExpr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 10 }
738.                var y { vt = int }
                        initExpr: call intFuncInt { #exprs = 1 }
                            exprs:
                                literal { token = 2.3 }
740.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call random { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0.0 }
                                literal { token = 10 }
742.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call random { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = false }
744.                call setBackColorRGB { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "red" }
                            literal { token = 0 }
                            literal { token = 0 }
746.                call setLayer { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = "front" }
748.                call roundDecimal { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 3.14159 }
                            lValue { varID = objVar }
750.                call substring { #exprs = 1 }
                        lValue: lValue { varID = strVar }
                        exprs:
                            lValue { varID = objVar }
753.                call pow { #exprs = 2 }
                        lValue: lValue { varID = Math }
                        exprs:
                            lValue { varID = boolVar }
                            literal { token = 3 }
755.                call dblFuncIntDbl { #exprs = 2 }
                        exprs:
                            literal { token = 0 }
                            literal { token = "pi" }
757.                call containsPoint { #exprs = 2 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            lValue { varID = strVar }
                            lValue { varID = dblVar }
759.                call exp { #exprs = 1 }
                        lValue: lValue { varID = Math }
                        exprs:
                            lValue { varID = objVar }
762.                call align { #exprs = 2 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = "left" }
                            literal { token = 0 }
764.                call boolFuncBoolStringGameObj { #exprs = 3 }
                        exprs:
                            lValue { varID = dblVar }
                            lValue { varID = strVar }
                            lValue { varID = objVar }
766.                call boolFuncBoolStringGameObj { #exprs = 3 }
                        exprs:
                            lValue { varID = strVar }
                            lValue { varID = objVar }
                            lValue { varID = boolVar }
768.                call boolFuncBoolStringGameObj { #exprs = 3 }
                        exprs:
                            lValue { varID = objVar }
                            lValue { varID = strVar }
                            lValue { varID = boolVar }
771.                call align { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            lValue { varID = intVar }
773.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call parseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 123 }
775.                call circle { #exprs = 4 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 1 }
                            literal { token = 1 }
777.                call setText { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = 1 }
779.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 1.0 }
781.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = boolVar }
783.                call align { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = true }
785.                call equals { #exprs = 1 }
                        lValue: lValue { varID = strVar }
                        exprs:
                            lValue { varID = objVar }
788.                call boolFuncBoolStringGameObj { #exprs = 3 }
                        exprs:
                            lValue { varID = boolVar }
                            lValue { varID = strVar }
                            literal { token = 42 }
790.                call hit { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = 0.0 }
792.                call hit { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = false }
794.                call hit { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = "the wall" }
797.                if { #stmts = 1 }
                        expr: (>)
                            right: literal { token = 0 }
                            left: call intFuncInt
                        stmts:
798.                        call voidFunc
800.                call dblFuncIntDbl
802.                call circle
                        lValue: lValue { varID = ct }
804.                call rect { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 10 }
806.                call circle { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
808.                call voidFunc { #exprs = 1 }
                        exprs:
                            literal { token = 1 }
810.                call setBackColor { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 255 }
                            literal { token = 0 }
                            literal { token = 0 }
812.                call delete { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = true }
814.                call setText { #exprs = 2 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = "circle" }
                            literal { token = "green" }
817.                var k { vt = int }
                        initExpr: (/)
                            right: literal { token = 2 }
                            left: literal { token = 3 }
819.                call random { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (/)
                                right: lValue { varID = intVar }
                                left: lValue { varID = intVar }
                            lValue { varID = intVar }
821.                assign (=)
                        lValue: lValue { varID = x }
                        expr: (+)
                            right: literal { token = 1 }
                            left: lValue { varID = x }
823.                for { #stmts = 1 }
823.                    initStmt: assign (=)
                            lValue: lValue { varID = x }
                            expr: literal { token = 0 }
                        expr: (<)
                            right: literal { token = 1 }
                            left: lValue { varID = x }
823.                    nextStmt: assign (++)
                            lValue: lValue { varID = x }
                        stmts:
824.                        call voidFunc
826.                call foo
828.                var j { vt = int }
                        initExpr: literal { token = 3 }
830.                var uninitializedVar { vt = int }
832.                if { #stmts = 1 }
                        expr: (<)
                            right: literal { token = 0 }
                            left: lValue { varID = uninitializedVar }
                        stmts:
833.                        assign (=)
                                lValue: lValue { varID = uninitializedVar }
                                expr: literal { token = 0 }
834.                var g { vt = GameObj }
836.                assign (=)
                        lValue: lValue { varID = g, fieldID = xSpeed }
                        expr: literal { token = 1 }
839.                var n
                        initExpr: literal { token = 100 }
841.                var gameOver
                        initExpr: literal { token = false }
843.                var r { vt = GameObj }
                        initExpr: call rectangle { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 10 }
                                literal { token = 10 }
845.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = isVisible }
                        expr: literal { token = false }
847.                call foo
                        lValue: lValue { varID = objVar }
850.                var ch
                        initExpr: literal { token = "A" }
852.                var obj
854.                call Circle { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 10 }
856.                call atan2 { #exprs = 2 }
                        lValue: lValue { varID = math }
                        exprs:
                            (-)
                                right: lValue { varID = r, fieldID = x }
                                left: call clickX
                                    lValue: lValue { varID = ct }
                            (-)
                                right: lValue { varID = r, fieldID = y }
                                left: call clickY
                                    lValue: lValue { varID = ct }
858.                call voidfunC
860.                assign (=)
                        lValue: lValue { varID = intvar }
                        expr: literal { token = 2 }
863.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: lValue { varID = Null }
865.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = NULL }
867.                while { #stmts = 1 }
                        expr: lValue { varID = True }
                        stmts:
868.                        call voidFunc
870.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = TRUE }
872.                if { #stmts = 1 }
                        expr: lValue { varID = False }
                        stmts:
873.                        call voidFunc
875.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = clickable }
                        expr: lValue { varID = FALSE }
878.                if { #stmts = 1 }
                        expr: (=)
                            right: literal { token = 0 }
                            left: lValue { varID = i }
                        stmts:
879.                        assign (=)
                                lValue: lValue { varID = i }
                                expr: literal { token = 0 }
881.                var intArr2 { vt = array of int }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
                                literal { token = 3.14 }
883.                var dblArr { vt = array of double }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = "two" }
                                literal { token = 3.14 }
885.                var strArr { vt = array of String }
                        initExpr: newArray { vt = GameObj }
                            lengthExpr: literal { token = 100 }
887.                var boolArr { vt = array of boolean }
                        initExpr: call intArrFuncInt { #exprs = 1 }
                            exprs:
                                literal { token = 10 }
889.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: newArray { vt = int }
                            lengthExpr: literal { token = 1.5 }
892.                assign (++)
                        lValue: lValue { varID = boolVar }
894.                assign (++)
                        lValue: lValue { varID = strVar }
896.                assign (++)
                        lValue: lValue { varID = objVar }
898.                assign (--)
                        lValue: lValue { varID = boolVar }
900.                assign (--)
                        lValue: lValue { varID = strVar }
902.                assign (--)
                        lValue: lValue { varID = objVar }
905.                forArray { #stmts = 1 }
905.                    var: var x { vt = int, isGlobal = false }
                        expr: lValue { varID = intVar }
                        stmts:
906.                        call voidFunc
908.                forArray { #stmts = 1 }
908.                    var: var x { vt = double, isGlobal = false }
                        expr: lValue { varID = dblVar }
                        stmts:
909.                        call voidFunc
911.                forArray { #stmts = 1 }
911.                    var: var x { vt = boolean, isGlobal = false }
                        expr: lValue { varID = boolVar }
                        stmts:
912.                        call voidFunc
914.                forArray { #stmts = 1 }
914.                    var: var x { vt = String, isGlobal = false }
                        expr: lValue { varID = strVar }
                        stmts:
915.                        call voidFunc
917.                forArray { #stmts = 1 }
917.                    var: var x { vt = GameObj, isGlobal = false }
                        expr: lValue { varID = objVar }
                        stmts:
918.                        call voidFunc
920.                forArray { #stmts = 1 }
920.                    var: var x { vt = GameObj, isGlobal = false }
                        expr: lValue { varID = strVar }
                        stmts:
921.                        call voidFunc
924.                forArray { #stmts = 1 }
924.                    var: var x { vt = double, isGlobal = false }
                        expr: lValue { varID = intArr }
                        stmts:
925.                        call voidFunc
927.                forArray { #stmts = 1 }
927.                    var: var x { vt = String, isGlobal = false }
                        expr: lValue { varID = objArr }
                        stmts:
928.                        call voidFunc
931.                for { #stmts = 1 }
                        expr: lValue { varID = intVar }
                        stmts:
932.                        call voidFunc
934.                for { #stmts = 1 }
                        expr: lValue { varID = dblVar }
                        stmts:
935.                        call voidFunc
937.                for { #stmts = 1 }
                        expr: lValue { varID = strVar }
                        stmts:
938.                        call voidFunc
940.                for { #stmts = 1 }
                        expr: lValue { varID = objVar }
                        stmts:
941.                        call voidFunc
943.                doWhile { #stmts = 1 }
                        expr: lValue { varID = intVar }
                        stmts:
944.                        call voidFunc
949.                while { #stmts = 1 }
                        expr: lValue { varID = dblVar }
                        stmts:
950.                        call voidFunc
952.                while { #stmts = 1 }
                        expr: lValue { varID = strVar }
                        stmts:
953.                        call voidFunc
955.                while { #stmts = 1 }
                        expr: lValue { varID = objVar }
                        stmts:
956.                        call voidFunc
959.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = intVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = intVar }
                                stmts:
963.                                call voidFunc
                        stmts:
960.                        call voidFunc
965.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = dblVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = dblVar }
                                stmts:
969.                                call voidFunc
                        stmts:
966.                        call voidFunc
971.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = strVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = strVar }
                                stmts:
975.                                call voidFunc
                        stmts:
972.                        call voidFunc
977.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = objVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = objVar }
                                stmts:
981.                                call voidFunc
                        stmts:
978.                        call voidFunc
984.                var n
                        initExpr: literal { token = 100 }
986.                var d
                        initExpr: literal { token = 100.0 }
988.                var b
                        initExpr: literal { token = false }
991.                assign (+=)
                        lValue: lValue { varID = strVar }
                        expr: literal { token = "hello" }
993.                assign (-=)
                        lValue: lValue { varID = boolVar }
                        expr: literal { token = 1 }
995.                assign (*=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = objVar }
997.                assign (/=)
                        lValue: lValue { varID = objVar }
                        expr: literal { token = 3.14 }
999.                assign (+=)
                        lValue: lValue { varID = intVar }
                        expr: literal { token = "hello" }
1001.                assign (-=)
                        lValue: lValue { varID = dblVar }
                        expr: call rect { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 1 }
                                literal { token = 2 }
1003.                assign (*=)
                        lValue: lValue { varID = intVar }
                        expr: literal { token = false }
1005.                assign (/=)
                        lValue: lValue { varID = dblVar }
                        expr: literal { token = true }
1007.                assign (+=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
1009.                assign (-=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
1011.                assign (*=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
1013.                assign (/=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
1015.                if { #stmts = 1 }
                        expr: (==)
                            right: literal { token = "s" }
                            left: lValue { varID = strVar }
                        stmts:
1016.                        call voidFunc
1019.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (^)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
1021.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (&)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
1023.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (|)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
1025.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (>>)
                            right: literal { token = 2 }
                            left: lValue { varID = i }
1027.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (<<)
                            right: literal { token = 2 }
                            left: lValue { varID = i }
1029.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (>>>)
                            right: literal { token = 2 }
                            left: lValue { varID = i }
1032.                var ct { vt = String }
1034.                var String { vt = int }
1036.                var GameObj { vt = double }
1038.                var lowercasefirst { vt = int }
                        initExpr: literal { token = 1 }
1040.                var lowerCaseFirst { vt = int }
                        initExpr: literal { token = 10 }
1041.                var upperCaseFirst { vt = GameObj }
                        initExpr: lValue { varID = objVar }
1043.                var uppercasefirst { vt = GameObj }
                        initExpr: literal { token = null }
1045.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: (+)
                            right: literal { token = 1 }
                            left: lValue { varID = dblvar }
1049.                var DouBle { vt = int }
1051.                var BooLean { vt = double }
1053.                var string { vt = boolean }
1056.                assign (=)
                        lValue: lValue { varID = intVar }
                            indexExpr: literal { token = 0 }
                        expr: literal { token = 1 }
1059.                assign (=)
                        lValue: lValue { varID = intArr }
                            indexExpr: lValue { varID = dblVar }
                        expr: literal { token = 1 }
1062.                var numObjs { vt = int }
                        initExpr: lValue { varID = objArr, fieldID = Length }
1065.                var len { vt = int }
                        initExpr: lValue { varID = strVar, fieldID = length }
1067.                var size { vt = int }
                        initExpr: lValue { varID = intVar, fieldID = size }
1070.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: unaryOp (neg)
                            expr: lValue { varID = objVar }
1073.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = visible }
                        expr: unaryOp (not)
                            expr: lValue { varID = intVar }
1076.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: (+)
                            right: lValue { varID = intArr }
                            left: lValue { varID = strVar }
1078.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: (+)
                            right: lValue { varID = strVar }
                            left: lValue { varID = intArr }
1081.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (+)
                            right: unaryOp (not)
                                expr: lValue { varID = boolVar }
                            left: lValue { varID = boolVar }
1083.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: (+)
                            right: lValue { varID = objVar }
                            left: lValue { varID = objVar }
1085.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: (+)
                            right: literal { token = 1 }
                            left: lValue { varID = intArr }
1087.                assign (=)
                        lValue: lValue { varID = objArr }
                        expr: (+)
                            right: lValue { varID = objVar }
                            left: lValue { varID = objArr }
1090.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: (-)
                            right: lValue { varID = intVar }
                            left: lValue { varID = strVar }
1092.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (*)
                            right: literal { token = 0 }
                            left: lValue { varID = boolVar }
1094.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: (/)
                            right: literal { token = 2 }
                            left: lValue { varID = objVar }
1096.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: (%)
                            right: literal { token = 2 }
                            left: lValue { varID = intArr }
1099.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: (&&)
                            right: literal { token = 1001 }
                            left: lValue { varID = intVar }
1101.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (||)
                            right: literal { token = 1010 }
                            left: lValue { varID = boolVar }
1104.                if { #stmts = 1 }
                        expr: (<)
                            right: lValue { varID = boolVar }
                            left: lValue { varID = boolVar }
                        stmts:
1105.                        call voidFunc
1107.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (>)
                            right: lValue { varID = dblVar }
                            left: lValue { varID = objVar }
1109.                while { #stmts = 1 }
                        expr: (<=)
                            right: lValue { varID = intVar }
                            left: lValue { varID = boolVar }
                        stmts:
1110.                        call voidFunc
1113.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: (>=)
                            right: lValue { varID = intArr }
                            left: lValue { varID = dblVar }
1116.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: (/)
                            right: literal { token = 2 }
                            left: literal { token = 1 }
1118.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: (/)
                            right: literal { token = 8 }
                            left: literal { token = 3 }
1121.                var intVar { vt = int }
                        initExpr: literal { token = 13 }
1123.                var objArr { vt = array of GameObj }
                        initExpr: newArray { vt = GameObj }
                            lengthExpr: literal { token = 10 }
1126.                call update
1128.                call start
1130.                call onMousePress { #exprs = 2 }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
1133.                call println { #exprs = 1 }
                        exprs:
                            literal { token = "Hello world" }
1135.                call setHeight { #exprs = 1 }
                        exprs:
                            literal { token = 150 }
1138.                call intFunc
1140.                call dblFuncIntDbl { #exprs = 2 }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0.1 }
1143.                call foo
                        lValue: lValue { varID = GameObj }
1145.                call foo
                        lValue: lValue { varID = String }
1147.                call foo
                        lValue: lValue { varID = Code12Program }
1149.                call foo
                        lValue: lValue { varID = Code12Program }
1152.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                            indexExpr: literal { token = 0 }
                        exprs:
                            lValue { varID = objVar }
1154.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: call tan { #exprs = 1 }
                            lValue: lValue { varID = Math }
                                indexExpr: lValue { varID = intVar }
                            exprs:
                                literal { token = 0 }
1157.                call voidFunc
                        lValue: lValue { varID = intArr }
1160.                call voidFunc
                        lValue: lValue { varID = intArr }
                            indexExpr: literal { token = 0 }
1162.                call foo
                        lValue: lValue { varID = boolVar }
1165.                call prnitln
                        lValue: lValue { varID = ct }
1167.                call circ { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 10 }
1170.                call foo
                        lValue: lValue { varID = objArr }
                            indexExpr: literal { token = 0 }
1172.                call foo
                        lValue: lValue { varID = Math }
1175.                call intFuncInt
1177.                call dblFuncIntDbl
1179.                call log
                        lValue: lValue { varID = ct }
1181.                call atan2
                        lValue: lValue { varID = Math }
1183.                call boolFuncBoolStringGameObj { #exprs = 2 }
                        exprs:
                            literal { token = false }
                            literal { token = "" }
1185.                call rect { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 10 }
1187.                call voidFunc { #exprs = 1 }
                        exprs:
                            lValue { varID = intVar }
1189.                call print { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "intVar =" }
                            lValue { varID = intVar }
1191.                call atan { #exprs = 2 }
                        lValue: lValue { varID = Math }
                        exprs:
                            literal { token = 4 }
                            literal { token = 3 }
1193.                call logm { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = intVar }
                            lValue { varID = objVar }
1195.                var indent { vt = String }
                        initExpr: literal { token = "2 Tabs" }
1197.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "1 Space + 2 Tabs" }
1199.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "2 Tabs" }
1201.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "8 Spaces" }
1203.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "2 Tabs" }
1205.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "4 Spaces + 1 Tab" }
1207.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "2 Tabs" }
1209.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1211.                        call voidFunc
1213.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1215.                        call voidFunc
1216.                if { #stmts = 2 }
                        expr: literal { token = false }
                        stmts:
1219.                        call voidFunc
1220.                        call voidFunc
1222.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1223.                        call voidFunc
1225.                call voidFunc
1226.                if { #stmts = 2 }
                        expr: literal { token = false }
                        stmts:
1228.                        call voidFunc
1230.                        call voidFunc
1232.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1235.                        call voidFunc
1237.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1239.                        call voidFunc
1242.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
1246.                        call voidFunc
                        stmts:
1243.                        call voidFunc
1247.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
1251.                        call voidFunc
                        stmts:
1248.                        call voidFunc
1252.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
1255.                        call voidFunc
                        stmts:
1253.                        call voidFunc
1257.                call voidFunc
1258.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
1263.                        call voidFunc
                        stmts:
1259.                        call voidFunc
1265.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: literal { token = false }
                                stmts:
1269.                                call voidFunc
                        stmts:
1266.                        call voidFunc
1270.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: literal { token = false }
                                stmts:
1275.                                call voidFunc
                        stmts:
1271.                        call voidFunc
1277.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 1 }
                                expr: literal { token = false }
                                elseStmts:
1283.                                call voidFunc
                                stmts:
1281.                                call voidFunc
                        stmts:
1278.                        call voidFunc
1284.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 1 }
                                expr: literal { token = false }
                                elseStmts:
1290.                                call voidFunc
                                stmts:
1287.                                call voidFunc
                        stmts:
1285.                        call voidFunc
1291.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 1 }
                                expr: literal { token = false }
                                elseStmts:
                                    if { #elseStmts = 1, #stmts = 1 }
                                        expr: literal { token = false }
                                        elseStmts:
1300.                                        call voidFunc
                                        stmts:
1297.                                        call voidFunc
                                stmts:
1294.                                call voidFunc
                        stmts:
1292.                        call voidFunc
1301.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1302.                        if { #elseStmts = 1, #stmts = 1 }
                                expr: literal { token = false }
                                elseStmts:
1306.                                call voidFunc
                                stmts:
1303.                                call voidFunc
1307.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1309.                        if { #elseStmts = 1, #stmts = 1 }
                                expr: literal { token = false }
                                elseStmts:
1315.                                call voidFunc
                                stmts:
1311.                                call voidFunc
1319.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1320.                        if { #elseStmts = 1, #stmts = 1 }
                                expr: literal { token = false }
                                elseStmts:
                                    if { #stmts = 1 }
                                        expr: literal { token = false }
                                        stmts:
1324.                                        call voidFunc
                                stmts:
1321.                                call voidFunc
1325.                for { #stmts = 1 }
1325.                    initStmt: var ii { vt = int, isGlobal = false }
                            initExpr: literal { token = 0 }
                        expr: (<)
                            right: literal { token = 100 }
                            left: lValue { varID = ii }
1325.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
1327.                        call voidFunc
1328.                for { #stmts = 1 }
1328.                    initStmt: var ii { vt = int, isGlobal = false }
                            initExpr: literal { token = 0 }
                        expr: (<)
                            right: literal { token = 100 }
                            left: lValue { varID = ii }
1328.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
1331.                        call voidFunc
1333.                for { #stmts = 1 }
1333.                    initStmt: var ii { vt = int, isGlobal = false }
                            initExpr: literal { token = 0 }
                        expr: (<)
                            right: literal { token = 100 }
                            left: lValue { varID = ii }
1333.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
1336.                        call voidFunc
1338.                while { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1340.                        call voidFunc
1341.                while { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1344.                        call voidFunc
1346.                while { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1347.                        call voidFunc
1349.                call voidFunc
1350.                doWhile { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1352.                        call voidFunc
1354.                doWhile { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1357.                        call voidFunc
1360.                doWhile { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1361.                        call voidFunc
1364.                var x1 { vt = int }
1366.                var x2 { vt = int }
1366.                var x3 { vt = int }
1367.                var circle { vt = GameObj }
                        initExpr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 10 }
1373.                call log { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 1 }
                            literal { token = 2 }
                            literal { token = 3 }
1374.                var multiLineArrInit { vt = array of int }
                        initExpr: arrayInit { #exprs = 2 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
1377.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1378.                        call voidFunc
1380.                call voidFunc
1381.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
1384.                        call voidFunc
                        stmts:
1382.                        call voidFunc
1386.                call voidFunc
1387.                if { #elseStmts = 1, #stmts = 1 }
                        expr: literal { token = false }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: literal { token = false }
                                stmts:
1390.                                call voidFunc
                        stmts:
1388.                        call voidFunc
1392.                call voidFunc
1393.                if { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1394.                        call voidFunc
1396.                while { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1397.                        call voidFunc
1398.                for { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1399.                        call voidFunc
1401.                call voidFunc
1402.                while { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
1403.                        call voidFunc
1405.                call voidFunc
1417.        func myFunc { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
1417.                var myVar { vt = int, isGlobal = false }
1421.        func update { #paramVars = 0, vt = GameObj, #stmts = 0 }
1425.        func onMousePress { #paramVars = 3, vt = String, #stmts = 0 }
                paramVars:
1425.                var obj { vt = GameObj, isGlobal = false }
1425.                var x { vt = double, isGlobal = false }
1425.                var y { vt = double, isGlobal = false }
1429.        func onMousePress { #paramVars = 2, vt = void, #stmts = 0 }
                paramVars:
1429.                var x { vt = double, isGlobal = false }
1429.                var y { vt = double, isGlobal = false }
1433.        func onKeyPress { #paramVars = 3, vt = void, #stmts = 0 }
                paramVars:
1433.                var obj { vt = GameObj, isGlobal = false }
1433.                var x { vt = double, isGlobal = false }
1433.                var y { vt = double, isGlobal = false }
1437.        func onKeyRelease { #paramVars = 0, vt = void, #stmts = 0 }
1441.        func onMousePress { #paramVars = 3, vt = void, #stmts = 0 }
                paramVars:
1441.                var obj { vt = boolean, isGlobal = false }
1441.                var x { vt = double, isGlobal = false }
1441.                var y { vt = double, isGlobal = false }
1445.        func onMouseDrag { #paramVars = 3, vt = void, #stmts = 0 }
                paramVars:
1445.                var obj { vt = GameObj, isGlobal = false }
1445.                var x { vt = int, isGlobal = false }
1445.                var y { vt = double, isGlobal = false }
1449.        func onMouseRelease { #paramVars = 3, vt = void, #stmts = 0 }
                paramVars:
1449.                var obj { vt = GameObj, isGlobal = false }
1449.                var x { vt = double, isGlobal = false }
1449.                var y { vt = String, isGlobal = false }
1453.        func onKeyPress { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
1453.                var keyName { vt = double, isGlobal = false }
1457.        func onKeyRelease { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
1457.                var keyName { vt = int, isGlobal = false }
1461.        func onCharTyped { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
1461.                var keyName { vt = GameObj, isGlobal = false }
1465.        func overIndentedFunc { #paramVars = 0, vt = void, #stmts = 0 }
1469.        func underIndentedFunc { #paramVars = 0, vt = void, #stmts = 0 }
1472.        func funcWithUnindentedBody { #paramVars = 0, vt = int, #stmts = 1 }
                stmts:
1475.                return
                        expr: literal { token = 0 }
1477.        func multiLineFuncDef { #paramVars = 2, vt = void, #stmts = 0 }
                paramVars:
1477.                var arg1 { vt = int, isGlobal = false }
1479.                var arg2 { vt = int, isGlobal = false }
        vars:
  5.        var myVar { vt = int, isGlobal = true }
                initExpr: literal { token = 1 }
  7.        var button { vt = GameObj, isGlobal = true }
                initExpr: call text { #exprs = 4 }
                    lValue: lValue { varID = ct }
                    exprs:
                        literal { token = "START" }
                        literal { token = 0 }
                        literal { token = 0 }
                        literal { token = 10 }
  9.        var intResult { vt = int, isGlobal = true }
                initExpr: call intFunc
 11.        var overIndentedInstanceVar { vt = int, isGlobal = true }
 13.        var underIndentedInstanceVar { vt = int, isGlobal = true }
605.        var newWidth { vt = double, isGlobal = true }
                initExpr: call getWidth
                    lValue: lValue { varID = ct }
