    program ErrorTest { #funcs = 112, #vars = 86 }
        funcs:
174.        func emptyFunc { #paramVars = 0, vt = void }
                block: block { iLineEnd = 176, #stmts = 0, iLineBegin = 175 }
177.        func voidFunc { #paramVars = 0, vt = void }
                block: block { iLineEnd = 180, #stmts = 1, iLineBegin = 178 }
                    stmts:
179.                    var i { vt = int, initExpr = 0 }
181.        func intFunc { #paramVars = 0, vt = int }
                block: block { iLineEnd = 185, #stmts = 2, iLineBegin = 182 }
                    stmts:
183.                    var i { vt = int, initExpr = 1 }
184.                    return
                            expr: lValue { varID = i }
186.        func dblFunc { #paramVars = 0, vt = double }
                block: block { iLineEnd = 190, #stmts = 2, iLineBegin = 187 }
                    stmts:
188.                    var d { vt = double, initExpr = 0.0 }
189.                    return
                            expr: lValue { varID = d }
191.        func boolFunc { #paramVars = 0, vt = boolean }
                block: block { iLineEnd = 195, #stmts = 2, iLineBegin = 192 }
                    stmts:
193.                    var b { vt = boolean, initExpr = true }
194.                    return
                            expr: lValue { varID = b }
196.        func strFunc { #paramVars = 0, vt = String }
                block: block { iLineEnd = 200, #stmts = 2, iLineBegin = 197 }
                    stmts:
198.                    var s { vt = String, initExpr = "" }
199.                    return
                            expr: lValue { varID = s }
201.        func gObjFunc { #paramVars = 0, vt = GameObj }
                block: block { iLineEnd = 204, #stmts = 1, iLineBegin = 202 }
                    stmts:
203.                    return
                            expr: call circle { #exprs = 3, class = ct }
                                exprs:
203.                                (0.0)
203.                                (0.0)
203.                                (1.0)
205.        func intArrFuncInt { #paramVars = 1, vt = array of int }
                paramVars:
205.                var n { vt = int, isGlobal = false }
                block: block { iLineEnd = 208, #stmts = 1, iLineBegin = 206 }
                    stmts:
207.                    return
                            expr: newArray { vtElement = 0 }
                                lengthExpr: lValue { varID = n }
209.        func intFuncInt { #paramVars = 1, vt = int }
                paramVars:
209.                var i { vt = int, isGlobal = false }
                block: block { iLineEnd = 212, #stmts = 1, iLineBegin = 210 }
                    stmts:
211.                    return
                            expr: (+) { right = 1 }
                                left: (*) { right = 2 }
                                    left: lValue { varID = i }
213.        func dblFuncIntDbl { #paramVars = 2, vt = double }
                paramVars:
213.                var i { vt = int, isGlobal = false }
213.                var d { vt = double, isGlobal = false }
                block: block { iLineEnd = 216, #stmts = 1, iLineBegin = 214 }
                    stmts:
215.                    return
                            expr: (+)
                                right: lValue { varID = d }
                                left: lValue { varID = i }
217.        func boolFuncBoolStringGameObj { #paramVars = 3, vt = boolean }
                paramVars:
217.                var b { vt = boolean, isGlobal = false }
217.                var s { vt = String, isGlobal = false }
217.                var g { vt = GameObj, isGlobal = false }
                block: block { iLineEnd = 220, #stmts = 1, iLineBegin = 218 }
                    stmts:
219.                    return
                            expr: (&&)
                                right: lValue { varID = g, fieldID = visible }
                                left: (&&)
                                    right: call equals { #exprs = 1 }
                                        lValue: lValue { varID = s }
                                        exprs:
219.                                        ("")
                                    left: lValue { varID = b }
221.        func recursiveFunc { #paramVars = 1, vt = int }
                paramVars:
221.                var i { vt = int, isGlobal = false }
                block: block { iLineEnd = 226, #stmts = 2, iLineBegin = 222 }
                    stmts:
223.                    if
                            expr: (<=) { right = 0 }
                                left: lValue { varID = i }
                            block: block { #stmts = 1 }
                                stmts:
224.                                return { expr = 0 }
225.                    return
                            expr: (+) { left = 1 }
                                right: call recursiveFunc { #exprs = 1 }
                                    exprs:
                                        (-) { right = 1 }
                                            left: lValue { varID = i }
227.        func multiLineFuncDecl { #paramVars = 3, vt = void }
                paramVars:
227.                var arg1 { vt = int, isGlobal = false }
228.                var arg2 { vt = double, isGlobal = false }
229.                var arg3 { vt = boolean, isGlobal = false }
                block: block { iLineEnd = 232, #stmts = 1, iLineBegin = 230 }
                    stmts:
231.                    call log { #exprs = 3, class = ct }
                            exprs:
                                lValue { varID = arg1 }
                                lValue { varID = arg2 }
                                lValue { varID = arg3 }
235.        func start { #paramVars = 0, isPublic = true, vt = int }
                block: block { iLineEnd = 754, #stmts = 414, iLineBegin = 236 }
                    stmts:
239.                    var LIMIT { vt = int, isConst = true, initExpr = 100 }
241.                    var i { vt = int, initExpr = 3 }
242.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: unaryOp (neg) { expr = 5 }
243.                    assign (++)
                            lValue: lValue { varID = i }
244.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (+) { right = 1 }
                                left: lValue { varID = i }
245.                    assign (+=) { expr = 1 }
                            lValue: lValue { varID = i }
246.                    assign (-=) { expr = 2 }
                            lValue: lValue { varID = i }
247.                    assign (*=) { expr = 3 }
                            lValue: lValue { varID = i }
248.                    assign (/=) { expr = 4 }
                            lValue: lValue { varID = i }
249.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call intFunc
250.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call intFuncInt { #exprs = 1 }
                                exprs:
                                    (-)
                                        right: (*) { left = 345 }
                                            right: lValue { varID = i }
                                        left: (-)
                                            right: parens
                                                expr: (+)
                                                    right: lValue { varID = i }
                                                    left: lValue { varID = i }
                                            left: lValue { varID = i }
251.                    var foo { vt = int }
                            initExpr: (+) { right = 4 }
                                left: lValue { varID = i }
252.                    var score { vt = int, initExpr = 500 }
253.                    var j { vt = int }
253.                    var k { vt = int }
254.                    var exponentialNumberNoDot { vt = double, initExpr = 12e10 }
255.                    var exponentialNumberWithDot { vt = double, initExpr = 3.42e2 }
256.                    var expontialNumberWithDecimalPlaces { vt = double, initExpr = 6.62e-34 }
257.                    var d { vt = double, initExpr = 3.14 }
258.                    assign (=) { expr = 100 }
                            lValue: lValue { varID = d }
259.                    assign (=) { expr = .5 }
                            lValue: lValue { varID = d }
260.                    assign (=) { expr = 1.2345e6 }
                            lValue: lValue { varID = d }
261.                    assign (=) { expr = 1.2345e+67 }
                            lValue: lValue { varID = d }
262.                    assign (=) { expr = .12e0 }
                            lValue: lValue { varID = d }
263.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: unaryOp (neg) { expr = .123e-123 }
264.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: unaryOp (neg) { expr = .5 }
265.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (/) { right = 2 }
                                left: lValue { varID = d }
266.                    assign (++)
                            lValue: lValue { varID = d }
267.                    assign (+=) { expr = 0.5 }
                            lValue: lValue { varID = d }
268.                    assign (-=) { expr = 7 }
                            lValue: lValue { varID = d }
269.                    assign (*=) { expr = 8 }
                            lValue: lValue { varID = d }
270.                    assign (/=) { expr = 8.0 }
                            lValue: lValue { varID = d }
271.                    var d2 { vt = double, initExpr = 3 }
272.                    var d3 { vt = double }
                            initExpr: (+)
                                right: (*) { left = 2 }
                                    right: parens
                                        expr: (+)
                                            right: lValue { varID = d }
                                            left: lValue { varID = d2 }
                                left: lValue { varID = d }
273.                    var x1 { vt = double }
273.                    var x2 { vt = double }
273.                    var y1 { vt = double }
273.                    var y2 { vt = double }
274.                    assign (=) { expr = 1 }
                            lValue: lValue { varID = x1 }
275.                    assign (=) { expr = 2.0 }
                            lValue: lValue { varID = x2 }
276.                    assign (=) { expr = .5e+1 }
                            lValue: lValue { varID = y1 }
277.                    assign (=)
                            lValue: lValue { varID = y2 }
                            expr: unaryOp (neg) { expr = .5e-1 }
278.                    var eps { vt = double, initExpr = 1e-4 }
279.                    var name { vt = String, initExpr = "Einstein" }
280.                    var b { vt = boolean, initExpr = true }
281.                    var b2 { vt = boolean, initExpr = false }
282.                    var b3 { vt = boolean }
                            initExpr: (||)
                                right: lValue { varID = b2 }
                                left: lValue { varID = b }
283.                    var s { vt = String, initExpr = "A string variable" }
284.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: lValue { varID = s }
285.                    assign (=) { expr = null }
                            lValue: lValue { varID = s }
287.                    var colors { vt = array of String }
                            initExpr: arrayInit { #exprs = 5 }
                                exprs:
287.                                ("black")
287.                                ("white")
287.                                ("red")
287.                                ("green")
287.                                ("blue")
288.                    assign (=) { expr = 100 }
                            lValue: lValue { varID = i }
289.                    var strArr { vt = array of String }
                            initExpr: newArray { vtElement = "String" }
                                lengthExpr: lValue { varID = i }
290.                    assign (=)
                            lValue: lValue { varID = strArr }
                            expr: lValue { varID = colors }
291.                    var intArr { vt = array of int }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
291.                                (1)
291.                                (2)
291.                                (3)
292.                    assign (=)
                            lValue: lValue { varID = intArr }
                            expr: newArray { vtElement = 0, lengthExpr = 100 }
293.                    var intArr2 { vt = array of int }
                            initExpr: newArray { vtElement = 0 }
                                lengthExpr: call length
                                    lValue: lValue { varID = s }
294.                    assign (=)
                            lValue: lValue { varID = intArr }
                            expr: lValue { varID = intArr2 }
295.                    var dblArr { vt = array of double }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
295.                                (1.1)
295.                                (2.2)
295.                                (3.3)
296.                    var dblArr2 { vt = array of double }
                            initExpr: newArray { vtElement = 1, lengthExpr = 100 }
297.                    assign (=)
                            lValue: lValue { varID = dblArr }
                            expr: lValue { varID = dblArr2 }
298.                    var gObjArr { vt = array of GameObj }
                            initExpr: newArray { vtElement = "GameObj" }
                                lengthExpr: (*) { right = 2 }
                                    left: lValue { varID = i }
300.                    call voidFunc
301.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call intFunc
302.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call dblFunc
303.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call boolFunc
304.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: call strFunc
305.                    var gObj { vt = GameObj }
                            initExpr: call gObjFunc
306.                    assign (=)
                            lValue: lValue { varID = intArr }
                            expr: call intArrFuncInt { #exprs = 1 }
                                exprs:
                                    lValue { varID = i }
307.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call intFuncInt { #exprs = 1 }
                                exprs:
                                    lValue { varID = i }
308.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call dblFuncIntDbl { #exprs = 2 }
                                exprs:
                                    lValue { varID = i }
                                    lValue { varID = d }
309.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call boolFuncBoolStringGameObj { #exprs = 3 }
                                exprs:
                                    lValue { varID = b }
                                    lValue { varID = s }
                                    lValue { varID = gObj }
310.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call recursiveFunc { #exprs = 1 }
                                exprs:
310.                                (2)
312.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (/) { right = 1, left = 5 }
313.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (/) { right = 20, left = 100 }
314.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (+)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
315.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (-)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
316.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (*)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
317.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (%)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
318.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (-)
                                right: lValue { varID = i }
                                left: (+)
                                    right: lValue { varID = i }
                                    left: (*)
                                        right: lValue { varID = i }
                                        left: lValue { varID = i }
319.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (*)
                                right: parens
                                    expr: (-)
                                        right: lValue { varID = i }
                                        left: parens
                                            expr: (+)
                                                right: lValue { varID = i }
                                                left: lValue { varID = i }
                                left: lValue { varID = i }
320.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: lValue { varID = i }
321.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (+)
                                right: lValue { varID = i }
                                left: lValue { varID = d }
322.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (-)
                                right: lValue { varID = i }
                                left: lValue { varID = d }
323.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (*)
                                right: lValue { varID = i }
                                left: lValue { varID = d }
324.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (/)
                                right: lValue { varID = i }
                                left: lValue { varID = d }
325.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (%)
                                right: lValue { varID = i }
                                left: lValue { varID = d }
326.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (+)
                                right: lValue { varID = d }
                                left: lValue { varID = i }
327.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (-)
                                right: lValue { varID = d }
                                left: lValue { varID = i }
328.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (*)
                                right: lValue { varID = d }
                                left: lValue { varID = i }
329.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (/)
                                right: lValue { varID = d }
                                left: lValue { varID = i }
330.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (%)
                                right: lValue { varID = d }
                                left: lValue { varID = i }
331.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (+)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
332.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (-)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
333.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (*)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
334.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (/)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
335.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (%)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
336.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (+)
                                right: (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
                                left: (-)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
337.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (-)
                                right: lValue { varID = i }
                                left: (+)
                                    right: (*)
                                        right: lValue { varID = i }
                                        left: lValue { varID = i }
                                    left: lValue { varID = d }
338.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (-)
                                right: (*)
                                    right: lValue { varID = d }
                                    left: lValue { varID = d }
                                left: (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
339.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: parens
                                expr: (-)
                                    right: (*)
                                        right: lValue { varID = d }
                                        left: lValue { varID = d }
                                    left: (*)
                                        right: lValue { varID = i }
                                        left: lValue { varID = i }
340.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: (+)
                                right: lValue { varID = s }
                                left: lValue { varID = s }
341.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: (+) { right = "s" }
                                left: (+)
                                    right: lValue { varID = s }
                                    left: lValue { varID = s }
342.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: (+)
                                right: lValue { varID = i }
                                left: lValue { varID = s }
343.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: (+)
                                right: lValue { varID = d }
                                left: lValue { varID = s }
344.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: (+)
                                right: lValue { varID = b }
                                left: lValue { varID = s }
345.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: (+)
                                right: lValue { varID = gObj }
                                left: lValue { varID = s }
346.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: (+)
                                right: lValue { varID = s }
                                left: lValue { varID = i }
347.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: (+)
                                right: lValue { varID = s }
                                left: lValue { varID = d }
348.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: (+)
                                right: lValue { varID = s }
                                left: lValue { varID = b }
349.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: (+)
                                right: lValue { varID = s }
                                left: lValue { varID = gObj }
350.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: lValue { varID = b }
351.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: unaryOp (not)
                                expr: lValue { varID = b }
352.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: parens
                                expr: lValue { varID = b }
353.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (==)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
354.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (==)
                                right: lValue { varID = d }
                                left: lValue { varID = i }
355.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (==)
                                right: lValue { varID = i }
                                left: lValue { varID = d }
356.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (==)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
357.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (==)
                                right: lValue { varID = b }
                                left: lValue { varID = b }
358.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (==)
                                right: lValue { varID = gObj }
                                left: lValue { varID = gObj }
359.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (!=)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
360.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (!=)
                                right: lValue { varID = d }
                                left: lValue { varID = i }
361.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (!=)
                                right: lValue { varID = i }
                                left: lValue { varID = d }
362.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (!=)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
363.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (!=)
                                right: lValue { varID = b }
                                left: lValue { varID = b }
364.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (!=)
                                right: lValue { varID = gObj }
                                left: lValue { varID = gObj }
365.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (<)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
366.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (>)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
367.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (<=)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
368.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (>=)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
369.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (<)
                                right: lValue { varID = d }
                                left: lValue { varID = i }
370.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (>)
                                right: lValue { varID = d }
                                left: lValue { varID = i }
371.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (<=)
                                right: lValue { varID = d }
                                left: lValue { varID = i }
372.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (>=)
                                right: lValue { varID = d }
                                left: lValue { varID = i }
373.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (<)
                                right: lValue { varID = i }
                                left: lValue { varID = d }
374.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (>)
                                right: lValue { varID = i }
                                left: lValue { varID = d }
375.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (<=)
                                right: lValue { varID = i }
                                left: lValue { varID = d }
376.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (>=)
                                right: lValue { varID = i }
                                left: lValue { varID = d }
377.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (<)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
378.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (>)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
379.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (<=)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
380.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (>=)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
381.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (||)
                                right: lValue { varID = b }
                                left: lValue { varID = b }
382.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (&&)
                                right: lValue { varID = b }
                                left: lValue { varID = b }
383.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (<) { right = 2, left = 1 }
384.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (<=) { right = 2, left = 1.1 }
385.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (>) { right = 2, left = 1 }
386.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (>=) { right = 2.2, left = 1 }
387.                    assign (=)
                            lValue: lValue { varID = b2 }
                            expr: (||)
                                right: (&&)
                                    right: (==)
                                        right: lValue { varID = b }
                                        left: lValue { varID = b }
                                    left: lValue { varID = b3 }
                                left: lValue { varID = b2 }
388.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (==) { right = 0 }
                                left: (%) { right = 2 }
                                    left: lValue { varID = i }
389.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (&&)
                                right: lValue { varID = b }
                                left: parens
                                    expr: (||)
                                        right: lValue { varID = b }
                                        left: lValue { varID = b }
390.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (&&)
                                right: parens
                                    expr: (<) { right = 0.0001 }
                                        left: (-) { right = 3.14159 }
                                            left: staticField { fieldID = PI, class = Math }
                                left: parens
                                    expr: (==) { right = 2 }
                                        left: (+) { right = 1, left = 1 }
392.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
394.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
397.                                            assign (*=) { expr = 5 }
                                                    lValue: lValue { varID = i }
                                        expr: (<=) { right = 10 }
                                            left: lValue { varID = i }
                                        block: block { #stmts = 1 }
                                            stmts:
395.                                            assign (++)
                                                    lValue: lValue { varID = i }
                            expr: (==) { right = 0 }
                                left: lValue { varID = i }
                            block: block { #stmts = 1 }
                                stmts:
393.                                call setBackColor { #exprs = 1, class = ct }
                                        exprs:
                                            lValue { varID = colors }
                                                indexExpr: lValue { varID = i }
399.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
404.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
409.                                            if
                                                    elseBlock: block { iLineEnd = 415, #stmts = 2, iLineBegin = 412 }
                                                        stmts:
413.                                                        var tempStr { vt = String, initExpr = "I'll be " }
414.                                                        assign (=)
                                                                lValue: lValue { varID = tempStr }
                                                                expr: (+) { right = "out of scope soon" }
                                                                    left: lValue { varID = tempStr }
                                                    expr: lValue { varID = b }
                                                    block: block { #stmts = 1 }
                                                        stmts:
410.                                                        assign (++)
                                                                lValue: lValue { varID = i }
                                        expr: (<=) { right = 10 }
                                            left: lValue { varID = i }
                                        block: block { iLineEnd = 408, #stmts = 2, iLineBegin = 405 }
                                            stmts:
406.                                            assign (=) { expr = 7 }
                                                    lValue: lValue { varID = d }
407.                                            call setSoundVolume { #exprs = 1, class = ct }
                                                    exprs:
407.                                                    (1)
                            expr: (>) { right = 0 }
                                left: lValue { varID = i }
                            block: block { iLineEnd = 403, #stmts = 2, iLineBegin = 400 }
                                stmts:
401.                                assign (=) { expr = 0 }
                                        lValue: lValue { varID = j }
402.                                assign (=) { expr = 0 }
                                        lValue: lValue { varID = k }
416.                    if
                            expr: (&&)
                                right: (<=)
                                    right: lValue { varID = eps }
                                    left: call distance { #exprs = 4, class = ct }
                                        exprs:
                                            lValue { varID = x1 }
                                            lValue { varID = y1 }
                                            lValue { varID = x2 }
                                            lValue { varID = y2 }
                                left: call isError { #exprs = 1, class = ct }
                                    exprs:
                                        call tan { #exprs = 1, class = Math }
                                            exprs:
                                                lValue { varID = d }
                            block: block { #stmts = 1 }
                                stmts:
417.                                call println { #exprs = 1, class = ct }
                                        exprs:
417.                                        ("oops")
419.                    for { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
420.                                for
                                        block: block { #stmts = 1 }
                                            stmts:
421.                                            for
421.                                                initStmt: assign (=) { expr = 0 }
                                                        lValue: lValue { varID = i }
                                                    block: block { #stmts = 1 }
                                                        stmts:
422.                                                        for
                                                                expr: (<) { right = 10 }
                                                                    left: lValue { varID = i }
                                                                block: block { #stmts = 1 }
                                                                    stmts:
423.                                                                    for
                                                                            block: block { #stmts = 1 }
                                                                                stmts:
424.                                                                                for
                                                                                        expr: lValue { varID = b }
                                                                                        block: block { #stmts = 1 }
                                                                                            stmts:
425.                                                                                            assign (=) { expr = 0 }
                                                                                                    lValue: lValue { varID = d }
423.                                                                        nextStmt: assign (++)
                                                                                lValue: lValue { varID = i }
426.                    for
                            expr: (<) { right = 10 }
                                left: lValue { varID = ii }
426.                        initStmt: var ii { vt = int, isGlobal = false, initExpr = 0 }
                            block: block { iLineEnd = 432, #stmts = 2, iLineBegin = 427 }
                                stmts:
428.                                for
                                        expr: (!=) { right = 10 }
                                            left: lValue { varID = jj }
428.                                    initStmt: var jj { vt = int, isGlobal = false, initExpr = 0 }
                                        block: block { #stmts = 1 }
                                            stmts:
429.                                            if
                                                    expr: (||)
                                                        right: (==) { right = 0 }
                                                            left: lValue { varID = jj }
                                                        left: (==) { right = 0 }
                                                            left: lValue { varID = ii }
                                                    block: block { #stmts = 1 }
                                                        stmts:
430.                                                        break
428.                                    nextStmt: assign (+=) { expr = 1 }
                                            lValue: lValue { varID = jj }
431.                                break
426.                        nextStmt: assign (++)
                                lValue: lValue { varID = ii }
433.                    for
                            expr: (<) { right = 10 }
                                left: lValue { varID = ii }
433.                        initStmt: var ii { vt = int, isGlobal = false, initExpr = 0 }
                            block: block { iLineEnd = 445, #stmts = 2, iLineBegin = 434 }
                                stmts:
435.                                for
                                        expr: (!=) { right = 10 }
                                            left: lValue { varID = jj }
435.                                    initStmt: var jj { vt = int, isGlobal = false, initExpr = 0 }
                                        block: block { iLineEnd = 443, #stmts = 2, iLineBegin = 436 }
                                            stmts:
437.                                            if
                                                    expr: (&&)
                                                        right: (==) { right = 0 }
                                                            left: lValue { varID = jj }
                                                        left: (==) { right = 0 }
                                                            left: lValue { varID = ii }
                                                    block: block { iLineEnd = 441, #stmts = 2, iLineBegin = 438 }
                                                        stmts:
439.                                                        assign (=) { expr = 0 }
                                                                lValue: lValue { varID = intArr }
                                                                    indexExpr: lValue { varID = ii }
440.                                                        break
442.                                            break
435.                                    nextStmt: assign (+=) { expr = 1 }
                                            lValue: lValue { varID = jj }
444.                                break
433.                        nextStmt: assign (++)
                                lValue: lValue { varID = ii }
446.                    var xVar { vt = double, initExpr = 0 }
447.                    var yVar { vt = double, initExpr = 1 }
448.                    for
                            expr: (<) { right = 1 }
                                left: lValue { varID = xVar }
448.                        initStmt: var dx { vt = double, isGlobal = false, initExpr = .1 }
                            block: block { #stmts = 1 }
                                stmts:
449.                                for
                                        expr: (>) { right = 0 }
                                            left: lValue { varID = yVar }
449.                                    initStmt: var dy { vt = double, isGlobal = false }
                                            initExpr: unaryOp (neg) { expr = .5 }
                                        block: block { #stmts = 1 }
                                            stmts:
450.                                            assign (=)
                                                    lValue: lValue { varID = d }
                                                    expr: (-)
                                                        right: (/)
                                                            right: lValue { varID = dy }
                                                            left: lValue { varID = yVar }
                                                        left: (+)
                                                            right: lValue { varID = dx }
                                                            left: lValue { varID = xVar }
449.                                    nextStmt: assign (+=)
                                            lValue: lValue { varID = yVar }
                                            expr: lValue { varID = dy }
448.                        nextStmt: assign (+=)
                                lValue: lValue { varID = xVar }
                                expr: lValue { varID = dx }
451.                    assign (=)
                            lValue: lValue { varID = intArr }
                            expr: newArray { vtElement = 0, lengthExpr = 1 }
452.                    forArray
452.                        var: var a { vt = int, isGlobal = false }
                            expr: lValue { varID = intArr }
                            block: block { #stmts = 1 }
                                stmts:
453.                                assign (=) { expr = 0 }
                                        lValue: lValue { varID = a }
455.                    while
                            expr: lValue { varID = b }
                            block: block { #stmts = 1 }
                                stmts:
456.                                assign (=) { expr = false }
                                        lValue: lValue { varID = b }
457.                    while
                            expr: lValue { varID = b }
                            block: block { iLineEnd = 462, #stmts = 3, iLineBegin = 458 }
                                stmts:
459.                                call voidFunc
460.                                assign (++)
                                        lValue: lValue { varID = i }
461.                                assign (=) { expr = false }
                                        lValue: lValue { varID = b }
463.                    doWhile { iLineWhile = 465 }
                            expr: lValue { varID = b }
                            block: block { #stmts = 1 }
                                stmts:
464.                                assign (=) { expr = false }
                                        lValue: lValue { varID = b }
466.                    doWhile { iLineWhile = 470 }
                            expr: lValue { varID = b }
                            block: block { iLineEnd = 469, #stmts = 1, iLineBegin = 467 }
                                stmts:
468.                                assign (=) { expr = false }
                                        lValue: lValue { varID = b }
472.                    call print { #exprs = 1, class = ct }
                            exprs:
472.                            ("Hello world")
473.                    call print { #exprs = 1, class = ct }
                            exprs:
                                (+) { right = "world" }
                                    left: (+) { right = " ", left = "Hello" }
474.                    call print { #exprs = 1, class = ct }
                            exprs:
474.                            ("Hello world\n")
475.                    call print { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = i }
476.                    call print { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = d }
477.                    call print { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = b }
478.                    call print { #exprs = 1, class = ct }
                            exprs:
                                (+) { left = "i = " }
                                    right: lValue { varID = i }
479.                    call print { #exprs = 1, class = ct }
                            exprs:
                                (+) { left = "d = " }
                                    right: lValue { varID = d }
480.                    call print { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = name }
481.                    call print { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = name }
                                    left: (+) { right = " ", left = "Hello" }
482.                    var circleObj { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
482.                                (50)
482.                                (50)
482.                                (20)
483.                    call print { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = circleObj }
484.                    call println { #exprs = 1, class = ct }
                            exprs:
484.                            ("Hello world")
485.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { right = "world" }
                                    left: (+) { right = " ", left = "Hello" }
486.                    call println { #exprs = 1, class = ct }
                            exprs:
486.                            ("Hello world\n")
487.                    call println { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = i }
488.                    call println { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = d }
489.                    call println { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = b }
490.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { left = "i = " }
                                    right: lValue { varID = i }
491.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { left = "d = " }
                                    right: lValue { varID = d }
492.                    call println { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = name }
493.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = name }
                                    left: (+) { right = " ", left = "Hello" }
494.                    call println { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = circleObj }
495.                    call log { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = i }
496.                    call log { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = d }
497.                    call log { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = b }
498.                    call log { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = circleObj }
499.                    var obj2 { vt = GameObj }
                            initExpr: lValue { varID = circleObj }
500.                    var obj3 { vt = GameObj }
                            initExpr: lValue { varID = obj2 }
501.                    call log { #exprs = 9, class = ct }
                            exprs:
501.                            ("circleObj = ")
                                lValue { varID = circleObj }
501.                            ("obj2 = ")
                                lValue { varID = obj2 }
501.                            ("obj3=")
                                lValue { varID = obj3 }
501.                            (3.14)
                                staticField { fieldID = PI, class = Math }
501.                            (42)
502.                    call logm { #exprs = 2, class = ct }
                            exprs:
502.                            ("message")
502.                            (null)
503.                    call logm { #exprs = 3, class = ct }
                            exprs:
503.                            ("message")
                                lValue { varID = obj2 }
                                lValue { varID = obj3 }
504.                    call setOutputFile { #exprs = 1, class = ct }
                            exprs:
504.                            ("output.txt")
505.                    call setOutputFile { #exprs = 1, class = ct }
                            exprs:
505.                            ("output/nameList.txt")
506.                    var outputFilename { vt = String, initExpr = "output.txt" }
507.                    call setOutputFile { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = outputFilename }
509.                    call showAlert { #exprs = 1, class = ct }
                            exprs:
509.                            ("alert meassage")
510.                    var message { vt = String, initExpr = "alert!" }
511.                    call showAlert { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = message }
512.                    var n { vt = int }
                            initExpr: call inputInt { #exprs = 1, class = ct }
                                exprs:
512.                                ("enter a number: ")
513.                    assign (=)
                            lValue: lValue { varID = n }
                            expr: call inputInt { #exprs = 1, class = ct }
                                exprs:
513.                                ("enter a number: ")
514.                    assign (=)
                            lValue: lValue { varID = n }
                            expr: call inputInt { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = message }
515.                    var x { vt = double }
                            initExpr: call inputNumber { #exprs = 1, class = ct }
                                exprs:
515.                                ("enter a number: ")
516.                    assign (=)
                            lValue: lValue { varID = x }
                            expr: call inputNumber { #exprs = 1, class = ct }
                                exprs:
516.                                ("enter a number: ")
517.                    assign (=)
                            lValue: lValue { varID = x }
                            expr: call inputNumber { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = message }
518.                    var quit { vt = boolean }
                            initExpr: call inputYesNo { #exprs = 1, class = ct }
                                exprs:
518.                                ("Quit?")
519.                    assign (=)
                            lValue: lValue { varID = quit }
                            expr: call inputYesNo { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = message }
520.                    var inputStr { vt = String }
                            initExpr: call inputString { #exprs = 1, class = ct }
                                exprs:
520.                                ("Quit?")
521.                    assign (=)
                            lValue: lValue { varID = inputStr }
                            expr: call inputString { #exprs = 1, class = ct }
                                exprs:
521.                                ("Quit?")
522.                    assign (=)
                            lValue: lValue { varID = inputStr }
                            expr: call inputString { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = message }
524.                    call setTitle { #exprs = 1, class = ct }
                            exprs:
524.                            ("Title")
525.                    var title { vt = String, initExpr = "Title" }
526.                    call setTitle { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = title }
527.                    call setTitle { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = i }
                                    left: (+) { right = " " }
                                        left: lValue { varID = title }
528.                    call setTitle { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = d }
                                    left: lValue { varID = title }
529.                    call setHeight { #exprs = 1, class = ct }
                            exprs:
                                (/) { right = 16 }
                                    left: (*) { right = 9, left = 100.0 }
530.                    call setHeight { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = i }
531.                    call setHeight { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = d }
532.                    call setHeight { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: (*) { right = 4, left = 5 }
                                    left: (*)
                                        right: lValue { varID = d }
                                        left: lValue { varID = i }
533.                    var height { vt = double }
                            initExpr: call getHeight { class = ct }
534.                    assign (=)
                            lValue: lValue { varID = height }
                            expr: call getHeight { class = ct }
535.                    var width { vt = double }
                            initExpr: (-) { right = 10 }
                                left: (*) { right = 0.5 }
                                    left: call getWidth { class = ct }
536.                    assign (=)
                            lValue: lValue { varID = width }
                            expr: call getWidth { class = ct }
537.                    var pxPerUnit { vt = double }
                            initExpr: call getPixelsPerUnit { class = ct }
538.                    assign (=)
                            lValue: lValue { varID = pxPerUnit }
                            expr: call getPixelsPerUnit { class = ct }
539.                    var pixelWidth { vt = int }
                            initExpr: call round { #exprs = 1, class = ct }
                                exprs:
                                    (*)
                                        right: call getPixelsPerUnit { class = ct }
                                        left: call getWidth { class = ct }
540.                    var pixelHeight { vt = int }
                            initExpr: call round { #exprs = 1, class = ct }
                                exprs:
                                    (*)
                                        right: call getPixelsPerUnit { class = ct }
                                        left: call getHeight { class = ct }
541.                    var currentScreen { vt = String }
                            initExpr: call getScreen { class = ct }
542.                    assign (=)
                            lValue: lValue { varID = currentScreen }
                            expr: call getScreen { class = ct }
543.                    call clearScreen { class = ct }
544.                    call clearGroup { #exprs = 1, class = ct }
                            exprs:
544.                            ("targets")
545.                    call clearGroup { #exprs = 1, class = ct }
                            exprs:
545.                            ("")
546.                    call setBackColor { #exprs = 1, class = ct }
                            exprs:
546.                            ("orange")
547.                    call setBackColor { #exprs = 1, class = ct }
                            exprs:
547.                            ("light blue")
548.                    var backColor { vt = String, initExpr = "red" }
549.                    call setBackColor { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = backColor }
550.                    call setBackColorRGB { #exprs = 3, class = ct }
                            exprs:
550.                            (255)
550.                            (0)
550.                            (0)
551.                    call setBackColorRGB { #exprs = 3, class = ct }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
                                lValue { varID = i }
552.                    call setBackImage { #exprs = 1, class = ct }
                            exprs:
552.                            ("background.png")
553.                    call setBackImage { #exprs = 1, class = ct }
                            exprs:
553.                            ("C:\\Users\\ben\\Pictures\\landscape.jpg")
554.                    var filename { vt = String, initExpr = "landscape.png" }
555.                    call setBackImage { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = filename }
557.                    assign (=) { expr = 50 }
                            lValue: lValue { varID = x }
558.                    var y { vt = double, initExpr = 50 }
559.                    var diameter { vt = double, initExpr = 10 }
560.                    var circle { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
560.                                (50)
560.                                (20)
560.                                (10)
561.                    assign (=)
                            lValue: lValue { varID = circle }
                            expr: call circle { #exprs = 3, class = ct }
                                exprs:
561.                                (50.0)
561.                                (20.0)
561.                                (10.0)
562.                    assign (=)
                            lValue: lValue { varID = circle }
                            expr: call circle { #exprs = 4, class = ct }
                                exprs:
562.                                (50)
562.                                (20)
562.                                (10.5)
562.                                ("blue")
563.                    assign (=)
                            lValue: lValue { varID = circle }
                            expr: call circle { #exprs = 3, class = ct }
                                exprs:
                                    lValue { varID = x }
                                    lValue { varID = y }
                                    lValue { varID = diameter }
564.                    var color { vt = String, initExpr = "green" }
565.                    assign (=)
                            lValue: lValue { varID = circle }
                            expr: call circle { #exprs = 4, class = ct }
                                exprs:
                                    lValue { varID = x }
                                    lValue { varID = y }
                                    lValue { varID = diameter }
                                    lValue { varID = color }
566.                    var rect { vt = GameObj }
                            initExpr: call rect { #exprs = 4, class = ct }
                                exprs:
                                    lValue { varID = x }
                                    lValue { varID = y }
                                    lValue { varID = width }
                                    lValue { varID = height }
567.                    assign (=)
                            lValue: lValue { varID = rect }
                            expr: call rect { #exprs = 5, class = ct }
                                exprs:
                                    lValue { varID = x }
                                    lValue { varID = y }
                                    lValue { varID = width }
                                    lValue { varID = height }
                                    lValue { varID = color }
568.                    assign (=)
                            lValue: lValue { varID = rect }
                            expr: call rect { #exprs = 4, class = ct }
                                exprs:
568.                                (50.0)
568.                                (33.3)
568.                                (11.2)
568.                                (23.890)
569.                    assign (=)
                            lValue: lValue { varID = rect }
                            expr: call rect { #exprs = 5, class = ct }
                                exprs:
569.                                (50)
569.                                (33)
569.                                (11)
569.                                (23)
569.                                ("green")
570.                    var line { vt = GameObj }
                            initExpr: call line { #exprs = 4, class = ct }
                                exprs:
                                    lValue { varID = i }
                                    lValue { varID = d }
                                    lValue { varID = width }
                                    lValue { varID = height }
571.                    assign (=)
                            lValue: lValue { varID = line }
                            expr: call line { #exprs = 5, class = ct }
                                exprs:
                                    lValue { varID = x1 }
                                    lValue { varID = y1 }
                                    lValue { varID = x2 }
                                    lValue { varID = y2 }
                                    lValue { varID = color }
572.                    assign (=)
                            lValue: lValue { varID = line }
                            expr: call line { #exprs = 4, class = ct }
                                exprs:
572.                                (0.0)
572.                                (.0)
572.                                (100.0)
572.                                (95.0)
573.                    assign (=)
                            lValue: lValue { varID = line }
                            expr: call line { #exprs = 5, class = ct }
                                exprs:
573.                                (0)
573.                                (0)
573.                                (100)
573.                                (95)
573.                                ("red")
574.                    var text { vt = GameObj }
                            initExpr: call text { #exprs = 4, class = ct }
                                exprs:
                                    lValue { varID = s }
                                    lValue { varID = x }
                                    lValue { varID = y }
                                    lValue { varID = height }
575.                    assign (=)
                            lValue: lValue { varID = text }
                            expr: call text { #exprs = 5, class = ct }
                                exprs:
                                    lValue { varID = s }
                                    lValue { varID = x }
                                    lValue { varID = y }
                                    lValue { varID = height }
                                    lValue { varID = color }
576.                    assign (=)
                            lValue: lValue { varID = text }
                            expr: call text { #exprs = 4, class = ct }
                                exprs:
                                    (+) { left = "Score: " }
                                        right: lValue { varID = score }
576.                                (20.0)
576.                                (90.0)
576.                                (10.0)
577.                    assign (=)
                            lValue: lValue { varID = text }
                            expr: call text { #exprs = 5, class = ct }
                                exprs:
                                    (+) { left = "Score: " }
                                        right: lValue { varID = score }
577.                                (20)
577.                                (90)
577.                                (10)
577.                                ("purple")
578.                    var img { vt = GameObj }
                            initExpr: call image { #exprs = 4, class = ct }
                                exprs:
                                    lValue { varID = filename }
                                    lValue { varID = x }
                                    lValue { varID = y }
                                    lValue { varID = width }
579.                    assign (=)
                            lValue: lValue { varID = img }
                            expr: call image { #exprs = 4, class = ct }
                                exprs:
579.                                ("car.png")
579.                                (42)
579.                                (25)
579.                                (38.7)
580.                    assign (=)
                            lValue: lValue { varID = img }
                            expr: call image { #exprs = 4, class = ct }
                                exprs:
580.                                ("C:\\Users\\john\\Pictures\\car.jpg")
580.                                (42)
580.                                (25)
580.                                (38)
581.                    var objs { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 5 }
                                exprs:
                                    lValue { varID = circle }
                                    lValue { varID = rect }
                                    lValue { varID = line }
                                    lValue { varID = text }
                                    lValue { varID = img }
582.                    assign (=)
                            lValue: lValue { varID = img }
                            expr: lValue { varID = rect }
584.                    var mouseClicked { vt = boolean }
                            initExpr: call clicked { class = ct }
585.                    if
                            expr: call clicked { class = ct }
                            block: block { #stmts = 1 }
                                stmts:
586.                                assign (=)
                                        lValue: lValue { varID = mouseClicked }
                                        expr: call clicked { class = ct }
587.                    if
                            expr: (>) { right = 50 }
                                left: call clickX { class = ct }
                            block: block { #stmts = 1 }
                                stmts:
588.                                assign (=)
                                        lValue: lValue { varID = x }
                                        expr: call clickX { class = ct }
589.                    assign (=)
                            lValue: lValue { varID = x }
                            expr: call clickX { class = ct }
590.                    if
                            expr: (<=)
                                right: lValue { varID = x }
                                left: call clickY { class = ct }
                            block: block { #stmts = 1 }
                                stmts:
591.                                assign (=)
                                        lValue: lValue { varID = y }
                                        expr: call clickY { class = ct }
592.                    assign (=)
                            lValue: lValue { varID = y }
                            expr: call clickY { class = ct }
593.                    var keyName { vt = String, initExpr = "space" }
594.                    var keyPressed { vt = boolean }
                            initExpr: call keyPressed { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = keyName }
595.                    if
                            expr: call keyPressed { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = keyName }
                            block: block { #stmts = 1 }
                                stmts:
596.                                if
                                        expr: call keyPressed { #exprs = 1, class = ct }
                                            exprs:
596.                                            ("up")
                                        block: block { #stmts = 1 }
                                            stmts:
597.                                            assign (=)
                                                    lValue: lValue { varID = keyPressed }
                                                    expr: call keyPressed { #exprs = 1, class = ct }
                                                        exprs:
597.                                                        ("up")
598.                    if
                            expr: call charTyped { #exprs = 1, class = ct }
                                exprs:
598.                                ("+")
                            block: block { #stmts = 1 }
                                stmts:
599.                                assign (++)
                                        lValue: lValue { varID = x }
600.                    var ch { vt = String, initExpr = "+" }
601.                    if
                            expr: call charTyped { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = ch }
                            block: block { #stmts = 1 }
                                stmts:
602.                                assign (=)
                                        lValue: lValue { varID = b }
                                        expr: call charTyped { #exprs = 1, class = ct }
                                            exprs:
602.                                            ("+")
603.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call charTyped { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = ch }
605.                    call loadSound { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = filename }
606.                    call loadSound { #exprs = 1, class = ct }
                            exprs:
606.                            ("pow.wav")
607.                    if
                            expr: lValue { varID = b }
                            block: block { #stmts = 1 }
                                stmts:
608.                                call sound { #exprs = 1, class = ct }
                                        exprs:
608.                                        ("sounds/ding.mp3")
609.                    call sound { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = filename }
610.                    call setSoundVolume { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = d }
611.                    call setSoundVolume { #exprs = 1, class = ct }
                            exprs:
611.                            (1)
612.                    call setSoundVolume { #exprs = 1, class = ct }
                            exprs:
612.                            (0.5)
614.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call random { #exprs = 2, class = ct }
                                exprs:
                                    lValue { varID = i }
                                    lValue { varID = i }
615.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call random { #exprs = 2, class = ct }
                                exprs:
615.                                (0)
615.                                (100)
616.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call round { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = d }
617.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call round { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = i }
618.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call round { #exprs = 1, class = ct }
                                exprs:
618.                                (1.62)
619.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call round { #exprs = 1, class = ct }
                                exprs:
                                    (*)
                                        right: lValue { varID = i }
                                        left: lValue { varID = d }
620.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call round { #exprs = 1, class = ct }
                                exprs:
                                    (+) { left = 1 }
                                        right: (*)
                                            right: lValue { varID = i }
                                            left: lValue { varID = d }
621.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call round { #exprs = 1, class = ct }
                                exprs:
                                    call distance { #exprs = 4, class = ct }
                                        exprs:
                                            lValue { varID = x1 }
                                            lValue { varID = y1 }
                                            lValue { varID = x2 }
                                            lValue { varID = y2 }
622.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call roundDecimal { #exprs = 2, class = ct }
                                exprs:
                                    lValue { varID = d }
                                    lValue { varID = i }
623.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call roundDecimal { #exprs = 2, class = ct }
                                exprs:
                                    (+) { right = 1 }
                                        left: (*)
                                            right: lValue { varID = i }
                                            left: lValue { varID = d }
                                    (*) { right = 2 }
                                        left: lValue { varID = i }
624.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call roundDecimal { #exprs = 2, class = ct }
                                exprs:
624.                                (2.71828182846)
624.                                (2)
625.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call roundDecimal { #exprs = 2, class = ct }
                                exprs:
                                    call distance { #exprs = 4, class = ct }
                                        exprs:
                                            lValue { varID = x1 }
                                            lValue { varID = y1 }
                                            lValue { varID = x2 }
                                            lValue { varID = y2 }
625.                                (1)
626.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call intDiv { #exprs = 2, class = ct }
                                exprs:
                                    lValue { varID = i }
                                    lValue { varID = i }
627.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call intDiv { #exprs = 2, class = ct }
                                exprs:
627.                                (5)
627.                                (2)
628.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call isError { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = d }
629.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call isError { #exprs = 1, class = ct }
                                exprs:
                                    (/)
                                        right: lValue { varID = d }
                                        left: lValue { varID = d }
630.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call isError { #exprs = 1, class = ct }
                                exprs:
                                    (/)
                                        right: lValue { varID = i }
                                        left: lValue { varID = d }
631.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call isError { #exprs = 1, class = ct }
                                exprs:
                                    (/) { right = 0, left = 0.0 }
632.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call distance { #exprs = 4, class = ct }
                                exprs:
                                    lValue { varID = circle, fieldID = x }
                                    lValue { varID = circle, fieldID = y }
                                    lValue { varID = rect, fieldID = x }
                                    lValue { varID = rect, fieldID = y }
633.                    if
                            expr: (<)
                                right: (/) { right = 2 }
                                    left: parens
                                        expr: call getWidth
                                            lValue: lValue { varID = circle }
                                left: call distance { #exprs = 4, class = ct }
                                    exprs:
                                        lValue { varID = circle, fieldID = x }
                                        lValue { varID = circle, fieldID = y }
                                        lValue { varID = rect, fieldID = x }
                                        lValue { varID = rect, fieldID = y }
                            block: block { #stmts = 1 }
                                stmts:
634.                                assign (=)
                                        lValue: lValue { varID = i }
                                        expr: call getTimer { class = ct }
635.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (-)
                                right: lValue { varID = i }
                                left: call getTimer { class = ct }
636.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call getVersion { class = ct }
637.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call round { #exprs = 1, class = ct }
                                exprs:
                                    call getVersion { class = ct }
639.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: cast { vtCast = 0 }
                                expr: lValue { varID = d }
640.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: cast { vtCast = 0 }
                                expr: parens
                                    expr: (*)
                                        right: lValue { varID = i }
                                        left: lValue { varID = d }
641.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: cast { expr = .707, vtCast = 0 }
642.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: cast { vtCast = 0 }
                                expr: staticField { fieldID = PI, class = Math }
643.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (/)
                                right: lValue { varID = i }
                                left: cast { vtCast = 1 }
                                    expr: lValue { varID = i }
644.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call parseInt { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = s }
645.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call parseInt { #exprs = 1, class = ct }
                                exprs:
645.                                ("345")
646.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call canParseInt { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = s }
647.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call canParseInt { #exprs = 1, class = ct }
                                exprs:
647.                                ("12345")
648.                    while
                            expr: call canParseInt { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = s }
                            block: block { #stmts = 1 }
                                stmts:
649.                                assign (=)
                                        lValue: lValue { varID = d }
                                        expr: call parseNumber { #exprs = 1, class = ct }
                                            exprs:
                                                lValue { varID = s }
650.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (*) { right = 100 }
                                left: call parseNumber { #exprs = 1, class = ct }
                                    exprs:
650.                                    ("123.45")
651.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call canParseNumber { #exprs = 1, class = ct }
                                exprs:
651.                                ("543.210")
652.                    while
                            expr: call canParseNumber { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = s }
                            block: block { #stmts = 1 }
                                stmts:
653.                                assign (=)
                                        lValue: lValue { varID = s }
                                        expr: call formatDecimal { #exprs = 1, class = ct }
                                            exprs:
                                                lValue { varID = d }
654.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: call formatDecimal { #exprs = 2, class = ct }
                                exprs:
                                    lValue { varID = d }
                                    lValue { varID = i }
655.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: call formatDecimal { #exprs = 2, class = ct }
                                exprs:
                                    lValue { varID = d }
                                    call intDiv { #exprs = 2, class = ct }
                                        exprs:
                                            (*) { left = 2 }
                                                right: lValue { varID = i }
                                            lValue { varID = i }
656.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: (+) { right = ":00" }
                                left: call formatDecimal { #exprs = 2, class = ct }
                                    exprs:
656.                                    (6.0221)
656.                                    (7)
657.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: call formatInt { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = i }
658.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: call formatInt { #exprs = 2, class = ct }
                                exprs:
                                    (+) { right = 1 }
                                        left: lValue { varID = i }
                                    (+)
                                        right: lValue { varID = k }
                                        left: lValue { varID = j }
660.                    assign (=) { expr = 3 }
                            lValue: lValue { varID = img, fieldID = x }
661.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: (-) { right = 10 }
                                left: lValue { varID = circle, fieldID = y }
662.                    assign (=) { expr = false }
                            lValue: lValue { varID = rect, fieldID = visible }
663.                    assign (=)
                            lValue: lValue { varID = circle, fieldID = visible }
                            expr: lValue { varID = rect, fieldID = visible }
664.                    assign (=)
                            lValue: lValue { varID = line, fieldID = group }
                            expr: lValue { varID = s }
665.                    assign (=) { expr = "dots" }
                            lValue: lValue { varID = circle, fieldID = group }
666.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = group }
                            expr: lValue { varID = circle, fieldID = group }
667.                    assign (=)
                            lValue: lValue { varID = line, fieldID = visible }
                            expr: (||)
                                right: (&&)
                                    right: (==) { right = 1 }
                                        left: call indexOf { #exprs = 1 }
                                            lValue: lValue { varID = s }
                                            exprs:
                                                lValue { varID = line, fieldID = group }
                                    left: call equals { #exprs = 1 }
                                        lValue: lValue { varID = s }
                                        exprs:
667.                                        ("world")
                                left: call equals { #exprs = 1 }
                                    lValue: lValue { varID = s }
                                    exprs:
667.                                    ("hello")
669.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: call getType
                                lValue: lValue { varID = rect }
670.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { right = "more text" }
                                    left: call getText
                                        lValue: lValue { varID = text }
671.                    call setText { #exprs = 1 }
                            lValue: lValue { varID = img }
                            exprs:
671.                            ("racecar.png")
672.                    call setText { #exprs = 1 }
                            lValue: lValue { varID = text }
                            exprs:
                                (+) { left = "Score: " }
                                    right: lValue { varID = d }
673.                    call setText { #exprs = 1 }
                            lValue: lValue { varID = text }
                            exprs:
                                (+) { left = "Score: " }
                                    right: lValue { varID = i }
674.                    call log { #exprs = 1, class = ct }
                            exprs:
                                call toString
                                    lValue: lValue { varID = line }
675.                    call setSize { #exprs = 2 }
                            lValue: lValue { varID = img }
                            exprs:
                                (*) { right = 1.1 }
                                    left: call getWidth
                                        lValue: lValue { varID = img }
                                (*) { right = 1.1 }
                                    left: call getHeight
                                        lValue: lValue { varID = img }
676.                    call setSize { #exprs = 2 }
                            lValue: lValue { varID = rect }
                            exprs:
676.                            (10)
676.                            (30)
677.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call getHeight
                                lValue: lValue { varID = img }
678.                    call setYSpeed { #exprs = 1 }
                            lValue: lValue { varID = circle }
                            exprs:
                                (+) { right = 3 }
                                    left: call getYSpeed
                                        lValue: lValue { varID = circle }
679.                    call setXSpeed { #exprs = 1 }
                            lValue: lValue { varID = rect }
                            exprs:
                                call getXSpeed
                                    lValue: lValue { varID = circle }
680.                    call align { #exprs = 1 }
                            lValue: lValue { varID = text }
                            exprs:
                                lValue { varID = s }
681.                    call align { #exprs = 1 }
                            lValue: lValue { varID = text }
                            exprs:
681.                            ("left")
682.                    call align { #exprs = 1 }
                            lValue: lValue { varID = text }
                            exprs:
682.                            ("right")
683.                    call setFillColor { #exprs = 1 }
                            lValue: lValue { varID = circle }
                            exprs:
                                (+) { left = "light" }
                                    right: lValue { varID = s }
684.                    call setFillColor { #exprs = 1 }
                            lValue: lValue { varID = circle }
                            exprs:
                                call getText
                                    lValue: lValue { varID = text }
685.                    call setFillColorRGB { #exprs = 3 }
                            lValue: lValue { varID = circle }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = j }
                                lValue { varID = k }
686.                    call setLineColor { #exprs = 1 }
                            lValue: lValue { varID = rect }
                            exprs:
                                lValue { varID = colors }
                                    indexExpr: lValue { varID = i }
687.                    call setLineColorRGB { #exprs = 3 }
                            lValue: lValue { varID = rect }
                            exprs:
                                lValue { varID = i }
                                (-) { left = 255 }
                                    right: lValue { varID = i }
687.                            (0)
688.                    call setLineWidth { #exprs = 1 }
                            lValue: lValue { varID = line }
                            exprs:
                                lValue { varID = i }
689.                    call setLineWidth { #exprs = 1 }
                            lValue: lValue { varID = line }
                            exprs:
689.                            (3)
690.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call getLayer
                                lValue: lValue { varID = rect }
691.                    if
                            expr: (>=)
                                right: call getLayer
                                    lValue: lValue { varID = circle }
                                left: call getLayer
                                    lValue: lValue { varID = rect }
                            block: block { #stmts = 1 }
                                stmts:
692.                                assign (=)
                                        lValue: lValue { varID = b }
                                        expr: call equals { #exprs = 1 }
                                            lValue: lValue { varID = colors }
                                                indexExpr: call getLayer
                                                    lValue: lValue { varID = rect }
                                            exprs:
692.                                            ("green")
693.                    call setLayer { #exprs = 1 }
                            lValue: lValue { varID = img }
                            exprs:
                                unaryOp (neg) { expr = 42 }
694.                    call delete
                            lValue: lValue { varID = img }
695.                    call setClickable { #exprs = 1 }
                            lValue: lValue { varID = img }
                            exprs:
695.                            (true)
696.                    call setClickable { #exprs = 1 }
                            lValue: lValue { varID = circle }
                            exprs:
696.                            (false)
697.                    call setClickable { #exprs = 1 }
                            lValue: lValue { varID = rect }
                            exprs:
                                (>) { right = 0 }
                                    left: lValue { varID = rect, fieldID = x }
698.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call clicked
                                lValue: lValue { varID = img }
699.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call containsPoint { #exprs = 2 }
                                lValue: lValue { varID = img }
                                exprs:
                                    call clickX { class = ct }
                                    call clickY { class = ct }
700.                    if
                            expr: call containsPoint { #exprs = 2 }
                                lValue: lValue { varID = img }
                                exprs:
                                    call clickX { class = ct }
                                    call clickY { class = ct }
                            block: block { #stmts = 1 }
                                stmts:
701.                                while
                                        expr: call hit { #exprs = 1 }
                                            lValue: lValue { varID = img }
                                            exprs:
                                                lValue { varID = rect }
                                        block: block { #stmts = 1 }
                                            stmts:
702.                                            assign (=)
                                                    lValue: lValue { varID = b }
                                                    expr: (==) { right = true }
                                                        left: call hit { #exprs = 1 }
                                                            lValue: lValue { varID = img }
                                                            exprs:
                                                                lValue { varID = rect }
704.                    var e { vt = double }
                            initExpr: staticField { fieldID = E, class = Math }
705.                    var pi { vt = double }
                            initExpr: staticField { fieldID = PI, class = Math }
706.                    if
                            expr: (<)
                                right: lValue { varID = eps }
                                left: call abs { #exprs = 1, class = Math }
                                    exprs:
                                        (-)
                                            right: lValue { varID = img, fieldID = x }
                                            left: lValue { varID = rect, fieldID = x }
                            block: block { #stmts = 1 }
                                stmts:
707.                                assign (=)
                                        lValue: lValue { varID = i }
                                        expr: call abs { #exprs = 1, class = Math }
                                            exprs:
                                                lValue { varID = i }
708.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call acos { #exprs = 1, class = Math }
                                exprs:
                                    unaryOp (neg) { expr = 0.5 }
709.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call asin { #exprs = 1, class = Math }
                                exprs:
                                    (/) { right = 2 }
                                        left: call sqrt { #exprs = 1, class = Math }
                                            exprs:
709.                                            (3)
710.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call atan { #exprs = 1, class = Math }
                                exprs:
                                    (/) { left = 1 }
                                        right: call sqrt { #exprs = 1, class = Math }
                                            exprs:
710.                                            (2)
711.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call atan2 { #exprs = 2, class = Math }
                                exprs:
                                    (-)
                                        right: lValue { varID = img, fieldID = x }
                                        left: call clickX { class = ct }
                                    (-)
                                        right: lValue { varID = img, fieldID = y }
                                        left: call clickY { class = ct }
712.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call ceil { #exprs = 1, class = Math }
                                exprs:
                                    lValue { varID = d }
713.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call cos { #exprs = 1, class = Math }
                                exprs:
                                    (/) { right = 2 }
                                        left: staticField { fieldID = PI, class = Math }
714.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call cosh { #exprs = 1, class = Math }
                                exprs:
                                    (*) { right = 2 }
                                        left: staticField { fieldID = PI, class = Math }
715.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call exp { #exprs = 1, class = Math }
                                exprs:
                                    (+) { right = 1 }
                                        left: (*) { left = 2 }
                                            right: staticField { fieldID = PI, class = Math }
716.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call floor { #exprs = 1, class = Math }
                                exprs:
                                    unaryOp (neg) { expr = 1.67 }
717.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call log { #exprs = 1, class = Math }
                                exprs:
717.                                (32)
718.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call log10 { #exprs = 1, class = Math }
                                exprs:
                                    lValue { varID = d }
719.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call max { #exprs = 2, class = Math }
                                exprs:
                                    lValue { varID = d }
                                    lValue { varID = d }
720.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call max { #exprs = 2, class = Math }
                                exprs:
                                    lValue { varID = i }
                                    lValue { varID = i }
721.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call min { #exprs = 2, class = Math }
                                exprs:
                                    lValue { varID = d }
                                    lValue { varID = d }
722.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call min { #exprs = 2, class = Math }
                                exprs:
                                    lValue { varID = i }
                                    lValue { varID = i }
723.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call pow { #exprs = 2, class = Math }
                                exprs:
                                    lValue { varID = d }
                                    lValue { varID = d }
724.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call sin { #exprs = 1, class = Math }
                                exprs:
                                    lValue { varID = d }
725.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call sinh { #exprs = 1, class = Math }
                                exprs:
                                    lValue { varID = d }
726.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call sqrt { #exprs = 1, class = Math }
                                exprs:
                                    lValue { varID = d }
727.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call tan { #exprs = 1, class = Math }
                                exprs:
                                    lValue { varID = d }
728.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call tanh { #exprs = 1, class = Math }
                                exprs:
                                    lValue { varID = d }
730.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call compareTo { #exprs = 1 }
                                lValue: lValue { varID = s }
                                exprs:
                                    lValue { varID = s }
731.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call equals { #exprs = 1 }
                                lValue: lValue { varID = s }
                                exprs:
                                    lValue { varID = s }
732.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call indexOf { #exprs = 1 }
                                lValue: lValue { varID = s }
                                exprs:
                                    lValue { varID = s }
733.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call length
                                lValue: lValue { varID = s }
734.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: call substring { #exprs = 1 }
                                lValue: lValue { varID = s }
                                exprs:
                                    lValue { varID = i }
735.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: call toLowerCase
                                lValue: lValue { varID = s }
736.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: call toUpperCase
                                lValue: lValue { varID = s }
737.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: call trim
                                lValue: lValue { varID = s }
739.                    var coins { vt = array of GameObj }
740.                    var walls { vt = array of GameObj }
741.                    var multilineArrayInit { vt = array of int }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
741.                                (1)
742.                                (2)
743.                                (3)
744.                    call log { #exprs = 3, class = ct }
                            exprs:
744.                            (1)
745.                            (2)
746.                            (3)
747.                    if
                            expr: (==) { right = 1 }
                                left: call random { #exprs = 2, class = ct }
                                    exprs:
747.                                    (1)
747.                                    (2)
                            block: block { #stmts = 1 }
                                stmts:
749.                                call println { #exprs = 1, class = ct }
                                        exprs:
749.                                        ("heads")
750.                    call log { #exprs = 4, class = ct }
                            exprs:
750.                            (1)
                                call random { #exprs = 2, class = ct }
                                    exprs:
750.                                    (1)
751.                                    (100)
752.                            (3)
752.                            (4)
753.                    return { expr = 0 }
767.        func update { #paramVars = 0, vt = void }
                block: block { iLineEnd = 771, #stmts = 1, iLineBegin = 768 }
                    stmts:
770.                    return { expr = 0 }
773.        func fooBad { #paramVars = 1, isError = true, vt = double }
                paramVars:
773.                var i { vt = int, isGlobal = false }
                block: block { iLineEnd = 776, #stmts = 1, iLineBegin = 774 }
                    stmts:
775.                    return { expr = 0 }
778.        func bar { #paramVars = 2, vt = boolean }
                paramVars:
778.                var s { vt = String, isGlobal = false }
778.                var gameObj { vt = GameObj, isGlobal = false }
                block: block { iLineEnd = 782, #stmts = 1, iLineBegin = 779 }
                    stmts:
781.                    return
                            expr: lValue { varID = TRUE }
784.        func Double { #paramVars = 1, vt = int }
                paramVars:
784.                var x { vt = int, isGlobal = false }
                block: block { iLineEnd = 787, #stmts = 1, iLineBegin = 785 }
                    stmts:
786.                    return
                            expr: (*) { left = 2 }
                                right: lValue { varID = x }
790.        func voidFunc { #paramVars = 1, vt = void }
                paramVars:
790.                var i { vt = int, isGlobal = false }
                block: block { iLineEnd = 792, #stmts = 0, iLineBegin = 791 }
793.        func func { #paramVars = 0, vt = void }
                block: block { iLineEnd = 795, #stmts = 0, iLineBegin = 794 }
797.        func FUNC { #paramVars = 0, vt = void }
                block: block { iLineEnd = 799, #stmts = 0, iLineBegin = 798 }
801.        func AnotherFunc { #paramVars = 0, vt = void }
                block: block { iLineEnd = 803, #stmts = 0, iLineBegin = 802 }
805.        func anotherfunc { #paramVars = 0, vt = void }
                block: block { iLineEnd = 807, #stmts = 0, iLineBegin = 806 }
809.        func expectedErrors { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1644, #stmts = 282, iLineBegin = 810 }
                    stmts:
811.                    var intVar { vt = int, initExpr = 1 }
812.                    var dblVar { vt = double, initExpr = 1.0 }
813.                    var boolVar { vt = boolean, initExpr = false }
814.                    var strVar { vt = String, initExpr = "a" }
815.                    var objVar { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
815.                                (0)
815.                                (0)
815.                                (10)
816.                    var intArr { vt = array of int }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
816.                                (1)
816.                                (2)
816.                                (3)
817.                    var objArr { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 1 }
                                exprs:
                                    lValue { varID = objVar }
820.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: call setText { #exprs = 1 }
                                lValue: lValue { varID = objVar }
                                exprs:
820.                                ("circle")
822.                    var screen { vt = double }
                            initExpr: call setScreen { #exprs = 1, class = ct }
                                exprs:
822.                                ("menu")
824.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call setHeight { #exprs = 1, class = ct }
                                exprs:
824.                                (150)
826.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: call voidFunc
828.                    var title { vt = GameObj }
                            initExpr: call setTitle { #exprs = 1, class = ct }
                                exprs:
828.                                ("title")
831.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: lValue { varID = intVar }
833.                    var b { vt = boolean }
                            initExpr: call intFuncInt { #exprs = 1 }
                                exprs:
833.                                (2)
835.                    assign (=) { expr = 0 }
                            lValue: lValue { varID = objVar, fieldID = visible }
837.                    var s { vt = String }
                            initExpr: lValue { varID = intVar }
839.                    assign (=)
                            lValue: lValue { varID = objVar }
                            expr: lValue { varID = intVar }
842.                    var i { vt = int, initExpr = 3.4 }
844.                    assign (=) { expr = 1.2 }
                            lValue: lValue { varID = i }
846.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (*) { right = 3.4, left = 10 }
848.                    var j { vt = int }
                            initExpr: (+) { right = 3.14, left = 5 }
850.                    var plancksConst { vt = int, initExpr = 6.62e-34 }
852.                    var exponentialNumberNoDot { vt = int, initExpr = 12e10 }
854.                    var exponentialNumberWithDot { vt = int, initExpr = 3.42e2 }
856.                    assign (=)
                            lValue: lValue { varID = objVar, fieldID = visible }
                            expr: lValue { varID = dblVar }
858.                    assign (=) { expr = 3.14 }
                            lValue: lValue { varID = strVar }
860.                    assign (=)
                            lValue: lValue { varID = objVar }
                            expr: lValue { varID = dblVar }
863.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: call clicked { class = ct }
865.                    assign (=)
                            lValue: lValue { varID = objVar, fieldID = x }
                            expr: lValue { varID = boolVar }
867.                    assign (=) { expr = false }
                            lValue: lValue { varID = objVar, fieldID = x }
869.                    assign (=)
                            lValue: lValue { varID = objVar, fieldID = group }
                            expr: lValue { varID = boolVar }
871.                    assign (=)
                            lValue: lValue { varID = objVar }
                            expr: lValue { varID = boolVar }
874.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = objVar, fieldID = group }
876.                    assign (=) { expr = "fast" }
                            lValue: lValue { varID = objVar, fieldID = y }
878.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: lValue { varID = strVar }
880.                    var score { vt = GameObj, initExpr = "100 pts" }
883.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = objVar }
885.                    assign (=)
                            lValue: lValue { varID = objVar, fieldID = x }
                            expr: lValue { varID = objVar }
887.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: lValue { varID = objVar }
889.                    var circleStr { vt = String }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
889.                                (0)
889.                                (0)
889.                                (10)
892.                    var y { vt = int }
                            initExpr: call intFuncInt { #exprs = 1 }
                                exprs:
892.                                (2.3)
894.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: call random { #exprs = 2, class = ct }
                                exprs:
894.                                (0.0)
894.                                (10)
896.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: call random { #exprs = 2, class = ct }
                                exprs:
896.                                (0)
896.                                (false)
898.                    call setBackColorRGB { #exprs = 3, class = ct }
                            exprs:
898.                            ("red")
898.                            (0)
898.                            (0)
900.                    call setLayer { #exprs = 1 }
                            lValue: lValue { varID = objVar }
                            exprs:
900.                            ("front")
902.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: call roundDecimal { #exprs = 2, class = ct }
                                exprs:
902.                                (3.14159)
                                    lValue { varID = objVar }
904.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: call substring { #exprs = 1 }
                                lValue: lValue { varID = strVar }
                                exprs:
                                    lValue { varID = objVar }
907.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: call pow { #exprs = 2, class = Math }
                                exprs:
                                    lValue { varID = boolVar }
907.                                (3)
909.                    assign (=)
                            lValue: lValue { varID = dlbVar }
                            expr: call dblFuncIntDbl { #exprs = 2 }
                                exprs:
909.                                (0)
909.                                ("pi")
911.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call containsPoint { #exprs = 2 }
                                lValue: lValue { varID = objVar }
                                exprs:
                                    lValue { varID = strVar }
                                    lValue { varID = dblVar }
913.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: call exp { #exprs = 1, class = Math }
                                exprs:
                                    lValue { varID = objVar }
916.                    call align { #exprs = 2 }
                            lValue: lValue { varID = objVar }
                            exprs:
916.                            ("left")
916.                            (0)
918.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call boolFuncBoolStringGameObj { #exprs = 3 }
                                exprs:
                                    lValue { varID = dblVar }
                                    lValue { varID = strVar }
                                    lValue { varID = objVar }
920.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call boolFuncBoolStringGameObj { #exprs = 3 }
                                exprs:
                                    lValue { varID = strVar }
                                    lValue { varID = objVar }
                                    lValue { varID = boolVar }
922.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call boolFuncBoolStringGameObj { #exprs = 3 }
                                exprs:
                                    lValue { varID = objVar }
                                    lValue { varID = strVar }
                                    lValue { varID = boolVar }
925.                    call align { #exprs = 1 }
                            lValue: lValue { varID = objVar }
                            exprs:
                                lValue { varID = intVar }
927.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: call parseInt { #exprs = 1, class = ct }
                                exprs:
927.                                (123)
929.                    call circle { #exprs = 4, class = ct }
                            exprs:
929.                            (0)
929.                            (0)
929.                            (1)
929.                            (1)
931.                    call setText { #exprs = 1 }
                            lValue: lValue { varID = objVar }
                            exprs:
931.                            (1)
933.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call canParseInt { #exprs = 1, class = ct }
                                exprs:
933.                                (1.0)
935.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call canParseInt { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = boolVar }
937.                    call align { #exprs = 1 }
                            lValue: lValue { varID = objVar }
                            exprs:
937.                            (true)
939.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call equals { #exprs = 1 }
                                lValue: lValue { varID = strVar }
                                exprs:
                                    lValue { varID = objVar }
942.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call boolFuncBoolStringGameObj { #exprs = 3 }
                                exprs:
                                    lValue { varID = boolVar }
                                    lValue { varID = strVar }
942.                                (42)
944.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call hit { #exprs = 1 }
                                lValue: lValue { varID = objVar }
                                exprs:
944.                                (0.0)
946.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call hit { #exprs = 1 }
                                lValue: lValue { varID = objVar }
                                exprs:
946.                                (false)
948.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call hit { #exprs = 1 }
                                lValue: lValue { varID = objVar }
                                exprs:
948.                                ("the wall")
951.                    if
                            expr: (>) { right = 0 }
                                left: call intFuncInt
                            block: block { #stmts = 1 }
                                stmts:
952.                                call voidFunc
954.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: call dblFuncIntDbl
956.                    call circle { class = ct }
958.                    call rect { #exprs = 3, class = ct }
                            exprs:
958.                            (0)
958.                            (0)
958.                            (10)
960.                    call circle { #exprs = 2, class = ct }
                            exprs:
960.                            (0)
960.                            (0)
962.                    call voidFunc { #exprs = 1 }
                            exprs:
962.                            (1)
964.                    call setBackColor { #exprs = 3, class = ct }
                            exprs:
964.                            (255)
964.                            (0)
964.                            (0)
966.                    call delete { #exprs = 1 }
                            lValue: lValue { varID = objVar }
                            exprs:
966.                            (true)
968.                    call setText { #exprs = 2 }
                            lValue: lValue { varID = objVar }
                            exprs:
968.                            ("circle")
968.                            ("green")
971.                    var k { vt = int }
                            initExpr: (/) { right = 2, left = 3 }
973.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: call random { #exprs = 2, class = ct }
                                exprs:
                                    (/)
                                        right: lValue { varID = intVar }
                                        left: lValue { varID = intVar }
                                    lValue { varID = intVar }
975.                    assign (=)
                            lValue: lValue { varID = x }
                            expr: (+) { right = 1 }
                                left: lValue { varID = x }
977.                    for
                            expr: (<) { right = 1 }
                                left: lValue { varID = x }
977.                        initStmt: assign (=) { expr = 0 }
                                lValue: lValue { varID = x }
                            block: block { #stmts = 1 }
                                stmts:
978.                                call voidFunc
977.                        nextStmt: assign (++)
                                lValue: lValue { varID = x }
980.                    call foo
982.                    var j { vt = int, initExpr = 3 }
984.                    var uninitializedVar { vt = int }
986.                    if
                            expr: (<) { right = 0 }
                                left: lValue { varID = uninitializedVar }
                            block: block { #stmts = 1 }
                                stmts:
987.                                assign (=) { expr = 0 }
                                        lValue: lValue { varID = uninitializedVar }
988.                    var g { vt = GameObj }
990.                    assign (=) { expr = 1 }
                            lValue: lValue { varID = g, fieldID = xSpeed }
997.                    var r { vt = GameObj }
                            initExpr: call rectangle { #exprs = 4, class = ct }
                                exprs:
997.                                (0)
997.                                (0)
997.                                (10)
997.                                (10)
999.                    assign (=) { expr = false }
                            lValue: lValue { varID = objVar, fieldID = isVisible }
1001.                    call foo
                            lValue: lValue { varID = objVar }
1008.                    call Circle { #exprs = 3, class = ct }
                            exprs:
1008.                            (0)
1008.                            (0)
1008.                            (10)
1010.                    call atan2 { #exprs = 2 }
                            lValue: lValue { varID = math }
                            exprs:
                                (-)
                                    right: lValue { varID = r, fieldID = x }
                                    left: call clickX { class = ct }
                                (-)
                                    right: lValue { varID = r, fieldID = y }
                                    left: call clickY { class = ct }
1012.                    call voidfunC
1014.                    assign (=) { expr = 2 }
                            lValue: lValue { varID = intvar }
1017.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: lValue { varID = Null }
1019.                    assign (=)
                            lValue: lValue { varID = objVar }
                            expr: lValue { varID = NULL }
1021.                    while
                            expr: lValue { varID = True }
                            block: block { #stmts = 1 }
                                stmts:
1022.                                call voidFunc
1024.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: lValue { varID = TRUE }
1026.                    if
                            expr: lValue { varID = False }
                            block: block { #stmts = 1 }
                                stmts:
1027.                                call voidFunc
1029.                    assign (=)
                            lValue: lValue { varID = objVar, fieldID = clickable }
                            expr: lValue { varID = FALSE }
1032.                    if
                            expr: (=) { right = 0 }
                                left: lValue { varID = i }
                            block: block { #stmts = 1 }
                                stmts:
1033.                                assign (=) { expr = 0 }
                                        lValue: lValue { varID = i }
1035.                    var intArr2 { vt = array of int }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
1035.                                (1)
1035.                                (2)
1035.                                (3.14)
1037.                    var dblArr { vt = array of double }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
1037.                                (1)
1037.                                ("two")
1037.                                (3.14)
1039.                    var strArr { vt = array of String }
                            initExpr: newArray { vtElement = "GameObj", lengthExpr = 100 }
1041.                    var boolArr { vt = array of boolean }
                            initExpr: call intArrFuncInt { #exprs = 1 }
                                exprs:
1041.                                (10)
1043.                    assign (=)
                            lValue: lValue { varID = intArr }
                            expr: newArray { vtElement = 0, lengthExpr = 1.5 }
1046.                    assign (++)
                            lValue: lValue { varID = boolVar }
1048.                    assign (++)
                            lValue: lValue { varID = strVar }
1050.                    assign (++)
                            lValue: lValue { varID = objVar }
1052.                    assign (--)
                            lValue: lValue { varID = boolVar }
1054.                    assign (--)
                            lValue: lValue { varID = strVar }
1056.                    assign (--)
                            lValue: lValue { varID = objVar }
1059.                    forArray
1059.                        var: var x { vt = int, isGlobal = false }
                            expr: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
1060.                                call voidFunc
1062.                    forArray
1062.                        var: var x { vt = double, isGlobal = false }
                            expr: lValue { varID = dblVar }
                            block: block { #stmts = 1 }
                                stmts:
1063.                                call voidFunc
1065.                    forArray
1065.                        var: var x { vt = boolean, isGlobal = false }
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
1066.                                call voidFunc
1068.                    forArray
1068.                        var: var x { vt = String, isGlobal = false }
                            expr: lValue { varID = strVar }
                            block: block { #stmts = 1 }
                                stmts:
1069.                                call voidFunc
1071.                    forArray
1071.                        var: var x { vt = GameObj, isGlobal = false }
                            expr: lValue { varID = objVar }
                            block: block { #stmts = 1 }
                                stmts:
1072.                                call voidFunc
1074.                    forArray
1074.                        var: var x { vt = GameObj, isGlobal = false }
                            expr: lValue { varID = strVar }
                            block: block { #stmts = 1 }
                                stmts:
1075.                                call voidFunc
1078.                    forArray
1078.                        var: var x { vt = double, isGlobal = false }
                            expr: lValue { varID = intArr }
                            block: block { #stmts = 1 }
                                stmts:
1079.                                call voidFunc
1081.                    forArray
1081.                        var: var x { vt = String, isGlobal = false }
                            expr: lValue { varID = objArr }
                            block: block { #stmts = 1 }
                                stmts:
1082.                                call voidFunc
1085.                    for
                            expr: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
1086.                                call voidFunc
1088.                    for
                            expr: lValue { varID = dblVar }
                            block: block { #stmts = 1 }
                                stmts:
1089.                                call voidFunc
1091.                    for
                            expr: lValue { varID = strVar }
                            block: block { #stmts = 1 }
                                stmts:
1092.                                call voidFunc
1094.                    for
                            expr: lValue { varID = objVar }
                            block: block { #stmts = 1 }
                                stmts:
1095.                                call voidFunc
1097.                    doWhile { iLineWhile = 1100 }
                            expr: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
1098.                                call voidFunc
1103.                    while
                            expr: lValue { varID = dblVar }
                            block: block { #stmts = 1 }
                                stmts:
1104.                                call voidFunc
1106.                    while
                            expr: lValue { varID = strVar }
                            block: block { #stmts = 1 }
                                stmts:
1107.                                call voidFunc
1109.                    while
                            expr: lValue { varID = objVar }
                            block: block { #stmts = 1 }
                                stmts:
1110.                                call voidFunc
1113.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
1116.                                if
                                        expr: lValue { varID = intVar }
                                        block: block { #stmts = 1 }
                                            stmts:
1117.                                            call voidFunc
                            expr: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
1114.                                call voidFunc
1119.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
1122.                                if
                                        expr: lValue { varID = dblVar }
                                        block: block { #stmts = 1 }
                                            stmts:
1123.                                            call voidFunc
                            expr: lValue { varID = dblVar }
                            block: block { #stmts = 1 }
                                stmts:
1120.                                call voidFunc
1125.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
1128.                                if
                                        expr: lValue { varID = strVar }
                                        block: block { #stmts = 1 }
                                            stmts:
1129.                                            call voidFunc
                            expr: lValue { varID = strVar }
                            block: block { #stmts = 1 }
                                stmts:
1126.                                call voidFunc
1131.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
1134.                                if
                                        expr: lValue { varID = objVar }
                                        block: block { #stmts = 1 }
                                            stmts:
1135.                                            call voidFunc
                            expr: lValue { varID = objVar }
                            block: block { #stmts = 1 }
                                stmts:
1132.                                call voidFunc
1145.                    assign (+=) { expr = "hello" }
                            lValue: lValue { varID = strVar }
1147.                    assign (-=) { expr = 1 }
                            lValue: lValue { varID = boolVar }
1149.                    assign (*=)
                            lValue: lValue { varID = objVar }
                            expr: lValue { varID = objVar }
1151.                    assign (/=) { expr = 3.14 }
                            lValue: lValue { varID = objVar }
1153.                    assign (+=) { expr = "hello" }
                            lValue: lValue { varID = intVar }
1155.                    assign (-=)
                            lValue: lValue { varID = dblVar }
                            expr: call rect { #exprs = 4, class = ct }
                                exprs:
1155.                                (0)
1155.                                (0)
1155.                                (1)
1155.                                (2)
1157.                    assign (*=) { expr = false }
                            lValue: lValue { varID = intVar }
1159.                    assign (/=) { expr = true }
                            lValue: lValue { varID = dblVar }
1161.                    assign (+=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = dblVar }
1163.                    assign (-=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = dblVar }
1165.                    assign (*=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = dblVar }
1167.                    assign (/=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = dblVar }
1169.                    if
                            expr: (==) { right = "s" }
                                left: lValue { varID = strVar }
                            block: block { #stmts = 1 }
                                stmts:
1170.                                call voidFunc
1173.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (^)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
1175.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (&)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
1177.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (|)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
1179.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (>>) { right = 2 }
                                left: lValue { varID = i }
1181.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (<<) { right = 2 }
                                left: lValue { varID = i }
1183.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (>>>) { right = 2 }
                                left: lValue { varID = i }
1192.                    var lowercasefirst { vt = int, initExpr = 1 }
1194.                    var lowerCaseFirst { vt = int, initExpr = 10 }
1195.                    var upperCaseFirst { vt = GameObj }
                            initExpr: lValue { varID = objVar }
1197.                    var uppercasefirst { vt = GameObj, initExpr = null }
1199.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (+) { right = 1 }
                                left: lValue { varID = dblvar }
1203.                    var DouBle { vt = int }
1205.                    var BooLean { vt = double }
1207.                    var string { vt = boolean }
1210.                    assign (=) { expr = 1 }
                            lValue: lValue { varID = intVar, indexExpr = 0 }
1213.                    assign (=) { expr = 1 }
                            lValue: lValue { varID = intArr }
                                indexExpr: lValue { varID = dblVar }
1216.                    var numObjs { vt = int }
                            initExpr: lValue { varID = objArr, fieldID = Length }
1219.                    var len { vt = int }
                            initExpr: lValue { varID = strVar, fieldID = length }
1221.                    var size { vt = int }
                            initExpr: lValue { varID = intVar, fieldID = size }
1224.                    assign (=)
                            lValue: lValue { varID = objVar }
                            expr: unaryOp (neg)
                                expr: lValue { varID = objVar }
1227.                    assign (=)
                            lValue: lValue { varID = objVar, fieldID = visible }
                            expr: unaryOp (not)
                                expr: lValue { varID = intVar }
1230.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: (+)
                                right: lValue { varID = intArr }
                                left: lValue { varID = strVar }
1232.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: (+)
                                right: lValue { varID = strVar }
                                left: lValue { varID = intArr }
1235.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (+)
                                right: unaryOp (not)
                                    expr: lValue { varID = boolVar }
                                left: lValue { varID = boolVar }
1237.                    assign (=)
                            lValue: lValue { varID = objVar }
                            expr: (+)
                                right: lValue { varID = objVar }
                                left: lValue { varID = objVar }
1239.                    assign (=)
                            lValue: lValue { varID = intArr }
                            expr: (+) { right = 1 }
                                left: lValue { varID = intArr }
1241.                    assign (=)
                            lValue: lValue { varID = objArr }
                            expr: (+)
                                right: lValue { varID = objVar }
                                left: lValue { varID = objArr }
1244.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: (-)
                                right: lValue { varID = intVar }
                                left: lValue { varID = strVar }
1246.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (*) { right = 0 }
                                left: lValue { varID = boolVar }
1248.                    assign (=)
                            lValue: lValue { varID = objVar }
                            expr: (/) { right = 2 }
                                left: lValue { varID = objVar }
1250.                    assign (=)
                            lValue: lValue { varID = intArr }
                            expr: (%) { right = 2 }
                                left: lValue { varID = intArr }
1253.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (&&) { right = 1001 }
                                left: lValue { varID = intVar }
1255.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (||) { right = 1010 }
                                left: lValue { varID = boolVar }
1258.                    if
                            expr: (<)
                                right: lValue { varID = boolVar }
                                left: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
1259.                                call voidFunc
1261.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (>)
                                right: lValue { varID = dblVar }
                                left: lValue { varID = objVar }
1263.                    while
                            expr: (<=)
                                right: lValue { varID = intVar }
                                left: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
1264.                                call voidFunc
1267.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (>=)
                                right: lValue { varID = intArr }
                                left: lValue { varID = dblVar }
1270.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { right = 2, left = 1 }
1272.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { right = 8 }
                                left: lValue { varID = intVar }
1275.                    var intVar { vt = int, initExpr = 13 }
1277.                    var objArr { vt = array of GameObj }
                            initExpr: newArray { vtElement = "GameObj", lengthExpr = 10 }
1280.                    call update
1282.                    call start
1284.                    call onMousePress { #exprs = 2 }
                            exprs:
1284.                            (0)
1284.                            (0)
1287.                    call println { #exprs = 1 }
                            exprs:
1287.                            ("Hello world")
1289.                    call setHeight { #exprs = 1 }
                            exprs:
1289.                            (150)
1301.                    call foo
                            lValue: lValue { varID = Code12Program }
1303.                    call foo
                            lValue: lValue { varID = Code12 }
1306.                    call log { #exprs = 1 }
                            lValue: lValue { varID = boolVar, indexExpr = 0 }
                            exprs:
                                lValue { varID = objVar }
1311.                    call voidFunc
                            lValue: lValue { varID = intArr }
1314.                    call voidFunc
                            lValue: lValue { varID = intArr, indexExpr = 0 }
1316.                    call foo
                            lValue: lValue { varID = boolVar }
1319.                    call prnitln { class = ct }
1321.                    call circ { #exprs = 3, class = ct }
                            exprs:
1321.                            (0)
1321.                            (0)
1321.                            (10)
1324.                    call foo
                            lValue: lValue { varID = objArr, indexExpr = 0 }
1326.                    call foo { class = Math }
1329.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: call intFuncInt
1331.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: call dblFuncIntDbl
1333.                    call log { class = ct }
1335.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: call atan2 { class = Math }
1337.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call boolFuncBoolStringGameObj { #exprs = 2 }
                                exprs:
1337.                                (false)
1337.                                ("")
1339.                    call rect { #exprs = 3, class = ct }
                            exprs:
1339.                            (0)
1339.                            (0)
1339.                            (10)
1341.                    call voidFunc { #exprs = 1 }
                            exprs:
                                lValue { varID = intVar }
1343.                    call print { #exprs = 2, class = ct }
                            exprs:
1343.                            ("intVar =")
                                lValue { varID = intVar }
1345.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: call atan { #exprs = 2, class = Math }
                                exprs:
1345.                                (4)
1345.                                (3)
1347.                    call logm { #exprs = 2, class = ct }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = objVar }
1349.                    var indent { vt = String, initExpr = "2 Tabs" }
1351.                    assign (=) { expr = "1 Space + 2 Tabs" }
                            lValue: lValue { varID = indent }
1353.                    assign (=) { expr = "2 Tabs" }
                            lValue: lValue { varID = indent }
1355.                    assign (=) { expr = "8 Spaces" }
                            lValue: lValue { varID = indent }
1357.                    assign (=) { expr = "2 Tabs" }
                            lValue: lValue { varID = indent }
1359.                    assign (=) { expr = "4 Spaces + 1 Tab" }
                            lValue: lValue { varID = indent }
1361.                    assign (=) { expr = "2 Tabs" }
                            lValue: lValue { varID = indent }
1363.                    if { expr = false }
                            block: block { iLineEnd = 1366, #stmts = 1, iLineBegin = 1364 }
                                stmts:
1365.                                call voidFunc
1367.                    if { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1369.                                call voidFunc
1370.                    if { expr = false }
                            block: block { iLineEnd = 1375, #stmts = 2, iLineBegin = 1371 }
                                stmts:
1373.                                call voidFunc
1374.                                call voidFunc
1376.                    if { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1377.                                call voidFunc
1379.                    call voidFunc
1380.                    if { expr = false }
                            block: block { iLineEnd = 1385, #stmts = 2, iLineBegin = 1381 }
                                stmts:
1382.                                call voidFunc
1384.                                call voidFunc
1386.                    if { expr = false }
                            block: block { iLineEnd = 1390, #stmts = 1, iLineBegin = 1388 }
                                stmts:
1389.                                call voidFunc
1391.                    if { expr = false }
                            block: block { iLineEnd = 1395, #stmts = 1, iLineBegin = 1392 }
                                stmts:
1393.                                call voidFunc
1396.                    if { expr = false }
                            elseBlock: block { #stmts = 1 }
                                stmts:
1400.                                call voidFunc
                            block: block { #stmts = 1 }
                                stmts:
1397.                                call voidFunc
1401.                    if { expr = false }
                            elseBlock: block { #stmts = 1 }
                                stmts:
1405.                                call voidFunc
                            block: block { #stmts = 1 }
                                stmts:
1402.                                call voidFunc
1406.                    if { expr = false }
                            elseBlock: block { #stmts = 1 }
                                stmts:
1409.                                call voidFunc
                            block: block { #stmts = 1 }
                                stmts:
1407.                                call voidFunc
1411.                    call voidFunc
1412.                    if { expr = false }
                            elseBlock: block { iLineEnd = 1418, #stmts = 1, iLineBegin = 1416 }
                                stmts:
1417.                                call voidFunc
                            block: block { #stmts = 1 }
                                stmts:
1413.                                call voidFunc
1419.                    if { expr = false }
                            elseBlock: block { #stmts = 1 }
                                stmts:
1421.                                if { expr = false }
                                        block: block { #stmts = 1 }
                                            stmts:
1423.                                            call voidFunc
                            block: block { #stmts = 1 }
                                stmts:
1420.                                call voidFunc
1424.                    if { expr = false }
                            elseBlock: block { #stmts = 1 }
                                stmts:
1426.                                if { expr = false }
                                        block: block { iLineEnd = 1430, #stmts = 1, iLineBegin = 1428 }
                                            stmts:
1429.                                            call voidFunc
                            block: block { #stmts = 1 }
                                stmts:
1425.                                call voidFunc
1431.                    if { expr = false }
                            elseBlock: block { #stmts = 1 }
                                stmts:
1434.                                if { expr = false }
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
1437.                                            call voidFunc
                                        block: block { #stmts = 1 }
                                            stmts:
1435.                                            call voidFunc
                            block: block { #stmts = 1 }
                                stmts:
1432.                                call voidFunc
1438.                    if { expr = false }
                            elseBlock: block { #stmts = 1 }
                                stmts:
1440.                                if { expr = false }
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
1444.                                            call voidFunc
                                        block: block { #stmts = 1 }
                                            stmts:
1441.                                            call voidFunc
                            block: block { #stmts = 1 }
                                stmts:
1439.                                call voidFunc
1445.                    if { expr = false }
                            elseBlock: block { #stmts = 1 }
                                stmts:
1447.                                if { expr = false }
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
1450.                                            if { expr = false }
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
1454.                                                        call voidFunc
                                                    block: block { #stmts = 1 }
                                                        stmts:
1451.                                                        call voidFunc
                                        block: block { #stmts = 1 }
                                            stmts:
1448.                                            call voidFunc
                            block: block { #stmts = 1 }
                                stmts:
1446.                                call voidFunc
1455.                    if { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1456.                                if { expr = false }
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
1460.                                            call voidFunc
                                        block: block { #stmts = 1 }
                                            stmts:
1457.                                            call voidFunc
1461.                    if { expr = false }
                            block: block { iLineEnd = 1472, #stmts = 1, iLineBegin = 1462 }
                                stmts:
1463.                                if { expr = false }
                                        elseBlock: block { iLineEnd = 1470, #stmts = 1, iLineBegin = 1468 }
                                            stmts:
1469.                                            call voidFunc
                                        block: block { iLineEnd = 1466, #stmts = 1, iLineBegin = 1464 }
                                            stmts:
1465.                                            call voidFunc
1473.                    if { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1474.                                if { expr = false }
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
1477.                                            if { expr = false }
                                                    block: block { #stmts = 1 }
                                                        stmts:
1478.                                                        call voidFunc
                                        block: block { #stmts = 1 }
                                            stmts:
1475.                                            call voidFunc
1479.                    for
                            expr: (<) { right = 100 }
                                left: lValue { varID = ii }
1479.                        initStmt: var ii { vt = int, isGlobal = false, initExpr = 0 }
                            block: block { #stmts = 1 }
                                stmts:
1481.                                call voidFunc
1479.                        nextStmt: assign (++)
                                lValue: lValue { varID = ii }
1482.                    for
                            expr: (<) { right = 100 }
                                left: lValue { varID = ii }
1482.                        initStmt: var ii { vt = int, isGlobal = false, initExpr = 0 }
                            block: block { iLineEnd = 1486, #stmts = 1, iLineBegin = 1483 }
                                stmts:
1485.                                call voidFunc
1482.                        nextStmt: assign (++)
                                lValue: lValue { varID = ii }
1487.                    for
                            expr: (<) { right = 100 }
                                left: lValue { varID = ii }
1487.                        initStmt: var ii { vt = int, isGlobal = false, initExpr = 0 }
                            block: block { iLineEnd = 1491, #stmts = 1, iLineBegin = 1489 }
                                stmts:
1490.                                call voidFunc
1487.                        nextStmt: assign (++)
                                lValue: lValue { varID = ii }
1492.                    while { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1494.                                call voidFunc
1495.                    while { expr = false }
                            block: block { iLineEnd = 1499, #stmts = 1, iLineBegin = 1497 }
                                stmts:
1498.                                call voidFunc
1500.                    while { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1501.                                call voidFunc
1503.                    call voidFunc
1504.                    doWhile { iLineWhile = 1507, expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1506.                                call voidFunc
1508.                    doWhile { iLineWhile = 1513, expr = false }
                            block: block { iLineEnd = 1512, #stmts = 1, iLineBegin = 1510 }
                                stmts:
1511.                                call voidFunc
1514.                    doWhile { iLineWhile = 1517, expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1515.                                call voidFunc
1519.                    var x1 { vt = int }
1520.                    var x2 { vt = int }
1520.                    var x3 { vt = int }
1522.                    var circle { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
1522.                                (0)
1522.                                (0)
1523.                                (10)
1525.                    call log { #exprs = 3, class = ct }
                            exprs:
1525.                            (1)
1526.                            (2)
1527.                            (3)
1529.                    var multiLineArrInit { vt = array of int }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
1529.                                (1)
1530.                                (2)
1532.                    var multiLineArrDec { vt = array of int }
                            initExpr: newArray { vtElement = 0 }
                                lengthExpr: call random { #exprs = 2, class = ct }
                                    exprs:
1532.                                    (1)
1533.                                    (10)
1535.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
1539.                                if
                                        expr: (>) { right = 3 }
                                            left: call random { #exprs = 2, class = ct }
                                                exprs:
1539.                                                (1)
1540.                                                (2)
                                        block: block { #stmts = 1 }
                                            stmts:
1541.                                            call voidFunc
                            expr: (>) { right = 3 }
                                left: call random { #exprs = 2, class = ct }
                                    exprs:
1535.                                    (1)
1535.                                    (2)
                            block: block { #stmts = 1 }
                                stmts:
1537.                                call voidFunc
1543.                    while
                            expr: (>) { right = 3 }
                                left: call random { #exprs = 2, class = ct }
                                    exprs:
1543.                                    (1)
1544.                                    (2)
                            block: block { #stmts = 1 }
                                stmts:
1545.                                call voidFunc
1546.                    doWhile { iLineWhile = 1550 }
                            expr: (<) { right = 0 }
                                left: call max { #exprs = 2, class = Math }
                                    exprs:
1549.                                    (1)
1550.                                    (0)
                            block: block { #stmts = 1 }
                                stmts:
1547.                                call voidFunc
1552.                    for
                            expr: (<) { right = 0 }
                                left: call max { #exprs = 2, class = Math }
                                    exprs:
1552.                                    (1)
1553.                                    (0)
                            block: block { #stmts = 1 }
                                stmts:
1554.                                call voidFunc
1555.                    if { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1556.                                call voidFunc
1558.                    call voidFunc
1559.                    if { expr = false }
                            elseBlock: block { #stmts = 1 }
                                stmts:
1562.                                call voidFunc
                            block: block { #stmts = 1 }
                                stmts:
1560.                                call voidFunc
1564.                    call voidFunc
1565.                    if { expr = false }
                            elseBlock: block { #stmts = 1 }
                                stmts:
1567.                                if { expr = false }
                                        block: block { #stmts = 1 }
                                            stmts:
1568.                                            call voidFunc
                            block: block { #stmts = 1 }
                                stmts:
1566.                                call voidFunc
1570.                    call voidFunc
1571.                    if { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1572.                                call voidFunc
1574.                    while { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1575.                                call voidFunc
1576.                    for { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1577.                                call voidFunc
1579.                    call voidFunc
1580.                    while { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1581.                                call voidFunc
1583.                    call voidFunc
1593.                    var privateInt { vt = int, initExpr = 0 }
1595.                    var publicDouble { vt = double, initExpr = 0 }
1597.                    var halfIntVar { vt = double }
                            initExpr: cast { expr = "3", vtCast = 1 }
1598.                    if { expr = false }
1600.                    var bogusVarInit { vt = int, initExpr = 0 }
1601.                    if { expr = false }
                            elseBlock: block { #stmts = 1 }
                                stmts:
1603.                                if { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1602.                                call voidFunc
1605.                    var bogusVarDecl { vt = int }
1606.                    if { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1607.                                call voidFunc
1610.                    var bogusArrayInit { vt = array of int }
                            initExpr: arrayInit { #exprs = 1 }
                                exprs:
1610.                                (0)
1611.                    while { expr = false }
1613.                    var bogusArrayDecl { vt = array of int }
1647.        func myFunc { #paramVars = 1, vt = void }
                paramVars:
1647.                var myVar { vt = int, isGlobal = false }
                block: block { iLineEnd = 1649, #stmts = 0, iLineBegin = 1648 }
1650.        func makeCoin { #paramVars = 0, vt = GameObj }
                block: block { iLineEnd = 1653, #stmts = 0, iLineBegin = 1651 }
1655.        func onMousePress { #paramVars = 3, vt = int }
                paramVars:
1655.                var obj { vt = GameObj, isGlobal = false }
1655.                var x { vt = double, isGlobal = false }
1655.                var y { vt = double, isGlobal = false }
                block: block { iLineEnd = 1658, #stmts = 1, iLineBegin = 1656 }
                    stmts:
1657.                    return { expr = 0 }
1660.        func onMousePress { #paramVars = 2, vt = void }
                paramVars:
1660.                var x { vt = double, isGlobal = false }
1660.                var y { vt = double, isGlobal = false }
                block: block { iLineEnd = 1662, #stmts = 0, iLineBegin = 1661 }
1664.        func onKeyPress { #paramVars = 3, vt = void }
                paramVars:
1664.                var obj { vt = GameObj, isGlobal = false }
1664.                var x { vt = double, isGlobal = false }
1664.                var y { vt = double, isGlobal = false }
                block: block { iLineEnd = 1666, #stmts = 0, iLineBegin = 1665 }
1668.        func onKeyRelease { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1670, #stmts = 0, iLineBegin = 1669 }
1672.        func onMousePress { #paramVars = 3, vt = void }
                paramVars:
1672.                var obj { vt = boolean, isGlobal = false }
1672.                var x { vt = double, isGlobal = false }
1672.                var y { vt = double, isGlobal = false }
                block: block { iLineEnd = 1674, #stmts = 0, iLineBegin = 1673 }
1676.        func onMouseDrag { #paramVars = 3, vt = void }
                paramVars:
1676.                var obj { vt = GameObj, isGlobal = false }
1676.                var x { vt = int, isGlobal = false }
1676.                var y { vt = double, isGlobal = false }
                block: block { iLineEnd = 1678, #stmts = 0, iLineBegin = 1677 }
1680.        func onMouseRelease { #paramVars = 3, vt = void }
                paramVars:
1680.                var obj { vt = GameObj, isGlobal = false }
1680.                var x { vt = double, isGlobal = false }
1680.                var y { vt = String, isGlobal = false }
                block: block { iLineEnd = 1682, #stmts = 0, iLineBegin = 1681 }
1684.        func onKeyPress { #paramVars = 1, vt = void }
                paramVars:
1684.                var keyName { vt = double, isGlobal = false }
                block: block { iLineEnd = 1686, #stmts = 0, iLineBegin = 1685 }
1688.        func onKeyRelease { #paramVars = 1, vt = void }
                paramVars:
1688.                var keyName { vt = int, isGlobal = false }
                block: block { iLineEnd = 1690, #stmts = 0, iLineBegin = 1689 }
1692.        func onCharTyped { #paramVars = 1, vt = void }
                paramVars:
1692.                var keyName { vt = GameObj, isGlobal = false }
                block: block { iLineEnd = 1694, #stmts = 0, iLineBegin = 1693 }
1696.        func overIndentedFunc { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1698, #stmts = 0, iLineBegin = 1697 }
1700.        func underIndentedFunc { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1702, #stmts = 0, iLineBegin = 1701 }
1703.        func funcWithUnindentedBody { #paramVars = 0, vt = int }
                block: block { iLineEnd = 1707, #stmts = 1, iLineBegin = 1704 }
                    stmts:
1706.                    return { expr = 0 }
1709.        func multiLineFuncDef { #paramVars = 2, vt = void }
                paramVars:
1709.                var arg1 { vt = int, isGlobal = false }
1710.                var arg2 { vt = int, isGlobal = false }
                block: block { iLineEnd = 1712, #stmts = 0, iLineBegin = 1711 }
1713.        func multilineReturnFunc { #paramVars = 0, vt = int }
                block: block { iLineEnd = 1718, #stmts = 1, iLineBegin = 1714 }
                    stmts:
1716.                    return
                            expr: call max { #exprs = 2, class = Math }
                                exprs:
1716.                                (1)
1717.                                (2)
1721.        func syntaxLevelDependentTests { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1731, #stmts = 4, iLineBegin = 1722 }
                    stmts:
1723.                    var strVar { vt = String, initExpr = "" }
1724.                    var gameObjVar { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
1724.                                (0)
1724.                                (0)
1724.                                (1)
1727.                    if
                            expr: (!=) { left = "" }
                                right: lValue { varID = strVar }
                            block: block { #stmts = 1 }
                                stmts:
1728.                                call voidMethod
1730.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (==) { right = "circles" }
                                    left: lValue { varID = gameObjVar, fieldID = group }
1733.        func intMethod { #paramVars = 0, vt = int }
                block: block { iLineEnd = 1736, #stmts = 1, iLineBegin = 1734 }
                    stmts:
1735.                    return { expr = 0 }
1737.        func voidMethod { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1741, #stmts = 2, iLineBegin = 1738 }
                    stmts:
1739.                    var voidMethodVar { vt = int }
1740.                    return
1742.        func voidMethodWithParams { #paramVars = 5, vt = void }
                paramVars:
1742.                var p1 { vt = int, isGlobal = false }
1742.                var p2 { vt = double, isGlobal = false }
1742.                var p3 { vt = boolean, isGlobal = false }
1742.                var p4 { vt = String, isGlobal = false }
1742.                var p5 { vt = GameObj, isGlobal = false }
                block: block { iLineEnd = 1744, #stmts = 0, iLineBegin = 1743 }
1746.        func noErrorsMethod { #paramVars = 0, vt = GameObj }
                block: block { iLineEnd = 1796, #stmts = 12, iLineBegin = 1747 }
                    stmts:
1748.                    call println { lValue = out, #exprs = 1, class = System }
                            exprs:
1748.                            ("Hello world")
1749.                    assign (=)
                            lValue: lValue { varID = classLevelGameObj }
                            expr: call rect { #exprs = 4, class = ct }
                                exprs:
1749.                                (0)
1749.                                (0)
1749.                                (10)
1749.                                (10)
1750.                    var returnValue { vt = GameObj, initExpr = null }
1751.                    var boolVar { vt = boolean, initExpr = false }
1752.                    var intArrayInitWithExpressions { vt = array of int }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    (+) { right = 2, left = 1 }
                                    (+) { right = 50 }
                                        left: (*) { right = 4, left = 3 }
                                    (+) { right = 3 }
                                        left: parens
                                            expr: (-) { right = 890, left = 67 }
1753.                    var gObjArrayInitWithCTCalls { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
                                    call rect { #exprs = 4, class = ct }
                                        exprs:
1753.                                        (50)
1753.                                        (50)
1753.                                        (10)
1753.                                        (10)
                                    call text { #exprs = 4, class = ct }
                                        exprs:
1753.                                        ("text")
1753.                                        (50)
1753.                                        (50)
1753.                                        (10)
1754.                    var dblArrayInitWithExpressionsAndIntPromotion { vt = array of double }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
                                    (+) { right = 2, left = 1 }
                                    (/) { right = 2 }
                                        left: (*) { right = 7, left = 3.4 }
1756.                    for
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 1764, #stmts = 3, iLineBegin = 1757 }
                                stmts:
1758.                                call println { class = ct }
1759.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
1762.                                            break
                                        expr: lValue { varID = boolVar }
                                        block: block { #stmts = 1 }
                                            stmts:
1760.                                            call println { class = ct }
1763.                                call println { class = ct }
1765.                    while
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 1770, #stmts = 2, iLineBegin = 1766 }
                                stmts:
1767.                                if
                                        expr: lValue { varID = boolVar }
                                        block: block { #stmts = 1 }
                                            stmts:
1768.                                            break
1769.                                call println { class = ct }
1771.                    doWhile { iLineWhile = 1777 }
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 1776, #stmts = 2, iLineBegin = 1772 }
                                stmts:
1773.                                call println { class = ct }
1774.                                if
                                        expr: lValue { varID = boolVar }
                                        block: block { #stmts = 1 }
                                            stmts:
1775.                                            break
1779.                    for
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 1783, #stmts = 1, iLineBegin = 1780 }
                                stmts:
1781.                                if
                                        expr: lValue { varID = boolVar }
                                        block: block { #stmts = 1 }
                                            stmts:
1782.                                            return
                                                    expr: lValue { varID = returnValue }
1784.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
1788.                                if
                                        elseBlock: block { iLineEnd = 1795, #stmts = 1, iLineBegin = 1793 }
                                            stmts:
1794.                                            return
                                                    expr: lValue { varID = returnValue }
                                        expr: lValue { varID = boolVar }
                                        block: block { iLineEnd = 1791, #stmts = 1, iLineBegin = 1789 }
                                            stmts:
1790.                                            return
                                                    expr: lValue { varID = returnValue }
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 1787, #stmts = 1, iLineBegin = 1785 }
                                stmts:
1786.                                return
                                        expr: lValue { varID = returnValue }
1799.        func onMousePress { #paramVars = 3, isPublic = true, vt = void }
                paramVars:
1799.                var obj { vt = GameObj, isGlobal = false }
1799.                var x { vt = double, isGlobal = false }
1799.                var Yvalue { vt = double, isGlobal = false }
                block: block { iLineEnd = 1801, #stmts = 0, iLineBegin = 1800 }
1803.        func parameterStartsWithCapitalMethod { #paramVars = 3, vt = void }
                paramVars:
1803.                var doubleParam { vt = double, isGlobal = false }
1803.                var IntParam { vt = int, isGlobal = false }
1803.                var boolParam { vt = boolean, isGlobal = false }
                block: block { iLineEnd = 1806, #stmts = 1, iLineBegin = 1804 }
                    stmts:
1805.                    var userFunc1Var { vt = int, initExpr = 1 }
1808.        func StartsWithCapitalLetterMethod { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1810, #stmts = 0, iLineBegin = 1809 }
1811.        func testErrors3 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1860, #stmts = 24, iLineBegin = 1812 }
                    stmts:
1813.                    var intVar { vt = int, initExpr = 0 }
1814.                    var boolVar { vt = boolean, initExpr = false }
1816.                    var Starts_with_capital_letter_var { vt = int }
1818.                    var StartsWithCapitalLetterVarWithAssignment { vt = double, initExpr = 3.14 }
1820.                    var GameObjArrVar { vt = array of GameObj }
                            initExpr: newArray { vtElement = "GameObj", lengthExpr = 10 }
1822.                    var dblVar { vt = double }
                            initExpr: (+) { right = 1 }
                                left: lValue { varID = intvar }
1824.                    call println { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = boolvar }
1826.                    call voidmethod
1828.                    call PrintLn { class = ct }
1830.                    var classLevelGameObj { vt = int }
1832.                    var intVar { vt = int }
1834.                    var boolVar { vt = boolean }
1836.                    var classlevelInt { vt = GameObj }
1838.                    var boolvar { vt = boolean, initExpr = true }
1839.                    if
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 1842, #stmts = 1, iLineBegin = 1840 }
                                stmts:
1841.                                var prevBlockVar { vt = int }
1844.                    assign (=) { expr = 2e2 }
                            lValue: lValue { varID = prevBlockVar }
1846.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { right = 1 }
                                    left: lValue { varID = voidMethodVar }
1848.                    assign (=) { expr = 1.1 }
                            lValue: lValue { varID = prevBlockvar }
1850.                    assign (=) { expr = 0 }
                            lValue: lValue { varID = undeclaredVar }
1852.                    call setText { #exprs = 1 }
                            lValue: lValue { varID = classLevelGameObj }
                            exprs:
                                lValue { varID = undeclaredVar }
1854.                    call print { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = classLevelUnassignedVar }
1855.                    var unassignedVar { vt = int }
1857.                    call print { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = unassignedVar }
1859.                    assign (=) { expr = 200 }
                            lValue: lValue { varID = MAX_ENEMIES }
1862.        func onMousePress { #paramVars = 3, isPublic = true, vt = boolean }
                paramVars:
1862.                var obj { vt = GameObj, isGlobal = false }
1862.                var x { vt = double, isGlobal = false }
1862.                var y { vt = double, isGlobal = false }
                block: block { iLineEnd = 1865, #stmts = 1, iLineBegin = 1863 }
                    stmts:
1864.                    return
                            expr: lValue { varID = classLevelBoolean }
1867.        func onMouseDrag { #paramVars = 4, isPublic = true, vt = void }
                paramVars:
1867.                var obj { vt = GameObj, isGlobal = false }
1867.                var x { vt = double, isGlobal = false }
1867.                var y { vt = double, isGlobal = false }
1867.                var z { vt = double, isGlobal = false }
                block: block { iLineEnd = 1869, #stmts = 0, iLineBegin = 1868 }
1871.        func onMouseRelease { #paramVars = 3, isPublic = true, vt = void }
                paramVars:
1871.                var obj { vt = GameObj, isGlobal = false }
1871.                var x { vt = double, isGlobal = false }
1871.                var y { vt = int, isGlobal = false }
                block: block { iLineEnd = 1873, #stmts = 0, iLineBegin = 1872 }
1875.        func onKeyPress { #paramVars = 1, vt = void }
                paramVars:
1875.                var keyName { vt = String, isGlobal = false }
                block: block { iLineEnd = 1877, #stmts = 0, iLineBegin = 1876 }
1879.        func onKeyRelease { #paramVars = 1, vt = void }
                paramVars:
1879.                var keyName { vt = String, isGlobal = false }
                block: block { iLineEnd = 1881, #stmts = 0, iLineBegin = 1880 }
1884.        func onCharTyped { isStatic = true, vt = void, #paramVars = 1, isPublic = true }
                paramVars:
1884.                var charString { vt = String, isGlobal = false }
                block: block { iLineEnd = 1886, #stmts = 0, iLineBegin = 1885 }
1887.        func onResize { #paramVars = 0, isPublic = true, vt = void }
                block: block { iLineEnd = 1889, #stmts = 0, iLineBegin = 1888 }
1891.        func onResize { #paramVars = 0, isPublic = true, vt = void }
                block: block { iLineEnd = 1893, #stmts = 0, iLineBegin = 1892 }
1894.        func existingUserFunction { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1896, #stmts = 0, iLineBegin = 1895 }
1898.        func existingUserFunction { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1900, #stmts = 0, iLineBegin = 1899 }
1902.        func existingUserfunction { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1904, #stmts = 0, iLineBegin = 1903 }
1905.        func testErrors2 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 2069, #stmts = 79, iLineBegin = 1906 }
                    stmts:
1907.                    var intVar { vt = int, initExpr = 0 }
1908.                    var dblVar { vt = double, initExpr = 0 }
1909.                    var boolVar { vt = boolean, initExpr = false }
1910.                    var strVar { vt = String, initExpr = "" }
1911.                    var rect { vt = GameObj }
                            initExpr: call rect { #exprs = 4, class = ct }
                                exprs:
1911.                                (50)
1911.                                (50)
1911.                                (10)
1911.                                (10)
1912.                    var circle { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
1912.                                (50)
1912.                                (50)
1912.                                (10)
1913.                    var text { vt = GameObj }
                            initExpr: call text { #exprs = 4, class = ct }
                                exprs:
1913.                                ("text")
1913.                                (50)
1913.                                (50)
1913.                                (10)
1914.                    var image { vt = GameObj }
                            initExpr: call image { #exprs = 4, class = ct }
                                exprs:
1914.                                ("bogusFileName.png")
1914.                                (50)
1914.                                (50)
1914.                                (10)
1915.                    var intArr { vt = array of int }
                            initExpr: newArray { vtElement = 0, lengthExpr = 10 }
1916.                    var dblArr { vt = array of double }
                            initExpr: newArray { vtElement = 1, lengthExpr = 10 }
1917.                    var boolArr { vt = array of boolean }
                            initExpr: newArray { vtElement = true, lengthExpr = 10 }
1918.                    var strArr { vt = array of String }
                            initExpr: newArray { vtElement = "String", lengthExpr = 10 }
1919.                    var objArr { vt = array of GameObj }
                            initExpr: newArray { vtElement = "GameObj", lengthExpr = 10 }
1921.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = dblVar }
1923.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: lValue { varID = dblVar }
1925.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: lValue { varID = intVar }
1927.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: lValue { varID = strVar }
1929.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = strVar }
1931.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: lValue { varID = rect }
1933.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x, indexExpr = 0 }
                            expr: lValue { varID = dblVar }
1935.                    assign (++)
                            lValue: lValue { varID = intVar, indexExpr = 0 }
1937.                    assign (=)
                            lValue: lValue { varID = strArr }
                                indexExpr: (*) { right = 1.0 }
                                    left: lValue { varID = intVar }
                            expr: lValue { varID = strVar }
1939.                    assign (=)
                            lValue: lValue { varID = objArr }
                                indexExpr: lValue { varID = dblVar }
                            expr: lValue { varID = rect }
1941.                    assign (=)
                            lValue: lValue { varID = intArr }
                            expr: newArray { vtElement = 0 }
                                lengthExpr: (*) { right = 2 }
                                    left: lValue { varID = intArr, fieldID = foo }
1943.                    call print { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = intVar, fieldID = x }
1945.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = setText }
                            expr: lValue { varID = strVar }
1947.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: lValue { varID = rect, fieldID = foo }
1949.                    assign (=) { expr = 0 }
                            lValue: lValue { varID = rect, fieldID = foo }
1951.                    call onMousePress { #exprs = 3 }
                            exprs:
                                lValue { varID = rect }
                                lValue { varID = rect, fieldID = x }
                                lValue { varID = rect, fieldID = y }
1953.                    var line { vt = GameObj }
                            initExpr: call line { #exprs = 4 }
                                exprs:
1953.                                (50)
1953.                                (50)
1953.                                (10)
1953.                                (10)
1955.                    call println
1957.                    call undefinedFunc
1959.                    assign (=)
                            lValue: lValue { varID = rect }
                            expr: call rec { #exprs = 4, class = ct }
                                exprs:
1959.                                (0)
1959.                                (0)
1959.                                (1)
1959.                                (1)
1961.                    call printLine { class = ct }
1963.                    call foo { class = ct }
1965.                    call bar { lValue = foo, class = System }
1967.                    call println { lValue = err, #exprs = 1, class = System }
                            exprs:
1967.                            ("File opening failed:")
1969.                    var stdev { vt = double }
                            initExpr: call foo { #exprs = 1, class = Math }
                                exprs:
                                    lValue { varID = doubleVar }
1971.                    call getWidht { #exprs = 1 }
                            lValue: lValue { varID = rect }
                            exprs:
                                lValue { varID = dblVar }
1973.                    call equal { #exprs = 1 }
                            lValue: lValue { varID = strVar }
                            exprs:
                                lValue { varID = classLevelString }
1975.                    call foo
                            lValue: lValue { varID = rect }
1977.                    call concat { #exprs = 1 }
                            lValue: lValue { varID = rect, fieldID = group }
                            exprs:
                                call getText
                                    lValue: lValue { varID = text }
1979.                    call setSize { #exprs = 2 }
                            lValue: lValue { varID = classLevelString }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = dblVar }
1981.                    call size
                            lValue: lValue { varID = strVar }
1983.                    call delete
                            lValue: lValue { varID = objArr }
1985.                    call delete
                            lValue: lValue { varID = intVar }
1987.                    call print { class = ct }
1989.                    if
                            expr: (<) { right = 0 }
                                left: call min { #exprs = 1, class = Math }
                                    exprs:
1989.                                    (1)
                            block: block { #stmts = 1 }
                                stmts:
1990.                                call voidMethod
1992.                    call voidMethodWithParams
1994.                    if
                            expr: (<) { right = 0 }
                                left: call min { #exprs = 3, class = Math }
                                    exprs:
1994.                                    (1)
1994.                                    (2)
1994.                                    (3)
                            block: block { #stmts = 1 }
                                stmts:
1995.                                call voidMethod
1997.                    var minOf3 { vt = double }
                            initExpr: call min { #exprs = 3, class = Math }
                                exprs:
1997.                                (1)
1997.                                (2)
1997.                                (3)
1999.                    call voidMethod { #exprs = 1 }
                            exprs:
1999.                            (1)
2001.                    call println { #exprs = 2, class = ct }
                            exprs:
2001.                            ("hello")
2001.                            ("world")
2003.                    call println { #exprs = 1, class = ct }
                            exprs:
                                call distance { #exprs = 4, class = ct }
                                    exprs:
                                        call round { #exprs = 1, class = ct }
                                            exprs:
                                                lValue { varID = rect, fieldID = x }
                                        lValue { varID = rect, fieldID = y }
                                        lValue { varID = circle }
                                        lValue { varID = circle, fieldID = y }
2005.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: call max { #exprs = 2, class = Math }
                                exprs:
                                    lValue { varID = intVar }
                                    lValue { varID = strVar }
2006.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = intVar }
                                lValue { varID = boolVar }
                                lValue { varID = strVar }
                                lValue { varID = rect }
2008.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = dblVar }
                                lValue { varID = boolVar }
                                lValue { varID = strVar }
                                lValue { varID = intVar }
2010.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = dblVar }
                                lValue { varID = strVar }
                                lValue { varID = strVar }
                                lValue { varID = rect }
2012.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = boolVar }
                                lValue { varID = boolVar }
                                lValue { varID = strVar }
                                lValue { varID = rect }
2014.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = dblVar }
                                lValue { varID = dblVar }
                                lValue { varID = boolVar }
                                lValue { varID = strVar }
                                lValue { varID = rect }
2016.                    for
                            expr: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
2017.                                call println { class = ct }
2018.                    doWhile { iLineWhile = 2021 }
                            expr: (+) { right = "" }
                                left: parens
                                    expr: (==) { right = 2e0 }
                                        left: (+) { right = 1.0, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
2019.                                call println { class = ct }
2023.                    while
                            expr: (+) { right = "" }
                                left: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
2025.                                assign (+=) { expr = 1 }
                                        lValue: lValue { varID = rect, fieldID = group }
2027.                    assign (+=) { expr = false }
                            lValue: lValue { varID = boolVar }
2029.                    assign (*=)
                            lValue: lValue { varID = dblVar }
                            expr: lValue { varID = rect }
2031.                    assign (+=)
                            lValue: lValue { varID = dblVar }
                            expr: (+) { right = "" }
                                left: lValue { varID = boolVar }
2033.                    assign (+=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = boolVar }
2035.                    assign (/=)
                            lValue: lValue { varID = intVar }
                            expr: (*)
                                right: lValue { varID = rect, fieldID = x }
                                left: lValue { varID = classLevelInt }
2037.                    assign (*=) { expr = 1e0 }
                            lValue: lValue { varID = intVar }
2039.                    assign (-=)
                            lValue: lValue { varID = classLevelInt }
                            expr: lValue { varID = classLevelDouble }
2041.                    assign (+=) { expr = 1.0 }
                            lValue: lValue { varID = intVar }
2043.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2046.                                if
                                        expr: lValue { varID = intVar }
                                        block: block { #stmts = 1 }
                                            stmts:
2047.                                            call println { class = ct }
                            expr: lValue { varID = dblVar }
                            block: block { #stmts = 1 }
                                stmts:
2044.                                call println { class = ct }
2049.                    if { expr = 0 }
                            block: block { #stmts = 1 }
                                stmts:
2050.                                call println { class = ct }
2052.                    forArray { expr = null }
2052.                        var: var x { vt = int, isGlobal = false }
                            block: block { #stmts = 1 }
                                stmts:
2053.                                break
2055.                    forArray
2055.                        var: var x { vt = int, isGlobal = false }
                            expr: lValue { varID = image }
                            block: block { #stmts = 1 }
                                stmts:
2056.                                break
2058.                    forArray
2058.                        var: var x { vt = int, isGlobal = false }
                            expr: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
2059.                                break
2061.                    forArray
2061.                        var: var x { vt = GameObj, isGlobal = false }
                            expr: lValue { varID = classLevelIntArr }
                            block: block { #stmts = 1 }
                                stmts:
2062.                                break
2064.                    forArray
2064.                        var: var x { vt = boolean, isGlobal = false }
                            expr: newArray { vtElement = "String", lengthExpr = 10 }
                            block: block { #stmts = 1 }
                                stmts:
2065.                                break
2067.                    forArray
2067.                        var: var x { vt = int, isGlobal = false }
                            expr: lValue { varID = dblArr }
                            block: block { #stmts = 1 }
                                stmts:
2068.                                break
2070.        func voidFuncReturnsValue6 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 2079, #stmts = 3, iLineBegin = 2071 }
                    stmts:
2072.                    var r { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
2072.                                (0)
2072.                                (0)
2072.                                (1)
2073.                    while
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2074.                                if
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { #stmts = 1 }
                                            stmts:
2076.                                            return
                                                    expr: lValue { varID = r }
2078.                    return
                            expr: lValue { varID = r }
2080.        func voidFuncReturnsValue5 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 2088, #stmts = 3, iLineBegin = 2081 }
                    stmts:
2082.                    var r { vt = GameObj, initExpr = null }
2083.                    for
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2085.                                return
                                        expr: lValue { varID = r }
2087.                    return
                            expr: lValue { varID = r }
2089.        func voidFuncReturnsValue4 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 2097, #stmts = 3, iLineBegin = 2090 }
                    stmts:
2091.                    var r { vt = String, initExpr = null }
2092.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2094.                                return
                                        expr: lValue { varID = r }
2096.                    return
                            expr: lValue { varID = r }
2098.        func voidFuncReturnsValue3 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 2106, #stmts = 3, iLineBegin = 2099 }
                    stmts:
2100.                    var r { vt = String, initExpr = "" }
2101.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2103.                                return
                                        expr: lValue { varID = r }
2105.                    return
                            expr: lValue { varID = r }
2107.        func voidFuncReturnsValue2 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 2115, #stmts = 3, iLineBegin = 2108 }
                    stmts:
2109.                    var r { vt = boolean, initExpr = false }
2110.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2112.                                return
                                        expr: lValue { varID = r }
2114.                    return
                            expr: lValue { varID = r }
2116.        func voidFuncReturnsValue1 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 2121, #stmts = 2, iLineBegin = 2117 }
                    stmts:
2118.                    var r { vt = double, initExpr = 0 }
2120.                    return
                            expr: lValue { varID = r }
2122.        func funcWrongReturnValueType7 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2126, #stmts = 1, iLineBegin = 2123 }
                    stmts:
2125.                    return
                            expr: (*) { right = 1.0 }
                                left: lValue { varID = classLevelInt }
2127.        func funcWrongReturnValueType6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2136, #stmts = 3, iLineBegin = 2128 }
                    stmts:
2129.                    var r { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
2129.                                (0)
2129.                                (0)
2129.                                (1)
2130.                    while
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2131.                                if
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { #stmts = 1 }
                                            stmts:
2133.                                            return
                                                    expr: lValue { varID = r }
2135.                    return
                            expr: lValue { varID = r }
2137.        func funcWrongReturnValueType5 { #paramVars = 0, vt = String }
                block: block { iLineEnd = 2145, #stmts = 3, iLineBegin = 2138 }
                    stmts:
2139.                    var r { vt = GameObj, initExpr = null }
2140.                    for
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2142.                                return
                                        expr: lValue { varID = r }
2144.                    return
                            expr: lValue { varID = r }
2146.        func funcWrongReturnValueType4 { #paramVars = 0, vt = GameObj }
                block: block { iLineEnd = 2154, #stmts = 3, iLineBegin = 2147 }
                    stmts:
2148.                    var r { vt = String, initExpr = null }
2149.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2151.                                return
                                        expr: lValue { varID = r }
2153.                    return
                            expr: lValue { varID = r }
2155.        func funcWrongReturnValueType3 { #paramVars = 0, vt = boolean }
                block: block { iLineEnd = 2163, #stmts = 3, iLineBegin = 2156 }
                    stmts:
2157.                    var r { vt = String, initExpr = "" }
2158.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2160.                                return
                                        expr: lValue { varID = r }
2162.                    return
                            expr: lValue { varID = r }
2164.        func funcWrongReturnValueType2 { #paramVars = 0, vt = double }
                block: block { iLineEnd = 2172, #stmts = 3, iLineBegin = 2165 }
                    stmts:
2166.                    var r { vt = boolean, initExpr = false }
2167.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2169.                                return
                                        expr: lValue { varID = r }
2171.                    return
                            expr: lValue { varID = r }
2173.        func funcWrongReturnValueType1 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2178, #stmts = 2, iLineBegin = 2174 }
                    stmts:
2175.                    var r { vt = double, initExpr = 0 }
2177.                    return
                            expr: lValue { varID = r }
2179.        func funcNoReturnValue6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2187, #stmts = 3, iLineBegin = 2180 }
                    stmts:
2181.                    var r { vt = int, initExpr = 0 }
2182.                    while
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2183.                                if
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { #stmts = 1 }
                                            stmts:
2185.                                            return
2186.                    return
                            expr: lValue { varID = r }
2188.        func funcNoReturnValue5 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2195, #stmts = 3, iLineBegin = 2189 }
                    stmts:
2190.                    var r { vt = int, initExpr = 0 }
2191.                    for
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2193.                                return
2194.                    return
                            expr: lValue { varID = r }
2196.        func funcNoReturnValue4 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2204, #stmts = 3, iLineBegin = 2197 }
                    stmts:
2198.                    var r { vt = int, initExpr = 0 }
2199.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2201.                                return
2203.                    return
2205.        func funcNoReturnValue3 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2212, #stmts = 3, iLineBegin = 2206 }
                    stmts:
2207.                    var r { vt = int, initExpr = 0 }
2208.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2210.                                return
2211.                    return
                            expr: lValue { varID = r }
2213.        func funcNoReturnValue2 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2220, #stmts = 3, iLineBegin = 2214 }
                    stmts:
2215.                    var r { vt = int, initExpr = 0 }
2216.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2217.                                return
                                        expr: lValue { varID = r }
2219.                    return
2221.        func funcNoReturnValue1 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2225, #stmts = 1, iLineBegin = 2222 }
                    stmts:
2224.                    return
2226.        func funcBreakStmtErrors { #paramVars = 0, vt = void }
                block: block { iLineEnd = 2241, #stmts = 2, iLineBegin = 2227 }
                    stmts:
2228.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2233.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2238.                                            break
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { #stmts = 1 }
                                            stmts:
2235.                                            break
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 2232, #stmts = 1, iLineBegin = 2229 }
                                stmts:
2231.                                break
2240.                    break
2242.        func funcUnreachableStmt8 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2259, #stmts = 3, iLineBegin = 2243 }
                    stmts:
2244.                    var r { vt = int, initExpr = 0 }
2245.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 2257, #stmts = 1, iLineBegin = 2246 }
                                stmts:
2247.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2251.                                            if
                                                    expr: (==) { right = 3 }
                                                        left: (+) { right = 1, left = 1 }
                                                    block: block { iLineEnd = 2256, #stmts = 2, iLineBegin = 2252 }
                                                        stmts:
2253.                                                        return
                                                                expr: lValue { varID = r }
2255.                                                        call println { class = ct }
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { iLineEnd = 2250, #stmts = 1, iLineBegin = 2248 }
                                            stmts:
2249.                                            call println { class = ct }
2258.                    return
                            expr: lValue { varID = r }
2260.        func funcUnreachableStmt7 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2270, #stmts = 3, iLineBegin = 2261 }
                    stmts:
2262.                    var r { vt = int, initExpr = 0 }
2263.                    while
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 2268, #stmts = 2, iLineBegin = 2264 }
                                stmts:
2265.                                return
                                        expr: lValue { varID = r }
2267.                                call println { class = ct }
2269.                    return
                            expr: lValue { varID = r }
2271.        func funcUnreachableStmt6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2285, #stmts = 3, iLineBegin = 2272 }
                    stmts:
2273.                    var r { vt = int, initExpr = 0 }
2274.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2278.                                if
                                        expr: (==) { right = 3 }
                                            left: (+) { right = 1, left = 1 }
                                        block: block { iLineEnd = 2283, #stmts = 2, iLineBegin = 2279 }
                                            stmts:
2280.                                            return
                                                    expr: lValue { varID = r }
2282.                                            call println { class = ct }
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 2277, #stmts = 1, iLineBegin = 2275 }
                                stmts:
2276.                                call println { class = ct }
2284.                    return
                            expr: lValue { varID = r }
2286.        func funcUnreachableStmt5 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2300, #stmts = 3, iLineBegin = 2287 }
                    stmts:
2288.                    var r { vt = int, initExpr = 0 }
2289.                    if
                            elseBlock: block { iLineEnd = 2298, #stmts = 2, iLineBegin = 2294 }
                                stmts:
2295.                                return
                                        expr: lValue { varID = r }
2297.                                call println { class = ct }
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 2292, #stmts = 1, iLineBegin = 2290 }
                                stmts:
2291.                                call println { class = ct }
2299.                    return
                            expr: lValue { varID = r }
2301.        func funcUnreachableStmt4 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2312, #stmts = 3, iLineBegin = 2302 }
                    stmts:
2303.                    var r { vt = int, initExpr = 0 }
2304.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 2310, #stmts = 2, iLineBegin = 2305 }
                                stmts:
2306.                                return
                                        expr: lValue { varID = r }
2308.                                if
                                        expr: (==) { right = 2 }
                                            left: (+) { right = 1, left = 1 }
                                        block: block { #stmts = 1 }
                                            stmts:
2309.                                            call println { class = ct }
2311.                    return
                            expr: lValue { varID = r }
2313.        func funcUnreachableStmt3 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2322, #stmts = 5, iLineBegin = 2314 }
                    stmts:
2315.                    var r { vt = int, initExpr = 0 }
2316.                    return
                            expr: lValue { varID = r }
2318.                    for
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2319.                                break
2320.                    call println { class = ct }
2321.                    return
                            expr: lValue { varID = r }
2323.        func funcUnreachableStmt2 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2332, #stmts = 5, iLineBegin = 2324 }
                    stmts:
2325.                    var r { vt = int, initExpr = 0 }
2326.                    return
                            expr: lValue { varID = r }
2328.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2329.                                call println { class = ct }
2330.                    call println { class = ct }
2331.                    return
                            expr: lValue { varID = r }
2333.        func funcUnreachableStmt1 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 2339, #stmts = 3, iLineBegin = 2334 }
                    stmts:
2335.                    return
2337.                    call println { class = ct }
2338.                    call println { class = ct }
2340.        func funcMissingReturn10 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2353, #stmts = 4, iLineBegin = 2341 }
                    stmts:
2342.                    var r { vt = int, initExpr = 0 }
2343.                    var boolVar1 { vt = boolean, initExpr = false }
2344.                    var boolVar2 { vt = boolean, initExpr = false }
2345.                    if
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
2346.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2348.                                            if
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
2351.                                                        return
                                                                expr: lValue { varID = r }
                                                    expr: lValue { varID = boolVar2 }
                                                    block: block { #stmts = 1 }
                                                        stmts:
2349.                                                        return
                                                                expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar1 }
                                        block: block { #stmts = 1 }
                                            stmts:
2347.                                            call println { class = ct }
2354.        func funcMissingReturn9 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2365, #stmts = 4, iLineBegin = 2355 }
                    stmts:
2356.                    var r { vt = int, initExpr = 0 }
2357.                    var boolVar1 { vt = boolean, initExpr = false }
2358.                    var boolVar2 { vt = boolean, initExpr = false }
2359.                    if
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
2360.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2363.                                            call println { class = ct }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
2361.                                            return
                                                    expr: lValue { varID = r }
2366.        func funcMissingReturn8 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2377, #stmts = 4, iLineBegin = 2367 }
                    stmts:
2368.                    var r { vt = int, initExpr = 0 }
2369.                    var boolVar1 { vt = boolean, initExpr = false }
2370.                    var boolVar2 { vt = boolean, initExpr = false }
2371.                    if
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
2372.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2375.                                            return
                                                    expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
2373.                                            return
                                                    expr: lValue { varID = r }
2378.        func funcMissingReturn7 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2390, #stmts = 4, iLineBegin = 2379 }
                    stmts:
2380.                    var r { vt = int, initExpr = 0 }
2381.                    var boolVar1 { vt = boolean, initExpr = false }
2382.                    var boolVar2 { vt = boolean, initExpr = true }
2383.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2385.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2388.                                            return
                                                    expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
2386.                                            call println { class = ct }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
2384.                                call println { class = ct }
2391.        func funcMissingReturn6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2403, #stmts = 4, iLineBegin = 2392 }
                    stmts:
2393.                    var r { vt = int, initExpr = 0 }
2394.                    var boolVar1 { vt = boolean, initExpr = false }
2395.                    var boolVar2 { vt = boolean, initExpr = true }
2396.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2398.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2401.                                            call println { class = ct }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
2399.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
2397.                                call println { class = ct }
2405.        func funcMissingReturn4 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2413, #stmts = 2, iLineBegin = 2406 }
                    stmts:
2407.                    var boolVar { vt = boolean, initExpr = false }
2408.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2411.                                call println { class = ct }
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
2409.                                call println { class = ct }
2414.        func funcMissingReturn2 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2421, #stmts = 3, iLineBegin = 2415 }
                    stmts:
2416.                    var r { vt = int, initExpr = 0 }
2417.                    var boolVar { vt = boolean, initExpr = false }
2418.                    if
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
2419.                                return
                                        expr: lValue { varID = r }
2422.        func funcMissingReturn1 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2425, #stmts = 0, iLineBegin = 2423 }
2426.        func funcPathMissingReturn3Brackets { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2440, #stmts = 4, iLineBegin = 2427 }
                    stmts:
2428.                    var r { vt = int, initExpr = 0 }
2429.                    var boolVar1 { vt = boolean, initExpr = false }
2430.                    var boolVar2 { vt = boolean, initExpr = false }
2431.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2435.                                if
                                        expr: lValue { varID = boolVar2 }
                                        block: block { iLineEnd = 2438, #stmts = 1, iLineBegin = 2436 }
                                            stmts:
2437.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { iLineEnd = 2434, #stmts = 1, iLineBegin = 2432 }
                                stmts:
2433.                                call println { class = ct }
2441.        func funcPathMissingReturn2Brackets { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2454, #stmts = 3, iLineBegin = 2442 }
                    stmts:
2443.                    var r { vt = int, initExpr = 0 }
2444.                    var boolVar { vt = boolean, initExpr = false }
2445.                    if
                            elseBlock: block { iLineEnd = 2453, #stmts = 1, iLineBegin = 2450 }
                                stmts:
2451.                                call println { class = ct }
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 2448, #stmts = 1, iLineBegin = 2446 }
                                stmts:
2447.                                return
                                        expr: lValue { varID = r }
2455.        func funcPathMissingReturn1Brackets { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2468, #stmts = 3, iLineBegin = 2456 }
                    stmts:
2457.                    var r { vt = int, initExpr = 0 }
2458.                    var boolVar { vt = boolean, initExpr = false }
2459.                    if
                            elseBlock: block { iLineEnd = 2467, #stmts = 1, iLineBegin = 2465 }
                                stmts:
2466.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 2463, #stmts = 1, iLineBegin = 2460 }
                                stmts:
2461.                                call println { class = ct }
2469.        func funcPathMissingReturn10 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2484, #stmts = 4, iLineBegin = 2470 }
                    stmts:
2471.                    var r { vt = int, initExpr = 0 }
2472.                    var boolVar1 { vt = boolean, initExpr = false }
2473.                    var boolVar2 { vt = boolean, initExpr = false }
2474.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2483.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
2475.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2477.                                            if
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
2481.                                                        call println { class = ct }
                                                    expr: lValue { varID = boolVar2 }
                                                    block: block { #stmts = 1 }
                                                        stmts:
2478.                                                        return
                                                                expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar1 }
                                        block: block { #stmts = 1 }
                                            stmts:
2476.                                            return
                                                    expr: lValue { varID = r }
2485.        func funcPathMissingReturn9 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2500, #stmts = 4, iLineBegin = 2486 }
                    stmts:
2487.                    var r { vt = int, initExpr = 0 }
2488.                    var boolVar1 { vt = boolean, initExpr = false }
2489.                    var boolVar2 { vt = boolean, initExpr = false }
2490.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2499.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
2491.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2493.                                            if
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
2497.                                                        return
                                                                expr: lValue { varID = r }
                                                    expr: lValue { varID = boolVar2 }
                                                    block: block { #stmts = 1 }
                                                        stmts:
2495.                                                        call println { class = ct }
                                        expr: lValue { varID = boolVar1 }
                                        block: block { #stmts = 1 }
                                            stmts:
2492.                                            return
                                                    expr: lValue { varID = r }
2501.        func funcPathMissingReturn8 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2516, #stmts = 4, iLineBegin = 2502 }
                    stmts:
2503.                    var r { vt = int, initExpr = 0 }
2504.                    var boolVar1 { vt = boolean, initExpr = false }
2505.                    var boolVar2 { vt = boolean, initExpr = false }
2506.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2515.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
2507.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2510.                                            if
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
2513.                                                        return
                                                                expr: lValue { varID = r }
                                                    expr: lValue { varID = boolVar2 }
                                                    block: block { #stmts = 1 }
                                                        stmts:
2511.                                                        return
                                                                expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar1 }
                                        block: block { #stmts = 1 }
                                            stmts:
2509.                                            call println { class = ct }
2517.        func funcPathMissingReturn7 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2529, #stmts = 4, iLineBegin = 2518 }
                    stmts:
2519.                    var r { vt = int, initExpr = 0 }
2520.                    var boolVar1 { vt = boolean, initExpr = false }
2521.                    var boolVar2 { vt = boolean, initExpr = false }
2522.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2525.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2528.                                            return
                                                    expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
2526.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
2524.                                call println { class = ct }
2530.        func funcPathMissingReturn6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2542, #stmts = 4, iLineBegin = 2531 }
                    stmts:
2532.                    var r { vt = int, initExpr = 0 }
2533.                    var boolVar1 { vt = boolean, initExpr = false }
2534.                    var boolVar2 { vt = boolean, initExpr = false }
2535.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2537.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2541.                                            return
                                                    expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
2539.                                            call println { class = ct }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
2536.                                return
                                        expr: lValue { varID = r }
2543.        func funcPathMissingReturn5 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2555, #stmts = 4, iLineBegin = 2544 }
                    stmts:
2545.                    var r { vt = int, initExpr = 0 }
2546.                    var boolVar1 { vt = boolean, initExpr = false }
2547.                    var boolVar2 { vt = boolean, initExpr = false }
2548.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2550.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2554.                                            call println { class = ct }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
2551.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
2549.                                return
                                        expr: lValue { varID = r }
2556.        func funcPathMissingReturn3 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2566, #stmts = 4, iLineBegin = 2557 }
                    stmts:
2558.                    var r { vt = int, initExpr = 0 }
2559.                    var boolVar1 { vt = boolean, initExpr = false }
2560.                    var boolVar2 { vt = boolean, initExpr = false }
2561.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2563.                                if
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
2564.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
2562.                                call println { class = ct }
2567.        func funcPathMissingReturn2 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2576, #stmts = 3, iLineBegin = 2568 }
                    stmts:
2569.                    var r { vt = int, initExpr = 0 }
2570.                    var boolVar { vt = boolean, initExpr = false }
2571.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2575.                                call println { class = ct }
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
2572.                                return
                                        expr: lValue { varID = r }
2577.        func funcPathMissingReturn1 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2586, #stmts = 3, iLineBegin = 2578 }
                    stmts:
2579.                    var r { vt = int, initExpr = 0 }
2580.                    var boolVar { vt = boolean, initExpr = false }
2581.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2585.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
2583.                                call println { class = ct }
2588.        func testErrors1 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 2871, #stmts = 110, iLineBegin = 2589 }
                    stmts:
2590.                    var intVar { vt = int, initExpr = 1 }
2591.                    var dblVar { vt = double, initExpr = 1.2 }
2592.                    var boolVar { vt = boolean, initExpr = false }
2593.                    var strVar { vt = String, initExpr = "" }
2594.                    var rect { vt = GameObj }
                            initExpr: call rect { #exprs = 4, class = ct }
                                exprs:
2594.                                (50)
2594.                                (50)
2594.                                (10)
2594.                                (10)
2595.                    var circle { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
2595.                                (50)
2595.                                (50)
2595.                                (10)
2596.                    var text { vt = GameObj }
                            initExpr: call text { #exprs = 4, class = ct }
                                exprs:
2596.                                ("text")
2596.                                (50)
2596.                                (50)
2596.                                (10)
2597.                    var image { vt = GameObj }
                            initExpr: call image { #exprs = 4, class = ct }
                                exprs:
2597.                                ("bogusFileName.png")
2597.                                (50)
2597.                                (50)
2597.                                (10)
2598.                    var intArr { vt = array of int }
                            initExpr: newArray { vtElement = 0, lengthExpr = 10 }
2599.                    var dblArr { vt = array of double }
                            initExpr: newArray { vtElement = 1, lengthExpr = 10 }
2600.                    var boolArr { vt = array of boolean }
                            initExpr: newArray { vtElement = true, lengthExpr = 10 }
2601.                    var strArr { vt = array of String }
                            initExpr: newArray { vtElement = "String", lengthExpr = 10 }
2602.                    var objArr { vt = array of GameObj }
                            initExpr: newArray { vtElement = "GameObj", lengthExpr = 10 }
2605.                    assign (=)
                            lValue: lValue { varID = circle, fieldID = x }
                            expr: (+) { right = 314 }
                                left: cast { vtCast = 0 }
                                    expr: lValue { varID = intVar }
2607.                    assign (=)
                            lValue: lValue { varID = circle, fieldID = x }
                            expr: cast { vtCast = 0 }
                                expr: parens
                                    expr: (+) { right = 314 }
                                        left: lValue { varID = intVar }
2609.                    assign (=)
                            lValue: lValue { varID = objArr }
                            expr: newArray { vtElement = "GameObj" }
                                lengthExpr: (*) { left = 2 }
                                    right: cast { vtCast = 0 }
                                        expr: lValue { varID = objArr }
2611.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: cast { vtCast = 1 }
                                expr: parens
                                    expr: (*) { right = 2.3, left = 10 }
2613.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = group }
                            expr: cast { vtCast = "String" }
                                expr: lValue { varID = circle, fieldID = group }
2615.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: staticField { fieldID = P, class = Math }
2619.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: unaryOp (neg)
                                expr: lValue { varID = rect }
2621.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: unaryOp (neg)
                                expr: lValue { varID = strVar }
2625.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: unaryOp (not)
                                expr: lValue { varID = intVar }
2629.                    assign (=)
                            lValue: lValue { varID = objArr }
                            expr: newArray { vtElement = "GameObj", lengthExpr = "ten" }
2631.                    assign (=)
                            lValue: lValue { varID = strArr }
                            expr: newArray { vtElement = "String" }
                                lengthExpr: (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = intVar }
2633.                    assign (=)
                            lValue: lValue { varID = boolArr }
                            expr: newArray { vtElement = true }
                                lengthExpr: (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = intVar }
2635.                    assign (=)
                            lValue: lValue { varID = dblArr }
                            expr: newArray { vtElement = 1 }
                                lengthExpr: lValue { varID = dblVar }
2637.                    assign (=)
                            lValue: lValue { varID = intArr }
                            expr: newArray { vtElement = 0, lengthExpr = 10.0 }
2650.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: new Integer { #exprs = 1 }
                                exprs:
2650.                                (1)
2656.                    var arrInit9 { vt = array of String }
                            initExpr: arrayInit { #exprs = 1 }
                                exprs:
                                    newArray { vtElement = "String" }
                                        lengthExpr: lValue { varID = intVar }
2658.                    var arrInit8 { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    lValue { varID = rect }
                                    lValue { varID = intArr }
                                    lValue { varID = text }
2660.                    var arrInit7 { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    lValue { varID = rect }
                                    lValue { varID = image }
                                    lValue { varID = objArr }
2664.                    var arrInit6 { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    call rect { #exprs = 4, class = ct }
                                        exprs:
2664.                                        (50)
2664.                                        (50)
2664.                                        (10)
2664.                                        (10)
                                    lValue { varID = text }
2664.                                (0)
2666.                    var arrInit5 { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
2666.                                ("circle")
                                    lValue { varID = circle }
2668.                    var arrInit4 { vt = array of String }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    (+) { right = 1 }
                                        left: lValue { varID = strVar }
                                    lValue { varID = intVar }
                                    (+) { right = 2 }
                                        left: lValue { varID = intVar }
2670.                    var arrInit3 { vt = array of boolean }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
2670.                                (false)
                                    lValue { varID = boolVar }
2670.                                (null)
2672.                    var arrInit2 { vt = array of double }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
                                    lValue { varID = circle }
2672.                                (0.5)
2674.                    var arrInit1 { vt = array of int }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
2674.                                (1)
2674.                                ("1")
2679.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = strVar }
                                    left: lValue { varID = objArr }
2681.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = strVar }
                                    left: lValue { varID = strArr }
2683.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = strVar }
                                    left: lValue { varID = boolArr }
2685.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = dblArr }
                                    left: lValue { varID = strVar }
2687.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intArr }
                                    left: lValue { varID = strVar }
2691.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = intArr }
2693.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = rect }
2695.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = boolVar }
2697.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = intArr }
2699.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = rect }
2701.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = boolVar }
2703.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intArr }
                                    left: lValue { varID = dblVar }
2705.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = rect }
                                    left: lValue { varID = dblVar }
2707.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = boolVar }
                                    left: lValue { varID = dblVar }
2709.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intArr }
                                    left: lValue { varID = intVar }
2711.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = rect }
                                    left: lValue { varID = intVar }
2713.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = boolVar }
                                    left: lValue { varID = intVar }
2715.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { left = 1 }
                                right: parens
                                    expr: (+) { right = 1 }
                                        left: (+)
                                            right: lValue { varID = intArr }
                                            left: lValue { varID = boolVar }
2717.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: (+)
                                right: lValue { varID = rect }
                                left: lValue { varID = boolVar }
2719.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (+)
                                right: (/) { right = 2 }
                                    left: lValue { varID = dblVar }
                                left: lValue { varID = boolVar }
2721.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (-) { right = 1 }
                                left: (+)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = boolVar }
2723.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (+)
                                right: lValue { varID = boolVar }
                                left: lValue { varID = boolVar }
2725.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: (+)
                                right: lValue { varID = text }
                                left: lValue { varID = circle }
2727.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = width }
                            expr: (+) { left = 2 }
                                right: lValue { varID = rect }
2729.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { right = false }
                                    left: lValue { varID = rect, fieldID = x }
2733.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (-) { right = ".txt" }
                                left: lValue { varID = strVar }
2735.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (%)
                                right: lValue { varID = text }
                                left: lValue { varID = rect, fieldID = group }
2737.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { right = 10 }
                                left: lValue { varID = circle }
2739.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = width }
                            expr: (*) { right = 2 }
                                left: lValue { varID = rect }
2741.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: (-) { left = 100 }
                                right: lValue { varID = rect }
2745.                    var intArrayInitWithExpressions { vt = array of int }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
                                    (+) { left = 1 }
                                        right: (/) { right = 1, left = 2 }
                                    (/) { right = 2 }
                                        left: parens
                                            expr: (+) { right = 1, left = 3 }
2747.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (==) { right = 1 }
                                left: (/)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = intVar }
2749.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { right = 3 }
                                left: unaryOp (neg) { expr = 10 }
2751.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { left = 10 }
                                right: unaryOp (neg) { expr = 3 }
2753.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { right = 5, left = 123 }
2755.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { right = 3 }
                                left: parens
                                    expr: (+) { right = 2, left = 1 }
2757.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { left = 1 }
                                right: parens
                                    expr: (+) { right = 3, left = 2 }
2759.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: (/) { right = 1 }
                                left: lValue { varID = intVar }
2761.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { left = 1 }
                                    right: (/)
                                        right: lValue { varID = intVar }
                                        left: lValue { varID = intVar }
2763.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { left = 2 }
                                right: lValue { varID = intVar }
2765.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { right = 2 }
                                left: lValue { varID = intVar }
2769.                    assign (=)
                            lValue: lValue { varID = circle }
                            expr: (||) { right = false }
                                left: lValue { varID = intVar }
2771.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2774.                                if
                                        expr: (&&) { right = true }
                                            left: lValue { varID = rect }
                                        block: block { #stmts = 1 }
                                            stmts:
2775.                                            call voidMethod
                            expr: (&&) { left = true }
                                right: lValue { varID = dblVar }
                            block: block { #stmts = 1 }
                                stmts:
2772.                                call voidMethod
2777.                    while
                            expr: (&&)
                                right: lValue { varID = boolVar }
                                left: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
2778.                                break
2779.                    doWhile { iLineWhile = 2782 }
                            expr: (||)
                                right: lValue { varID = strVar }
                                left: lValue { varID = dblVar }
                            block: block { #stmts = 1 }
                                stmts:
2780.                                break
2786.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (<)
                                right: lValue { varID = rect }
                                left: lValue { varID = circle }
2788.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2791.                                if
                                        expr: (<=) { right = 10, left = "level" }
                                        block: block { #stmts = 1 }
                                            stmts:
2792.                                            call voidMethod
                            expr: (>) { right = false, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
2789.                                call voidMethod
2794.                    while
                            expr: (>=)
                                right: lValue { varID = rect, fieldID = visible }
                                left: (+) { right = 1, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
2795.                                break
2796.                    doWhile { iLineWhile = 2799 }
                            expr: (<) { left = 3.14 }
                                right: lValue { varID = text }
                            block: block { #stmts = 1 }
                                stmts:
2797.                                break
2803.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (==)
                                right: lValue { varID = rect }
                                left: lValue { varID = boolVar }
2805.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (!=) { right = true }
                                left: lValue { varID = rect }
2807.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (==) { left = "3.14" }
                                right: staticField { fieldID = PI, class = Math }
2809.                    for
                            expr: (!=)
                                right: lValue { varID = strVar }
                                left: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
2810.                                call voidMethod
2812.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (==) { right = true }
                                left: lValue { varID = strVar }
2814.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (!=) { right = false, left = "false" }
2815.                    doWhile { iLineWhile = 2818 }
                            expr: (==) { right = false, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
2816.                                call voidMethod
2820.                    while
                            expr: (!=) { right = 0 }
                                left: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
2821.                                call voidMethod
2823.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2826.                                if
                                        expr: (!=) { left = 1 }
                                            right: lValue { varID = circle }
                                        block: block { #stmts = 1 }
                                            stmts:
2827.                                            call voidMethod
                            expr: (==) { right = 1 }
                                left: lValue { varID = rect }
                            block: block { #stmts = 1 }
                                stmts:
2824.                                call voidMethod
2831.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (=)
                                    right: lValue { varID = rect }
                                    left: lValue { varID = circle }
2833.                    while
                            expr: (=) { right = false }
                                left: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
2834.                                assign (=) { expr = true }
                                        lValue: lValue { varID = boolVar }
2836.                    if
                            expr: (=) { right = 100 }
                                left: lValue { varID = rect, fieldID = x }
                            block: block { #stmts = 1 }
                                stmts:
2837.                                call setXSpeed { #exprs = 1 }
                                        lValue: lValue { varID = rect }
                                        exprs:
                                            unaryOp (neg) { expr = 1 }
2839.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: parens
                                expr: (=) { right = 2 }
                                    left: (+) { right = 1, left = 1 }
2841.                    if
                            expr: (=) { right = 1 }
                                left: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
2842.                                call println { #exprs = 1, class = ct }
                                        exprs:
2842.                                        ("oops")
2846.                    call println { #exprs = 1, class = ct }
                            exprs:
                                call voidMethod
2848.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: call println { class = ct }
2851.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (|) { right = 1, left = 2 }
2853.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (^) { right = 1, left = 2 }
2855.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (&) { right = 1, left = 2 }
2857.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (>>>) { right = 1, left = 2 }
2859.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (>>) { right = 1, left = 2 }
2861.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (<<) { right = 1, left = 2 }
2863.                    call println { #exprs = 1, class = ct }
                            exprs:
                                call getType { #exprs = 1, class = ct }
                                    exprs:
                                        lValue { varID = circle }
2865.                    if
                            expr: call hit { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = objArr }
                                        indexExpr: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
2866.                                call logm { #exprs = 3, class = ct }
                                        exprs:
2866.                                        ("hit")
                                            lValue { varID = objArr }
                                                indexExpr: lValue { varID = intVar }
                                            lValue { varID = intVar }
2877.        func funcWithOverIndentedBracket { #paramVars = 0, vt = void }
                block: block { iLineEnd = 2880, #stmts = 0, iLineBegin = 2879 }
        vars:
  7.        var classLevelInt { vt = int, isGlobal = true, initExpr = 0 }
  8.        var classLevelDouble { vt = double, isGlobal = true, initExpr = 0 }
  9.        var classLevelBoolean { vt = boolean, isGlobal = true, initExpr = false }
 10.        var classLevelString { vt = String, isGlobal = true, initExpr = "" }
 11.        var classLevelBoolean2 { vt = boolean, isGlobal = true }
                initExpr: call equals { #exprs = 1 }
                    lValue: lValue { varID = classLevelString }
                    exprs:
 11.                    ("")
 12.        var classLevelStringLength { vt = int, isGlobal = true }
                initExpr: call length
                    lValue: lValue { varID = classLevelString }
 13.        var classLevelGameObj { vt = GameObj, isGlobal = true }
 14.        var classLevelIntArr { vt = array of int, isGlobal = true }
                initExpr: newArray { vtElement = 0, lengthExpr = 10 }
 15.        var classLevelIntArrSub0 { vt = int, isGlobal = true }
                initExpr: lValue { varID = classLevelIntArr, indexExpr = 0 }
 16.        var classLevelIntArrLength { vt = int, isGlobal = true }
                initExpr: lValue { varID = classLevelIntArr, fieldID = length }
 17.        var classLevelUnassignedVar { vt = GameObj, isGlobal = true }
 19.        var varFromCtCallBeforeStart { vt = GameObj, isGlobal = true }
                initExpr: call rect { #exprs = 4, class = ct }
                    exprs:
 19.                    (0)
 19.                    (0)
 19.                    (10)
 19.                    (10)
 21.        var intVarFromUserMethod { vt = GameObj, isGlobal = true }
                initExpr: call intMethod
 22.        var myVar { vt = int, isGlobal = true, initExpr = 1 }
 24.        var button { vt = GameObj, isGlobal = true }
                initExpr: call text { #exprs = 4, class = ct }
                    exprs:
 24.                    ("START")
 24.                    (0)
 24.                    (0)
 24.                    (10)
 26.        var intResult { vt = int, isGlobal = true }
                initExpr: call intFunc
 28.        var overIndentedInstanceVar { vt = int, isGlobal = true }
 30.        var underIndentedInstanceVar { vt = int, isGlobal = true }
 32.        var classLevelMultilineIntArray1 { vt = array of int, isGlobal = true }
                initExpr: arrayInit { #exprs = 2 }
                    exprs:
 32.                    (1)
 33.                    (2)
 35.        var classLevelMultilineIntArray2 { vt = array of int, isGlobal = true }
                initExpr: arrayInit { #exprs = 3 }
                    exprs:
 35.                    (1)
 36.                    (2)
 37.                    (3)
 39.        var classLevelMultilineIntArray3 { vt = array of int, isGlobal = true }
                initExpr: newArray { vtElement = 0 }
                    lengthExpr: call max { #exprs = 2, class = Math }
                        exprs:
 39.                        (1)
 40.                        (2)
 42.        var classLevelVarTypeMismatchIntDouble { vt = int, isGlobal = true, initExpr = 0.1 }
 44.        var MAX_ENEMIES { vt = int, isConst = true, isGlobal = true, initExpr = 100 }
 45.        var numEnemies { vt = int, isGlobal = true }
                initExpr: call min { #exprs = 2, class = Math }
                    exprs:
 45.                    (1000)
                        lValue { varID = MAX_ENEMIES }
 46.        var doubleArr { vt = array of double, isGlobal = true }
                initExpr: arrayInit { #exprs = 3 }
                    exprs:
 46.                    (1.0)
 47.                    (2.0)
 48.                    (3.0)
 49.        var leftWall { vt = GameObj, isGlobal = true }
 49.        var rightWall { vt = GameObj, isGlobal = true }
 49.        var topWall { vt = GameObj, isGlobal = true }
 49.        var bottomWall { vt = GameObj, isGlobal = true }
 50.        var enemies { vt = array of GameObj, isGlobal = true }
 51.        var friends { vt = array of GameObj, isGlobal = true }
                initExpr: newArray { vtElement = "GameObj" }
                    lengthExpr: lValue { varID = MAX_ENEMIES }
 52.        var myPrivateVar { vt = int, isGlobal = true }
 54.        var instanceIntVar1 { vt = int, isGlobal = true }
                initExpr: (|) { right = 1, left = 2 }
 56.        var instanceIntVar2 { vt = int, isGlobal = true }
                initExpr: (^) { right = 1, left = 2 }
 58.        var instanceIntVar3 { vt = int, isGlobal = true }
                initExpr: (&) { right = 1, left = 2 }
 60.        var instanceIntVar4 { vt = int, isGlobal = true }
                initExpr: (>>>) { right = 1, left = 2 }
 62.        var instanceIntVar5 { vt = int, isGlobal = true }
                initExpr: (>>) { right = 1, left = 2 }
 64.        var instanceIntVar6 { vt = int, isGlobal = true }
                initExpr: (<<) { right = 1, left = 2 }
 66.        var instanceBoolVar1 { vt = boolean, isGlobal = true }
                initExpr: parens
                    expr: (=) { right = 2 }
                        left: (+) { right = 1, left = 1 }
 68.        var instanceBoolVar2 { vt = boolean, isGlobal = true }
                initExpr: (==) { right = 0, left = false }
 70.        var instanceBoolVar3 { vt = boolean, isGlobal = true }
                initExpr: (==) { left = 1 }
                    right: lValue { varID = button }
 72.        var instanceBoolVar4 { vt = boolean, isGlobal = true }
                initExpr: (>) { right = false, left = 1 }
 74.        var instanceBoolVar4 { vt = boolean, isGlobal = true }
                initExpr: (||)
                    right: lValue { varID = doubleArr, indexExpr = 0 }
                    left: parens
                        expr: (==) { right = 2 }
                            left: (+) { right = 1, left = 1 }
 76.        var instanceIntVar7 { vt = int, isGlobal = true }
                initExpr: (/) { right = 3 }
                    left: unaryOp (neg) { expr = 10 }
 78.        var instanceDblVar { vt = double, isGlobal = true }
                initExpr: (-) { right = ".txt" }
                    left: lValue { varID = classLevelString }
 80.        var instanceIntVar { vt = int, isGlobal = true }
                initExpr: (%)
                    right: lValue { varID = button }
                    left: lValue { varID = button, fieldID = group }
 82.        var instanceDblVar2 { vt = double, isGlobal = true }
                initExpr: (/) { right = 10 }
                    left: lValue { varID = button }
 84.        var instanceDblVar3 { vt = double, isGlobal = true }
                initExpr: (*) { right = 2 }
                    left: lValue { varID = button }
 86.        var instanceDblVar4 { vt = double, isGlobal = true }
                initExpr: (-) { left = 100 }
                    right: lValue { varID = button }
 88.        var classLevelDouble { vt = double, isGlobal = true }
                initExpr: (/) { left = 1 }
                    right: parens
                        expr: (+) { right = 1 }
                            left: (+)
                                right: lValue { varID = classLevelInt }
                                left: lValue { varID = classLevelBoolean }
 90.        var classLevelString { vt = String, isGlobal = true }
                initExpr: (+)
                    right: lValue { varID = button }
                    left: lValue { varID = classLevelBoolean }
 92.        var classLevelInt { vt = int, isGlobal = true }
                initExpr: (+)
                    right: (/) { right = 2 }
                        left: lValue { varID = classLevelDouble }
                    left: lValue { varID = classLevelBoolean }
 94.        var classLevelInt { vt = int, isGlobal = true }
                initExpr: (-) { right = 1 }
                    left: (+)
                        right: lValue { varID = classLevelInt }
                        left: lValue { varID = classLevelBoolean }
 96.        var classLevelBoolean { vt = boolean, isGlobal = true }
                initExpr: (+)
                    right: lValue { varID = classLevelBoolean }
                    left: lValue { varID = classLevelBoolean }
 98.        var classLevelDouble { vt = double, isGlobal = true }
                initExpr: (+)
                    right: lValue { varID = button }
                    left: lValue { varID = button }
100.        var classLevelDouble { vt = double, isGlobal = true }
                initExpr: (+) { left = 2 }
                    right: lValue { varID = classLevelGameObj }
102.        var classLevelDouble { vt = double, isGlobal = true }
                initExpr: (+) { right = false }
                    left: lValue { varID = rect, fieldID = x }
104.        var arrFromPlusOperator { vt = array of double, isGlobal = true }
                initExpr: (+) { right = 1 }
                    left: lValue { varID = doubleArr }
106.        var arrFromPlusOperator2 { vt = array of double, isGlobal = true }
                initExpr: (+)
                    right: lValue { varID = classLevelString }
                    left: lValue { varID = friends }
108.        var classLevelArrInit { vt = array of String, isGlobal = true }
                initExpr: arrayInit { #exprs = 3 }
                    exprs:
                        lValue { varID = classLevelString }
                        lValue { varID = classlevelInt }
                        lValue { varID = classLevelDouble }
110.        var classLevelArrInit { vt = array of String, isGlobal = true }
                initExpr: arrayInit { #exprs = 3 }
                    exprs:
                        lValue { varID = classLevelString }
                        lValue { varID = classLevelInt }
                        lValue { varID = classLevelDouble }
112.        var arrInit9 { vt = array of String, isGlobal = true }
                initExpr: arrayInit { #exprs = 1 }
                    exprs:
                        newArray { vtElement = "String" }
                            lengthExpr: lValue { varID = classLevelInt }
116.        var intArrDoubleCount { vt = array of int, isGlobal = true }
                initExpr: newArray { vtElement = 0, lengthExpr = 10.0 }
118.        var boolVarNotInt { vt = boolean, isGlobal = true }
                initExpr: unaryOp (not)
                    expr: lValue { varID = classLevelInt }
120.        var negateString { vt = String, isGlobal = true }
                initExpr: unaryOp (neg)
                    expr: lValue { varID = classLevelString }
122.        var intCastOnInt1 { vt = double, isGlobal = true }
                initExpr: cast { vtCast = 0 }
                    expr: parens
                        expr: (+) { right = 314 }
                            left: lValue { varID = undefinedVar }
124.        var intCastOnInt2 { vt = double, isGlobal = true }
                initExpr: cast { vtCast = 0 }
                    expr: parens
                        expr: (+) { right = 314 }
                            left: lValue { varID = classLevelInt }
126.        var classLevelGameObjArr { vt = array of GameObj, isGlobal = true }
                initExpr: newArray { vtElement = "GameObj" }
                    lengthExpr: (*) { left = 2 }
                        right: cast { vtCast = 0 }
                            expr: lValue { varID = classLevelString }
128.        var doubleCastOnDouble { vt = double, isGlobal = true }
                initExpr: cast { vtCast = 1 }
                    expr: parens
                        expr: (*) { right = 2.3, left = 10 }
130.        var stringCast { vt = String, isGlobal = true }
                initExpr: cast { vtCast = "String" }
                    expr: lValue { varID = classLevelGameObj, fieldID = group }
132.        var stringCast2 { vt = String, isGlobal = true }
                initExpr: cast { vtCast = "String" }
                    expr: lValue { varID = classLevelDouble }
134.        var unknownMathField { vt = double, isGlobal = true }
                initExpr: staticField { fieldID = P, class = Math }
136.        var classLevelMathInitErr { vt = double, isGlobal = true }
                initExpr: call min { #exprs = 3, class = Math }
                    exprs:
136.                    (1)
136.                    (2)
136.                    (3)
138.        var classLevelMathInitErr2 { vt = double, isGlobal = true }
                initExpr: call sin { class = Math }
140.        var classLevelMathInitErr3 { vt = double, isGlobal = true }
                initExpr: call pow { #exprs = 1, class = Math }
                    exprs:
140.                    (2)
142.        var intVarMethodCall { vt = int, isGlobal = true }
                initExpr: call delete
                    lValue: lValue { varID = classLevelInt }
144.        var stringSize { vt = String, isGlobal = true }
                initExpr: call size
                    lValue: lValue { varID = classLevelString }
146.        var unknownMathMethod { vt = double, isGlobal = true }
                initExpr: call foo { class = Math }
148.        var greeting { vt = String, isGlobal = true }
                initExpr: call println { lValue = out, #exprs = 1, class = System }
                    exprs:
148.                    ("hello")
152.        var classlevelBoolean { vt = boolean, isGlobal = true, initExpr = true }
154.        var classLevelInt { vt = int, isGlobal = true }
156.        var caseSentiveClassLevelVar { vt = double, isGlobal = true }
                initExpr: (+) { right = 1 }
                    left: lValue { varID = classlevelint }
158.        var Starts_with_capital_letter_var_class_level { vt = int, isGlobal = true }
160.        var StartsWithCapitalLetterVarWithAssignmentClassLevel { vt = double, isGlobal = true, initExpr = 3.14 }
162.        var StartsWithCapitalGameObjArr { vt = array of GameObj, isGlobal = true }
                initExpr: newArray { vtElement = "GameObj", lengthExpr = 10 }
757.        var newWidth { vt = double, isGlobal = true }
                initExpr: call getWidth { class = ct }
