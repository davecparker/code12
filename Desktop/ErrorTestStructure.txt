    program ErrorTest { #funcs = 113, #vars = 86 }
        funcs:
174.        func emptyFunc { #paramVars = 0, vt = void }
                block: block { iLineEnd = 176, #stmts = 0, iLineBegin = 175 }
177.        func voidFunc { #paramVars = 0, vt = void }
                block: block { iLineEnd = 180, #stmts = 1, iLineBegin = 178 }
                    stmts:
179.                    var i { vt = int, initExpr = 0 }
181.        func intFunc { #paramVars = 0, vt = int }
                block: block { iLineEnd = 185, #stmts = 2, iLineBegin = 182 }
                    stmts:
183.                    var i { vt = int, initExpr = 1 }
184.                    return
                            expr: lValue { varID = i }
186.        func dblFunc { #paramVars = 0, vt = double }
                block: block { iLineEnd = 190, #stmts = 2, iLineBegin = 187 }
                    stmts:
188.                    var d { vt = double, initExpr = 0.0 }
189.                    return
                            expr: lValue { varID = d }
191.        func boolFunc { #paramVars = 0, vt = boolean }
                block: block { iLineEnd = 195, #stmts = 2, iLineBegin = 192 }
                    stmts:
193.                    var b { vt = boolean, initExpr = true }
194.                    return
                            expr: lValue { varID = b }
196.        func strFunc { #paramVars = 0, vt = String }
                block: block { iLineEnd = 200, #stmts = 2, iLineBegin = 197 }
                    stmts:
198.                    var s { vt = String, initExpr = "" }
199.                    return
                            expr: lValue { varID = s }
201.        func gObjFunc { #paramVars = 0, vt = GameObj }
                block: block { iLineEnd = 204, #stmts = 1, iLineBegin = 202 }
                    stmts:
203.                    return
                            expr: call circle { #exprs = 3, class = ct }
                                exprs:
203.                                (0.0)
203.                                (0.0)
203.                                (1.0)
205.        func intArrFuncInt { #paramVars = 1, vt = array of int }
                paramVars:
205.                var n { vt = int, isGlobal = false }
                block: block { iLineEnd = 208, #stmts = 1, iLineBegin = 206 }
                    stmts:
207.                    return
                            expr: newArray { vtElement = 0 }
                                lengthExpr: lValue { varID = n }
209.        func intFuncInt { #paramVars = 1, vt = int }
                paramVars:
209.                var i { vt = int, isGlobal = false }
                block: block { iLineEnd = 212, #stmts = 1, iLineBegin = 210 }
                    stmts:
211.                    return
                            expr: (+) { right = 1 }
                                left: (*) { right = 2 }
                                    left: lValue { varID = i }
213.        func dblFuncIntDbl { #paramVars = 2, vt = double }
                paramVars:
213.                var i { vt = int, isGlobal = false }
213.                var d { vt = double, isGlobal = false }
                block: block { iLineEnd = 216, #stmts = 1, iLineBegin = 214 }
                    stmts:
215.                    return
                            expr: (+)
                                right: lValue { varID = d }
                                left: lValue { varID = i }
217.        func boolFuncBoolStringGameObj { #paramVars = 3, vt = boolean }
                paramVars:
217.                var b { vt = boolean, isGlobal = false }
217.                var s { vt = String, isGlobal = false }
217.                var g { vt = GameObj, isGlobal = false }
                block: block { iLineEnd = 220, #stmts = 1, iLineBegin = 218 }
                    stmts:
219.                    return
                            expr: (&&)
                                right: lValue { varID = g, fieldID = visible }
                                left: (&&)
                                    right: call equals { #exprs = 1 }
                                        lValue: lValue { varID = s }
                                        exprs:
219.                                        ("")
                                    left: lValue { varID = b }
221.        func recursiveFunc { #paramVars = 1, vt = int }
                paramVars:
221.                var i { vt = int, isGlobal = false }
                block: block { iLineEnd = 226, #stmts = 2, iLineBegin = 222 }
                    stmts:
223.                    if
                            expr: (<=) { right = 0 }
                                left: lValue { varID = i }
                            block: block { #stmts = 1 }
                                stmts:
224.                                return { expr = 0 }
225.                    return
                            expr: (+) { left = 1 }
                                right: call recursiveFunc { #exprs = 1 }
                                    exprs:
                                        (-) { right = 1 }
                                            left: lValue { varID = i }
227.        func multiLineFuncDecl { #paramVars = 3, vt = void }
                paramVars:
227.                var arg1 { vt = int, isGlobal = false }
228.                var arg2 { vt = double, isGlobal = false }
229.                var arg3 { vt = boolean, isGlobal = false }
                block: block { iLineEnd = 232, #stmts = 1, iLineBegin = 230 }
                    stmts:
231.                    call log { #exprs = 3, class = ct }
                            exprs:
                                lValue { varID = arg1 }
                                lValue { varID = arg2 }
                                lValue { varID = arg3 }
235.        func start { #paramVars = 0, isPublic = true, vt = int }
                block: block { iLineEnd = 759, #stmts = 419, iLineBegin = 236 }
                    stmts:
239.                    var LIMIT { vt = int, isConst = true, initExpr = 100 }
241.                    var i { vt = int, initExpr = 3 }
242.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: unaryOp (neg) { expr = 5 }
243.                    assign (++)
                            lValue: lValue { varID = i }
244.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (+) { right = 1 }
                                left: lValue { varID = i }
245.                    assign (+=) { expr = 1 }
                            lValue: lValue { varID = i }
246.                    assign (-=) { expr = 2 }
                            lValue: lValue { varID = i }
247.                    assign (*=) { expr = 3 }
                            lValue: lValue { varID = i }
248.                    assign (/=) { expr = 4 }
                            lValue: lValue { varID = i }
249.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call intFunc
250.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call intFuncInt { #exprs = 1 }
                                exprs:
                                    (-)
                                        right: (*) { left = 345 }
                                            right: lValue { varID = i }
                                        left: (-)
                                            right: parens
                                                expr: (+)
                                                    right: lValue { varID = i }
                                                    left: lValue { varID = i }
                                            left: lValue { varID = i }
251.                    var foo { vt = int }
                            initExpr: (+) { right = 4 }
                                left: lValue { varID = i }
252.                    var score { vt = int, initExpr = 500 }
253.                    var j { vt = int }
253.                    var k { vt = int }
254.                    var exponentialNumberNoDot { vt = double, initExpr = 12e10 }
255.                    var exponentialNumberWithDot { vt = double, initExpr = 3.42e2 }
256.                    var expontialNumberWithDecimalPlaces { vt = double, initExpr = 6.62e-34 }
257.                    var d { vt = double, initExpr = 3.14 }
258.                    assign (=) { expr = 100 }
                            lValue: lValue { varID = d }
259.                    assign (=) { expr = .5 }
                            lValue: lValue { varID = d }
260.                    assign (=) { expr = 1.2345e6 }
                            lValue: lValue { varID = d }
261.                    assign (=) { expr = 1.2345e+67 }
                            lValue: lValue { varID = d }
262.                    assign (=) { expr = .12e0 }
                            lValue: lValue { varID = d }
263.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: unaryOp (neg) { expr = .123e-123 }
264.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: unaryOp (neg) { expr = .5 }
265.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (/) { right = 2 }
                                left: lValue { varID = d }
266.                    assign (++)
                            lValue: lValue { varID = d }
267.                    assign (+=) { expr = 5 }
                            lValue: lValue { varID = d }
268.                    assign (+=) { expr = 0.5 }
                            lValue: lValue { varID = d }
269.                    assign (-=) { expr = 7 }
                            lValue: lValue { varID = d }
270.                    assign (*=) { expr = 8 }
                            lValue: lValue { varID = d }
271.                    assign (/=) { expr = 8.0 }
                            lValue: lValue { varID = d }
272.                    var d2 { vt = double, initExpr = 3 }
273.                    var d3 { vt = double }
                            initExpr: (+)
                                right: (*) { left = 2 }
                                    right: parens
                                        expr: (+)
                                            right: lValue { varID = d }
                                            left: lValue { varID = d2 }
                                left: lValue { varID = d }
274.                    var x1 { vt = double }
274.                    var x2 { vt = double }
274.                    var y1 { vt = double }
274.                    var y2 { vt = double }
275.                    assign (=) { expr = 1 }
                            lValue: lValue { varID = x1 }
276.                    assign (=) { expr = 2.0 }
                            lValue: lValue { varID = x2 }
277.                    assign (=) { expr = .5e+1 }
                            lValue: lValue { varID = y1 }
278.                    assign (=)
                            lValue: lValue { varID = y2 }
                            expr: unaryOp (neg) { expr = .5e-1 }
279.                    var eps { vt = double, initExpr = 1e-4 }
280.                    var name { vt = String, initExpr = "Einstein" }
281.                    var b { vt = boolean, initExpr = true }
282.                    var b2 { vt = boolean, initExpr = false }
283.                    var b3 { vt = boolean }
                            initExpr: (||)
                                right: lValue { varID = b2 }
                                left: lValue { varID = b }
284.                    var s { vt = String, initExpr = "A string variable" }
285.                    assign (+=) { expr = " named s" }
                            lValue: lValue { varID = s }
286.                    assign (+=)
                            lValue: lValue { varID = s }
                            expr: lValue { varID = s }
287.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: lValue { varID = s }
288.                    assign (=) { expr = null }
                            lValue: lValue { varID = s }
290.                    var colors { vt = array of String }
                            initExpr: arrayInit { #exprs = 5 }
                                exprs:
290.                                ("black")
290.                                ("white")
290.                                ("red")
290.                                ("green")
290.                                ("blue")
291.                    assign (=) { expr = 100 }
                            lValue: lValue { varID = i }
292.                    var strArr { vt = array of String }
                            initExpr: newArray { vtElement = "String" }
                                lengthExpr: lValue { varID = i }
293.                    assign (=)
                            lValue: lValue { varID = strArr }
                            expr: lValue { varID = colors }
294.                    var intArr { vt = array of int }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
294.                                (1)
294.                                (2)
294.                                (3)
295.                    assign (=)
                            lValue: lValue { varID = intArr }
                            expr: newArray { vtElement = 0, lengthExpr = 100 }
296.                    var intArr2 { vt = array of int }
                            initExpr: newArray { vtElement = 0 }
                                lengthExpr: call length
                                    lValue: lValue { varID = s }
297.                    assign (=)
                            lValue: lValue { varID = intArr }
                            expr: lValue { varID = intArr2 }
298.                    var dblArr { vt = array of double }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
298.                                (1.1)
298.                                (2.2)
298.                                (3.3)
299.                    var dblArr2 { vt = array of double }
                            initExpr: newArray { vtElement = 1, lengthExpr = 100 }
300.                    assign (=)
                            lValue: lValue { varID = dblArr }
                            expr: lValue { varID = dblArr2 }
301.                    var gObjArr { vt = array of GameObj }
                            initExpr: newArray { vtElement = "GameObj" }
                                lengthExpr: (*) { right = 2 }
                                    left: lValue { varID = i }
303.                    call voidFunc
304.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call intFunc
305.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call dblFunc
306.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call boolFunc
307.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: call strFunc
308.                    var gObj { vt = GameObj }
                            initExpr: call gObjFunc
309.                    assign (=)
                            lValue: lValue { varID = intArr }
                            expr: call intArrFuncInt { #exprs = 1 }
                                exprs:
                                    lValue { varID = i }
310.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call intFuncInt { #exprs = 1 }
                                exprs:
                                    lValue { varID = i }
311.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call dblFuncIntDbl { #exprs = 2 }
                                exprs:
                                    lValue { varID = i }
                                    lValue { varID = d }
312.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call boolFuncBoolStringGameObj { #exprs = 3 }
                                exprs:
                                    lValue { varID = b }
                                    lValue { varID = s }
                                    lValue { varID = gObj }
313.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call recursiveFunc { #exprs = 1 }
                                exprs:
313.                                (2)
315.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (/) { right = 1, left = 5 }
316.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (/) { right = 20, left = 100 }
317.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (+)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
318.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (-)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
319.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (*)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
320.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (%)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
321.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (-)
                                right: lValue { varID = i }
                                left: (+)
                                    right: lValue { varID = i }
                                    left: (*)
                                        right: lValue { varID = i }
                                        left: lValue { varID = i }
322.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (*)
                                right: parens
                                    expr: (-)
                                        right: lValue { varID = i }
                                        left: parens
                                            expr: (+)
                                                right: lValue { varID = i }
                                                left: lValue { varID = i }
                                left: lValue { varID = i }
323.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: lValue { varID = i }
324.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (+)
                                right: lValue { varID = i }
                                left: lValue { varID = d }
325.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (-)
                                right: lValue { varID = i }
                                left: lValue { varID = d }
326.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (*)
                                right: lValue { varID = i }
                                left: lValue { varID = d }
327.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (/)
                                right: lValue { varID = i }
                                left: lValue { varID = d }
328.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (%)
                                right: lValue { varID = i }
                                left: lValue { varID = d }
329.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (+)
                                right: lValue { varID = d }
                                left: lValue { varID = i }
330.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (-)
                                right: lValue { varID = d }
                                left: lValue { varID = i }
331.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (*)
                                right: lValue { varID = d }
                                left: lValue { varID = i }
332.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (/)
                                right: lValue { varID = d }
                                left: lValue { varID = i }
333.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (%)
                                right: lValue { varID = d }
                                left: lValue { varID = i }
334.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (+)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
335.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (-)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
336.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (*)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
337.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (/)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
338.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (%)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
339.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (+)
                                right: (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
                                left: (-)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
340.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (-)
                                right: lValue { varID = i }
                                left: (+)
                                    right: (*)
                                        right: lValue { varID = i }
                                        left: lValue { varID = i }
                                    left: lValue { varID = d }
341.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (-)
                                right: (*)
                                    right: lValue { varID = d }
                                    left: lValue { varID = d }
                                left: (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
342.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: parens
                                expr: (-)
                                    right: (*)
                                        right: lValue { varID = d }
                                        left: lValue { varID = d }
                                    left: (*)
                                        right: lValue { varID = i }
                                        left: lValue { varID = i }
343.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: (+)
                                right: lValue { varID = s }
                                left: lValue { varID = s }
344.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: (+) { right = "s" }
                                left: (+)
                                    right: lValue { varID = s }
                                    left: lValue { varID = s }
345.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: (+)
                                right: lValue { varID = i }
                                left: lValue { varID = s }
346.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: (+)
                                right: lValue { varID = d }
                                left: lValue { varID = s }
347.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: (+)
                                right: lValue { varID = b }
                                left: lValue { varID = s }
348.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: (+)
                                right: lValue { varID = gObj }
                                left: lValue { varID = s }
349.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: (+)
                                right: lValue { varID = s }
                                left: lValue { varID = i }
350.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: (+)
                                right: lValue { varID = s }
                                left: lValue { varID = d }
351.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: (+)
                                right: lValue { varID = s }
                                left: lValue { varID = b }
352.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: (+)
                                right: lValue { varID = s }
                                left: lValue { varID = gObj }
353.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: lValue { varID = b }
354.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: unaryOp (not)
                                expr: lValue { varID = b }
355.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: parens
                                expr: lValue { varID = b }
356.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (==)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
357.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (==)
                                right: lValue { varID = d }
                                left: lValue { varID = i }
358.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (==)
                                right: lValue { varID = i }
                                left: lValue { varID = d }
359.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (==)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
360.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (==)
                                right: lValue { varID = b }
                                left: lValue { varID = b }
361.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (==)
                                right: lValue { varID = gObj }
                                left: lValue { varID = gObj }
362.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (!=)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
363.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (!=)
                                right: lValue { varID = d }
                                left: lValue { varID = i }
364.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (!=)
                                right: lValue { varID = i }
                                left: lValue { varID = d }
365.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (!=)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
366.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (!=)
                                right: lValue { varID = b }
                                left: lValue { varID = b }
367.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (!=)
                                right: lValue { varID = gObj }
                                left: lValue { varID = gObj }
368.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (<)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
369.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (>)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
370.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (<=)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
371.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (>=)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
372.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (<)
                                right: lValue { varID = d }
                                left: lValue { varID = i }
373.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (>)
                                right: lValue { varID = d }
                                left: lValue { varID = i }
374.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (<=)
                                right: lValue { varID = d }
                                left: lValue { varID = i }
375.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (>=)
                                right: lValue { varID = d }
                                left: lValue { varID = i }
376.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (<)
                                right: lValue { varID = i }
                                left: lValue { varID = d }
377.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (>)
                                right: lValue { varID = i }
                                left: lValue { varID = d }
378.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (<=)
                                right: lValue { varID = i }
                                left: lValue { varID = d }
379.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (>=)
                                right: lValue { varID = i }
                                left: lValue { varID = d }
380.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (<)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
381.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (>)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
382.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (<=)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
383.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (>=)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
384.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (||)
                                right: lValue { varID = b }
                                left: lValue { varID = b }
385.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (&&)
                                right: lValue { varID = b }
                                left: lValue { varID = b }
386.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (<) { right = 2, left = 1 }
387.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (<=) { right = 2, left = 1.1 }
388.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (>) { right = 2, left = 1 }
389.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (>=) { right = 2.2, left = 1 }
390.                    assign (=)
                            lValue: lValue { varID = b2 }
                            expr: (||)
                                right: (&&)
                                    right: (==)
                                        right: lValue { varID = b }
                                        left: lValue { varID = b }
                                    left: lValue { varID = b3 }
                                left: lValue { varID = b2 }
391.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (==) { right = 0 }
                                left: (%) { right = 2 }
                                    left: lValue { varID = i }
392.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (&&)
                                right: lValue { varID = b }
                                left: parens
                                    expr: (||)
                                        right: lValue { varID = b }
                                        left: lValue { varID = b }
393.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: (&&)
                                right: parens
                                    expr: (<) { right = 0.0001 }
                                        left: (-) { right = 3.14159 }
                                            left: staticField { fieldID = PI, class = Math }
                                left: parens
                                    expr: (==) { right = 2 }
                                        left: (+) { right = 1, left = 1 }
395.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
397.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
400.                                            assign (*=) { expr = 5 }
                                                    lValue: lValue { varID = i }
                                        expr: (<=) { right = 10 }
                                            left: lValue { varID = i }
                                        block: block { #stmts = 1 }
                                            stmts:
398.                                            assign (++)
                                                    lValue: lValue { varID = i }
                            expr: (==) { right = 0 }
                                left: lValue { varID = i }
                            block: block { #stmts = 1 }
                                stmts:
396.                                call setBackColor { #exprs = 1, class = ct }
                                        exprs:
                                            lValue { varID = colors }
                                                indexExpr: lValue { varID = i }
402.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
407.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
412.                                            if
                                                    elseBlock: block { iLineEnd = 418, #stmts = 2, iLineBegin = 415 }
                                                        stmts:
416.                                                        var tempStr { vt = String, initExpr = "I'll be " }
417.                                                        assign (=)
                                                                lValue: lValue { varID = tempStr }
                                                                expr: (+) { right = "out of scope soon" }
                                                                    left: lValue { varID = tempStr }
                                                    expr: lValue { varID = b }
                                                    block: block { #stmts = 1 }
                                                        stmts:
413.                                                        assign (++)
                                                                lValue: lValue { varID = i }
                                        expr: (<=) { right = 10 }
                                            left: lValue { varID = i }
                                        block: block { iLineEnd = 411, #stmts = 2, iLineBegin = 408 }
                                            stmts:
409.                                            assign (=) { expr = 7 }
                                                    lValue: lValue { varID = d }
410.                                            call setSoundVolume { #exprs = 1, class = ct }
                                                    exprs:
410.                                                    (1)
                            expr: (>) { right = 0 }
                                left: lValue { varID = i }
                            block: block { iLineEnd = 406, #stmts = 2, iLineBegin = 403 }
                                stmts:
404.                                assign (=) { expr = 0 }
                                        lValue: lValue { varID = j }
405.                                assign (=) { expr = 0 }
                                        lValue: lValue { varID = k }
419.                    if
                            expr: (&&)
                                right: (<=)
                                    right: lValue { varID = eps }
                                    left: call distance { #exprs = 4, class = ct }
                                        exprs:
                                            lValue { varID = x1 }
                                            lValue { varID = y1 }
                                            lValue { varID = x2 }
                                            lValue { varID = y2 }
                                left: call isError { #exprs = 1, class = ct }
                                    exprs:
                                        call tan { #exprs = 1, class = Math }
                                            exprs:
                                                lValue { varID = d }
                            block: block { #stmts = 1 }
                                stmts:
420.                                call println { #exprs = 1, class = ct }
                                        exprs:
420.                                        ("oops")
422.                    for { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
423.                                for
                                        block: block { #stmts = 1 }
                                            stmts:
424.                                            for
424.                                                initStmt: assign (=) { expr = 0 }
                                                        lValue: lValue { varID = i }
                                                    block: block { #stmts = 1 }
                                                        stmts:
425.                                                        for
                                                                expr: (<) { right = 10 }
                                                                    left: lValue { varID = i }
                                                                block: block { #stmts = 1 }
                                                                    stmts:
426.                                                                    for
                                                                            block: block { #stmts = 1 }
                                                                                stmts:
427.                                                                                for
                                                                                        expr: lValue { varID = b }
                                                                                        block: block { #stmts = 1 }
                                                                                            stmts:
428.                                                                                            assign (=) { expr = 0 }
                                                                                                    lValue: lValue { varID = d }
426.                                                                        nextStmt: assign (++)
                                                                                lValue: lValue { varID = i }
429.                    for
                            expr: (<) { right = 10 }
                                left: lValue { varID = ii }
429.                        initStmt: var ii { vt = int, isGlobal = false, initExpr = 0 }
                            block: block { iLineEnd = 435, #stmts = 2, iLineBegin = 430 }
                                stmts:
431.                                for
                                        expr: (!=) { right = 10 }
                                            left: lValue { varID = jj }
431.                                    initStmt: var jj { vt = int, isGlobal = false, initExpr = 0 }
                                        block: block { #stmts = 1 }
                                            stmts:
432.                                            if
                                                    expr: (||)
                                                        right: (==) { right = 0 }
                                                            left: lValue { varID = jj }
                                                        left: (==) { right = 0 }
                                                            left: lValue { varID = ii }
                                                    block: block { #stmts = 1 }
                                                        stmts:
433.                                                        break
431.                                    nextStmt: assign (+=) { expr = 1 }
                                            lValue: lValue { varID = jj }
434.                                break
429.                        nextStmt: assign (++)
                                lValue: lValue { varID = ii }
436.                    for
                            expr: (<) { right = 10 }
                                left: lValue { varID = ii }
436.                        initStmt: var ii { vt = int, isGlobal = false, initExpr = 0 }
                            block: block { iLineEnd = 448, #stmts = 2, iLineBegin = 437 }
                                stmts:
438.                                for
                                        expr: (!=) { right = 10 }
                                            left: lValue { varID = jj }
438.                                    initStmt: var jj { vt = int, isGlobal = false, initExpr = 0 }
                                        block: block { iLineEnd = 446, #stmts = 2, iLineBegin = 439 }
                                            stmts:
440.                                            if
                                                    expr: (&&)
                                                        right: (==) { right = 0 }
                                                            left: lValue { varID = jj }
                                                        left: (==) { right = 0 }
                                                            left: lValue { varID = ii }
                                                    block: block { iLineEnd = 444, #stmts = 2, iLineBegin = 441 }
                                                        stmts:
442.                                                        assign (=) { expr = 0 }
                                                                lValue: lValue { varID = intArr }
                                                                    indexExpr: lValue { varID = ii }
443.                                                        break
445.                                            break
438.                                    nextStmt: assign (+=) { expr = 1 }
                                            lValue: lValue { varID = jj }
447.                                break
436.                        nextStmt: assign (++)
                                lValue: lValue { varID = ii }
449.                    var xVar { vt = double, initExpr = 0 }
450.                    var yVar { vt = double, initExpr = 1 }
451.                    for
                            expr: (<) { right = 1 }
                                left: lValue { varID = xVar }
451.                        initStmt: var dx { vt = double, isGlobal = false, initExpr = .1 }
                            block: block { #stmts = 1 }
                                stmts:
452.                                for
                                        expr: (>) { right = 0 }
                                            left: lValue { varID = yVar }
452.                                    initStmt: var dy { vt = double, isGlobal = false }
                                            initExpr: unaryOp (neg) { expr = .5 }
                                        block: block { #stmts = 1 }
                                            stmts:
453.                                            assign (=)
                                                    lValue: lValue { varID = d }
                                                    expr: (-)
                                                        right: (/)
                                                            right: lValue { varID = dy }
                                                            left: lValue { varID = yVar }
                                                        left: (+)
                                                            right: lValue { varID = dx }
                                                            left: lValue { varID = xVar }
452.                                    nextStmt: assign (+=)
                                            lValue: lValue { varID = yVar }
                                            expr: lValue { varID = dy }
451.                        nextStmt: assign (+=)
                                lValue: lValue { varID = xVar }
                                expr: lValue { varID = dx }
454.                    assign (=)
                            lValue: lValue { varID = intArr }
                            expr: newArray { vtElement = 0, lengthExpr = 1 }
455.                    forArray
455.                        var: var a { vt = int, isGlobal = false }
                            expr: lValue { varID = intArr }
                            block: block { #stmts = 1 }
                                stmts:
456.                                assign (=) { expr = 0 }
                                        lValue: lValue { varID = a }
458.                    while
                            expr: lValue { varID = b }
                            block: block { #stmts = 1 }
                                stmts:
459.                                assign (=) { expr = false }
                                        lValue: lValue { varID = b }
460.                    while
                            expr: lValue { varID = b }
                            block: block { iLineEnd = 465, #stmts = 3, iLineBegin = 461 }
                                stmts:
462.                                call voidFunc
463.                                assign (++)
                                        lValue: lValue { varID = i }
464.                                assign (=) { expr = false }
                                        lValue: lValue { varID = b }
466.                    doWhile { iLineWhile = 468 }
                            expr: lValue { varID = b }
                            block: block { #stmts = 1 }
                                stmts:
467.                                assign (=) { expr = false }
                                        lValue: lValue { varID = b }
469.                    doWhile { iLineWhile = 473 }
                            expr: lValue { varID = b }
                            block: block { iLineEnd = 472, #stmts = 1, iLineBegin = 470 }
                                stmts:
471.                                assign (=) { expr = false }
                                        lValue: lValue { varID = b }
475.                    call print { #exprs = 1, class = ct }
                            exprs:
475.                            ("Hello world")
476.                    call print { #exprs = 1, class = ct }
                            exprs:
                                (+) { right = "world" }
                                    left: (+) { right = " ", left = "Hello" }
477.                    call print { #exprs = 1, class = ct }
                            exprs:
477.                            ("Hello world\n")
478.                    call print { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = i }
479.                    call print { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = d }
480.                    call print { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = b }
481.                    call print { #exprs = 1, class = ct }
                            exprs:
                                (+) { left = "i = " }
                                    right: lValue { varID = i }
482.                    call print { #exprs = 1, class = ct }
                            exprs:
                                (+) { left = "d = " }
                                    right: lValue { varID = d }
483.                    call print { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = name }
484.                    call print { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = name }
                                    left: (+) { right = " ", left = "Hello" }
485.                    var circleObj { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
485.                                (50)
485.                                (50)
485.                                (20)
486.                    call print { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = circleObj }
487.                    call println { #exprs = 1, class = ct }
                            exprs:
487.                            ("Hello world")
488.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { right = "world" }
                                    left: (+) { right = " ", left = "Hello" }
489.                    call println { #exprs = 1, class = ct }
                            exprs:
489.                            ("Hello world\n")
490.                    call println { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = i }
491.                    call println { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = d }
492.                    call println { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = b }
493.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { left = "i = " }
                                    right: lValue { varID = i }
494.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { left = "d = " }
                                    right: lValue { varID = d }
495.                    call println { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = name }
496.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = name }
                                    left: (+) { right = " ", left = "Hello" }
497.                    call println { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = circleObj }
498.                    call log { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = i }
499.                    call log { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = d }
500.                    call log { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = b }
501.                    call log { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = circleObj }
502.                    var obj2 { vt = GameObj }
                            initExpr: lValue { varID = circleObj }
503.                    var obj3 { vt = GameObj }
                            initExpr: lValue { varID = obj2 }
504.                    call log { #exprs = 9, class = ct }
                            exprs:
504.                            ("circleObj = ")
                                lValue { varID = circleObj }
504.                            ("obj2 = ")
                                lValue { varID = obj2 }
504.                            ("obj3=")
                                lValue { varID = obj3 }
504.                            (3.14)
                                staticField { fieldID = PI, class = Math }
504.                            (42)
505.                    call logm { #exprs = 2, class = ct }
                            exprs:
505.                            ("message")
505.                            (null)
506.                    call logm { #exprs = 3, class = ct }
                            exprs:
506.                            ("message")
                                lValue { varID = obj2 }
                                lValue { varID = obj3 }
507.                    call setOutputFile { #exprs = 1, class = ct }
                            exprs:
507.                            ("output.txt")
508.                    call setOutputFile { #exprs = 1, class = ct }
                            exprs:
508.                            ("output/nameList.txt")
509.                    var outputFilename { vt = String, initExpr = "output.txt" }
510.                    call setOutputFile { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = outputFilename }
512.                    call showAlert { #exprs = 1, class = ct }
                            exprs:
512.                            ("alert meassage")
513.                    var message { vt = String, initExpr = "alert!" }
514.                    call showAlert { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = message }
515.                    var n { vt = int }
                            initExpr: call inputInt { #exprs = 1, class = ct }
                                exprs:
515.                                ("enter a number: ")
516.                    assign (=)
                            lValue: lValue { varID = n }
                            expr: call inputInt { #exprs = 1, class = ct }
                                exprs:
516.                                ("enter a number: ")
517.                    assign (=)
                            lValue: lValue { varID = n }
                            expr: call inputInt { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = message }
518.                    var x { vt = double }
                            initExpr: call inputNumber { #exprs = 1, class = ct }
                                exprs:
518.                                ("enter a number: ")
519.                    assign (=)
                            lValue: lValue { varID = x }
                            expr: call inputNumber { #exprs = 1, class = ct }
                                exprs:
519.                                ("enter a number: ")
520.                    assign (=)
                            lValue: lValue { varID = x }
                            expr: call inputNumber { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = message }
521.                    var quit { vt = boolean }
                            initExpr: call inputYesNo { #exprs = 1, class = ct }
                                exprs:
521.                                ("Quit?")
522.                    assign (=)
                            lValue: lValue { varID = quit }
                            expr: call inputYesNo { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = message }
523.                    var inputStr { vt = String }
                            initExpr: call inputString { #exprs = 1, class = ct }
                                exprs:
523.                                ("Quit?")
524.                    assign (=)
                            lValue: lValue { varID = inputStr }
                            expr: call inputString { #exprs = 1, class = ct }
                                exprs:
524.                                ("Quit?")
525.                    assign (=)
                            lValue: lValue { varID = inputStr }
                            expr: call inputString { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = message }
527.                    call setTitle { #exprs = 1, class = ct }
                            exprs:
527.                            ("Title")
528.                    var title { vt = String, initExpr = "Title" }
529.                    call setTitle { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = title }
530.                    call setTitle { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = i }
                                    left: (+) { right = " " }
                                        left: lValue { varID = title }
531.                    call setTitle { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = d }
                                    left: lValue { varID = title }
532.                    call setHeight { #exprs = 1, class = ct }
                            exprs:
                                (/) { right = 16 }
                                    left: (*) { right = 9, left = 100.0 }
533.                    call setHeight { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = i }
534.                    call setHeight { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = d }
535.                    call setHeight { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: (*) { right = 4, left = 5 }
                                    left: (*)
                                        right: lValue { varID = d }
                                        left: lValue { varID = i }
536.                    var height { vt = double }
                            initExpr: call getHeight { class = ct }
537.                    assign (=)
                            lValue: lValue { varID = height }
                            expr: call getHeight { class = ct }
538.                    var width { vt = double }
                            initExpr: (-) { right = 10 }
                                left: (*) { right = 0.5 }
                                    left: call getWidth { class = ct }
539.                    assign (=)
                            lValue: lValue { varID = width }
                            expr: call getWidth { class = ct }
540.                    var pxPerUnit { vt = double }
                            initExpr: call getPixelsPerUnit { class = ct }
541.                    assign (=)
                            lValue: lValue { varID = pxPerUnit }
                            expr: call getPixelsPerUnit { class = ct }
542.                    var pixelWidth { vt = int }
                            initExpr: call round { #exprs = 1, class = ct }
                                exprs:
                                    (*)
                                        right: call getPixelsPerUnit { class = ct }
                                        left: call getWidth { class = ct }
543.                    var pixelHeight { vt = int }
                            initExpr: call round { #exprs = 1, class = ct }
                                exprs:
                                    (*)
                                        right: call getPixelsPerUnit { class = ct }
                                        left: call getHeight { class = ct }
544.                    var currentScreen { vt = String }
                            initExpr: call getScreen { class = ct }
545.                    assign (=)
                            lValue: lValue { varID = currentScreen }
                            expr: call getScreen { class = ct }
546.                    call clearScreen { class = ct }
547.                    call clearGroup { #exprs = 1, class = ct }
                            exprs:
547.                            ("targets")
548.                    call clearGroup { #exprs = 1, class = ct }
                            exprs:
548.                            ("")
549.                    call setBackColor { #exprs = 1, class = ct }
                            exprs:
549.                            ("orange")
550.                    call setBackColor { #exprs = 1, class = ct }
                            exprs:
550.                            ("light blue")
551.                    var backColor { vt = String, initExpr = "red" }
552.                    call setBackColor { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = backColor }
553.                    call setBackColorRGB { #exprs = 3, class = ct }
                            exprs:
553.                            (255)
553.                            (0)
553.                            (0)
554.                    call setBackColorRGB { #exprs = 3, class = ct }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
                                lValue { varID = i }
555.                    call setBackImage { #exprs = 1, class = ct }
                            exprs:
555.                            ("background.png")
556.                    call setBackImage { #exprs = 1, class = ct }
                            exprs:
556.                            ("C:\\Users\\ben\\Pictures\\landscape.jpg")
557.                    var filename { vt = String, initExpr = "landscape.png" }
558.                    call setBackImage { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = filename }
560.                    assign (=) { expr = 50 }
                            lValue: lValue { varID = x }
561.                    var y { vt = double, initExpr = 50 }
562.                    var diameter { vt = double, initExpr = 10 }
563.                    var circle { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
563.                                (50)
563.                                (20)
563.                                (10)
564.                    assign (=)
                            lValue: lValue { varID = circle }
                            expr: call circle { #exprs = 3, class = ct }
                                exprs:
564.                                (50.0)
564.                                (20.0)
564.                                (10.0)
565.                    assign (=)
                            lValue: lValue { varID = circle }
                            expr: call circle { #exprs = 4, class = ct }
                                exprs:
565.                                (50)
565.                                (20)
565.                                (10.5)
565.                                ("blue")
566.                    assign (=)
                            lValue: lValue { varID = circle }
                            expr: call circle { #exprs = 3, class = ct }
                                exprs:
                                    lValue { varID = x }
                                    lValue { varID = y }
                                    lValue { varID = diameter }
567.                    var color { vt = String, initExpr = "green" }
568.                    assign (=)
                            lValue: lValue { varID = circle }
                            expr: call circle { #exprs = 4, class = ct }
                                exprs:
                                    lValue { varID = x }
                                    lValue { varID = y }
                                    lValue { varID = diameter }
                                    lValue { varID = color }
569.                    var rect { vt = GameObj }
                            initExpr: call rect { #exprs = 4, class = ct }
                                exprs:
                                    lValue { varID = x }
                                    lValue { varID = y }
                                    lValue { varID = width }
                                    lValue { varID = height }
570.                    assign (=)
                            lValue: lValue { varID = rect }
                            expr: call rect { #exprs = 5, class = ct }
                                exprs:
                                    lValue { varID = x }
                                    lValue { varID = y }
                                    lValue { varID = width }
                                    lValue { varID = height }
                                    lValue { varID = color }
571.                    assign (=)
                            lValue: lValue { varID = rect }
                            expr: call rect { #exprs = 4, class = ct }
                                exprs:
571.                                (50.0)
571.                                (33.3)
571.                                (11.2)
571.                                (23.890)
572.                    assign (=)
                            lValue: lValue { varID = rect }
                            expr: call rect { #exprs = 5, class = ct }
                                exprs:
572.                                (50)
572.                                (33)
572.                                (11)
572.                                (23)
572.                                ("green")
573.                    var line { vt = GameObj }
                            initExpr: call line { #exprs = 4, class = ct }
                                exprs:
                                    lValue { varID = i }
                                    lValue { varID = d }
                                    lValue { varID = width }
                                    lValue { varID = height }
574.                    assign (=)
                            lValue: lValue { varID = line }
                            expr: call line { #exprs = 5, class = ct }
                                exprs:
                                    lValue { varID = x1 }
                                    lValue { varID = y1 }
                                    lValue { varID = x2 }
                                    lValue { varID = y2 }
                                    lValue { varID = color }
575.                    assign (=)
                            lValue: lValue { varID = line }
                            expr: call line { #exprs = 4, class = ct }
                                exprs:
575.                                (0.0)
575.                                (.0)
575.                                (100.0)
575.                                (95.0)
576.                    assign (=)
                            lValue: lValue { varID = line }
                            expr: call line { #exprs = 5, class = ct }
                                exprs:
576.                                (0)
576.                                (0)
576.                                (100)
576.                                (95)
576.                                ("red")
577.                    var text { vt = GameObj }
                            initExpr: call text { #exprs = 4, class = ct }
                                exprs:
                                    lValue { varID = s }
                                    lValue { varID = x }
                                    lValue { varID = y }
                                    lValue { varID = height }
578.                    assign (=)
                            lValue: lValue { varID = text }
                            expr: call text { #exprs = 5, class = ct }
                                exprs:
                                    lValue { varID = s }
                                    lValue { varID = x }
                                    lValue { varID = y }
                                    lValue { varID = height }
                                    lValue { varID = color }
579.                    assign (=)
                            lValue: lValue { varID = text }
                            expr: call text { #exprs = 4, class = ct }
                                exprs:
                                    (+) { left = "Score: " }
                                        right: lValue { varID = score }
579.                                (20.0)
579.                                (90.0)
579.                                (10.0)
580.                    assign (=)
                            lValue: lValue { varID = text }
                            expr: call text { #exprs = 5, class = ct }
                                exprs:
                                    (+) { left = "Score: " }
                                        right: lValue { varID = score }
580.                                (20)
580.                                (90)
580.                                (10)
580.                                ("purple")
581.                    var img { vt = GameObj }
                            initExpr: call image { #exprs = 4, class = ct }
                                exprs:
                                    lValue { varID = filename }
                                    lValue { varID = x }
                                    lValue { varID = y }
                                    lValue { varID = width }
582.                    assign (=)
                            lValue: lValue { varID = img }
                            expr: call image { #exprs = 4, class = ct }
                                exprs:
582.                                ("car.png")
582.                                (42)
582.                                (25)
582.                                (38.7)
583.                    assign (=)
                            lValue: lValue { varID = img }
                            expr: call image { #exprs = 4, class = ct }
                                exprs:
583.                                ("C:\\Users\\john\\Pictures\\car.jpg")
583.                                (42)
583.                                (25)
583.                                (38)
584.                    var objs { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 5 }
                                exprs:
                                    lValue { varID = circle }
                                    lValue { varID = rect }
                                    lValue { varID = line }
                                    lValue { varID = text }
                                    lValue { varID = img }
585.                    assign (=)
                            lValue: lValue { varID = img }
                            expr: lValue { varID = rect }
587.                    var mouseClicked { vt = boolean }
                            initExpr: call clicked { class = ct }
588.                    if
                            expr: call clicked { class = ct }
                            block: block { #stmts = 1 }
                                stmts:
589.                                assign (=)
                                        lValue: lValue { varID = mouseClicked }
                                        expr: call clicked { class = ct }
590.                    if
                            expr: (>) { right = 50 }
                                left: call clickX { class = ct }
                            block: block { #stmts = 1 }
                                stmts:
591.                                assign (=)
                                        lValue: lValue { varID = x }
                                        expr: call clickX { class = ct }
592.                    assign (=)
                            lValue: lValue { varID = x }
                            expr: call clickX { class = ct }
593.                    if
                            expr: (<=)
                                right: lValue { varID = x }
                                left: call clickY { class = ct }
                            block: block { #stmts = 1 }
                                stmts:
594.                                assign (=)
                                        lValue: lValue { varID = y }
                                        expr: call clickY { class = ct }
595.                    assign (=)
                            lValue: lValue { varID = y }
                            expr: call clickY { class = ct }
596.                    var keyName { vt = String, initExpr = "space" }
597.                    var keyPressed { vt = boolean }
                            initExpr: call keyPressed { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = keyName }
598.                    if
                            expr: call keyPressed { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = keyName }
                            block: block { #stmts = 1 }
                                stmts:
599.                                if
                                        expr: call keyPressed { #exprs = 1, class = ct }
                                            exprs:
599.                                            ("up")
                                        block: block { #stmts = 1 }
                                            stmts:
600.                                            assign (=)
                                                    lValue: lValue { varID = keyPressed }
                                                    expr: call keyPressed { #exprs = 1, class = ct }
                                                        exprs:
600.                                                        ("up")
601.                    if
                            expr: call charTyped { #exprs = 1, class = ct }
                                exprs:
601.                                ("+")
                            block: block { #stmts = 1 }
                                stmts:
602.                                assign (++)
                                        lValue: lValue { varID = x }
603.                    var ch { vt = String, initExpr = "+" }
604.                    if
                            expr: call charTyped { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = ch }
                            block: block { #stmts = 1 }
                                stmts:
605.                                assign (=)
                                        lValue: lValue { varID = b }
                                        expr: call charTyped { #exprs = 1, class = ct }
                                            exprs:
605.                                            ("+")
606.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call charTyped { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = ch }
608.                    call loadSound { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = filename }
609.                    call loadSound { #exprs = 1, class = ct }
                            exprs:
609.                            ("pow.wav")
610.                    if
                            expr: lValue { varID = b }
                            block: block { #stmts = 1 }
                                stmts:
611.                                call sound { #exprs = 1, class = ct }
                                        exprs:
611.                                        ("sounds/ding.mp3")
612.                    call sound { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = filename }
613.                    call setSoundVolume { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = d }
614.                    call setSoundVolume { #exprs = 1, class = ct }
                            exprs:
614.                            (1)
615.                    call setSoundVolume { #exprs = 1, class = ct }
                            exprs:
615.                            (0.5)
617.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call random { #exprs = 2, class = ct }
                                exprs:
                                    lValue { varID = i }
                                    lValue { varID = i }
618.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call random { #exprs = 2, class = ct }
                                exprs:
618.                                (0)
618.                                (100)
619.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call round { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = d }
620.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call round { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = i }
621.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call round { #exprs = 1, class = ct }
                                exprs:
621.                                (1.62)
622.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call round { #exprs = 1, class = ct }
                                exprs:
                                    (*)
                                        right: lValue { varID = i }
                                        left: lValue { varID = d }
623.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call round { #exprs = 1, class = ct }
                                exprs:
                                    (+) { left = 1 }
                                        right: (*)
                                            right: lValue { varID = i }
                                            left: lValue { varID = d }
624.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call round { #exprs = 1, class = ct }
                                exprs:
                                    call distance { #exprs = 4, class = ct }
                                        exprs:
                                            lValue { varID = x1 }
                                            lValue { varID = y1 }
                                            lValue { varID = x2 }
                                            lValue { varID = y2 }
625.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call roundDecimal { #exprs = 2, class = ct }
                                exprs:
                                    lValue { varID = d }
                                    lValue { varID = i }
626.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call roundDecimal { #exprs = 2, class = ct }
                                exprs:
                                    (+) { right = 1 }
                                        left: (*)
                                            right: lValue { varID = i }
                                            left: lValue { varID = d }
                                    (*) { right = 2 }
                                        left: lValue { varID = i }
627.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call roundDecimal { #exprs = 2, class = ct }
                                exprs:
627.                                (2.71828182846)
627.                                (2)
628.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call roundDecimal { #exprs = 2, class = ct }
                                exprs:
                                    call distance { #exprs = 4, class = ct }
                                        exprs:
                                            lValue { varID = x1 }
                                            lValue { varID = y1 }
                                            lValue { varID = x2 }
                                            lValue { varID = y2 }
628.                                (1)
629.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call intDiv { #exprs = 2, class = ct }
                                exprs:
                                    lValue { varID = i }
                                    lValue { varID = i }
630.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call intDiv { #exprs = 2, class = ct }
                                exprs:
630.                                (5)
630.                                (2)
631.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call isError { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = d }
632.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call isError { #exprs = 1, class = ct }
                                exprs:
                                    (/)
                                        right: lValue { varID = d }
                                        left: lValue { varID = d }
633.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call isError { #exprs = 1, class = ct }
                                exprs:
                                    (/)
                                        right: lValue { varID = i }
                                        left: lValue { varID = d }
634.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call isError { #exprs = 1, class = ct }
                                exprs:
                                    (/) { right = 0, left = 0.0 }
635.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call distance { #exprs = 4, class = ct }
                                exprs:
                                    lValue { varID = circle, fieldID = x }
                                    lValue { varID = circle, fieldID = y }
                                    lValue { varID = rect, fieldID = x }
                                    lValue { varID = rect, fieldID = y }
636.                    if
                            expr: (<)
                                right: (/) { right = 2 }
                                    left: parens
                                        expr: call getWidth
                                            lValue: lValue { varID = circle }
                                left: call distance { #exprs = 4, class = ct }
                                    exprs:
                                        lValue { varID = circle, fieldID = x }
                                        lValue { varID = circle, fieldID = y }
                                        lValue { varID = rect, fieldID = x }
                                        lValue { varID = rect, fieldID = y }
                            block: block { #stmts = 1 }
                                stmts:
637.                                assign (=)
                                        lValue: lValue { varID = i }
                                        expr: call getTimer { class = ct }
638.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (-)
                                right: lValue { varID = i }
                                left: call getTimer { class = ct }
639.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call getVersion { class = ct }
640.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call round { #exprs = 1, class = ct }
                                exprs:
                                    call getVersion { class = ct }
642.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: cast { vtCast = 0 }
                                expr: lValue { varID = d }
643.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: cast { vtCast = 0 }
                                expr: parens
                                    expr: (*)
                                        right: lValue { varID = i }
                                        left: lValue { varID = d }
644.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: cast { expr = .707, vtCast = 0 }
645.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: cast { vtCast = 0 }
                                expr: staticField { fieldID = PI, class = Math }
646.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (/)
                                right: lValue { varID = i }
                                left: cast { vtCast = 1 }
                                    expr: lValue { varID = i }
647.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call parseInt { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = s }
648.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call parseInt { #exprs = 1, class = ct }
                                exprs:
648.                                ("345")
649.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call canParseInt { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = s }
650.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call canParseInt { #exprs = 1, class = ct }
                                exprs:
650.                                ("12345")
651.                    while
                            expr: call canParseInt { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = s }
                            block: block { #stmts = 1 }
                                stmts:
652.                                assign (=)
                                        lValue: lValue { varID = d }
                                        expr: call parseNumber { #exprs = 1, class = ct }
                                            exprs:
                                                lValue { varID = s }
653.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: (*) { right = 100 }
                                left: call parseNumber { #exprs = 1, class = ct }
                                    exprs:
653.                                    ("123.45")
654.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call canParseNumber { #exprs = 1, class = ct }
                                exprs:
654.                                ("543.210")
655.                    while
                            expr: call canParseNumber { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = s }
                            block: block { #stmts = 1 }
                                stmts:
656.                                assign (=)
                                        lValue: lValue { varID = s }
                                        expr: call formatDecimal { #exprs = 1, class = ct }
                                            exprs:
                                                lValue { varID = d }
657.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: call formatDecimal { #exprs = 2, class = ct }
                                exprs:
                                    lValue { varID = d }
                                    lValue { varID = i }
658.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: call formatDecimal { #exprs = 2, class = ct }
                                exprs:
                                    lValue { varID = d }
                                    call intDiv { #exprs = 2, class = ct }
                                        exprs:
                                            (*) { left = 2 }
                                                right: lValue { varID = i }
                                            lValue { varID = i }
659.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: (+) { right = ":00" }
                                left: call formatDecimal { #exprs = 2, class = ct }
                                    exprs:
659.                                    (6.0221)
659.                                    (7)
660.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: call formatInt { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = i }
661.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: call formatInt { #exprs = 2, class = ct }
                                exprs:
                                    (+) { right = 1 }
                                        left: lValue { varID = i }
                                    (+)
                                        right: lValue { varID = k }
                                        left: lValue { varID = j }
663.                    assign (=) { expr = 3 }
                            lValue: lValue { varID = img, fieldID = x }
664.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: (-) { right = 10 }
                                left: lValue { varID = circle, fieldID = y }
665.                    assign (=) { expr = false }
                            lValue: lValue { varID = rect, fieldID = visible }
666.                    assign (=)
                            lValue: lValue { varID = circle, fieldID = visible }
                            expr: lValue { varID = rect, fieldID = visible }
667.                    assign (=)
                            lValue: lValue { varID = line, fieldID = group }
                            expr: lValue { varID = s }
668.                    assign (=) { expr = "dots" }
                            lValue: lValue { varID = circle, fieldID = group }
669.                    assign (+=)
                            lValue: lValue { varID = circle, fieldID = group }
                            expr: lValue { varID = s }
670.                    assign (+=)
                            lValue: lValue { varID = circle, fieldID = group }
                            expr: lValue { varID = objs, fieldID = group, indexExpr = 2 }
671.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = group }
                            expr: lValue { varID = circle, fieldID = group }
672.                    assign (=)
                            lValue: lValue { varID = line, fieldID = visible }
                            expr: (||)
                                right: (&&)
                                    right: (==) { right = 1 }
                                        left: call indexOf { #exprs = 1 }
                                            lValue: lValue { varID = s }
                                            exprs:
                                                lValue { varID = line, fieldID = group }
                                    left: call equals { #exprs = 1 }
                                        lValue: lValue { varID = s }
                                        exprs:
672.                                        ("world")
                                left: call equals { #exprs = 1 }
                                    lValue: lValue { varID = s }
                                    exprs:
672.                                    ("hello")
674.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: call getType
                                lValue: lValue { varID = rect }
675.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { right = "more text" }
                                    left: call getText
                                        lValue: lValue { varID = text }
676.                    call setText { #exprs = 1 }
                            lValue: lValue { varID = img }
                            exprs:
676.                            ("racecar.png")
677.                    call setText { #exprs = 1 }
                            lValue: lValue { varID = text }
                            exprs:
                                (+) { left = "Score: " }
                                    right: lValue { varID = d }
678.                    call setText { #exprs = 1 }
                            lValue: lValue { varID = text }
                            exprs:
                                (+) { left = "Score: " }
                                    right: lValue { varID = i }
679.                    call log { #exprs = 1, class = ct }
                            exprs:
                                call toString
                                    lValue: lValue { varID = line }
680.                    call setSize { #exprs = 2 }
                            lValue: lValue { varID = img }
                            exprs:
                                (*) { right = 1.1 }
                                    left: call getWidth
                                        lValue: lValue { varID = img }
                                (*) { right = 1.1 }
                                    left: call getHeight
                                        lValue: lValue { varID = img }
681.                    call setSize { #exprs = 2 }
                            lValue: lValue { varID = rect }
                            exprs:
681.                            (10)
681.                            (30)
682.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call getHeight
                                lValue: lValue { varID = img }
683.                    call setYSpeed { #exprs = 1 }
                            lValue: lValue { varID = circle }
                            exprs:
                                (+) { right = 3 }
                                    left: call getYSpeed
                                        lValue: lValue { varID = circle }
684.                    call setXSpeed { #exprs = 1 }
                            lValue: lValue { varID = rect }
                            exprs:
                                call getXSpeed
                                    lValue: lValue { varID = circle }
685.                    call align { #exprs = 1 }
                            lValue: lValue { varID = text }
                            exprs:
                                lValue { varID = s }
686.                    call align { #exprs = 1 }
                            lValue: lValue { varID = text }
                            exprs:
686.                            ("left")
687.                    call align { #exprs = 1 }
                            lValue: lValue { varID = text }
                            exprs:
687.                            ("right")
688.                    call setFillColor { #exprs = 1 }
                            lValue: lValue { varID = circle }
                            exprs:
                                (+) { left = "light" }
                                    right: lValue { varID = s }
689.                    call setFillColor { #exprs = 1 }
                            lValue: lValue { varID = circle }
                            exprs:
                                call getText
                                    lValue: lValue { varID = text }
690.                    call setFillColorRGB { #exprs = 3 }
                            lValue: lValue { varID = circle }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = j }
                                lValue { varID = k }
691.                    call setLineColor { #exprs = 1 }
                            lValue: lValue { varID = rect }
                            exprs:
                                lValue { varID = colors }
                                    indexExpr: lValue { varID = i }
692.                    call setLineColorRGB { #exprs = 3 }
                            lValue: lValue { varID = rect }
                            exprs:
                                lValue { varID = i }
                                (-) { left = 255 }
                                    right: lValue { varID = i }
692.                            (0)
693.                    call setLineWidth { #exprs = 1 }
                            lValue: lValue { varID = line }
                            exprs:
                                lValue { varID = i }
694.                    call setLineWidth { #exprs = 1 }
                            lValue: lValue { varID = line }
                            exprs:
694.                            (3)
695.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call getLayer
                                lValue: lValue { varID = rect }
696.                    if
                            expr: (>=)
                                right: call getLayer
                                    lValue: lValue { varID = circle }
                                left: call getLayer
                                    lValue: lValue { varID = rect }
                            block: block { #stmts = 1 }
                                stmts:
697.                                assign (=)
                                        lValue: lValue { varID = b }
                                        expr: call equals { #exprs = 1 }
                                            lValue: lValue { varID = colors }
                                                indexExpr: call getLayer
                                                    lValue: lValue { varID = rect }
                                            exprs:
697.                                            ("green")
698.                    call setLayer { #exprs = 1 }
                            lValue: lValue { varID = img }
                            exprs:
                                unaryOp (neg) { expr = 42 }
699.                    call delete
                            lValue: lValue { varID = img }
700.                    call setClickable { #exprs = 1 }
                            lValue: lValue { varID = img }
                            exprs:
700.                            (true)
701.                    call setClickable { #exprs = 1 }
                            lValue: lValue { varID = circle }
                            exprs:
701.                            (false)
702.                    call setClickable { #exprs = 1 }
                            lValue: lValue { varID = rect }
                            exprs:
                                (>) { right = 0 }
                                    left: lValue { varID = rect, fieldID = x }
703.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call clicked
                                lValue: lValue { varID = img }
704.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call containsPoint { #exprs = 2 }
                                lValue: lValue { varID = img }
                                exprs:
                                    call clickX { class = ct }
                                    call clickY { class = ct }
705.                    if
                            expr: call containsPoint { #exprs = 2 }
                                lValue: lValue { varID = img }
                                exprs:
                                    call clickX { class = ct }
                                    call clickY { class = ct }
                            block: block { #stmts = 1 }
                                stmts:
706.                                while
                                        expr: call hit { #exprs = 1 }
                                            lValue: lValue { varID = img }
                                            exprs:
                                                lValue { varID = rect }
                                        block: block { #stmts = 1 }
                                            stmts:
707.                                            assign (=)
                                                    lValue: lValue { varID = b }
                                                    expr: (==) { right = true }
                                                        left: call hit { #exprs = 1 }
                                                            lValue: lValue { varID = img }
                                                            exprs:
                                                                lValue { varID = rect }
709.                    var e { vt = double }
                            initExpr: staticField { fieldID = E, class = Math }
710.                    var pi { vt = double }
                            initExpr: staticField { fieldID = PI, class = Math }
711.                    if
                            expr: (<)
                                right: lValue { varID = eps }
                                left: call abs { #exprs = 1, class = Math }
                                    exprs:
                                        (-)
                                            right: lValue { varID = img, fieldID = x }
                                            left: lValue { varID = rect, fieldID = x }
                            block: block { #stmts = 1 }
                                stmts:
712.                                assign (=)
                                        lValue: lValue { varID = i }
                                        expr: call abs { #exprs = 1, class = Math }
                                            exprs:
                                                lValue { varID = i }
713.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call acos { #exprs = 1, class = Math }
                                exprs:
                                    unaryOp (neg) { expr = 0.5 }
714.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call asin { #exprs = 1, class = Math }
                                exprs:
                                    (/) { right = 2 }
                                        left: call sqrt { #exprs = 1, class = Math }
                                            exprs:
714.                                            (3)
715.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call atan { #exprs = 1, class = Math }
                                exprs:
                                    (/) { left = 1 }
                                        right: call sqrt { #exprs = 1, class = Math }
                                            exprs:
715.                                            (2)
716.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call atan2 { #exprs = 2, class = Math }
                                exprs:
                                    (-)
                                        right: lValue { varID = img, fieldID = x }
                                        left: call clickX { class = ct }
                                    (-)
                                        right: lValue { varID = img, fieldID = y }
                                        left: call clickY { class = ct }
717.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call ceil { #exprs = 1, class = Math }
                                exprs:
                                    lValue { varID = d }
718.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call cos { #exprs = 1, class = Math }
                                exprs:
                                    (/) { right = 2 }
                                        left: staticField { fieldID = PI, class = Math }
719.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call cosh { #exprs = 1, class = Math }
                                exprs:
                                    (*) { right = 2 }
                                        left: staticField { fieldID = PI, class = Math }
720.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call exp { #exprs = 1, class = Math }
                                exprs:
                                    (+) { right = 1 }
                                        left: (*) { left = 2 }
                                            right: staticField { fieldID = PI, class = Math }
721.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call floor { #exprs = 1, class = Math }
                                exprs:
                                    unaryOp (neg) { expr = 1.67 }
722.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call log { #exprs = 1, class = Math }
                                exprs:
722.                                (32)
723.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call log10 { #exprs = 1, class = Math }
                                exprs:
                                    lValue { varID = d }
724.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call max { #exprs = 2, class = Math }
                                exprs:
                                    lValue { varID = d }
                                    lValue { varID = d }
725.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call max { #exprs = 2, class = Math }
                                exprs:
                                    lValue { varID = i }
                                    lValue { varID = i }
726.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call min { #exprs = 2, class = Math }
                                exprs:
                                    lValue { varID = d }
                                    lValue { varID = d }
727.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call min { #exprs = 2, class = Math }
                                exprs:
                                    lValue { varID = i }
                                    lValue { varID = i }
728.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call pow { #exprs = 2, class = Math }
                                exprs:
                                    lValue { varID = d }
                                    lValue { varID = d }
729.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call sin { #exprs = 1, class = Math }
                                exprs:
                                    lValue { varID = d }
730.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call sinh { #exprs = 1, class = Math }
                                exprs:
                                    lValue { varID = d }
731.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call sqrt { #exprs = 1, class = Math }
                                exprs:
                                    lValue { varID = d }
732.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call tan { #exprs = 1, class = Math }
                                exprs:
                                    lValue { varID = d }
733.                    assign (=)
                            lValue: lValue { varID = d }
                            expr: call tanh { #exprs = 1, class = Math }
                                exprs:
                                    lValue { varID = d }
735.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call compareTo { #exprs = 1 }
                                lValue: lValue { varID = s }
                                exprs:
                                    lValue { varID = s }
736.                    assign (=)
                            lValue: lValue { varID = b }
                            expr: call equals { #exprs = 1 }
                                lValue: lValue { varID = s }
                                exprs:
                                    lValue { varID = s }
737.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call indexOf { #exprs = 1 }
                                lValue: lValue { varID = s }
                                exprs:
                                    lValue { varID = s }
738.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: call length
                                lValue: lValue { varID = s }
739.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: call substring { #exprs = 1 }
                                lValue: lValue { varID = s }
                                exprs:
                                    lValue { varID = i }
740.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: call toLowerCase
                                lValue: lValue { varID = s }
741.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: call toUpperCase
                                lValue: lValue { varID = s }
742.                    assign (=)
                            lValue: lValue { varID = s }
                            expr: call trim
                                lValue: lValue { varID = s }
744.                    var coins { vt = array of GameObj }
745.                    var walls { vt = array of GameObj }
746.                    var multilineArrayInit { vt = array of int }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
746.                                (1)
747.                                (2)
748.                                (3)
749.                    call log { #exprs = 3, class = ct }
                            exprs:
749.                            (1)
750.                            (2)
751.                            (3)
752.                    if
                            expr: (==) { right = 1 }
                                left: call random { #exprs = 2, class = ct }
                                    exprs:
752.                                    (1)
752.                                    (2)
                            block: block { #stmts = 1 }
                                stmts:
754.                                call println { #exprs = 1, class = ct }
                                        exprs:
754.                                        ("heads")
755.                    call log { #exprs = 4, class = ct }
                            exprs:
755.                            (1)
                                call random { #exprs = 2, class = ct }
                                    exprs:
755.                                    (1)
756.                                    (100)
757.                            (3)
757.                            (4)
758.                    return { expr = 0 }
772.        func update { #paramVars = 0, vt = void }
                block: block { iLineEnd = 776, #stmts = 1, iLineBegin = 773 }
                    stmts:
775.                    return { expr = 0 }
778.        func fooBad { #paramVars = 1, isError = true, vt = double }
                paramVars:
778.                var i { vt = int, isGlobal = false }
                block: block { iLineEnd = 781, #stmts = 1, iLineBegin = 779 }
                    stmts:
780.                    return { expr = 0 }
783.        func bar { #paramVars = 2, vt = boolean }
                paramVars:
783.                var s { vt = String, isGlobal = false }
783.                var gameObj { vt = GameObj, isGlobal = false }
                block: block { iLineEnd = 787, #stmts = 1, iLineBegin = 784 }
                    stmts:
786.                    return
                            expr: lValue { varID = TRUE }
789.        func Double { #paramVars = 1, vt = int }
                paramVars:
789.                var x { vt = int, isGlobal = false }
                block: block { iLineEnd = 792, #stmts = 1, iLineBegin = 790 }
                    stmts:
791.                    return
                            expr: (*) { left = 2 }
                                right: lValue { varID = x }
795.        func voidFunc { #paramVars = 1, vt = void }
                paramVars:
795.                var i { vt = int, isGlobal = false }
                block: block { iLineEnd = 797, #stmts = 0, iLineBegin = 796 }
798.        func func { #paramVars = 0, vt = void }
                block: block { iLineEnd = 800, #stmts = 0, iLineBegin = 799 }
802.        func FUNC { #paramVars = 0, vt = void }
                block: block { iLineEnd = 804, #stmts = 0, iLineBegin = 803 }
806.        func AnotherFunc { #paramVars = 0, vt = void }
                block: block { iLineEnd = 808, #stmts = 0, iLineBegin = 807 }
810.        func anotherfunc { #paramVars = 0, vt = void }
                block: block { iLineEnd = 812, #stmts = 0, iLineBegin = 811 }
814.        func expectedErrors { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1665, #stmts = 290, iLineBegin = 815 }
                    stmts:
816.                    var intVar { vt = int, initExpr = 1 }
817.                    var dblVar { vt = double, initExpr = 1.0 }
818.                    var boolVar { vt = boolean, initExpr = false }
819.                    var strVar { vt = String, initExpr = "a" }
820.                    var objVar { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
820.                                (0)
820.                                (0)
820.                                (10)
821.                    var intArr { vt = array of int }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
821.                                (1)
821.                                (2)
821.                                (3)
822.                    var objArr { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 1 }
                                exprs:
                                    lValue { varID = objVar }
825.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: call setText { #exprs = 1 }
                                lValue: lValue { varID = objVar }
                                exprs:
825.                                ("circle")
827.                    var screen { vt = double }
                            initExpr: call setScreen { #exprs = 1, class = ct }
                                exprs:
827.                                ("menu")
829.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call setHeight { #exprs = 1, class = ct }
                                exprs:
829.                                (150)
831.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: call voidFunc
833.                    var title { vt = GameObj }
                            initExpr: call setTitle { #exprs = 1, class = ct }
                                exprs:
833.                                ("title")
836.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: lValue { varID = intVar }
838.                    var b { vt = boolean }
                            initExpr: call intFuncInt { #exprs = 1 }
                                exprs:
838.                                (2)
840.                    assign (=) { expr = 0 }
                            lValue: lValue { varID = objVar, fieldID = visible }
842.                    var s { vt = String }
                            initExpr: lValue { varID = intVar }
844.                    assign (=)
                            lValue: lValue { varID = objVar }
                            expr: lValue { varID = intVar }
847.                    var i { vt = int, initExpr = 3.4 }
849.                    assign (=) { expr = 1.2 }
                            lValue: lValue { varID = i }
851.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (*) { right = 3.4, left = 10 }
853.                    var j { vt = int }
                            initExpr: (+) { right = 3.14, left = 5 }
855.                    var plancksConst { vt = int, initExpr = 6.62e-34 }
857.                    var exponentialNumberNoDot { vt = int, initExpr = 12e10 }
859.                    var exponentialNumberWithDot { vt = int, initExpr = 3.42e2 }
861.                    assign (=)
                            lValue: lValue { varID = objVar, fieldID = visible }
                            expr: lValue { varID = dblVar }
863.                    assign (=) { expr = 3.14 }
                            lValue: lValue { varID = strVar }
865.                    assign (=)
                            lValue: lValue { varID = objVar }
                            expr: lValue { varID = dblVar }
868.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: call clicked { class = ct }
870.                    assign (=)
                            lValue: lValue { varID = objVar, fieldID = x }
                            expr: lValue { varID = boolVar }
872.                    assign (=) { expr = false }
                            lValue: lValue { varID = objVar, fieldID = x }
874.                    assign (=)
                            lValue: lValue { varID = objVar, fieldID = group }
                            expr: lValue { varID = boolVar }
876.                    assign (=)
                            lValue: lValue { varID = objVar }
                            expr: lValue { varID = boolVar }
879.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = objVar, fieldID = group }
881.                    assign (=) { expr = "fast" }
                            lValue: lValue { varID = objVar, fieldID = y }
883.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: lValue { varID = strVar }
885.                    var score { vt = GameObj, initExpr = "100 pts" }
888.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = objVar }
890.                    assign (=)
                            lValue: lValue { varID = objVar, fieldID = x }
                            expr: lValue { varID = objVar }
892.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: lValue { varID = objVar }
894.                    var circleStr { vt = String }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
894.                                (0)
894.                                (0)
894.                                (10)
897.                    var y { vt = int }
                            initExpr: call intFuncInt { #exprs = 1 }
                                exprs:
897.                                (2.3)
899.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: call random { #exprs = 2, class = ct }
                                exprs:
899.                                (0.0)
899.                                (10)
901.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: call random { #exprs = 2, class = ct }
                                exprs:
901.                                (0)
901.                                (false)
903.                    call setBackColorRGB { #exprs = 3, class = ct }
                            exprs:
903.                            ("red")
903.                            (0)
903.                            (0)
905.                    call setLayer { #exprs = 1 }
                            lValue: lValue { varID = objVar }
                            exprs:
905.                            ("front")
907.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: call roundDecimal { #exprs = 2, class = ct }
                                exprs:
907.                                (3.14159)
                                    lValue { varID = objVar }
909.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: call substring { #exprs = 1 }
                                lValue: lValue { varID = strVar }
                                exprs:
                                    lValue { varID = objVar }
912.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: call pow { #exprs = 2, class = Math }
                                exprs:
                                    lValue { varID = boolVar }
912.                                (3)
914.                    assign (=)
                            lValue: lValue { varID = dlbVar }
                            expr: call dblFuncIntDbl { #exprs = 2 }
                                exprs:
914.                                (0)
914.                                ("pi")
916.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call containsPoint { #exprs = 2 }
                                lValue: lValue { varID = objVar }
                                exprs:
                                    lValue { varID = strVar }
                                    lValue { varID = dblVar }
918.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: call exp { #exprs = 1, class = Math }
                                exprs:
                                    lValue { varID = objVar }
921.                    call align { #exprs = 2 }
                            lValue: lValue { varID = objVar }
                            exprs:
921.                            ("left")
921.                            (0)
923.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call boolFuncBoolStringGameObj { #exprs = 3 }
                                exprs:
                                    lValue { varID = dblVar }
                                    lValue { varID = strVar }
                                    lValue { varID = objVar }
925.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call boolFuncBoolStringGameObj { #exprs = 3 }
                                exprs:
                                    lValue { varID = strVar }
                                    lValue { varID = objVar }
                                    lValue { varID = boolVar }
927.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call boolFuncBoolStringGameObj { #exprs = 3 }
                                exprs:
                                    lValue { varID = objVar }
                                    lValue { varID = strVar }
                                    lValue { varID = boolVar }
930.                    call align { #exprs = 1 }
                            lValue: lValue { varID = objVar }
                            exprs:
                                lValue { varID = intVar }
932.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: call parseInt { #exprs = 1, class = ct }
                                exprs:
932.                                (123)
934.                    call circle { #exprs = 4, class = ct }
                            exprs:
934.                            (0)
934.                            (0)
934.                            (1)
934.                            (1)
936.                    call setText { #exprs = 1 }
                            lValue: lValue { varID = objVar }
                            exprs:
936.                            (1)
938.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call canParseInt { #exprs = 1, class = ct }
                                exprs:
938.                                (1.0)
940.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call canParseInt { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = boolVar }
942.                    call align { #exprs = 1 }
                            lValue: lValue { varID = objVar }
                            exprs:
942.                            (true)
944.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call equals { #exprs = 1 }
                                lValue: lValue { varID = strVar }
                                exprs:
                                    lValue { varID = objVar }
947.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call boolFuncBoolStringGameObj { #exprs = 3 }
                                exprs:
                                    lValue { varID = boolVar }
                                    lValue { varID = strVar }
947.                                (42)
949.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call hit { #exprs = 1 }
                                lValue: lValue { varID = objVar }
                                exprs:
949.                                (0.0)
951.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call hit { #exprs = 1 }
                                lValue: lValue { varID = objVar }
                                exprs:
951.                                (false)
953.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call hit { #exprs = 1 }
                                lValue: lValue { varID = objVar }
                                exprs:
953.                                ("the wall")
956.                    if
                            expr: (>) { right = 0 }
                                left: call intFuncInt
                            block: block { #stmts = 1 }
                                stmts:
957.                                call voidFunc
959.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: call dblFuncIntDbl
961.                    call circle { class = ct }
963.                    call rect { #exprs = 3, class = ct }
                            exprs:
963.                            (0)
963.                            (0)
963.                            (10)
965.                    call circle { #exprs = 2, class = ct }
                            exprs:
965.                            (0)
965.                            (0)
967.                    call voidFunc { #exprs = 1 }
                            exprs:
967.                            (1)
969.                    call setBackColor { #exprs = 3, class = ct }
                            exprs:
969.                            (255)
969.                            (0)
969.                            (0)
971.                    call delete { #exprs = 1 }
                            lValue: lValue { varID = objVar }
                            exprs:
971.                            (true)
973.                    call setText { #exprs = 2 }
                            lValue: lValue { varID = objVar }
                            exprs:
973.                            ("circle")
973.                            ("green")
976.                    var k { vt = int }
                            initExpr: (/) { right = 2, left = 3 }
978.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: call random { #exprs = 2, class = ct }
                                exprs:
                                    (/)
                                        right: lValue { varID = intVar }
                                        left: lValue { varID = intVar }
                                    lValue { varID = intVar }
980.                    assign (=)
                            lValue: lValue { varID = x }
                            expr: (+) { right = 1 }
                                left: lValue { varID = x }
982.                    for
                            expr: (<) { right = 1 }
                                left: lValue { varID = x }
982.                        initStmt: assign (=) { expr = 0 }
                                lValue: lValue { varID = x }
                            block: block { #stmts = 1 }
                                stmts:
983.                                call voidFunc
982.                        nextStmt: assign (++)
                                lValue: lValue { varID = x }
985.                    call foo
987.                    var j { vt = int, initExpr = 3 }
989.                    var uninitializedVar { vt = int }
991.                    if
                            expr: (<) { right = 0 }
                                left: lValue { varID = uninitializedVar }
                            block: block { #stmts = 1 }
                                stmts:
992.                                assign (=) { expr = 0 }
                                        lValue: lValue { varID = uninitializedVar }
993.                    var g { vt = GameObj }
995.                    assign (=) { expr = 1 }
                            lValue: lValue { varID = g, fieldID = xSpeed }
1002.                    var r { vt = GameObj }
                            initExpr: call rectangle { #exprs = 4, class = ct }
                                exprs:
1002.                                (0)
1002.                                (0)
1002.                                (10)
1002.                                (10)
1004.                    assign (=) { expr = false }
                            lValue: lValue { varID = objVar, fieldID = isVisible }
1006.                    call foo
                            lValue: lValue { varID = objVar }
1013.                    call Circle { #exprs = 3, class = ct }
                            exprs:
1013.                            (0)
1013.                            (0)
1013.                            (10)
1015.                    call atan2 { #exprs = 2 }
                            lValue: lValue { varID = math }
                            exprs:
                                (-)
                                    right: lValue { varID = r, fieldID = x }
                                    left: call clickX { class = ct }
                                (-)
                                    right: lValue { varID = r, fieldID = y }
                                    left: call clickY { class = ct }
1017.                    call voidfunC
1019.                    assign (=) { expr = 2 }
                            lValue: lValue { varID = intvar }
1022.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: lValue { varID = Null }
1024.                    assign (=)
                            lValue: lValue { varID = objVar }
                            expr: lValue { varID = NULL }
1026.                    while
                            expr: lValue { varID = True }
                            block: block { #stmts = 1 }
                                stmts:
1027.                                call voidFunc
1029.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: lValue { varID = TRUE }
1031.                    if
                            expr: lValue { varID = False }
                            block: block { #stmts = 1 }
                                stmts:
1032.                                call voidFunc
1034.                    assign (=)
                            lValue: lValue { varID = objVar, fieldID = clickable }
                            expr: lValue { varID = FALSE }
1037.                    if
                            expr: (=) { right = 0 }
                                left: lValue { varID = i }
                            block: block { #stmts = 1 }
                                stmts:
1038.                                assign (=) { expr = 0 }
                                        lValue: lValue { varID = i }
1040.                    var intArr2 { vt = array of int }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
1040.                                (1)
1040.                                (2)
1040.                                (3.14)
1042.                    var dblArr { vt = array of double }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
1042.                                (1)
1042.                                ("two")
1042.                                (3.14)
1044.                    var strArr { vt = array of String }
                            initExpr: newArray { vtElement = "GameObj", lengthExpr = 100 }
1046.                    var boolArr { vt = array of boolean }
                            initExpr: call intArrFuncInt { #exprs = 1 }
                                exprs:
1046.                                (10)
1048.                    assign (=)
                            lValue: lValue { varID = intArr }
                            expr: newArray { vtElement = 0, lengthExpr = 1.5 }
1051.                    assign (++)
                            lValue: lValue { varID = boolVar }
1053.                    assign (++)
                            lValue: lValue { varID = strVar }
1055.                    assign (++)
                            lValue: lValue { varID = objVar }
1057.                    assign (--)
                            lValue: lValue { varID = boolVar }
1059.                    assign (--)
                            lValue: lValue { varID = strVar }
1061.                    assign (--)
                            lValue: lValue { varID = objVar }
1064.                    forArray
1064.                        var: var x { vt = int, isGlobal = false }
                            expr: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
1065.                                call voidFunc
1067.                    forArray
1067.                        var: var x { vt = double, isGlobal = false }
                            expr: lValue { varID = dblVar }
                            block: block { #stmts = 1 }
                                stmts:
1068.                                call voidFunc
1070.                    forArray
1070.                        var: var x { vt = boolean, isGlobal = false }
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
1071.                                call voidFunc
1073.                    forArray
1073.                        var: var x { vt = String, isGlobal = false }
                            expr: lValue { varID = strVar }
                            block: block { #stmts = 1 }
                                stmts:
1074.                                call voidFunc
1076.                    forArray
1076.                        var: var x { vt = GameObj, isGlobal = false }
                            expr: lValue { varID = objVar }
                            block: block { #stmts = 1 }
                                stmts:
1077.                                call voidFunc
1079.                    forArray
1079.                        var: var x { vt = GameObj, isGlobal = false }
                            expr: lValue { varID = strVar }
                            block: block { #stmts = 1 }
                                stmts:
1080.                                call voidFunc
1083.                    forArray
1083.                        var: var x { vt = double, isGlobal = false }
                            expr: lValue { varID = intArr }
                            block: block { #stmts = 1 }
                                stmts:
1084.                                call voidFunc
1086.                    forArray
1086.                        var: var x { vt = String, isGlobal = false }
                            expr: lValue { varID = objArr }
                            block: block { #stmts = 1 }
                                stmts:
1087.                                call voidFunc
1090.                    for
                            expr: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
1091.                                call voidFunc
1093.                    for
                            expr: lValue { varID = dblVar }
                            block: block { #stmts = 1 }
                                stmts:
1094.                                call voidFunc
1096.                    for
                            expr: lValue { varID = strVar }
                            block: block { #stmts = 1 }
                                stmts:
1097.                                call voidFunc
1099.                    for
                            expr: lValue { varID = objVar }
                            block: block { #stmts = 1 }
                                stmts:
1100.                                call voidFunc
1102.                    doWhile { iLineWhile = 1105 }
                            expr: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
1103.                                call voidFunc
1108.                    while
                            expr: lValue { varID = dblVar }
                            block: block { #stmts = 1 }
                                stmts:
1109.                                call voidFunc
1111.                    while
                            expr: lValue { varID = strVar }
                            block: block { #stmts = 1 }
                                stmts:
1112.                                call voidFunc
1114.                    while
                            expr: lValue { varID = objVar }
                            block: block { #stmts = 1 }
                                stmts:
1115.                                call voidFunc
1118.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
1121.                                if
                                        expr: lValue { varID = intVar }
                                        block: block { #stmts = 1 }
                                            stmts:
1122.                                            call voidFunc
                            expr: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
1119.                                call voidFunc
1124.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
1127.                                if
                                        expr: lValue { varID = dblVar }
                                        block: block { #stmts = 1 }
                                            stmts:
1128.                                            call voidFunc
                            expr: lValue { varID = dblVar }
                            block: block { #stmts = 1 }
                                stmts:
1125.                                call voidFunc
1130.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
1133.                                if
                                        expr: lValue { varID = strVar }
                                        block: block { #stmts = 1 }
                                            stmts:
1134.                                            call voidFunc
                            expr: lValue { varID = strVar }
                            block: block { #stmts = 1 }
                                stmts:
1131.                                call voidFunc
1136.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
1139.                                if
                                        expr: lValue { varID = objVar }
                                        block: block { #stmts = 1 }
                                            stmts:
1140.                                            call voidFunc
                            expr: lValue { varID = objVar }
                            block: block { #stmts = 1 }
                                stmts:
1137.                                call voidFunc
1150.                    assign (-=) { expr = "2.79" }
                            lValue: lValue { varID = strVar }
1152.                    assign (-=) { expr = 1 }
                            lValue: lValue { varID = boolVar }
1154.                    assign (*=)
                            lValue: lValue { varID = objVar }
                            expr: lValue { varID = objVar }
1156.                    assign (/=) { expr = 3.14 }
                            lValue: lValue { varID = objVar }
1158.                    assign (+=)
                            lValue: lValue { varID = strVar }
                            expr: lValue { varID = intVar }
1160.                    assign (+=)
                            lValue: lValue { varID = strVar }
                            expr: call getLayer
                                lValue: lValue { varID = objArr, indexExpr = 0 }
1162.                    assign (+=)
                            lValue: lValue { varID = strVar }
                            expr: lValue { varID = dblVar }
1164.                    assign (+=)
                            lValue: lValue { varID = strVar }
                            expr: call getWidth
                                lValue: lValue { varID = objVar }
1166.                    assign (+=)
                            lValue: lValue { varID = strVar }
                            expr: lValue { varID = boolVar }
1168.                    assign (+=)
                            lValue: lValue { varID = strVar }
                            expr: call hit { #exprs = 1 }
                                lValue: lValue { varID = objVar }
                                exprs:
                                    lValue { varID = objVar }
1170.                    assign (+=)
                            lValue: lValue { varID = strVar }
                            expr: lValue { varID = objVar }
1172.                    assign (+=) { expr = "hello" }
                            lValue: lValue { varID = intVar }
1174.                    assign (+=)
                            lValue: lValue { varID = intVar }
                            expr: call strArrMethod
1176.                    assign (-=)
                            lValue: lValue { varID = dblVar }
                            expr: call rect { #exprs = 4, class = ct }
                                exprs:
1176.                                (0)
1176.                                (0)
1176.                                (1)
1176.                                (2)
1178.                    assign (*=) { expr = false }
                            lValue: lValue { varID = intVar }
1180.                    assign (/=) { expr = true }
                            lValue: lValue { varID = dblVar }
1182.                    assign (+=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = dblVar }
1184.                    assign (-=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = dblVar }
1186.                    assign (*=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = dblVar }
1188.                    assign (/=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = dblVar }
1190.                    if
                            expr: (==) { right = "s" }
                                left: lValue { varID = strVar }
                            block: block { #stmts = 1 }
                                stmts:
1191.                                call voidFunc
1194.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (^)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
1196.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (&)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
1198.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (|)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
1200.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (>>) { right = 2 }
                                left: lValue { varID = i }
1202.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (<<) { right = 2 }
                                left: lValue { varID = i }
1204.                    assign (=)
                            lValue: lValue { varID = i }
                            expr: (>>>) { right = 2 }
                                left: lValue { varID = i }
1213.                    var lowercasefirst { vt = int, initExpr = 1 }
1215.                    var lowerCaseFirst { vt = int, initExpr = 10 }
1216.                    var upperCaseFirst { vt = GameObj }
                            initExpr: lValue { varID = objVar }
1218.                    var uppercasefirst { vt = GameObj, initExpr = null }
1220.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (+) { right = 1 }
                                left: lValue { varID = dblvar }
1224.                    var DouBle { vt = int }
1226.                    var BooLean { vt = double }
1228.                    var string { vt = boolean }
1231.                    assign (=) { expr = 1 }
                            lValue: lValue { varID = intVar, indexExpr = 0 }
1234.                    assign (=) { expr = 1 }
                            lValue: lValue { varID = intArr }
                                indexExpr: lValue { varID = dblVar }
1237.                    var numObjs { vt = int }
                            initExpr: lValue { varID = objArr, fieldID = Length }
1240.                    var len { vt = int }
                            initExpr: lValue { varID = strVar, fieldID = length }
1242.                    var size { vt = int }
                            initExpr: lValue { varID = intVar, fieldID = size }
1245.                    assign (=)
                            lValue: lValue { varID = objVar }
                            expr: unaryOp (neg)
                                expr: lValue { varID = objVar }
1248.                    assign (=)
                            lValue: lValue { varID = objVar, fieldID = visible }
                            expr: unaryOp (not)
                                expr: lValue { varID = intVar }
1251.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: (+)
                                right: lValue { varID = intArr }
                                left: lValue { varID = strVar }
1253.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: (+)
                                right: lValue { varID = strVar }
                                left: lValue { varID = intArr }
1256.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (+)
                                right: unaryOp (not)
                                    expr: lValue { varID = boolVar }
                                left: lValue { varID = boolVar }
1258.                    assign (=)
                            lValue: lValue { varID = objVar }
                            expr: (+)
                                right: lValue { varID = objVar }
                                left: lValue { varID = objVar }
1260.                    assign (=)
                            lValue: lValue { varID = intArr }
                            expr: (+) { right = 1 }
                                left: lValue { varID = intArr }
1262.                    assign (=)
                            lValue: lValue { varID = objArr }
                            expr: (+)
                                right: lValue { varID = objVar }
                                left: lValue { varID = objArr }
1265.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: (-)
                                right: lValue { varID = intVar }
                                left: lValue { varID = strVar }
1267.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (*) { right = 0 }
                                left: lValue { varID = boolVar }
1269.                    assign (=)
                            lValue: lValue { varID = objVar }
                            expr: (/) { right = 2 }
                                left: lValue { varID = objVar }
1271.                    assign (=)
                            lValue: lValue { varID = intArr }
                            expr: (%) { right = 2 }
                                left: lValue { varID = intArr }
1274.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (&&) { right = 1001 }
                                left: lValue { varID = intVar }
1276.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (||) { right = 1010 }
                                left: lValue { varID = boolVar }
1279.                    if
                            expr: (<)
                                right: lValue { varID = boolVar }
                                left: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
1280.                                call voidFunc
1282.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (>)
                                right: lValue { varID = dblVar }
                                left: lValue { varID = objVar }
1284.                    while
                            expr: (<=)
                                right: lValue { varID = intVar }
                                left: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
1285.                                call voidFunc
1288.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (>=)
                                right: lValue { varID = intArr }
                                left: lValue { varID = dblVar }
1291.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { right = 2, left = 1 }
1293.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { right = 8 }
                                left: lValue { varID = intVar }
1296.                    var intVar { vt = int, initExpr = 13 }
1298.                    var objArr { vt = array of GameObj }
                            initExpr: newArray { vtElement = "GameObj", lengthExpr = 10 }
1301.                    call update
1303.                    call start
1305.                    call onMousePress { #exprs = 2 }
                            exprs:
1305.                            (0)
1305.                            (0)
1308.                    call println { #exprs = 1 }
                            exprs:
1308.                            ("Hello world")
1310.                    call setHeight { #exprs = 1 }
                            exprs:
1310.                            (150)
1322.                    call foo
                            lValue: lValue { varID = Code12Program }
1324.                    call foo
                            lValue: lValue { varID = Code12 }
1327.                    call log { #exprs = 1 }
                            lValue: lValue { varID = boolVar, indexExpr = 0 }
                            exprs:
                                lValue { varID = objVar }
1332.                    call voidFunc
                            lValue: lValue { varID = intArr }
1335.                    call voidFunc
                            lValue: lValue { varID = intArr, indexExpr = 0 }
1337.                    call foo
                            lValue: lValue { varID = boolVar }
1340.                    call prnitln { class = ct }
1342.                    call circ { #exprs = 3, class = ct }
                            exprs:
1342.                            (0)
1342.                            (0)
1342.                            (10)
1345.                    call foo
                            lValue: lValue { varID = objArr, indexExpr = 0 }
1347.                    call foo { class = Math }
1350.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: call intFuncInt
1352.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: call dblFuncIntDbl
1354.                    call log { class = ct }
1356.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: call atan2 { class = Math }
1358.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: call boolFuncBoolStringGameObj { #exprs = 2 }
                                exprs:
1358.                                (false)
1358.                                ("")
1360.                    call rect { #exprs = 3, class = ct }
                            exprs:
1360.                            (0)
1360.                            (0)
1360.                            (10)
1362.                    call voidFunc { #exprs = 1 }
                            exprs:
                                lValue { varID = intVar }
1364.                    call print { #exprs = 2, class = ct }
                            exprs:
1364.                            ("intVar =")
                                lValue { varID = intVar }
1366.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: call atan { #exprs = 2, class = Math }
                                exprs:
1366.                                (4)
1366.                                (3)
1368.                    call logm { #exprs = 2, class = ct }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = objVar }
1370.                    var indent { vt = String, initExpr = "2 Tabs" }
1372.                    assign (=) { expr = "1 Space + 2 Tabs" }
                            lValue: lValue { varID = indent }
1374.                    assign (=) { expr = "2 Tabs" }
                            lValue: lValue { varID = indent }
1376.                    assign (=) { expr = "8 Spaces" }
                            lValue: lValue { varID = indent }
1378.                    assign (=) { expr = "2 Tabs" }
                            lValue: lValue { varID = indent }
1380.                    assign (=) { expr = "4 Spaces + 1 Tab" }
                            lValue: lValue { varID = indent }
1382.                    assign (=) { expr = "2 Tabs" }
                            lValue: lValue { varID = indent }
1384.                    if { expr = false }
                            block: block { iLineEnd = 1387, #stmts = 1, iLineBegin = 1385 }
                                stmts:
1386.                                call voidFunc
1388.                    if { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1390.                                call voidFunc
1391.                    if { expr = false }
                            block: block { iLineEnd = 1396, #stmts = 2, iLineBegin = 1392 }
                                stmts:
1394.                                call voidFunc
1395.                                call voidFunc
1397.                    if { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1398.                                call voidFunc
1400.                    call voidFunc
1401.                    if { expr = false }
                            block: block { iLineEnd = 1406, #stmts = 2, iLineBegin = 1402 }
                                stmts:
1403.                                call voidFunc
1405.                                call voidFunc
1407.                    if { expr = false }
                            block: block { iLineEnd = 1411, #stmts = 1, iLineBegin = 1409 }
                                stmts:
1410.                                call voidFunc
1412.                    if { expr = false }
                            block: block { iLineEnd = 1416, #stmts = 1, iLineBegin = 1413 }
                                stmts:
1414.                                call voidFunc
1417.                    if { expr = false }
                            elseBlock: block { #stmts = 1 }
                                stmts:
1421.                                call voidFunc
                            block: block { #stmts = 1 }
                                stmts:
1418.                                call voidFunc
1422.                    if { expr = false }
                            elseBlock: block { #stmts = 1 }
                                stmts:
1426.                                call voidFunc
                            block: block { #stmts = 1 }
                                stmts:
1423.                                call voidFunc
1427.                    if { expr = false }
                            elseBlock: block { #stmts = 1 }
                                stmts:
1430.                                call voidFunc
                            block: block { #stmts = 1 }
                                stmts:
1428.                                call voidFunc
1432.                    call voidFunc
1433.                    if { expr = false }
                            elseBlock: block { iLineEnd = 1439, #stmts = 1, iLineBegin = 1437 }
                                stmts:
1438.                                call voidFunc
                            block: block { #stmts = 1 }
                                stmts:
1434.                                call voidFunc
1440.                    if { expr = false }
                            elseBlock: block { #stmts = 1 }
                                stmts:
1442.                                if { expr = false }
                                        block: block { #stmts = 1 }
                                            stmts:
1444.                                            call voidFunc
                            block: block { #stmts = 1 }
                                stmts:
1441.                                call voidFunc
1445.                    if { expr = false }
                            elseBlock: block { #stmts = 1 }
                                stmts:
1447.                                if { expr = false }
                                        block: block { iLineEnd = 1451, #stmts = 1, iLineBegin = 1449 }
                                            stmts:
1450.                                            call voidFunc
                            block: block { #stmts = 1 }
                                stmts:
1446.                                call voidFunc
1452.                    if { expr = false }
                            elseBlock: block { #stmts = 1 }
                                stmts:
1455.                                if { expr = false }
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
1458.                                            call voidFunc
                                        block: block { #stmts = 1 }
                                            stmts:
1456.                                            call voidFunc
                            block: block { #stmts = 1 }
                                stmts:
1453.                                call voidFunc
1459.                    if { expr = false }
                            elseBlock: block { #stmts = 1 }
                                stmts:
1461.                                if { expr = false }
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
1465.                                            call voidFunc
                                        block: block { #stmts = 1 }
                                            stmts:
1462.                                            call voidFunc
                            block: block { #stmts = 1 }
                                stmts:
1460.                                call voidFunc
1466.                    if { expr = false }
                            elseBlock: block { #stmts = 1 }
                                stmts:
1468.                                if { expr = false }
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
1471.                                            if { expr = false }
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
1475.                                                        call voidFunc
                                                    block: block { #stmts = 1 }
                                                        stmts:
1472.                                                        call voidFunc
                                        block: block { #stmts = 1 }
                                            stmts:
1469.                                            call voidFunc
                            block: block { #stmts = 1 }
                                stmts:
1467.                                call voidFunc
1476.                    if { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1477.                                if { expr = false }
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
1481.                                            call voidFunc
                                        block: block { #stmts = 1 }
                                            stmts:
1478.                                            call voidFunc
1482.                    if { expr = false }
                            block: block { iLineEnd = 1493, #stmts = 1, iLineBegin = 1483 }
                                stmts:
1484.                                if { expr = false }
                                        elseBlock: block { iLineEnd = 1491, #stmts = 1, iLineBegin = 1489 }
                                            stmts:
1490.                                            call voidFunc
                                        block: block { iLineEnd = 1487, #stmts = 1, iLineBegin = 1485 }
                                            stmts:
1486.                                            call voidFunc
1494.                    if { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1495.                                if { expr = false }
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
1498.                                            if { expr = false }
                                                    block: block { #stmts = 1 }
                                                        stmts:
1499.                                                        call voidFunc
                                        block: block { #stmts = 1 }
                                            stmts:
1496.                                            call voidFunc
1500.                    for
                            expr: (<) { right = 100 }
                                left: lValue { varID = ii }
1500.                        initStmt: var ii { vt = int, isGlobal = false, initExpr = 0 }
                            block: block { #stmts = 1 }
                                stmts:
1502.                                call voidFunc
1500.                        nextStmt: assign (++)
                                lValue: lValue { varID = ii }
1503.                    for
                            expr: (<) { right = 100 }
                                left: lValue { varID = ii }
1503.                        initStmt: var ii { vt = int, isGlobal = false, initExpr = 0 }
                            block: block { iLineEnd = 1507, #stmts = 1, iLineBegin = 1504 }
                                stmts:
1506.                                call voidFunc
1503.                        nextStmt: assign (++)
                                lValue: lValue { varID = ii }
1508.                    for
                            expr: (<) { right = 100 }
                                left: lValue { varID = ii }
1508.                        initStmt: var ii { vt = int, isGlobal = false, initExpr = 0 }
                            block: block { iLineEnd = 1512, #stmts = 1, iLineBegin = 1510 }
                                stmts:
1511.                                call voidFunc
1508.                        nextStmt: assign (++)
                                lValue: lValue { varID = ii }
1513.                    while { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1515.                                call voidFunc
1516.                    while { expr = false }
                            block: block { iLineEnd = 1520, #stmts = 1, iLineBegin = 1518 }
                                stmts:
1519.                                call voidFunc
1521.                    while { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1522.                                call voidFunc
1524.                    call voidFunc
1525.                    doWhile { iLineWhile = 1528, expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1527.                                call voidFunc
1529.                    doWhile { iLineWhile = 1534, expr = false }
                            block: block { iLineEnd = 1533, #stmts = 1, iLineBegin = 1531 }
                                stmts:
1532.                                call voidFunc
1535.                    doWhile { iLineWhile = 1538, expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1536.                                call voidFunc
1540.                    var x1 { vt = int }
1541.                    var x2 { vt = int }
1541.                    var x3 { vt = int }
1543.                    var circle { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
1543.                                (0)
1543.                                (0)
1544.                                (10)
1546.                    call log { #exprs = 3, class = ct }
                            exprs:
1546.                            (1)
1547.                            (2)
1548.                            (3)
1550.                    var multiLineArrInit { vt = array of int }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
1550.                                (1)
1551.                                (2)
1553.                    var multiLineArrDec { vt = array of int }
                            initExpr: newArray { vtElement = 0 }
                                lengthExpr: call random { #exprs = 2, class = ct }
                                    exprs:
1553.                                    (1)
1554.                                    (10)
1556.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
1560.                                if
                                        expr: (>) { right = 3 }
                                            left: call random { #exprs = 2, class = ct }
                                                exprs:
1560.                                                (1)
1561.                                                (2)
                                        block: block { #stmts = 1 }
                                            stmts:
1562.                                            call voidFunc
                            expr: (>) { right = 3 }
                                left: call random { #exprs = 2, class = ct }
                                    exprs:
1556.                                    (1)
1556.                                    (2)
                            block: block { #stmts = 1 }
                                stmts:
1558.                                call voidFunc
1564.                    while
                            expr: (>) { right = 3 }
                                left: call random { #exprs = 2, class = ct }
                                    exprs:
1564.                                    (1)
1565.                                    (2)
                            block: block { #stmts = 1 }
                                stmts:
1566.                                call voidFunc
1567.                    doWhile { iLineWhile = 1571 }
                            expr: (<) { right = 0 }
                                left: call max { #exprs = 2, class = Math }
                                    exprs:
1570.                                    (1)
1571.                                    (0)
                            block: block { #stmts = 1 }
                                stmts:
1568.                                call voidFunc
1573.                    for
                            expr: (<) { right = 0 }
                                left: call max { #exprs = 2, class = Math }
                                    exprs:
1573.                                    (1)
1574.                                    (0)
                            block: block { #stmts = 1 }
                                stmts:
1575.                                call voidFunc
1576.                    if { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1577.                                call voidFunc
1579.                    call voidFunc
1580.                    if { expr = false }
                            elseBlock: block { #stmts = 1 }
                                stmts:
1583.                                call voidFunc
                            block: block { #stmts = 1 }
                                stmts:
1581.                                call voidFunc
1585.                    call voidFunc
1586.                    if { expr = false }
                            elseBlock: block { #stmts = 1 }
                                stmts:
1588.                                if { expr = false }
                                        block: block { #stmts = 1 }
                                            stmts:
1589.                                            call voidFunc
                            block: block { #stmts = 1 }
                                stmts:
1587.                                call voidFunc
1591.                    call voidFunc
1592.                    if { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1593.                                call voidFunc
1595.                    while { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1596.                                call voidFunc
1597.                    for { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1598.                                call voidFunc
1600.                    call voidFunc
1601.                    while { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1602.                                call voidFunc
1604.                    call voidFunc
1614.                    var privateInt { vt = int, initExpr = 0 }
1616.                    var publicDouble { vt = double, initExpr = 0 }
1618.                    var halfIntVar { vt = double }
                            initExpr: cast { expr = "3", vtCast = 1 }
1619.                    if { expr = false }
1621.                    var bogusVarInit { vt = int, initExpr = 0 }
1622.                    if { expr = false }
                            elseBlock: block { #stmts = 1 }
                                stmts:
1624.                                if { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1623.                                call voidFunc
1626.                    var bogusVarDecl { vt = int }
1627.                    if { expr = false }
                            block: block { #stmts = 1 }
                                stmts:
1628.                                call voidFunc
1631.                    var bogusArrayInit { vt = array of int }
                            initExpr: arrayInit { #exprs = 1 }
                                exprs:
1631.                                (0)
1632.                    while { expr = false }
1634.                    var bogusArrayDecl { vt = array of int }
1668.        func myFunc { #paramVars = 1, vt = void }
                paramVars:
1668.                var myVar { vt = int, isGlobal = false }
                block: block { iLineEnd = 1670, #stmts = 0, iLineBegin = 1669 }
1671.        func makeCoin { #paramVars = 0, vt = GameObj }
                block: block { iLineEnd = 1674, #stmts = 0, iLineBegin = 1672 }
1676.        func onMousePress { #paramVars = 3, vt = int }
                paramVars:
1676.                var obj { vt = GameObj, isGlobal = false }
1676.                var x { vt = double, isGlobal = false }
1676.                var y { vt = double, isGlobal = false }
                block: block { iLineEnd = 1679, #stmts = 1, iLineBegin = 1677 }
                    stmts:
1678.                    return { expr = 0 }
1681.        func onMousePress { #paramVars = 2, vt = void }
                paramVars:
1681.                var x { vt = double, isGlobal = false }
1681.                var y { vt = double, isGlobal = false }
                block: block { iLineEnd = 1683, #stmts = 0, iLineBegin = 1682 }
1685.        func onKeyPress { #paramVars = 3, vt = void }
                paramVars:
1685.                var obj { vt = GameObj, isGlobal = false }
1685.                var x { vt = double, isGlobal = false }
1685.                var y { vt = double, isGlobal = false }
                block: block { iLineEnd = 1687, #stmts = 0, iLineBegin = 1686 }
1689.        func onKeyRelease { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1691, #stmts = 0, iLineBegin = 1690 }
1693.        func onMousePress { #paramVars = 3, vt = void }
                paramVars:
1693.                var obj { vt = boolean, isGlobal = false }
1693.                var x { vt = double, isGlobal = false }
1693.                var y { vt = double, isGlobal = false }
                block: block { iLineEnd = 1695, #stmts = 0, iLineBegin = 1694 }
1697.        func onMouseDrag { #paramVars = 3, vt = void }
                paramVars:
1697.                var obj { vt = GameObj, isGlobal = false }
1697.                var x { vt = int, isGlobal = false }
1697.                var y { vt = double, isGlobal = false }
                block: block { iLineEnd = 1699, #stmts = 0, iLineBegin = 1698 }
1701.        func onMouseRelease { #paramVars = 3, vt = void }
                paramVars:
1701.                var obj { vt = GameObj, isGlobal = false }
1701.                var x { vt = double, isGlobal = false }
1701.                var y { vt = String, isGlobal = false }
                block: block { iLineEnd = 1703, #stmts = 0, iLineBegin = 1702 }
1705.        func onKeyPress { #paramVars = 1, vt = void }
                paramVars:
1705.                var keyName { vt = double, isGlobal = false }
                block: block { iLineEnd = 1707, #stmts = 0, iLineBegin = 1706 }
1709.        func onKeyRelease { #paramVars = 1, vt = void }
                paramVars:
1709.                var keyName { vt = int, isGlobal = false }
                block: block { iLineEnd = 1711, #stmts = 0, iLineBegin = 1710 }
1713.        func onCharTyped { #paramVars = 1, vt = void }
                paramVars:
1713.                var keyName { vt = GameObj, isGlobal = false }
                block: block { iLineEnd = 1715, #stmts = 0, iLineBegin = 1714 }
1717.        func overIndentedFunc { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1719, #stmts = 0, iLineBegin = 1718 }
1721.        func underIndentedFunc { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1723, #stmts = 0, iLineBegin = 1722 }
1724.        func funcWithUnindentedBody { #paramVars = 0, vt = int }
                block: block { iLineEnd = 1728, #stmts = 1, iLineBegin = 1725 }
                    stmts:
1727.                    return { expr = 0 }
1730.        func multiLineFuncDef { #paramVars = 2, vt = void }
                paramVars:
1730.                var arg1 { vt = int, isGlobal = false }
1731.                var arg2 { vt = int, isGlobal = false }
                block: block { iLineEnd = 1733, #stmts = 0, iLineBegin = 1732 }
1734.        func multilineReturnFunc { #paramVars = 0, vt = int }
                block: block { iLineEnd = 1739, #stmts = 1, iLineBegin = 1735 }
                    stmts:
1737.                    return
                            expr: call max { #exprs = 2, class = Math }
                                exprs:
1737.                                (1)
1738.                                (2)
1742.        func syntaxLevelDependentTests { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1752, #stmts = 4, iLineBegin = 1743 }
                    stmts:
1744.                    var strVar { vt = String, initExpr = "" }
1745.                    var gameObjVar { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
1745.                                (0)
1745.                                (0)
1745.                                (1)
1748.                    if
                            expr: (!=) { left = "" }
                                right: lValue { varID = strVar }
                            block: block { #stmts = 1 }
                                stmts:
1749.                                call voidMethod
1751.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (==) { right = "circles" }
                                    left: lValue { varID = gameObjVar, fieldID = group }
1754.        func intMethod { #paramVars = 0, vt = int }
                block: block { iLineEnd = 1757, #stmts = 1, iLineBegin = 1755 }
                    stmts:
1756.                    return { expr = 0 }
1758.        func strArrMethod { #paramVars = 0, vt = array of String }
                block: block { iLineEnd = 1762, #stmts = 2, iLineBegin = 1759 }
                    stmts:
1760.                    var strArr { vt = array of String }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
1760.                                ("foo")
1760.                                ("bar")
1761.                    return
                            expr: lValue { varID = strArr }
1763.        func voidMethod { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1767, #stmts = 2, iLineBegin = 1764 }
                    stmts:
1765.                    var voidMethodVar { vt = int }
1766.                    return
1768.        func voidMethodWithParams { #paramVars = 5, vt = void }
                paramVars:
1768.                var p1 { vt = int, isGlobal = false }
1768.                var p2 { vt = double, isGlobal = false }
1768.                var p3 { vt = boolean, isGlobal = false }
1768.                var p4 { vt = String, isGlobal = false }
1768.                var p5 { vt = GameObj, isGlobal = false }
                block: block { iLineEnd = 1770, #stmts = 0, iLineBegin = 1769 }
1772.        func noErrorsMethod { #paramVars = 0, vt = GameObj }
                block: block { iLineEnd = 1822, #stmts = 12, iLineBegin = 1773 }
                    stmts:
1774.                    call println { lValue = out, #exprs = 1, class = System }
                            exprs:
1774.                            ("Hello world")
1775.                    assign (=)
                            lValue: lValue { varID = classLevelGameObj }
                            expr: call rect { #exprs = 4, class = ct }
                                exprs:
1775.                                (0)
1775.                                (0)
1775.                                (10)
1775.                                (10)
1776.                    var returnValue { vt = GameObj, initExpr = null }
1777.                    var boolVar { vt = boolean, initExpr = false }
1778.                    var intArrayInitWithExpressions { vt = array of int }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    (+) { right = 2, left = 1 }
                                    (+) { right = 50 }
                                        left: (*) { right = 4, left = 3 }
                                    (+) { right = 3 }
                                        left: parens
                                            expr: (-) { right = 890, left = 67 }
1779.                    var gObjArrayInitWithCTCalls { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
                                    call rect { #exprs = 4, class = ct }
                                        exprs:
1779.                                        (50)
1779.                                        (50)
1779.                                        (10)
1779.                                        (10)
                                    call text { #exprs = 4, class = ct }
                                        exprs:
1779.                                        ("text")
1779.                                        (50)
1779.                                        (50)
1779.                                        (10)
1780.                    var dblArrayInitWithExpressionsAndIntPromotion { vt = array of double }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
                                    (+) { right = 2, left = 1 }
                                    (/) { right = 2 }
                                        left: (*) { right = 7, left = 3.4 }
1782.                    for
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 1790, #stmts = 3, iLineBegin = 1783 }
                                stmts:
1784.                                call println { class = ct }
1785.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
1788.                                            break
                                        expr: lValue { varID = boolVar }
                                        block: block { #stmts = 1 }
                                            stmts:
1786.                                            call println { class = ct }
1789.                                call println { class = ct }
1791.                    while
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 1796, #stmts = 2, iLineBegin = 1792 }
                                stmts:
1793.                                if
                                        expr: lValue { varID = boolVar }
                                        block: block { #stmts = 1 }
                                            stmts:
1794.                                            break
1795.                                call println { class = ct }
1797.                    doWhile { iLineWhile = 1803 }
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 1802, #stmts = 2, iLineBegin = 1798 }
                                stmts:
1799.                                call println { class = ct }
1800.                                if
                                        expr: lValue { varID = boolVar }
                                        block: block { #stmts = 1 }
                                            stmts:
1801.                                            break
1805.                    for
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 1809, #stmts = 1, iLineBegin = 1806 }
                                stmts:
1807.                                if
                                        expr: lValue { varID = boolVar }
                                        block: block { #stmts = 1 }
                                            stmts:
1808.                                            return
                                                    expr: lValue { varID = returnValue }
1810.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
1814.                                if
                                        elseBlock: block { iLineEnd = 1821, #stmts = 1, iLineBegin = 1819 }
                                            stmts:
1820.                                            return
                                                    expr: lValue { varID = returnValue }
                                        expr: lValue { varID = boolVar }
                                        block: block { iLineEnd = 1817, #stmts = 1, iLineBegin = 1815 }
                                            stmts:
1816.                                            return
                                                    expr: lValue { varID = returnValue }
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 1813, #stmts = 1, iLineBegin = 1811 }
                                stmts:
1812.                                return
                                        expr: lValue { varID = returnValue }
1825.        func onMousePress { #paramVars = 3, isPublic = true, vt = void }
                paramVars:
1825.                var obj { vt = GameObj, isGlobal = false }
1825.                var x { vt = double, isGlobal = false }
1825.                var Yvalue { vt = double, isGlobal = false }
                block: block { iLineEnd = 1827, #stmts = 0, iLineBegin = 1826 }
1829.        func parameterStartsWithCapitalMethod { #paramVars = 3, vt = void }
                paramVars:
1829.                var doubleParam { vt = double, isGlobal = false }
1829.                var IntParam { vt = int, isGlobal = false }
1829.                var boolParam { vt = boolean, isGlobal = false }
                block: block { iLineEnd = 1832, #stmts = 1, iLineBegin = 1830 }
                    stmts:
1831.                    var userFunc1Var { vt = int, initExpr = 1 }
1834.        func StartsWithCapitalLetterMethod { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1836, #stmts = 0, iLineBegin = 1835 }
1837.        func testErrors3 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1886, #stmts = 24, iLineBegin = 1838 }
                    stmts:
1839.                    var intVar { vt = int, initExpr = 0 }
1840.                    var boolVar { vt = boolean, initExpr = false }
1842.                    var Starts_with_capital_letter_var { vt = int }
1844.                    var StartsWithCapitalLetterVarWithAssignment { vt = double, initExpr = 3.14 }
1846.                    var GameObjArrVar { vt = array of GameObj }
                            initExpr: newArray { vtElement = "GameObj", lengthExpr = 10 }
1848.                    var dblVar { vt = double }
                            initExpr: (+) { right = 1 }
                                left: lValue { varID = intvar }
1850.                    call println { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = boolvar }
1852.                    call voidmethod
1854.                    call PrintLn { class = ct }
1856.                    var classLevelGameObj { vt = int }
1858.                    var intVar { vt = int }
1860.                    var boolVar { vt = boolean }
1862.                    var classlevelInt { vt = GameObj }
1864.                    var boolvar { vt = boolean, initExpr = true }
1865.                    if
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 1868, #stmts = 1, iLineBegin = 1866 }
                                stmts:
1867.                                var prevBlockVar { vt = int }
1870.                    assign (=) { expr = 2e2 }
                            lValue: lValue { varID = prevBlockVar }
1872.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { right = 1 }
                                    left: lValue { varID = voidMethodVar }
1874.                    assign (=) { expr = 1.1 }
                            lValue: lValue { varID = prevBlockvar }
1876.                    assign (=) { expr = 0 }
                            lValue: lValue { varID = undeclaredVar }
1878.                    call setText { #exprs = 1 }
                            lValue: lValue { varID = classLevelGameObj }
                            exprs:
                                lValue { varID = undeclaredVar }
1880.                    call print { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = classLevelUnassignedVar }
1881.                    var unassignedVar { vt = int }
1883.                    call print { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = unassignedVar }
1885.                    assign (=) { expr = 200 }
                            lValue: lValue { varID = MAX_ENEMIES }
1888.        func onMousePress { #paramVars = 3, isPublic = true, vt = boolean }
                paramVars:
1888.                var obj { vt = GameObj, isGlobal = false }
1888.                var x { vt = double, isGlobal = false }
1888.                var y { vt = double, isGlobal = false }
                block: block { iLineEnd = 1891, #stmts = 1, iLineBegin = 1889 }
                    stmts:
1890.                    return
                            expr: lValue { varID = classLevelBoolean }
1893.        func onMouseDrag { #paramVars = 4, isPublic = true, vt = void }
                paramVars:
1893.                var obj { vt = GameObj, isGlobal = false }
1893.                var x { vt = double, isGlobal = false }
1893.                var y { vt = double, isGlobal = false }
1893.                var z { vt = double, isGlobal = false }
                block: block { iLineEnd = 1895, #stmts = 0, iLineBegin = 1894 }
1897.        func onMouseRelease { #paramVars = 3, isPublic = true, vt = void }
                paramVars:
1897.                var obj { vt = GameObj, isGlobal = false }
1897.                var x { vt = double, isGlobal = false }
1897.                var y { vt = int, isGlobal = false }
                block: block { iLineEnd = 1899, #stmts = 0, iLineBegin = 1898 }
1901.        func onKeyPress { #paramVars = 1, vt = void }
                paramVars:
1901.                var keyName { vt = String, isGlobal = false }
                block: block { iLineEnd = 1903, #stmts = 0, iLineBegin = 1902 }
1905.        func onKeyRelease { #paramVars = 1, vt = void }
                paramVars:
1905.                var keyName { vt = String, isGlobal = false }
                block: block { iLineEnd = 1907, #stmts = 0, iLineBegin = 1906 }
1910.        func onCharTyped { isStatic = true, vt = void, #paramVars = 1, isPublic = true }
                paramVars:
1910.                var charString { vt = String, isGlobal = false }
                block: block { iLineEnd = 1912, #stmts = 0, iLineBegin = 1911 }
1913.        func onResize { #paramVars = 0, isPublic = true, vt = void }
                block: block { iLineEnd = 1915, #stmts = 0, iLineBegin = 1914 }
1917.        func onResize { #paramVars = 0, isPublic = true, vt = void }
                block: block { iLineEnd = 1919, #stmts = 0, iLineBegin = 1918 }
1920.        func existingUserFunction { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1922, #stmts = 0, iLineBegin = 1921 }
1924.        func existingUserFunction { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1926, #stmts = 0, iLineBegin = 1925 }
1928.        func existingUserfunction { #paramVars = 0, vt = void }
                block: block { iLineEnd = 1930, #stmts = 0, iLineBegin = 1929 }
1931.        func testErrors2 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 2099, #stmts = 81, iLineBegin = 1932 }
                    stmts:
1933.                    var intVar { vt = int, initExpr = 0 }
1934.                    var dblVar { vt = double, initExpr = 0 }
1935.                    var boolVar { vt = boolean, initExpr = false }
1936.                    var strVar { vt = String, initExpr = "" }
1937.                    var rect { vt = GameObj }
                            initExpr: call rect { #exprs = 4, class = ct }
                                exprs:
1937.                                (50)
1937.                                (50)
1937.                                (10)
1937.                                (10)
1938.                    var circle { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
1938.                                (50)
1938.                                (50)
1938.                                (10)
1939.                    var text { vt = GameObj }
                            initExpr: call text { #exprs = 4, class = ct }
                                exprs:
1939.                                ("text")
1939.                                (50)
1939.                                (50)
1939.                                (10)
1940.                    var image { vt = GameObj }
                            initExpr: call image { #exprs = 4, class = ct }
                                exprs:
1940.                                ("bogusFileName.png")
1940.                                (50)
1940.                                (50)
1940.                                (10)
1941.                    var intArr { vt = array of int }
                            initExpr: newArray { vtElement = 0, lengthExpr = 10 }
1942.                    var dblArr { vt = array of double }
                            initExpr: newArray { vtElement = 1, lengthExpr = 10 }
1943.                    var boolArr { vt = array of boolean }
                            initExpr: newArray { vtElement = true, lengthExpr = 10 }
1944.                    var strArr { vt = array of String }
                            initExpr: newArray { vtElement = "String", lengthExpr = 10 }
1945.                    var objArr { vt = array of GameObj }
                            initExpr: newArray { vtElement = "GameObj", lengthExpr = 10 }
1947.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = dblVar }
1949.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: lValue { varID = dblVar }
1951.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: lValue { varID = intVar }
1953.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: lValue { varID = strVar }
1955.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = strVar }
1957.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: lValue { varID = rect }
1959.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x, indexExpr = 0 }
                            expr: lValue { varID = dblVar }
1961.                    assign (++)
                            lValue: lValue { varID = intVar, indexExpr = 0 }
1963.                    assign (=)
                            lValue: lValue { varID = strArr }
                                indexExpr: (*) { right = 1.0 }
                                    left: lValue { varID = intVar }
                            expr: lValue { varID = strVar }
1965.                    assign (=)
                            lValue: lValue { varID = objArr }
                                indexExpr: lValue { varID = dblVar }
                            expr: lValue { varID = rect }
1967.                    assign (=)
                            lValue: lValue { varID = intArr }
                            expr: newArray { vtElement = 0 }
                                lengthExpr: (*) { right = 2 }
                                    left: lValue { varID = intArr, fieldID = foo }
1969.                    call print { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = intVar, fieldID = x }
1971.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = setText }
                            expr: lValue { varID = strVar }
1973.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: lValue { varID = rect, fieldID = foo }
1975.                    assign (=) { expr = 0 }
                            lValue: lValue { varID = rect, fieldID = foo }
1977.                    call onMousePress { #exprs = 3 }
                            exprs:
                                lValue { varID = rect }
                                lValue { varID = rect, fieldID = x }
                                lValue { varID = rect, fieldID = y }
1979.                    var line { vt = GameObj }
                            initExpr: call line { #exprs = 4 }
                                exprs:
1979.                                (50)
1979.                                (50)
1979.                                (10)
1979.                                (10)
1981.                    call println
1983.                    call undefinedFunc
1985.                    assign (=)
                            lValue: lValue { varID = rect }
                            expr: call rec { #exprs = 4, class = ct }
                                exprs:
1985.                                (0)
1985.                                (0)
1985.                                (1)
1985.                                (1)
1987.                    call printLine { class = ct }
1989.                    call foo { class = ct }
1991.                    call bar { lValue = foo, class = System }
1993.                    call println { lValue = err, #exprs = 1, class = System }
                            exprs:
1993.                            ("File opening failed:")
1995.                    var stdev { vt = double }
                            initExpr: call foo { #exprs = 1, class = Math }
                                exprs:
                                    lValue { varID = doubleVar }
1997.                    call getWidht { #exprs = 1 }
                            lValue: lValue { varID = rect }
                            exprs:
                                lValue { varID = dblVar }
1999.                    call equal { #exprs = 1 }
                            lValue: lValue { varID = strVar }
                            exprs:
                                lValue { varID = classLevelString }
2001.                    call foo
                            lValue: lValue { varID = rect }
2003.                    call concat { #exprs = 1 }
                            lValue: lValue { varID = rect, fieldID = group }
                            exprs:
                                call getText
                                    lValue: lValue { varID = text }
2005.                    call setSize { #exprs = 2 }
                            lValue: lValue { varID = classLevelString }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = dblVar }
2007.                    call size
                            lValue: lValue { varID = strVar }
2009.                    call delete
                            lValue: lValue { varID = objArr }
2011.                    call delete
                            lValue: lValue { varID = intVar }
2013.                    call print { class = ct }
2015.                    if
                            expr: (<) { right = 0 }
                                left: call min { #exprs = 1, class = Math }
                                    exprs:
2015.                                    (1)
                            block: block { #stmts = 1 }
                                stmts:
2016.                                call voidMethod
2018.                    call voidMethodWithParams
2020.                    if
                            expr: (<) { right = 0 }
                                left: call min { #exprs = 3, class = Math }
                                    exprs:
2020.                                    (1)
2020.                                    (2)
2020.                                    (3)
                            block: block { #stmts = 1 }
                                stmts:
2021.                                call voidMethod
2023.                    var minOf3 { vt = double }
                            initExpr: call min { #exprs = 3, class = Math }
                                exprs:
2023.                                (1)
2023.                                (2)
2023.                                (3)
2025.                    call voidMethod { #exprs = 1 }
                            exprs:
2025.                            (1)
2027.                    call println { #exprs = 2, class = ct }
                            exprs:
2027.                            ("hello")
2027.                            ("world")
2029.                    call println { #exprs = 1, class = ct }
                            exprs:
                                call distance { #exprs = 4, class = ct }
                                    exprs:
                                        call round { #exprs = 1, class = ct }
                                            exprs:
                                                lValue { varID = rect, fieldID = x }
                                        lValue { varID = rect, fieldID = y }
                                        lValue { varID = circle }
                                        lValue { varID = circle, fieldID = y }
2031.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: call max { #exprs = 2, class = Math }
                                exprs:
                                    lValue { varID = intVar }
                                    lValue { varID = strVar }
2032.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = intVar }
                                lValue { varID = boolVar }
                                lValue { varID = strVar }
                                lValue { varID = rect }
2034.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = dblVar }
                                lValue { varID = boolVar }
                                lValue { varID = strVar }
                                lValue { varID = intVar }
2036.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = dblVar }
                                lValue { varID = strVar }
                                lValue { varID = strVar }
                                lValue { varID = rect }
2038.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = intVar }
                                lValue { varID = boolVar }
                                lValue { varID = boolVar }
                                lValue { varID = strVar }
                                lValue { varID = rect }
2040.                    call voidMethodWithParams { #exprs = 5 }
                            exprs:
                                lValue { varID = dblVar }
                                lValue { varID = dblVar }
                                lValue { varID = boolVar }
                                lValue { varID = strVar }
                                lValue { varID = rect }
2042.                    for
                            expr: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
2043.                                call println { class = ct }
2044.                    doWhile { iLineWhile = 2047 }
                            expr: (+) { right = "" }
                                left: parens
                                    expr: (==) { right = 2e0 }
                                        left: (+) { right = 1.0, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
2045.                                call println { class = ct }
2049.                    while
                            expr: (+) { right = "" }
                                left: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
2051.                                assign (+=) { expr = 1 }
                                        lValue: lValue { varID = rect, fieldID = group }
2053.                    assign (+=) { expr = false }
                            lValue: lValue { varID = boolVar }
2055.                    assign (*=)
                            lValue: lValue { varID = dblVar }
                            expr: lValue { varID = rect }
2057.                    assign (+=)
                            lValue: lValue { varID = dblVar }
                            expr: lValue { varID = boolVar }
2059.                    assign (+=)
                            lValue: lValue { varID = dblVar }
                            expr: (+) { right = "" }
                                left: lValue { varID = boolVar }
2061.                    assign (+=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = boolVar }
2063.                    assign (+=)
                            lValue: lValue { varID = intVar }
                            expr: lValue { varID = rect }
2065.                    assign (/=)
                            lValue: lValue { varID = intVar }
                            expr: (*)
                                right: lValue { varID = rect, fieldID = x }
                                left: lValue { varID = classLevelInt }
2067.                    assign (*=) { expr = 1e0 }
                            lValue: lValue { varID = intVar }
2069.                    assign (-=)
                            lValue: lValue { varID = classLevelInt }
                            expr: lValue { varID = classLevelDouble }
2071.                    assign (+=) { expr = 1.0 }
                            lValue: lValue { varID = intVar }
2073.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2076.                                if
                                        expr: lValue { varID = intVar }
                                        block: block { #stmts = 1 }
                                            stmts:
2077.                                            call println { class = ct }
                            expr: lValue { varID = dblVar }
                            block: block { #stmts = 1 }
                                stmts:
2074.                                call println { class = ct }
2079.                    if { expr = 0 }
                            block: block { #stmts = 1 }
                                stmts:
2080.                                call println { class = ct }
2082.                    forArray { expr = null }
2082.                        var: var x { vt = int, isGlobal = false }
                            block: block { #stmts = 1 }
                                stmts:
2083.                                break
2085.                    forArray
2085.                        var: var x { vt = int, isGlobal = false }
                            expr: lValue { varID = image }
                            block: block { #stmts = 1 }
                                stmts:
2086.                                break
2088.                    forArray
2088.                        var: var x { vt = int, isGlobal = false }
                            expr: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
2089.                                break
2091.                    forArray
2091.                        var: var x { vt = GameObj, isGlobal = false }
                            expr: lValue { varID = classLevelIntArr }
                            block: block { #stmts = 1 }
                                stmts:
2092.                                break
2094.                    forArray
2094.                        var: var x { vt = boolean, isGlobal = false }
                            expr: newArray { vtElement = "String", lengthExpr = 10 }
                            block: block { #stmts = 1 }
                                stmts:
2095.                                break
2097.                    forArray
2097.                        var: var x { vt = int, isGlobal = false }
                            expr: lValue { varID = dblArr }
                            block: block { #stmts = 1 }
                                stmts:
2098.                                break
2100.        func voidFuncReturnsValue6 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 2109, #stmts = 3, iLineBegin = 2101 }
                    stmts:
2102.                    var r { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
2102.                                (0)
2102.                                (0)
2102.                                (1)
2103.                    while
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2104.                                if
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { #stmts = 1 }
                                            stmts:
2106.                                            return
                                                    expr: lValue { varID = r }
2108.                    return
                            expr: lValue { varID = r }
2110.        func voidFuncReturnsValue5 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 2118, #stmts = 3, iLineBegin = 2111 }
                    stmts:
2112.                    var r { vt = GameObj, initExpr = null }
2113.                    for
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2115.                                return
                                        expr: lValue { varID = r }
2117.                    return
                            expr: lValue { varID = r }
2119.        func voidFuncReturnsValue4 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 2127, #stmts = 3, iLineBegin = 2120 }
                    stmts:
2121.                    var r { vt = String, initExpr = null }
2122.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2124.                                return
                                        expr: lValue { varID = r }
2126.                    return
                            expr: lValue { varID = r }
2128.        func voidFuncReturnsValue3 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 2136, #stmts = 3, iLineBegin = 2129 }
                    stmts:
2130.                    var r { vt = String, initExpr = "" }
2131.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2133.                                return
                                        expr: lValue { varID = r }
2135.                    return
                            expr: lValue { varID = r }
2137.        func voidFuncReturnsValue2 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 2145, #stmts = 3, iLineBegin = 2138 }
                    stmts:
2139.                    var r { vt = boolean, initExpr = false }
2140.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2142.                                return
                                        expr: lValue { varID = r }
2144.                    return
                            expr: lValue { varID = r }
2146.        func voidFuncReturnsValue1 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 2151, #stmts = 2, iLineBegin = 2147 }
                    stmts:
2148.                    var r { vt = double, initExpr = 0 }
2150.                    return
                            expr: lValue { varID = r }
2152.        func funcWrongReturnValueType7 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2156, #stmts = 1, iLineBegin = 2153 }
                    stmts:
2155.                    return
                            expr: (*) { right = 1.0 }
                                left: lValue { varID = classLevelInt }
2157.        func funcWrongReturnValueType6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2166, #stmts = 3, iLineBegin = 2158 }
                    stmts:
2159.                    var r { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
2159.                                (0)
2159.                                (0)
2159.                                (1)
2160.                    while
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2161.                                if
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { #stmts = 1 }
                                            stmts:
2163.                                            return
                                                    expr: lValue { varID = r }
2165.                    return
                            expr: lValue { varID = r }
2167.        func funcWrongReturnValueType5 { #paramVars = 0, vt = String }
                block: block { iLineEnd = 2175, #stmts = 3, iLineBegin = 2168 }
                    stmts:
2169.                    var r { vt = GameObj, initExpr = null }
2170.                    for
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2172.                                return
                                        expr: lValue { varID = r }
2174.                    return
                            expr: lValue { varID = r }
2176.        func funcWrongReturnValueType4 { #paramVars = 0, vt = GameObj }
                block: block { iLineEnd = 2184, #stmts = 3, iLineBegin = 2177 }
                    stmts:
2178.                    var r { vt = String, initExpr = null }
2179.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2181.                                return
                                        expr: lValue { varID = r }
2183.                    return
                            expr: lValue { varID = r }
2185.        func funcWrongReturnValueType3 { #paramVars = 0, vt = boolean }
                block: block { iLineEnd = 2193, #stmts = 3, iLineBegin = 2186 }
                    stmts:
2187.                    var r { vt = String, initExpr = "" }
2188.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2190.                                return
                                        expr: lValue { varID = r }
2192.                    return
                            expr: lValue { varID = r }
2194.        func funcWrongReturnValueType2 { #paramVars = 0, vt = double }
                block: block { iLineEnd = 2202, #stmts = 3, iLineBegin = 2195 }
                    stmts:
2196.                    var r { vt = boolean, initExpr = false }
2197.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2199.                                return
                                        expr: lValue { varID = r }
2201.                    return
                            expr: lValue { varID = r }
2203.        func funcWrongReturnValueType1 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2208, #stmts = 2, iLineBegin = 2204 }
                    stmts:
2205.                    var r { vt = double, initExpr = 0 }
2207.                    return
                            expr: lValue { varID = r }
2209.        func funcNoReturnValue6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2217, #stmts = 3, iLineBegin = 2210 }
                    stmts:
2211.                    var r { vt = int, initExpr = 0 }
2212.                    while
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2213.                                if
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { #stmts = 1 }
                                            stmts:
2215.                                            return
2216.                    return
                            expr: lValue { varID = r }
2218.        func funcNoReturnValue5 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2225, #stmts = 3, iLineBegin = 2219 }
                    stmts:
2220.                    var r { vt = int, initExpr = 0 }
2221.                    for
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2223.                                return
2224.                    return
                            expr: lValue { varID = r }
2226.        func funcNoReturnValue4 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2234, #stmts = 3, iLineBegin = 2227 }
                    stmts:
2228.                    var r { vt = int, initExpr = 0 }
2229.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2231.                                return
2233.                    return
2235.        func funcNoReturnValue3 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2242, #stmts = 3, iLineBegin = 2236 }
                    stmts:
2237.                    var r { vt = int, initExpr = 0 }
2238.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2240.                                return
2241.                    return
                            expr: lValue { varID = r }
2243.        func funcNoReturnValue2 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2250, #stmts = 3, iLineBegin = 2244 }
                    stmts:
2245.                    var r { vt = int, initExpr = 0 }
2246.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2247.                                return
                                        expr: lValue { varID = r }
2249.                    return
2251.        func funcNoReturnValue1 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2255, #stmts = 1, iLineBegin = 2252 }
                    stmts:
2254.                    return
2256.        func funcBreakStmtErrors { #paramVars = 0, vt = void }
                block: block { iLineEnd = 2271, #stmts = 2, iLineBegin = 2257 }
                    stmts:
2258.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2263.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2268.                                            break
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { #stmts = 1 }
                                            stmts:
2265.                                            break
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 2262, #stmts = 1, iLineBegin = 2259 }
                                stmts:
2261.                                break
2270.                    break
2272.        func funcUnreachableStmt8 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2289, #stmts = 3, iLineBegin = 2273 }
                    stmts:
2274.                    var r { vt = int, initExpr = 0 }
2275.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 2287, #stmts = 1, iLineBegin = 2276 }
                                stmts:
2277.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2281.                                            if
                                                    expr: (==) { right = 3 }
                                                        left: (+) { right = 1, left = 1 }
                                                    block: block { iLineEnd = 2286, #stmts = 2, iLineBegin = 2282 }
                                                        stmts:
2283.                                                        return
                                                                expr: lValue { varID = r }
2285.                                                        call println { class = ct }
                                        expr: lValue { varID = classLevelBoolean }
                                        block: block { iLineEnd = 2280, #stmts = 1, iLineBegin = 2278 }
                                            stmts:
2279.                                            call println { class = ct }
2288.                    return
                            expr: lValue { varID = r }
2290.        func funcUnreachableStmt7 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2300, #stmts = 3, iLineBegin = 2291 }
                    stmts:
2292.                    var r { vt = int, initExpr = 0 }
2293.                    while
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 2298, #stmts = 2, iLineBegin = 2294 }
                                stmts:
2295.                                return
                                        expr: lValue { varID = r }
2297.                                call println { class = ct }
2299.                    return
                            expr: lValue { varID = r }
2301.        func funcUnreachableStmt6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2315, #stmts = 3, iLineBegin = 2302 }
                    stmts:
2303.                    var r { vt = int, initExpr = 0 }
2304.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2308.                                if
                                        expr: (==) { right = 3 }
                                            left: (+) { right = 1, left = 1 }
                                        block: block { iLineEnd = 2313, #stmts = 2, iLineBegin = 2309 }
                                            stmts:
2310.                                            return
                                                    expr: lValue { varID = r }
2312.                                            call println { class = ct }
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 2307, #stmts = 1, iLineBegin = 2305 }
                                stmts:
2306.                                call println { class = ct }
2314.                    return
                            expr: lValue { varID = r }
2316.        func funcUnreachableStmt5 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2330, #stmts = 3, iLineBegin = 2317 }
                    stmts:
2318.                    var r { vt = int, initExpr = 0 }
2319.                    if
                            elseBlock: block { iLineEnd = 2328, #stmts = 2, iLineBegin = 2324 }
                                stmts:
2325.                                return
                                        expr: lValue { varID = r }
2327.                                call println { class = ct }
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 2322, #stmts = 1, iLineBegin = 2320 }
                                stmts:
2321.                                call println { class = ct }
2329.                    return
                            expr: lValue { varID = r }
2331.        func funcUnreachableStmt4 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2342, #stmts = 3, iLineBegin = 2332 }
                    stmts:
2333.                    var r { vt = int, initExpr = 0 }
2334.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { iLineEnd = 2340, #stmts = 2, iLineBegin = 2335 }
                                stmts:
2336.                                return
                                        expr: lValue { varID = r }
2338.                                if
                                        expr: (==) { right = 2 }
                                            left: (+) { right = 1, left = 1 }
                                        block: block { #stmts = 1 }
                                            stmts:
2339.                                            call println { class = ct }
2341.                    return
                            expr: lValue { varID = r }
2343.        func funcUnreachableStmt3 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2352, #stmts = 5, iLineBegin = 2344 }
                    stmts:
2345.                    var r { vt = int, initExpr = 0 }
2346.                    return
                            expr: lValue { varID = r }
2348.                    for
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2349.                                break
2350.                    call println { class = ct }
2351.                    return
                            expr: lValue { varID = r }
2353.        func funcUnreachableStmt2 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2362, #stmts = 5, iLineBegin = 2354 }
                    stmts:
2355.                    var r { vt = int, initExpr = 0 }
2356.                    return
                            expr: lValue { varID = r }
2358.                    if
                            expr: lValue { varID = classLevelBoolean }
                            block: block { #stmts = 1 }
                                stmts:
2359.                                call println { class = ct }
2360.                    call println { class = ct }
2361.                    return
                            expr: lValue { varID = r }
2363.        func funcUnreachableStmt1 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 2369, #stmts = 3, iLineBegin = 2364 }
                    stmts:
2365.                    return
2367.                    call println { class = ct }
2368.                    call println { class = ct }
2370.        func funcMissingReturn10 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2383, #stmts = 4, iLineBegin = 2371 }
                    stmts:
2372.                    var r { vt = int, initExpr = 0 }
2373.                    var boolVar1 { vt = boolean, initExpr = false }
2374.                    var boolVar2 { vt = boolean, initExpr = false }
2375.                    if
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
2376.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2378.                                            if
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
2381.                                                        return
                                                                expr: lValue { varID = r }
                                                    expr: lValue { varID = boolVar2 }
                                                    block: block { #stmts = 1 }
                                                        stmts:
2379.                                                        return
                                                                expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar1 }
                                        block: block { #stmts = 1 }
                                            stmts:
2377.                                            call println { class = ct }
2384.        func funcMissingReturn9 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2395, #stmts = 4, iLineBegin = 2385 }
                    stmts:
2386.                    var r { vt = int, initExpr = 0 }
2387.                    var boolVar1 { vt = boolean, initExpr = false }
2388.                    var boolVar2 { vt = boolean, initExpr = false }
2389.                    if
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
2390.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2393.                                            call println { class = ct }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
2391.                                            return
                                                    expr: lValue { varID = r }
2396.        func funcMissingReturn8 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2407, #stmts = 4, iLineBegin = 2397 }
                    stmts:
2398.                    var r { vt = int, initExpr = 0 }
2399.                    var boolVar1 { vt = boolean, initExpr = false }
2400.                    var boolVar2 { vt = boolean, initExpr = false }
2401.                    if
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
2402.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2405.                                            return
                                                    expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
2403.                                            return
                                                    expr: lValue { varID = r }
2408.        func funcMissingReturn7 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2420, #stmts = 4, iLineBegin = 2409 }
                    stmts:
2410.                    var r { vt = int, initExpr = 0 }
2411.                    var boolVar1 { vt = boolean, initExpr = false }
2412.                    var boolVar2 { vt = boolean, initExpr = true }
2413.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2415.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2418.                                            return
                                                    expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
2416.                                            call println { class = ct }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
2414.                                call println { class = ct }
2421.        func funcMissingReturn6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2433, #stmts = 4, iLineBegin = 2422 }
                    stmts:
2423.                    var r { vt = int, initExpr = 0 }
2424.                    var boolVar1 { vt = boolean, initExpr = false }
2425.                    var boolVar2 { vt = boolean, initExpr = true }
2426.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2428.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2431.                                            call println { class = ct }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
2429.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
2427.                                call println { class = ct }
2435.        func funcMissingReturn4 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2443, #stmts = 2, iLineBegin = 2436 }
                    stmts:
2437.                    var boolVar { vt = boolean, initExpr = false }
2438.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2441.                                call println { class = ct }
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
2439.                                call println { class = ct }
2444.        func funcMissingReturn2 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2451, #stmts = 3, iLineBegin = 2445 }
                    stmts:
2446.                    var r { vt = int, initExpr = 0 }
2447.                    var boolVar { vt = boolean, initExpr = false }
2448.                    if
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
2449.                                return
                                        expr: lValue { varID = r }
2452.        func funcMissingReturn1 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2455, #stmts = 0, iLineBegin = 2453 }
2456.        func funcPathMissingReturn3Brackets { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2470, #stmts = 4, iLineBegin = 2457 }
                    stmts:
2458.                    var r { vt = int, initExpr = 0 }
2459.                    var boolVar1 { vt = boolean, initExpr = false }
2460.                    var boolVar2 { vt = boolean, initExpr = false }
2461.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2465.                                if
                                        expr: lValue { varID = boolVar2 }
                                        block: block { iLineEnd = 2468, #stmts = 1, iLineBegin = 2466 }
                                            stmts:
2467.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { iLineEnd = 2464, #stmts = 1, iLineBegin = 2462 }
                                stmts:
2463.                                call println { class = ct }
2471.        func funcPathMissingReturn2Brackets { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2484, #stmts = 3, iLineBegin = 2472 }
                    stmts:
2473.                    var r { vt = int, initExpr = 0 }
2474.                    var boolVar { vt = boolean, initExpr = false }
2475.                    if
                            elseBlock: block { iLineEnd = 2483, #stmts = 1, iLineBegin = 2480 }
                                stmts:
2481.                                call println { class = ct }
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 2478, #stmts = 1, iLineBegin = 2476 }
                                stmts:
2477.                                return
                                        expr: lValue { varID = r }
2485.        func funcPathMissingReturn1Brackets { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2498, #stmts = 3, iLineBegin = 2486 }
                    stmts:
2487.                    var r { vt = int, initExpr = 0 }
2488.                    var boolVar { vt = boolean, initExpr = false }
2489.                    if
                            elseBlock: block { iLineEnd = 2497, #stmts = 1, iLineBegin = 2495 }
                                stmts:
2496.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar }
                            block: block { iLineEnd = 2493, #stmts = 1, iLineBegin = 2490 }
                                stmts:
2491.                                call println { class = ct }
2499.        func funcPathMissingReturn10 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2514, #stmts = 4, iLineBegin = 2500 }
                    stmts:
2501.                    var r { vt = int, initExpr = 0 }
2502.                    var boolVar1 { vt = boolean, initExpr = false }
2503.                    var boolVar2 { vt = boolean, initExpr = false }
2504.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2513.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
2505.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2507.                                            if
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
2511.                                                        call println { class = ct }
                                                    expr: lValue { varID = boolVar2 }
                                                    block: block { #stmts = 1 }
                                                        stmts:
2508.                                                        return
                                                                expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar1 }
                                        block: block { #stmts = 1 }
                                            stmts:
2506.                                            return
                                                    expr: lValue { varID = r }
2515.        func funcPathMissingReturn9 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2530, #stmts = 4, iLineBegin = 2516 }
                    stmts:
2517.                    var r { vt = int, initExpr = 0 }
2518.                    var boolVar1 { vt = boolean, initExpr = false }
2519.                    var boolVar2 { vt = boolean, initExpr = false }
2520.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2529.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
2521.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2523.                                            if
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
2527.                                                        return
                                                                expr: lValue { varID = r }
                                                    expr: lValue { varID = boolVar2 }
                                                    block: block { #stmts = 1 }
                                                        stmts:
2525.                                                        call println { class = ct }
                                        expr: lValue { varID = boolVar1 }
                                        block: block { #stmts = 1 }
                                            stmts:
2522.                                            return
                                                    expr: lValue { varID = r }
2531.        func funcPathMissingReturn8 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2546, #stmts = 4, iLineBegin = 2532 }
                    stmts:
2533.                    var r { vt = int, initExpr = 0 }
2534.                    var boolVar1 { vt = boolean, initExpr = false }
2535.                    var boolVar2 { vt = boolean, initExpr = false }
2536.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2545.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
2537.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2540.                                            if
                                                    elseBlock: block { #stmts = 1 }
                                                        stmts:
2543.                                                        return
                                                                expr: lValue { varID = r }
                                                    expr: lValue { varID = boolVar2 }
                                                    block: block { #stmts = 1 }
                                                        stmts:
2541.                                                        return
                                                                expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar1 }
                                        block: block { #stmts = 1 }
                                            stmts:
2539.                                            call println { class = ct }
2547.        func funcPathMissingReturn7 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2559, #stmts = 4, iLineBegin = 2548 }
                    stmts:
2549.                    var r { vt = int, initExpr = 0 }
2550.                    var boolVar1 { vt = boolean, initExpr = false }
2551.                    var boolVar2 { vt = boolean, initExpr = false }
2552.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2555.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2558.                                            return
                                                    expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
2556.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
2554.                                call println { class = ct }
2560.        func funcPathMissingReturn6 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2572, #stmts = 4, iLineBegin = 2561 }
                    stmts:
2562.                    var r { vt = int, initExpr = 0 }
2563.                    var boolVar1 { vt = boolean, initExpr = false }
2564.                    var boolVar2 { vt = boolean, initExpr = false }
2565.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2567.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2571.                                            return
                                                    expr: lValue { varID = r }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
2569.                                            call println { class = ct }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
2566.                                return
                                        expr: lValue { varID = r }
2573.        func funcPathMissingReturn5 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2585, #stmts = 4, iLineBegin = 2574 }
                    stmts:
2575.                    var r { vt = int, initExpr = 0 }
2576.                    var boolVar1 { vt = boolean, initExpr = false }
2577.                    var boolVar2 { vt = boolean, initExpr = false }
2578.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2580.                                if
                                        elseBlock: block { #stmts = 1 }
                                            stmts:
2584.                                            call println { class = ct }
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
2581.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
2579.                                return
                                        expr: lValue { varID = r }
2586.        func funcPathMissingReturn3 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2596, #stmts = 4, iLineBegin = 2587 }
                    stmts:
2588.                    var r { vt = int, initExpr = 0 }
2589.                    var boolVar1 { vt = boolean, initExpr = false }
2590.                    var boolVar2 { vt = boolean, initExpr = false }
2591.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2593.                                if
                                        expr: lValue { varID = boolVar2 }
                                        block: block { #stmts = 1 }
                                            stmts:
2594.                                            return
                                                    expr: lValue { varID = r }
                            expr: lValue { varID = boolVar1 }
                            block: block { #stmts = 1 }
                                stmts:
2592.                                call println { class = ct }
2597.        func funcPathMissingReturn2 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2606, #stmts = 3, iLineBegin = 2598 }
                    stmts:
2599.                    var r { vt = int, initExpr = 0 }
2600.                    var boolVar { vt = boolean, initExpr = false }
2601.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2605.                                call println { class = ct }
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
2602.                                return
                                        expr: lValue { varID = r }
2607.        func funcPathMissingReturn1 { #paramVars = 0, vt = int }
                block: block { iLineEnd = 2616, #stmts = 3, iLineBegin = 2608 }
                    stmts:
2609.                    var r { vt = int, initExpr = 0 }
2610.                    var boolVar { vt = boolean, initExpr = false }
2611.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2615.                                return
                                        expr: lValue { varID = r }
                            expr: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
2613.                                call println { class = ct }
2618.        func testErrors1 { #paramVars = 0, vt = void }
                block: block { iLineEnd = 2901, #stmts = 110, iLineBegin = 2619 }
                    stmts:
2620.                    var intVar { vt = int, initExpr = 1 }
2621.                    var dblVar { vt = double, initExpr = 1.2 }
2622.                    var boolVar { vt = boolean, initExpr = false }
2623.                    var strVar { vt = String, initExpr = "" }
2624.                    var rect { vt = GameObj }
                            initExpr: call rect { #exprs = 4, class = ct }
                                exprs:
2624.                                (50)
2624.                                (50)
2624.                                (10)
2624.                                (10)
2625.                    var circle { vt = GameObj }
                            initExpr: call circle { #exprs = 3, class = ct }
                                exprs:
2625.                                (50)
2625.                                (50)
2625.                                (10)
2626.                    var text { vt = GameObj }
                            initExpr: call text { #exprs = 4, class = ct }
                                exprs:
2626.                                ("text")
2626.                                (50)
2626.                                (50)
2626.                                (10)
2627.                    var image { vt = GameObj }
                            initExpr: call image { #exprs = 4, class = ct }
                                exprs:
2627.                                ("bogusFileName.png")
2627.                                (50)
2627.                                (50)
2627.                                (10)
2628.                    var intArr { vt = array of int }
                            initExpr: newArray { vtElement = 0, lengthExpr = 10 }
2629.                    var dblArr { vt = array of double }
                            initExpr: newArray { vtElement = 1, lengthExpr = 10 }
2630.                    var boolArr { vt = array of boolean }
                            initExpr: newArray { vtElement = true, lengthExpr = 10 }
2631.                    var strArr { vt = array of String }
                            initExpr: newArray { vtElement = "String", lengthExpr = 10 }
2632.                    var objArr { vt = array of GameObj }
                            initExpr: newArray { vtElement = "GameObj", lengthExpr = 10 }
2635.                    assign (=)
                            lValue: lValue { varID = circle, fieldID = x }
                            expr: (+) { right = 314 }
                                left: cast { vtCast = 0 }
                                    expr: lValue { varID = intVar }
2637.                    assign (=)
                            lValue: lValue { varID = circle, fieldID = x }
                            expr: cast { vtCast = 0 }
                                expr: parens
                                    expr: (+) { right = 314 }
                                        left: lValue { varID = intVar }
2639.                    assign (=)
                            lValue: lValue { varID = objArr }
                            expr: newArray { vtElement = "GameObj" }
                                lengthExpr: (*) { left = 2 }
                                    right: cast { vtCast = 0 }
                                        expr: lValue { varID = objArr }
2641.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: cast { vtCast = 1 }
                                expr: parens
                                    expr: (*) { right = 2.3, left = 10 }
2643.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = group }
                            expr: cast { vtCast = "String" }
                                expr: lValue { varID = circle, fieldID = group }
2645.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: staticField { fieldID = P, class = Math }
2649.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: unaryOp (neg)
                                expr: lValue { varID = rect }
2651.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: unaryOp (neg)
                                expr: lValue { varID = strVar }
2655.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: unaryOp (not)
                                expr: lValue { varID = intVar }
2659.                    assign (=)
                            lValue: lValue { varID = objArr }
                            expr: newArray { vtElement = "GameObj", lengthExpr = "ten" }
2661.                    assign (=)
                            lValue: lValue { varID = strArr }
                            expr: newArray { vtElement = "String" }
                                lengthExpr: (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = intVar }
2663.                    assign (=)
                            lValue: lValue { varID = boolArr }
                            expr: newArray { vtElement = true }
                                lengthExpr: (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = intVar }
2665.                    assign (=)
                            lValue: lValue { varID = dblArr }
                            expr: newArray { vtElement = 1 }
                                lengthExpr: lValue { varID = dblVar }
2667.                    assign (=)
                            lValue: lValue { varID = intArr }
                            expr: newArray { vtElement = 0, lengthExpr = 10.0 }
2680.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: new Integer { #exprs = 1 }
                                exprs:
2680.                                (1)
2686.                    var arrInit9 { vt = array of String }
                            initExpr: arrayInit { #exprs = 1 }
                                exprs:
                                    newArray { vtElement = "String" }
                                        lengthExpr: lValue { varID = intVar }
2688.                    var arrInit8 { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    lValue { varID = rect }
                                    lValue { varID = intArr }
                                    lValue { varID = text }
2690.                    var arrInit7 { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    lValue { varID = rect }
                                    lValue { varID = image }
                                    lValue { varID = objArr }
2694.                    var arrInit6 { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    call rect { #exprs = 4, class = ct }
                                        exprs:
2694.                                        (50)
2694.                                        (50)
2694.                                        (10)
2694.                                        (10)
                                    lValue { varID = text }
2694.                                (0)
2696.                    var arrInit5 { vt = array of GameObj }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
2696.                                ("circle")
                                    lValue { varID = circle }
2698.                    var arrInit4 { vt = array of String }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
                                    (+) { right = 1 }
                                        left: lValue { varID = strVar }
                                    lValue { varID = intVar }
                                    (+) { right = 2 }
                                        left: lValue { varID = intVar }
2700.                    var arrInit3 { vt = array of boolean }
                            initExpr: arrayInit { #exprs = 3 }
                                exprs:
2700.                                (false)
                                    lValue { varID = boolVar }
2700.                                (null)
2702.                    var arrInit2 { vt = array of double }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
                                    lValue { varID = circle }
2702.                                (0.5)
2704.                    var arrInit1 { vt = array of int }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
2704.                                (1)
2704.                                ("1")
2709.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = strVar }
                                    left: lValue { varID = objArr }
2711.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = strVar }
                                    left: lValue { varID = strArr }
2713.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = strVar }
                                    left: lValue { varID = boolArr }
2715.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = dblArr }
                                    left: lValue { varID = strVar }
2717.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intArr }
                                    left: lValue { varID = strVar }
2721.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = intArr }
2723.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = rect }
2725.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = dblVar }
                                    left: lValue { varID = boolVar }
2727.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = intArr }
2729.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = rect }
2731.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = boolVar }
2733.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intArr }
                                    left: lValue { varID = dblVar }
2735.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = rect }
                                    left: lValue { varID = dblVar }
2737.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = boolVar }
                                    left: lValue { varID = dblVar }
2739.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = intArr }
                                    left: lValue { varID = intVar }
2741.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = rect }
                                    left: lValue { varID = intVar }
2743.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = boolVar }
                                    left: lValue { varID = intVar }
2745.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { left = 1 }
                                right: parens
                                    expr: (+) { right = 1 }
                                        left: (+)
                                            right: lValue { varID = intArr }
                                            left: lValue { varID = boolVar }
2747.                    assign (=)
                            lValue: lValue { varID = strVar }
                            expr: (+)
                                right: lValue { varID = rect }
                                left: lValue { varID = boolVar }
2749.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (+)
                                right: (/) { right = 2 }
                                    left: lValue { varID = dblVar }
                                left: lValue { varID = boolVar }
2751.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (-) { right = 1 }
                                left: (+)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = boolVar }
2753.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (+)
                                right: lValue { varID = boolVar }
                                left: lValue { varID = boolVar }
2755.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: (+)
                                right: lValue { varID = text }
                                left: lValue { varID = circle }
2757.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = width }
                            expr: (+) { left = 2 }
                                right: lValue { varID = rect }
2759.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { right = false }
                                    left: lValue { varID = rect, fieldID = x }
2763.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (-) { right = ".txt" }
                                left: lValue { varID = strVar }
2765.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (%)
                                right: lValue { varID = text }
                                left: lValue { varID = rect, fieldID = group }
2767.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { right = 10 }
                                left: lValue { varID = circle }
2769.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = width }
                            expr: (*) { right = 2 }
                                left: lValue { varID = rect }
2771.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: (-) { left = 100 }
                                right: lValue { varID = rect }
2775.                    var intArrayInitWithExpressions { vt = array of int }
                            initExpr: arrayInit { #exprs = 2 }
                                exprs:
                                    (+) { left = 1 }
                                        right: (/) { right = 1, left = 2 }
                                    (/) { right = 2 }
                                        left: parens
                                            expr: (+) { right = 1, left = 3 }
2777.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (==) { right = 1 }
                                left: (/)
                                    right: lValue { varID = intVar }
                                    left: lValue { varID = intVar }
2779.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { right = 3 }
                                left: unaryOp (neg) { expr = 10 }
2781.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { left = 10 }
                                right: unaryOp (neg) { expr = 3 }
2783.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { right = 5, left = 123 }
2785.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { right = 3 }
                                left: parens
                                    expr: (+) { right = 2, left = 1 }
2787.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { left = 1 }
                                right: parens
                                    expr: (+) { right = 3, left = 2 }
2789.                    assign (=)
                            lValue: lValue { varID = rect, fieldID = x }
                            expr: (/) { right = 1 }
                                left: lValue { varID = intVar }
2791.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (+) { left = 1 }
                                    right: (/)
                                        right: lValue { varID = intVar }
                                        left: lValue { varID = intVar }
2793.                    assign (=)
                            lValue: lValue { varID = dblVar }
                            expr: (/) { left = 2 }
                                right: lValue { varID = intVar }
2795.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (/) { right = 2 }
                                left: lValue { varID = intVar }
2799.                    assign (=)
                            lValue: lValue { varID = circle }
                            expr: (||) { right = false }
                                left: lValue { varID = intVar }
2801.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2804.                                if
                                        expr: (&&) { right = true }
                                            left: lValue { varID = rect }
                                        block: block { #stmts = 1 }
                                            stmts:
2805.                                            call voidMethod
                            expr: (&&) { left = true }
                                right: lValue { varID = dblVar }
                            block: block { #stmts = 1 }
                                stmts:
2802.                                call voidMethod
2807.                    while
                            expr: (&&)
                                right: lValue { varID = boolVar }
                                left: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
2808.                                break
2809.                    doWhile { iLineWhile = 2812 }
                            expr: (||)
                                right: lValue { varID = strVar }
                                left: lValue { varID = dblVar }
                            block: block { #stmts = 1 }
                                stmts:
2810.                                break
2816.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (<)
                                right: lValue { varID = rect }
                                left: lValue { varID = circle }
2818.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2821.                                if
                                        expr: (<=) { right = 10, left = "level" }
                                        block: block { #stmts = 1 }
                                            stmts:
2822.                                            call voidMethod
                            expr: (>) { right = false, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
2819.                                call voidMethod
2824.                    while
                            expr: (>=)
                                right: lValue { varID = rect, fieldID = visible }
                                left: (+) { right = 1, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
2825.                                break
2826.                    doWhile { iLineWhile = 2829 }
                            expr: (<) { left = 3.14 }
                                right: lValue { varID = text }
                            block: block { #stmts = 1 }
                                stmts:
2827.                                break
2833.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (==)
                                right: lValue { varID = rect }
                                left: lValue { varID = boolVar }
2835.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (!=) { right = true }
                                left: lValue { varID = rect }
2837.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (==) { left = "3.14" }
                                right: staticField { fieldID = PI, class = Math }
2839.                    for
                            expr: (!=)
                                right: lValue { varID = strVar }
                                left: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
2840.                                call voidMethod
2842.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (==) { right = true }
                                left: lValue { varID = strVar }
2844.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: (!=) { right = false, left = "false" }
2845.                    doWhile { iLineWhile = 2848 }
                            expr: (==) { right = false, left = 1 }
                            block: block { #stmts = 1 }
                                stmts:
2846.                                call voidMethod
2850.                    while
                            expr: (!=) { right = 0 }
                                left: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
2851.                                call voidMethod
2853.                    if
                            elseBlock: block { #stmts = 1 }
                                stmts:
2856.                                if
                                        expr: (!=) { left = 1 }
                                            right: lValue { varID = circle }
                                        block: block { #stmts = 1 }
                                            stmts:
2857.                                            call voidMethod
                            expr: (==) { right = 1 }
                                left: lValue { varID = rect }
                            block: block { #stmts = 1 }
                                stmts:
2854.                                call voidMethod
2861.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (=)
                                    right: lValue { varID = rect }
                                    left: lValue { varID = circle }
2863.                    while
                            expr: (=) { right = false }
                                left: lValue { varID = boolVar }
                            block: block { #stmts = 1 }
                                stmts:
2864.                                assign (=) { expr = true }
                                        lValue: lValue { varID = boolVar }
2866.                    if
                            expr: (=) { right = 100 }
                                left: lValue { varID = rect, fieldID = x }
                            block: block { #stmts = 1 }
                                stmts:
2867.                                call setXSpeed { #exprs = 1 }
                                        lValue: lValue { varID = rect }
                                        exprs:
                                            unaryOp (neg) { expr = 1 }
2869.                    assign (=)
                            lValue: lValue { varID = boolVar }
                            expr: parens
                                expr: (=) { right = 2 }
                                    left: (+) { right = 1, left = 1 }
2871.                    if
                            expr: (=) { right = 1 }
                                left: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
2872.                                call println { #exprs = 1, class = ct }
                                        exprs:
2872.                                        ("oops")
2876.                    call println { #exprs = 1, class = ct }
                            exprs:
                                call voidMethod
2878.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: call println { class = ct }
2881.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (|) { right = 1, left = 2 }
2883.                    assign (=)
                            lValue: lValue { varID = intVar }
                            expr: (^) { right = 1, left = 2 }
2885.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (&) { right = 1, left = 2 }
2887.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (>>>) { right = 1, left = 2 }
2889.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (>>) { right = 1, left = 2 }
2891.                    call println { #exprs = 1, class = ct }
                            exprs:
                                (<<) { right = 1, left = 2 }
2893.                    call println { #exprs = 1, class = ct }
                            exprs:
                                call getType { #exprs = 1, class = ct }
                                    exprs:
                                        lValue { varID = circle }
2895.                    if
                            expr: call hit { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = objArr }
                                        indexExpr: lValue { varID = intVar }
                            block: block { #stmts = 1 }
                                stmts:
2896.                                call logm { #exprs = 3, class = ct }
                                        exprs:
2896.                                        ("hit")
                                            lValue { varID = objArr }
                                                indexExpr: lValue { varID = intVar }
                                            lValue { varID = intVar }
2907.        func funcWithOverIndentedBracket { #paramVars = 0, vt = void }
                block: block { iLineEnd = 2910, #stmts = 0, iLineBegin = 2909 }
        vars:
  7.        var classLevelInt { vt = int, isGlobal = true, initExpr = 0 }
  8.        var classLevelDouble { vt = double, isGlobal = true, initExpr = 0 }
  9.        var classLevelBoolean { vt = boolean, isGlobal = true, initExpr = false }
 10.        var classLevelString { vt = String, isGlobal = true, initExpr = "" }
 11.        var classLevelBoolean2 { vt = boolean, isGlobal = true }
                initExpr: call equals { #exprs = 1 }
                    lValue: lValue { varID = classLevelString }
                    exprs:
 11.                    ("")
 12.        var classLevelStringLength { vt = int, isGlobal = true }
                initExpr: call length
                    lValue: lValue { varID = classLevelString }
 13.        var classLevelGameObj { vt = GameObj, isGlobal = true }
 14.        var classLevelIntArr { vt = array of int, isGlobal = true }
                initExpr: newArray { vtElement = 0, lengthExpr = 10 }
 15.        var classLevelIntArrSub0 { vt = int, isGlobal = true }
                initExpr: lValue { varID = classLevelIntArr, indexExpr = 0 }
 16.        var classLevelIntArrLength { vt = int, isGlobal = true }
                initExpr: lValue { varID = classLevelIntArr, fieldID = length }
 17.        var classLevelUnassignedVar { vt = GameObj, isGlobal = true }
 19.        var varFromCtCallBeforeStart { vt = GameObj, isGlobal = true }
                initExpr: call rect { #exprs = 4, class = ct }
                    exprs:
 19.                    (0)
 19.                    (0)
 19.                    (10)
 19.                    (10)
 21.        var intVarFromUserMethod { vt = GameObj, isGlobal = true }
                initExpr: call intMethod
 22.        var myVar { vt = int, isGlobal = true, initExpr = 1 }
 24.        var button { vt = GameObj, isGlobal = true }
                initExpr: call text { #exprs = 4, class = ct }
                    exprs:
 24.                    ("START")
 24.                    (0)
 24.                    (0)
 24.                    (10)
 26.        var intResult { vt = int, isGlobal = true }
                initExpr: call intFunc
 28.        var overIndentedInstanceVar { vt = int, isGlobal = true }
 30.        var underIndentedInstanceVar { vt = int, isGlobal = true }
 32.        var classLevelMultilineIntArray1 { vt = array of int, isGlobal = true }
                initExpr: arrayInit { #exprs = 2 }
                    exprs:
 32.                    (1)
 33.                    (2)
 35.        var classLevelMultilineIntArray2 { vt = array of int, isGlobal = true }
                initExpr: arrayInit { #exprs = 3 }
                    exprs:
 35.                    (1)
 36.                    (2)
 37.                    (3)
 39.        var classLevelMultilineIntArray3 { vt = array of int, isGlobal = true }
                initExpr: newArray { vtElement = 0 }
                    lengthExpr: call max { #exprs = 2, class = Math }
                        exprs:
 39.                        (1)
 40.                        (2)
 42.        var classLevelVarTypeMismatchIntDouble { vt = int, isGlobal = true, initExpr = 0.1 }
 44.        var MAX_ENEMIES { vt = int, isConst = true, isGlobal = true, initExpr = 100 }
 45.        var numEnemies { vt = int, isGlobal = true }
                initExpr: call min { #exprs = 2, class = Math }
                    exprs:
 45.                    (1000)
                        lValue { varID = MAX_ENEMIES }
 46.        var doubleArr { vt = array of double, isGlobal = true }
                initExpr: arrayInit { #exprs = 3 }
                    exprs:
 46.                    (1.0)
 47.                    (2.0)
 48.                    (3.0)
 49.        var leftWall { vt = GameObj, isGlobal = true }
 49.        var rightWall { vt = GameObj, isGlobal = true }
 49.        var topWall { vt = GameObj, isGlobal = true }
 49.        var bottomWall { vt = GameObj, isGlobal = true }
 50.        var enemies { vt = array of GameObj, isGlobal = true }
 51.        var friends { vt = array of GameObj, isGlobal = true }
                initExpr: newArray { vtElement = "GameObj" }
                    lengthExpr: lValue { varID = MAX_ENEMIES }
 52.        var myPrivateVar { vt = int, isGlobal = true }
 54.        var instanceIntVar1 { vt = int, isGlobal = true }
                initExpr: (|) { right = 1, left = 2 }
 56.        var instanceIntVar2 { vt = int, isGlobal = true }
                initExpr: (^) { right = 1, left = 2 }
 58.        var instanceIntVar3 { vt = int, isGlobal = true }
                initExpr: (&) { right = 1, left = 2 }
 60.        var instanceIntVar4 { vt = int, isGlobal = true }
                initExpr: (>>>) { right = 1, left = 2 }
 62.        var instanceIntVar5 { vt = int, isGlobal = true }
                initExpr: (>>) { right = 1, left = 2 }
 64.        var instanceIntVar6 { vt = int, isGlobal = true }
                initExpr: (<<) { right = 1, left = 2 }
 66.        var instanceBoolVar1 { vt = boolean, isGlobal = true }
                initExpr: parens
                    expr: (=) { right = 2 }
                        left: (+) { right = 1, left = 1 }
 68.        var instanceBoolVar2 { vt = boolean, isGlobal = true }
                initExpr: (==) { right = 0, left = false }
 70.        var instanceBoolVar3 { vt = boolean, isGlobal = true }
                initExpr: (==) { left = 1 }
                    right: lValue { varID = button }
 72.        var instanceBoolVar4 { vt = boolean, isGlobal = true }
                initExpr: (>) { right = false, left = 1 }
 74.        var instanceBoolVar4 { vt = boolean, isGlobal = true }
                initExpr: (||)
                    right: lValue { varID = doubleArr, indexExpr = 0 }
                    left: parens
                        expr: (==) { right = 2 }
                            left: (+) { right = 1, left = 1 }
 76.        var instanceIntVar7 { vt = int, isGlobal = true }
                initExpr: (/) { right = 3 }
                    left: unaryOp (neg) { expr = 10 }
 78.        var instanceDblVar { vt = double, isGlobal = true }
                initExpr: (-) { right = ".txt" }
                    left: lValue { varID = classLevelString }
 80.        var instanceIntVar { vt = int, isGlobal = true }
                initExpr: (%)
                    right: lValue { varID = button }
                    left: lValue { varID = button, fieldID = group }
 82.        var instanceDblVar2 { vt = double, isGlobal = true }
                initExpr: (/) { right = 10 }
                    left: lValue { varID = button }
 84.        var instanceDblVar3 { vt = double, isGlobal = true }
                initExpr: (*) { right = 2 }
                    left: lValue { varID = button }
 86.        var instanceDblVar4 { vt = double, isGlobal = true }
                initExpr: (-) { left = 100 }
                    right: lValue { varID = button }
 88.        var classLevelDouble { vt = double, isGlobal = true }
                initExpr: (/) { left = 1 }
                    right: parens
                        expr: (+) { right = 1 }
                            left: (+)
                                right: lValue { varID = classLevelInt }
                                left: lValue { varID = classLevelBoolean }
 90.        var classLevelString { vt = String, isGlobal = true }
                initExpr: (+)
                    right: lValue { varID = button }
                    left: lValue { varID = classLevelBoolean }
 92.        var classLevelInt { vt = int, isGlobal = true }
                initExpr: (+)
                    right: (/) { right = 2 }
                        left: lValue { varID = classLevelDouble }
                    left: lValue { varID = classLevelBoolean }
 94.        var classLevelInt { vt = int, isGlobal = true }
                initExpr: (-) { right = 1 }
                    left: (+)
                        right: lValue { varID = classLevelInt }
                        left: lValue { varID = classLevelBoolean }
 96.        var classLevelBoolean { vt = boolean, isGlobal = true }
                initExpr: (+)
                    right: lValue { varID = classLevelBoolean }
                    left: lValue { varID = classLevelBoolean }
 98.        var classLevelDouble { vt = double, isGlobal = true }
                initExpr: (+)
                    right: lValue { varID = button }
                    left: lValue { varID = button }
100.        var classLevelDouble { vt = double, isGlobal = true }
                initExpr: (+) { left = 2 }
                    right: lValue { varID = classLevelGameObj }
102.        var classLevelDouble { vt = double, isGlobal = true }
                initExpr: (+) { right = false }
                    left: lValue { varID = rect, fieldID = x }
104.        var arrFromPlusOperator { vt = array of double, isGlobal = true }
                initExpr: (+) { right = 1 }
                    left: lValue { varID = doubleArr }
106.        var arrFromPlusOperator2 { vt = array of double, isGlobal = true }
                initExpr: (+)
                    right: lValue { varID = classLevelString }
                    left: lValue { varID = friends }
108.        var classLevelArrInit { vt = array of String, isGlobal = true }
                initExpr: arrayInit { #exprs = 3 }
                    exprs:
                        lValue { varID = classLevelString }
                        lValue { varID = classlevelInt }
                        lValue { varID = classLevelDouble }
110.        var classLevelArrInit { vt = array of String, isGlobal = true }
                initExpr: arrayInit { #exprs = 3 }
                    exprs:
                        lValue { varID = classLevelString }
                        lValue { varID = classLevelInt }
                        lValue { varID = classLevelDouble }
112.        var arrInit9 { vt = array of String, isGlobal = true }
                initExpr: arrayInit { #exprs = 1 }
                    exprs:
                        newArray { vtElement = "String" }
                            lengthExpr: lValue { varID = classLevelInt }
116.        var intArrDoubleCount { vt = array of int, isGlobal = true }
                initExpr: newArray { vtElement = 0, lengthExpr = 10.0 }
118.        var boolVarNotInt { vt = boolean, isGlobal = true }
                initExpr: unaryOp (not)
                    expr: lValue { varID = classLevelInt }
120.        var negateString { vt = String, isGlobal = true }
                initExpr: unaryOp (neg)
                    expr: lValue { varID = classLevelString }
122.        var intCastOnInt1 { vt = double, isGlobal = true }
                initExpr: cast { vtCast = 0 }
                    expr: parens
                        expr: (+) { right = 314 }
                            left: lValue { varID = undefinedVar }
124.        var intCastOnInt2 { vt = double, isGlobal = true }
                initExpr: cast { vtCast = 0 }
                    expr: parens
                        expr: (+) { right = 314 }
                            left: lValue { varID = classLevelInt }
126.        var classLevelGameObjArr { vt = array of GameObj, isGlobal = true }
                initExpr: newArray { vtElement = "GameObj" }
                    lengthExpr: (*) { left = 2 }
                        right: cast { vtCast = 0 }
                            expr: lValue { varID = classLevelString }
128.        var doubleCastOnDouble { vt = double, isGlobal = true }
                initExpr: cast { vtCast = 1 }
                    expr: parens
                        expr: (*) { right = 2.3, left = 10 }
130.        var stringCast { vt = String, isGlobal = true }
                initExpr: cast { vtCast = "String" }
                    expr: lValue { varID = classLevelGameObj, fieldID = group }
132.        var stringCast2 { vt = String, isGlobal = true }
                initExpr: cast { vtCast = "String" }
                    expr: lValue { varID = classLevelDouble }
134.        var unknownMathField { vt = double, isGlobal = true }
                initExpr: staticField { fieldID = P, class = Math }
136.        var classLevelMathInitErr { vt = double, isGlobal = true }
                initExpr: call min { #exprs = 3, class = Math }
                    exprs:
136.                    (1)
136.                    (2)
136.                    (3)
138.        var classLevelMathInitErr2 { vt = double, isGlobal = true }
                initExpr: call sin { class = Math }
140.        var classLevelMathInitErr3 { vt = double, isGlobal = true }
                initExpr: call pow { #exprs = 1, class = Math }
                    exprs:
140.                    (2)
142.        var intVarMethodCall { vt = int, isGlobal = true }
                initExpr: call delete
                    lValue: lValue { varID = classLevelInt }
144.        var stringSize { vt = String, isGlobal = true }
                initExpr: call size
                    lValue: lValue { varID = classLevelString }
146.        var unknownMathMethod { vt = double, isGlobal = true }
                initExpr: call foo { class = Math }
148.        var greeting { vt = String, isGlobal = true }
                initExpr: call println { lValue = out, #exprs = 1, class = System }
                    exprs:
148.                    ("hello")
152.        var classlevelBoolean { vt = boolean, isGlobal = true, initExpr = true }
154.        var classLevelInt { vt = int, isGlobal = true }
156.        var caseSentiveClassLevelVar { vt = double, isGlobal = true }
                initExpr: (+) { right = 1 }
                    left: lValue { varID = classlevelint }
158.        var Starts_with_capital_letter_var_class_level { vt = int, isGlobal = true }
160.        var StartsWithCapitalLetterVarWithAssignmentClassLevel { vt = double, isGlobal = true, initExpr = 3.14 }
162.        var StartsWithCapitalGameObjArr { vt = array of GameObj, isGlobal = true }
                initExpr: newArray { vtElement = "GameObj", lengthExpr = 10 }
762.        var newWidth { vt = double, isGlobal = true }
                initExpr: call getWidth { class = ct }
