    program ErrorTest { #funcs = 36, #vars = 4 }
        funcs:
 18.        func emptyFunc { #paramVars = 0, vt = void, #stmts = 0 }
 21.        func voidFunc { #paramVars = 0, vt = void, #stmts = 1 }
                stmts:
 23.                var i { vt = int }
                        initExpr: literal { token = 0 }
 25.        func intFunc { #paramVars = 0, vt = int, #stmts = 2 }
                stmts:
 27.                var i { vt = int }
                        initExpr: literal { token = 1 }
 28.                return
                        expr: lValue { varID = i }
 30.        func dblFunc { #paramVars = 0, vt = double, #stmts = 2 }
                stmts:
 32.                var d { vt = double }
                        initExpr: literal { token = 0.0 }
 33.                return
                        expr: lValue { varID = d }
 35.        func boolFunc { #paramVars = 0, vt = boolean, #stmts = 2 }
                stmts:
 37.                var b { vt = boolean }
                        initExpr: literal { token = true }
 38.                return
                        expr: lValue { varID = b }
 40.        func strFunc { #paramVars = 0, vt = String, #stmts = 2 }
                stmts:
 42.                var s { vt = String }
                        initExpr: literal { token = "" }
 43.                return
                        expr: lValue { varID = s }
 45.        func gObjFunc { #paramVars = 0, vt = GameObj, #stmts = 1 }
                stmts:
 47.                return
                        expr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0.0 }
                                literal { token = 0.0 }
                                literal { token = 1.0 }
 49.        func intArrFuncInt { #paramVars = 1, vt = array of int, #stmts = 1 }
                paramVars:
 49.                var n { vt = int, isGlobal = false }
                stmts:
 51.                return
                        expr: newArray { vt = int }
                            lengthExpr: lValue { varID = n }
 53.        func intFuncInt { #paramVars = 1, vt = int, #stmts = 1 }
                paramVars:
 53.                var i { vt = int, isGlobal = false }
                stmts:
 55.                return
                        expr: (+)
                            right: literal { token = 1 }
                            left: (*)
                                right: literal { token = 2 }
                                left: lValue { varID = i }
 57.        func dblFuncIntDbl { #paramVars = 2, vt = double, #stmts = 1 }
                paramVars:
 57.                var i { vt = int, isGlobal = false }
 57.                var d { vt = double, isGlobal = false }
                stmts:
 59.                return
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
 61.        func boolFuncBoolStringGameObj { #paramVars = 3, vt = boolean, #stmts = 1 }
                paramVars:
 61.                var b { vt = boolean, isGlobal = false }
 61.                var s { vt = String, isGlobal = false }
 61.                var g { vt = GameObj, isGlobal = false }
                stmts:
 63.                return
                        expr: (&&)
                            right: lValue { varID = g, fieldID = visible }
                            left: (&&)
                                right: call equals { #exprs = 1 }
                                    lValue: lValue { varID = s }
                                    exprs:
                                        literal { token = "" }
                                left: lValue { varID = b }
 65.        func recursiveFunc { #paramVars = 1, vt = int, #stmts = 2 }
                paramVars:
 65.                var i { vt = int, isGlobal = false }
                stmts:
 67.                if { #stmts = 1 }
                        expr: (<=)
                            right: literal { token = 0 }
                            left: lValue { varID = i }
                        stmts:
 68.                        return
                                expr: literal { token = 0 }
 69.                return
                        expr: (+)
                            right: call recursiveFunc { #exprs = 1 }
                                exprs:
                                    (-)
                                        right: literal { token = 1 }
                                        left: lValue { varID = i }
                            left: literal { token = 1 }
 74.        func start { #paramVars = 0, isPublic = true, vt = int, #stmts = 405 }
                stmts:
 79.                var i { vt = int }
                        initExpr: literal { token = 3 }
 80.                assign (=)
                        lValue: lValue { varID = i }
                        expr: unaryOp (neg)
                            expr: literal { token = 5 }
 81.                assign (++)
                        lValue: lValue { varID = i }
 82.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (+)
                            right: literal { token = 1 }
                            left: lValue { varID = i }
 83.                assign (+=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 1 }
 84.                assign (-=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 2 }
 85.                assign (*=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 3 }
 86.                assign (/=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 4 }
 87.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intFunc
 88.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intFuncInt { #exprs = 1 }
                            exprs:
                                (-)
                                    right: (*)
                                        right: lValue { varID = i }
                                        left: literal { token = 345 }
                                    left: (-)
                                        right: parens
                                            expr: (+)
                                                right: lValue { varID = i }
                                                left: lValue { varID = i }
                                        left: lValue { varID = i }
 89.                var foo { vt = int }
                        initExpr: (+)
                            right: literal { token = 4 }
                            left: lValue { varID = i }
 90.                var score { vt = int }
                        initExpr: literal { token = 500 }
 91.                var j { vt = int }
 91.                var k { vt = int }
 92.                var exponentialNumberNoDot { vt = double }
                        initExpr: literal { token = 12e10 }
 93.                var exponentialNumberWithDot { vt = double }
                        initExpr: literal { token = 3.42e2 }
 94.                var expontialNumberWithDecimalPlaces { vt = double }
                        initExpr: literal { token = 6.62e-34 }
 95.                var d { vt = double }
                        initExpr: literal { token = 3.14 }
 96.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 100 }
 97.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = .5 }
 98.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 1.2345e6 }
 99.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 1.2345e+67 }
100.                assign (=)
                        lValue: lValue { varID = d }
                        expr: literal { token = .12e0 }
101.                assign (=)
                        lValue: lValue { varID = d }
                        expr: unaryOp (neg)
                            expr: literal { token = .123e-456 }
102.                assign (=)
                        lValue: lValue { varID = d }
                        expr: unaryOp (neg)
                            expr: literal { token = .5 }
103.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: literal { token = 2 }
                            left: lValue { varID = d }
104.                assign (++)
                        lValue: lValue { varID = d }
105.                assign (+=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 0.5 }
106.                assign (-=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 7 }
107.                assign (*=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 8 }
108.                assign (/=)
                        lValue: lValue { varID = d }
                        expr: literal { token = 8.0 }
109.                var d2 { vt = double }
                        initExpr: literal { token = 3 }
110.                var d3 { vt = double }
                        initExpr: (+)
                            right: (*)
                                right: parens
                                    expr: (+)
                                        right: lValue { varID = d }
                                        left: lValue { varID = d2 }
                                left: literal { token = 2 }
                            left: lValue { varID = d }
111.                var x1 { vt = double }
111.                var x2 { vt = double }
111.                var y1 { vt = double }
111.                var y2 { vt = double }
112.                assign (=)
                        lValue: lValue { varID = x1 }
                        expr: literal { token = 1 }
113.                assign (=)
                        lValue: lValue { varID = x2 }
                        expr: literal { token = 2.0 }
114.                assign (=)
                        lValue: lValue { varID = y1 }
                        expr: literal { token = .5e+1 }
115.                assign (=)
                        lValue: lValue { varID = y2 }
                        expr: unaryOp (neg)
                            expr: literal { token = .5e-1 }
116.                var eps { vt = double }
                        initExpr: literal { token = 1e-4 }
117.                var name { vt = String }
                        initExpr: literal { token = "Einstein" }
118.                var b { vt = boolean }
                        initExpr: literal { token = true }
119.                var b2 { vt = boolean }
                        initExpr: literal { token = false }
120.                var b3 { vt = boolean }
                        initExpr: (||)
                            right: lValue { varID = b2 }
                            left: lValue { varID = b }
121.                var s { vt = String }
                        initExpr: literal { token = "A string variable" }
122.                assign (=)
                        lValue: lValue { varID = s }
                        expr: lValue { varID = s }
123.                assign (=)
                        lValue: lValue { varID = s }
                        expr: literal { token = null }
126.                var colors { vt = array of String }
                        initExpr: arrayInit { #exprs = 5 }
                            exprs:
                                literal { token = "black" }
                                literal { token = "white" }
                                literal { token = "red" }
                                literal { token = "green" }
                                literal { token = "blue" }
127.                assign (=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 100 }
128.                var strArr { vt = array of String }
                        initExpr: newArray { vt = String }
                            lengthExpr: lValue { varID = i }
129.                assign (=)
                        lValue: lValue { varID = strArr }
                        expr: lValue { varID = colors }
130.                var intArr { vt = array of int }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
                                literal { token = 3 }
131.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: newArray { vt = int }
                            lengthExpr: literal { token = 100 }
132.                var intArr2 { vt = array of int }
                        initExpr: newArray { vt = int }
                            lengthExpr: call length
                                lValue: lValue { varID = s }
133.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: lValue { varID = intArr2 }
134.                var dblArr { vt = array of double }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1.1 }
                                literal { token = 2.2 }
                                literal { token = 3.3 }
135.                var dblArr2 { vt = array of double }
                        initExpr: newArray { vt = double }
                            lengthExpr: literal { token = 100 }
136.                assign (=)
                        lValue: lValue { varID = dblArr }
                        expr: lValue { varID = dblArr2 }
137.                var gObjArr { vt = array of GameObj }
                        initExpr: newArray { vt = GameObj }
                            lengthExpr: (*)
                                right: literal { token = 2 }
                                left: lValue { varID = i }
140.                call voidFunc
141.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intFunc
142.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call dblFunc
143.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call boolFunc
144.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call strFunc
145.                var gObj { vt = GameObj }
                        initExpr: call gObjFunc
146.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: call intArrFuncInt { #exprs = 1 }
                            exprs:
                                lValue { varID = i }
147.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intFuncInt { #exprs = 1 }
                            exprs:
                                lValue { varID = i }
148.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call dblFuncIntDbl { #exprs = 2 }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = d }
149.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call boolFuncBoolStringGameObj { #exprs = 3 }
                            exprs:
                                lValue { varID = b }
                                lValue { varID = s }
                                lValue { varID = gObj }
150.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call recursiveFunc { #exprs = 1 }
                            exprs:
                                literal { token = 2 }
153.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (/)
                            right: literal { token = 1 }
                            left: literal { token = 5 }
154.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (/)
                            right: literal { token = 20 }
                            left: literal { token = 100 }
155.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (+)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
156.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (-)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
157.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (*)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
158.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (%)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
159.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (-)
                            right: lValue { varID = i }
                            left: (+)
                                right: lValue { varID = i }
                                left: (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
160.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (*)
                            right: parens
                                expr: (-)
                                    right: lValue { varID = i }
                                    left: parens
                                        expr: (+)
                                            right: lValue { varID = i }
                                            left: lValue { varID = i }
                            left: lValue { varID = i }
161.                assign (=)
                        lValue: lValue { varID = d }
                        expr: lValue { varID = i }
162.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
163.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
164.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
165.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
166.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (%)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
167.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
168.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
169.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
170.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
171.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (%)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
172.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
173.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
174.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
175.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
176.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (%)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
177.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: (*)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
                            left: (-)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
178.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = i }
                            left: (+)
                                right: (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
                                left: lValue { varID = d }
179.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: (*)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
                            left: (*)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
180.                assign (=)
                        lValue: lValue { varID = d }
                        expr: parens
                            expr: (-)
                                right: (*)
                                    right: lValue { varID = d }
                                    left: lValue { varID = d }
                                left: (*)
                                    right: parens
                                        expr: lValue { varID = i }
                                    left: lValue { varID = i }
181.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = s }
182.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: literal { token = "s" }
                            left: (+)
                                right: lValue { varID = s }
                                left: lValue { varID = s }
183.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = i }
                            left: lValue { varID = s }
184.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = s }
185.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = b }
                            left: lValue { varID = s }
186.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = gObj }
                            left: lValue { varID = s }
187.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = i }
188.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = d }
189.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = b }
190.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = gObj }
191.                assign (=)
                        lValue: lValue { varID = b }
                        expr: lValue { varID = b }
192.                assign (=)
                        lValue: lValue { varID = b }
                        expr: unaryOp (not)
                            expr: lValue { varID = b }
193.                assign (=)
                        lValue: lValue { varID = b }
                        expr: parens
                            expr: lValue { varID = b }
194.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
195.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
196.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
197.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
198.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
199.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = gObj }
                            left: lValue { varID = gObj }
200.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
201.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
202.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
203.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
204.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
205.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = gObj }
                            left: lValue { varID = gObj }
206.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
207.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
208.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
209.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
210.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
211.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
212.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
213.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
214.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
215.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
216.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
217.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
218.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
219.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
220.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
221.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
222.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (||)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
223.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (&&)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
224.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: literal { token = 2 }
                            left: literal { token = 1 }
225.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: literal { token = 2 }
                            left: literal { token = 1.1 }
226.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: literal { token = 2 }
                            left: literal { token = 1 }
227.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: literal { token = 2.2 }
                            left: literal { token = 1 }
228.                assign (=)
                        lValue: lValue { varID = b2 }
                        expr: (||)
                            right: (&&)
                                right: (==)
                                    right: lValue { varID = b }
                                    left: lValue { varID = b }
                                left: lValue { varID = b3 }
                            left: lValue { varID = b2 }
229.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: literal { token = 0 }
                            left: (%)
                                right: literal { token = 2 }
                                left: lValue { varID = i }
230.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (&&)
                            right: lValue { varID = b }
                            left: parens
                                expr: (||)
                                    right: lValue { varID = b }
                                    left: lValue { varID = b }
231.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (&&)
                            right: parens
                                expr: (<)
                                    right: literal { token = 0.0001 }
                                    left: (-)
                                        right: literal { token = 3.14159 }
                                        left: lValue { varID = Math, fieldID = PI }
                            left: parens
                                expr: (==)
                                    right: literal { token = 2 }
                                    left: (+)
                                        right: literal { token = 1 }
                                        left: literal { token = 1 }
234.                if { #elseStmts = 1, #stmts = 1 }
                        expr: (==)
                            right: literal { token = 0 }
                            left: lValue { varID = i }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 1 }
                                expr: (<=)
                                    right: literal { token = 10 }
                                    left: lValue { varID = i }
                                elseStmts:
239.                                assign (*=)
                                        lValue: lValue { varID = i }
                                        expr: literal { token = 5 }
                                stmts:
237.                                assign (++)
                                        lValue: lValue { varID = i }
                        stmts:
235.                        call setBackColor { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    lValue { varID = colors }
                                        indexExpr: lValue { varID = i }
241.                if { #elseStmts = 1, #stmts = 2 }
                        expr: (>)
                            right: literal { token = 0 }
                            left: lValue { varID = i }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 2 }
                                expr: (<=)
                                    right: literal { token = 10 }
                                    left: lValue { varID = i }
                                elseStmts:
                                    if { #elseStmts = 2, #stmts = 1 }
                                        expr: lValue { varID = b }
                                        elseStmts:
255.                                        var tempStr { vt = String }
                                                initExpr: literal { token = "I'll be " }
256.                                        assign (=)
                                                lValue: lValue { varID = tempStr }
                                                expr: (+)
                                                    right: literal { token = "out of scope soon" }
                                                    left: lValue { varID = tempStr }
                                        stmts:
252.                                        assign (++)
                                                lValue: lValue { varID = i }
                                stmts:
248.                                assign (=)
                                        lValue: lValue { varID = d }
                                        expr: literal { token = 7 }
249.                                call setSoundVolume { #exprs = 1 }
                                        lValue: lValue { varID = ct }
                                        exprs:
                                            literal { token = 1 }
                        stmts:
243.                        assign (=)
                                lValue: lValue { varID = j }
                                expr: literal { token = 0 }
244.                        assign (=)
                                lValue: lValue { varID = k }
                                expr: literal { token = 0 }
258.                if { #stmts = 1 }
                        expr: (&&)
                            right: (<=)
                                right: lValue { varID = eps }
                                left: call distance { #exprs = 4 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = x1 }
                                        lValue { varID = y1 }
                                        lValue { varID = x2 }
                                        lValue { varID = y2 }
                            left: call isError { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    call tan { #exprs = 1 }
                                        lValue: lValue { varID = Math }
                                        exprs:
                                            lValue { varID = d }
                        stmts:
259.                        call println { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = "oops" }
262.                for { #stmts = 1 }
                        expr: literal { token = false }
                        stmts:
263.                        for { #stmts = 1 }
                                stmts:
264.                                for { #stmts = 1 }
264.                                    initStmt: assign (=)
                                            lValue: lValue { varID = i }
                                            expr: literal { token = 0 }
                                        stmts:
265.                                        for { #stmts = 1 }
                                                expr: (<)
                                                    right: literal { token = 10 }
                                                    left: lValue { varID = i }
                                                stmts:
266.                                                for { #stmts = 1 }
266.                                                    nextStmt: assign (++)
                                                            lValue: lValue { varID = i }
                                                        stmts:
267.                                                        for { #stmts = 1 }
                                                                expr: lValue { varID = b }
                                                                stmts:
268.                                                                assign (=)
                                                                        lValue: lValue { varID = d }
                                                                        expr: literal { token = 0 }
270.                for { #stmts = 2 }
                        expr: (<)
                            right: literal { token = 10 }
                            left: lValue { varID = ii }
270.                    initStmt: var ii { vt = int, isGlobal = false }
                            initExpr: literal { token = 0 }
270.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
272.                        for { #stmts = 1 }
                                expr: (!=)
                                    right: literal { token = 10 }
                                    left: lValue { varID = jj }
272.                            initStmt: var jj { vt = int, isGlobal = false }
                                    initExpr: literal { token = 0 }
272.                            nextStmt: assign (+=)
                                    lValue: lValue { varID = jj }
                                    expr: literal { token = 1 }
                                stmts:
273.                                if { #stmts = 1 }
                                        expr: (||)
                                            right: (==)
                                                right: literal { token = 0 }
                                                left: lValue { varID = jj }
                                            left: (==)
                                                right: literal { token = 0 }
                                                left: lValue { varID = ii }
                                        stmts:
274.                                        break
275.                        break
278.                for { #stmts = 2 }
                        expr: (<)
                            right: literal { token = 10 }
                            left: lValue { varID = ii }
278.                    initStmt: var ii { vt = int, isGlobal = false }
                            initExpr: literal { token = 0 }
278.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
280.                        for { #stmts = 2 }
                                expr: (!=)
                                    right: literal { token = 10 }
                                    left: lValue { varID = jj }
280.                            initStmt: var jj { vt = int, isGlobal = false }
                                    initExpr: literal { token = 0 }
280.                            nextStmt: assign (+=)
                                    lValue: lValue { varID = jj }
                                    expr: literal { token = 1 }
                                stmts:
282.                                if { #stmts = 2 }
                                        expr: (&&)
                                            right: (==)
                                                right: literal { token = 0 }
                                                left: lValue { varID = jj }
                                            left: (==)
                                                right: literal { token = 0 }
                                                left: lValue { varID = ii }
                                        stmts:
284.                                        assign (=)
                                                lValue: lValue { varID = intArr }
                                                    indexExpr: lValue { varID = ii }
                                                expr: literal { token = 0 }
285.                                        break
287.                                break
289.                        break
292.                var xVar { vt = double }
                        initExpr: literal { token = 0 }
293.                var yVar { vt = double }
                        initExpr: literal { token = 1 }
294.                for { #stmts = 1 }
                        expr: (<)
                            right: literal { token = 1 }
                            left: lValue { varID = xVar }
294.                    initStmt: var dx { vt = double, isGlobal = false }
                            initExpr: literal { token = .1 }
294.                    nextStmt: assign (+=)
                            lValue: lValue { varID = xVar }
                            expr: lValue { varID = dx }
                        stmts:
295.                        for { #stmts = 1 }
                                expr: (>)
                                    right: literal { token = 0 }
                                    left: lValue { varID = yVar }
295.                            initStmt: var dy { vt = double, isGlobal = false }
                                    initExpr: unaryOp (neg)
                                        expr: literal { token = .5 }
295.                            nextStmt: assign (+=)
                                    lValue: lValue { varID = yVar }
                                    expr: lValue { varID = dy }
                                stmts:
296.                                assign (=)
                                        lValue: lValue { varID = d }
                                        expr: (-)
                                            right: (/)
                                                right: lValue { varID = dy }
                                                left: lValue { varID = yVar }
                                            left: (+)
                                                right: lValue { varID = dx }
                                                left: lValue { varID = xVar }
298.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: newArray { vt = int }
                            lengthExpr: literal { token = 1 }
299.                forArray { #stmts = 1 }
299.                    var: var a { vt = int, isGlobal = false }
                        expr: lValue { varID = intArr }
                        stmts:
300.                        assign (=)
                                lValue: lValue { varID = a }
                                expr: literal { token = 0 }
303.                while { #stmts = 1 }
                        expr: lValue { varID = b }
                        stmts:
304.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: literal { token = false }
306.                while { #stmts = 3 }
                        expr: lValue { varID = b }
                        stmts:
308.                        call voidFunc
309.                        assign (++)
                                lValue: lValue { varID = i }
310.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: literal { token = false }
313.                doWhile { #stmts = 1 }
                        expr: lValue { varID = b }
                        stmts:
314.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: literal { token = false }
317.                doWhile { #stmts = 1 }
                        expr: lValue { varID = b }
                        stmts:
319.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: literal { token = false }
324.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world" }
325.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: literal { token = "world" }
                                left: (+)
                                    right: literal { token = " " }
                                    left: literal { token = "Hello" }
326.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world\n" }
327.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
328.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
329.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = b }
330.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: literal { token = "i = " }
331.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: literal { token = "d = " }
332.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = name }
333.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = name }
                                left: (+)
                                    right: literal { token = " " }
                                    left: literal { token = "Hello" }
334.                var circleObj { vt = GameObj }
                        initExpr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50 }
                                literal { token = 50 }
                                literal { token = 20 }
335.                call print { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = circleObj }
336.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world" }
337.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: literal { token = "world" }
                                left: (+)
                                    right: literal { token = " " }
                                    left: literal { token = "Hello" }
338.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world\n" }
339.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
340.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
341.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = b }
342.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: literal { token = "i = " }
343.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: literal { token = "d = " }
344.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = name }
345.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = name }
                                left: (+)
                                    right: literal { token = " " }
                                    left: literal { token = "Hello" }
346.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = circleObj }
347.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
348.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
349.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = b }
350.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = circleObj }
351.                var obj2 { vt = GameObj }
                        initExpr: lValue { varID = circleObj }
352.                var obj3 { vt = GameObj }
                        initExpr: lValue { varID = obj2 }
353.                call log { #exprs = 9 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "circleObj = " }
                            lValue { varID = circleObj }
                            literal { token = "obj2 = " }
                            lValue { varID = obj2 }
                            literal { token = "obj3=" }
                            lValue { varID = obj3 }
                            literal { token = 3.14 }
                            lValue { varID = Math, fieldID = PI }
                            literal { token = 42 }
354.                call logm { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "message" }
                            literal { token = null }
355.                call logm { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "message" }
                            lValue { varID = obj2 }
                            lValue { varID = obj3 }
356.                call setOutputFile { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "output.txt" }
357.                call setOutputFile { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "output/nameList.txt" }
358.                var outputFilename { vt = String }
                        initExpr: literal { token = "output.txt" }
359.                call setOutputFile { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = outputFilename }
362.                call showAlert { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "alert meassage" }
363.                var message { vt = String }
                        initExpr: literal { token = "alert!" }
364.                call showAlert { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = message }
365.                var n { vt = int }
                        initExpr: call inputInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "enter a number: " }
366.                assign (=)
                        lValue: lValue { varID = n }
                        expr: call inputInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "enter a number: " }
367.                assign (=)
                        lValue: lValue { varID = n }
                        expr: call inputInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = message }
368.                var x { vt = double }
                        initExpr: call inputNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "enter a number: " }
369.                assign (=)
                        lValue: lValue { varID = x }
                        expr: call inputNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "enter a number: " }
370.                assign (=)
                        lValue: lValue { varID = x }
                        expr: call inputNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = message }
371.                var quit { vt = boolean }
                        initExpr: call inputYesNo { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "Quit?" }
372.                assign (=)
                        lValue: lValue { varID = quit }
                        expr: call inputYesNo { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = message }
373.                var inputStr { vt = String }
                        initExpr: call inputString { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "Quit?" }
374.                assign (=)
                        lValue: lValue { varID = inputStr }
                        expr: call inputString { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "Quit?" }
375.                assign (=)
                        lValue: lValue { varID = inputStr }
                        expr: call inputString { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = message }
378.                call setTitle { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Title" }
379.                var title { vt = String }
                        initExpr: literal { token = "Title" }
380.                call setTitle { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = title }
381.                call setTitle { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: (+)
                                    right: literal { token = " " }
                                    left: lValue { varID = title }
382.                call setTitle { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: lValue { varID = title }
383.                call setHeight { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (/)
                                right: literal { token = 16 }
                                left: (*)
                                    right: literal { token = 9 }
                                    left: literal { token = 100.0 }
384.                call setHeight { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
385.                call setHeight { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
386.                call setHeight { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: (*)
                                    right: literal { token = 4 }
                                    left: literal { token = 5 }
                                left: (*)
                                    right: lValue { varID = d }
                                    left: lValue { varID = i }
387.                var height { vt = double }
                        initExpr: call getHeight
                            lValue: lValue { varID = ct }
388.                assign (=)
                        lValue: lValue { varID = height }
                        expr: call getHeight
                            lValue: lValue { varID = ct }
389.                var width { vt = double }
                        initExpr: (-)
                            right: literal { token = 10 }
                            left: (*)
                                right: literal { token = 0.5 }
                                left: call getWidth
                                    lValue: lValue { varID = ct }
390.                assign (=)
                        lValue: lValue { varID = width }
                        expr: call getWidth
                            lValue: lValue { varID = ct }
391.                var pxPerUnit { vt = double }
                        initExpr: call getPixelsPerUnit
                            lValue: lValue { varID = ct }
392.                assign (=)
                        lValue: lValue { varID = pxPerUnit }
                        expr: call getPixelsPerUnit
                            lValue: lValue { varID = ct }
393.                var pixelWidth { vt = int }
                        initExpr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (*)
                                    right: call getPixelsPerUnit
                                        lValue: lValue { varID = ct }
                                    left: call getWidth
                                        lValue: lValue { varID = ct }
394.                var pixelHeight { vt = int }
                        initExpr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (*)
                                    right: call getPixelsPerUnit
                                        lValue: lValue { varID = ct }
                                    left: call getHeight
                                        lValue: lValue { varID = ct }
395.                var currentScreen { vt = String }
                        initExpr: call getScreen
                            lValue: lValue { varID = ct }
396.                assign (=)
                        lValue: lValue { varID = currentScreen }
                        expr: call getScreen
                            lValue: lValue { varID = ct }
397.                call clearScreen
                        lValue: lValue { varID = ct }
398.                call clearGroup { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "targets" }
399.                call clearGroup { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "" }
400.                call setBackColor { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "orange" }
401.                call setBackColor { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "light blue" }
402.                var backColor { vt = String }
                        initExpr: literal { token = "red" }
403.                call setBackColor { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = backColor }
404.                call setBackColorRGB { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 255 }
                            literal { token = 0 }
                            literal { token = 0 }
405.                call setBackColorRGB { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = i }
                            lValue { varID = i }
                            lValue { varID = i }
406.                call setBackImage { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "background.png" }
407.                call setBackImage { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "C:\\Users\\ben\\Pictures\\landscape.jpg" }
408.                var filename { vt = String }
                        initExpr: literal { token = "landscape.png" }
409.                call setBackImage { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = filename }
411.                assign (=)
                        lValue: lValue { varID = x }
                        expr: literal { token = 50 }
412.                var y { vt = double }
                        initExpr: literal { token = 50 }
413.                var diameter { vt = double }
                        initExpr: literal { token = 10 }
414.                var circle { vt = GameObj }
                        initExpr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50 }
                                literal { token = 20 }
                                literal { token = 10 }
415.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50.0 }
                                literal { token = 20.0 }
                                literal { token = 10.0 }
416.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call circle { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50 }
                                literal { token = 20 }
                                literal { token = 10.5 }
                                literal { token = "blue" }
417.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = diameter }
418.                var color { vt = String }
                        initExpr: literal { token = "green" }
419.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call circle { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = diameter }
                                lValue { varID = color }
420.                var rect { vt = GameObj }
                        initExpr: call rect { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = width }
                                lValue { varID = height }
421.                assign (=)
                        lValue: lValue { varID = rect }
                        expr: call rect { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = width }
                                lValue { varID = height }
                                lValue { varID = color }
422.                assign (=)
                        lValue: lValue { varID = rect }
                        expr: call rect { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50.0 }
                                literal { token = 33.3 }
                                literal { token = 11.2 }
                                literal { token = 23.890 }
423.                assign (=)
                        lValue: lValue { varID = rect }
                        expr: call rect { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 50 }
                                literal { token = 33 }
                                literal { token = 11 }
                                literal { token = 23 }
                                literal { token = "green" }
424.                var line { vt = GameObj }
                        initExpr: call line { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = d }
                                lValue { varID = width }
                                lValue { varID = height }
425.                assign (=)
                        lValue: lValue { varID = line }
                        expr: call line { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = x1 }
                                lValue { varID = y1 }
                                lValue { varID = x2 }
                                lValue { varID = y2 }
                                lValue { varID = color }
426.                assign (=)
                        lValue: lValue { varID = line }
                        expr: call line { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0.0 }
                                literal { token = .0 }
                                literal { token = 100.0 }
                                literal { token = 95.0 }
427.                assign (=)
                        lValue: lValue { varID = line }
                        expr: call line { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 100 }
                                literal { token = 95 }
                                literal { token = "red" }
428.                var text { vt = GameObj }
                        initExpr: call text { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = height }
429.                assign (=)
                        lValue: lValue { varID = text }
                        expr: call text { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = height }
                                lValue { varID = color }
430.                assign (=)
                        lValue: lValue { varID = text }
                        expr: call text { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = score }
                                    left: literal { token = "Score: " }
                                literal { token = 20.0 }
                                literal { token = 90.0 }
                                literal { token = 10.0 }
431.                assign (=)
                        lValue: lValue { varID = text }
                        expr: call text { #exprs = 5 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: lValue { varID = score }
                                    left: literal { token = "Score: " }
                                literal { token = 20 }
                                literal { token = 90 }
                                literal { token = 10 }
                                literal { token = "purple" }
432.                var img { vt = GameObj }
                        initExpr: call image { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = filename }
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = width }
433.                assign (=)
                        lValue: lValue { varID = img }
                        expr: call image { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "car.png" }
                                literal { token = 42 }
                                literal { token = 25 }
                                literal { token = 38.7 }
434.                assign (=)
                        lValue: lValue { varID = img }
                        expr: call image { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "C:\\Users\\john\\Pictures\\car.jpg" }
                                literal { token = 42 }
                                literal { token = 25 }
                                literal { token = 38 }
435.                var objs { vt = array of GameObj }
                        initExpr: arrayInit { #exprs = 5 }
                            exprs:
                                lValue { varID = circle }
                                lValue { varID = rect }
                                lValue { varID = line }
                                lValue { varID = text }
                                lValue { varID = img }
436.                assign (=)
                        lValue: lValue { varID = img }
                        expr: lValue { varID = rect }
438.                var mouseClicked { vt = boolean }
                        initExpr: call clicked
                            lValue: lValue { varID = ct }
439.                if { #stmts = 1 }
                        expr: call clicked
                            lValue: lValue { varID = ct }
                        stmts:
440.                        assign (=)
                                lValue: lValue { varID = mouseClicked }
                                expr: call clicked
                                    lValue: lValue { varID = ct }
441.                if { #stmts = 1 }
                        expr: (>)
                            right: literal { token = 50 }
                            left: call clickX
                                lValue: lValue { varID = ct }
                        stmts:
442.                        assign (=)
                                lValue: lValue { varID = x }
                                expr: call clickX
                                    lValue: lValue { varID = ct }
443.                assign (=)
                        lValue: lValue { varID = x }
                        expr: call clickX
                            lValue: lValue { varID = ct }
444.                if { #stmts = 1 }
                        expr: (<=)
                            right: lValue { varID = x }
                            left: call clickY
                                lValue: lValue { varID = ct }
                        stmts:
445.                        assign (=)
                                lValue: lValue { varID = y }
                                expr: call clickY
                                    lValue: lValue { varID = ct }
446.                assign (=)
                        lValue: lValue { varID = y }
                        expr: call clickY
                            lValue: lValue { varID = ct }
447.                var keyName { vt = String }
                        initExpr: literal { token = "space" }
448.                var keyPressed { vt = boolean }
                        initExpr: call keyPressed { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = keyName }
449.                if { #stmts = 1 }
                        expr: call keyPressed { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = keyName }
                        stmts:
450.                        if { #stmts = 1 }
                                expr: call keyPressed { #exprs = 1 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        literal { token = "up" }
                                stmts:
451.                                assign (=)
                                        lValue: lValue { varID = keyPressed }
                                        expr: call keyPressed { #exprs = 1 }
                                            lValue: lValue { varID = ct }
                                            exprs:
                                                literal { token = "up" }
452.                if { #stmts = 1 }
                        expr: call charTyped { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "+" }
                        stmts:
453.                        assign (++)
                                lValue: lValue { varID = x }
454.                var ch { vt = String }
                        initExpr: literal { token = "+" }
455.                if { #stmts = 1 }
                        expr: call charTyped { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = ch }
                        stmts:
456.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: call charTyped { #exprs = 1 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        literal { token = "+" }
457.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call charTyped { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = ch }
459.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call loadSound { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = filename }
460.                call loadSound { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "pow.wav" }
461.                if { #stmts = 1 }
                        expr: call loadSound { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "sounds/ding.mp3" }
                        stmts:
462.                        call sound { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = "sounds/ding.mp3" }
463.                call sound { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = filename }
464.                call setSoundVolume { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = d }
465.                call setSoundVolume { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 1 }
466.                call setSoundVolume { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0.5 }
468.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call random { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
469.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call random { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 100 }
470.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
471.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
472.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 1.62 }
473.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = d }
474.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: (*)
                                        right: lValue { varID = i }
                                        left: lValue { varID = d }
                                    left: literal { token = 1 }
475.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call round { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                call distance { #exprs = 4 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = x1 }
                                        lValue { varID = y1 }
                                        lValue { varID = x2 }
                                        lValue { varID = y2 }
476.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call roundDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = i }
477.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call roundDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: literal { token = 1 }
                                    left: (*)
                                        right: lValue { varID = i }
                                        left: lValue { varID = d }
                                (*)
                                    right: literal { token = 2 }
                                    left: lValue { varID = i }
478.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call roundDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 2.71828182846 }
                                literal { token = 2 }
479.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call roundDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                call distance { #exprs = 4 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = x1 }
                                        lValue { varID = y1 }
                                        lValue { varID = x2 }
                                        lValue { varID = y2 }
                                literal { token = 1 }
480.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intDiv { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
481.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intDiv { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 5 }
                                literal { token = 2 }
482.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call isError { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
483.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call isError { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (/)
                                    right: lValue { varID = d }
                                    left: lValue { varID = d }
484.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call isError { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (/)
                                    right: lValue { varID = i }
                                    left: lValue { varID = d }
485.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call isError { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (/)
                                    right: literal { token = 0 }
                                    left: literal { token = 0.0 }
486.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call distance { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = circle, fieldID = x }
                                lValue { varID = circle, fieldID = y }
                                lValue { varID = rect, fieldID = x }
                                lValue { varID = rect, fieldID = y }
487.                if { #stmts = 1 }
                        expr: (<)
                            right: (/)
                                right: literal { token = 2 }
                                left: parens
                                    expr: (+)
                                        right: lValue { varID = rect, fieldID = width }
                                        left: lValue { varID = circle, fieldID = width }
                            left: call distance { #exprs = 4 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    lValue { varID = circle, fieldID = x }
                                    lValue { varID = circle, fieldID = y }
                                    lValue { varID = rect, fieldID = x }
                                    lValue { varID = rect, fieldID = y }
                        stmts:
488.                        assign (=)
                                lValue: lValue { varID = i }
                                expr: call getTimer
                                    lValue: lValue { varID = ct }
489.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (-)
                            right: lValue { varID = i }
                            left: call getTimer
                                lValue: lValue { varID = ct }
490.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call getVersion
                            lValue: lValue { varID = ct }
491.                call round { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            call getVersion
                                lValue: lValue { varID = ct }
493.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
494.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = d }
495.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = .707 }
496.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = Math, fieldID = PI }
497.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 6.0221409e+2 }
498.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call parseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
499.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call parseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "345" }
500.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
501.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "12345" }
502.                while { #stmts = 1 }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
                        stmts:
503.                        assign (=)
                                lValue: lValue { varID = d }
                                expr: call parseNumber { #exprs = 1 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = s }
504.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: literal { token = 100 }
                            left: call parseNumber { #exprs = 1 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = "123.45" }
505.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call canParseNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "543.210" }
506.                while { #stmts = 1 }
                        expr: call canParseNumber { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = s }
                        stmts:
507.                        assign (=)
                                lValue: lValue { varID = s }
                                expr: call formatDecimal { #exprs = 1 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        lValue { varID = d }
508.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call formatDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = i }
509.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call formatDecimal { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = d }
                                call intDiv { #exprs = 2 }
                                    lValue: lValue { varID = ct }
                                    exprs:
                                        (*)
                                            right: lValue { varID = i }
                                            left: literal { token = 2 }
                                        lValue { varID = i }
510.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: literal { token = ":00" }
                            left: call formatDecimal { #exprs = 2 }
                                lValue: lValue { varID = ct }
                                exprs:
                                    literal { token = 6.0221 }
                                    literal { token = 7 }
511.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call formatInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = i }
512.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call formatInt { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                (+)
                                    right: literal { token = 1 }
                                    left: lValue { varID = i }
                                (+)
                                    right: lValue { varID = k }
                                    left: lValue { varID = j }
514.                assign (=)
                        lValue: lValue { varID = rect, fieldID = x }
                        expr: (-)
                            right: literal { token = 10 }
                            left: lValue { varID = circle, fieldID = y }
515.                assign (=)
                        lValue: lValue { varID = circle, fieldID = width }
                        expr: (*)
                            right: literal { token = 1.5 }
                            left: lValue { varID = circle, fieldID = height }
516.                assign (=)
                        lValue: lValue { varID = rect, fieldID = height }
                        expr: (*)
                            right: literal { token = 1.1 }
                            left: lValue { varID = img, fieldID = height }
517.                assign (=)
                        lValue: lValue { varID = line, fieldID = x }
                        expr: (+)
                            right: lValue { varID = line, fieldID = width }
                            left: lValue { varID = line, fieldID = x }
518.                assign (=)
                        lValue: lValue { varID = img, fieldID = width }
                        expr: (*)
                            right: literal { token = .9 }
                            left: lValue { varID = img, fieldID = width }
519.                assign (=)
                        lValue: lValue { varID = img, fieldID = xSpeed }
                        expr: literal { token = 0 }
520.                assign (=)
                        lValue: lValue { varID = img, fieldID = ySpeed }
                        expr: literal { token = .5 }
521.                assign (=)
                        lValue: lValue { varID = line, fieldID = lineWidth }
                        expr: literal { token = 3 }
522.                assign (=)
                        lValue: lValue { varID = img, fieldID = lineWidth }
                        expr: (*)
                            right: literal { token = 2 }
                            left: lValue { varID = line, fieldID = lineWidth }
523.                assign (=)
                        lValue: lValue { varID = rect, fieldID = visible }
                        expr: literal { token = false }
524.                assign (=)
                        lValue: lValue { varID = circle, fieldID = clickable }
                        expr: lValue { varID = circle, fieldID = visible }
525.                if { #stmts = 1 }
                        expr: lValue { varID = img, fieldID = visible }
                        stmts:
526.                        assign (=)
                                lValue: lValue { varID = img, fieldID = clickable }
                                expr: literal { token = true }
527.                if { #stmts = 1 }
                        expr: (!=)
                            right: literal { token = false }
                            left: lValue { varID = img, fieldID = clickable }
                        stmts:
528.                        assign (=)
                                lValue: lValue { varID = img, fieldID = autoDelete }
                                expr: lValue { varID = img, fieldID = visible }
529.                assign (=)
                        lValue: lValue { varID = line, fieldID = group }
                        expr: lValue { varID = s }
530.                assign (=)
                        lValue: lValue { varID = line, fieldID = autoDelete }
                        expr: (||)
                            right: (&&)
                                right: (==)
                                    right: literal { token = 1 }
                                    left: call indexOf { #exprs = 1 }
                                        lValue: lValue { varID = s }
                                        exprs:
                                            lValue { varID = line, fieldID = group }
                                left: call equals { #exprs = 1 }
                                    lValue: lValue { varID = s }
                                    exprs:
                                        literal { token = "world" }
                            left: call equals { #exprs = 1 }
                                lValue: lValue { varID = s }
                                exprs:
                                    literal { token = "hello" }
532.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call getType
                            lValue: lValue { varID = rect }
533.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (+)
                                right: literal { token = "more text" }
                                left: call getText
                                    lValue: lValue { varID = text }
534.                call setText { #exprs = 1 }
                        lValue: lValue { varID = img }
                        exprs:
                            literal { token = "racecar.png" }
535.                call setText { #exprs = 1 }
                        lValue: lValue { varID = text }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: literal { token = "Score: " }
536.                call setText { #exprs = 1 }
                        lValue: lValue { varID = text }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: literal { token = "Score: " }
537.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            call toString
                                lValue: lValue { varID = line }
538.                call setSize { #exprs = 2 }
                        lValue: lValue { varID = img }
                        exprs:
                            (*)
                                right: literal { token = 1.1 }
                                left: lValue { varID = img, fieldID = width }
                            (*)
                                right: literal { token = 1.1 }
                                left: lValue { varID = img, fieldID = height }
539.                call align { #exprs = 1 }
                        lValue: lValue { varID = text }
                        exprs:
                            lValue { varID = s }
540.                call align { #exprs = 2 }
                        lValue: lValue { varID = text }
                        exprs:
                            lValue { varID = s }
                            literal { token = true }
541.                call align { #exprs = 2 }
                        lValue: lValue { varID = text }
                        exprs:
                            lValue { varID = s }
                            literal { token = false }
542.                call setFillColor { #exprs = 1 }
                        lValue: lValue { varID = circle }
                        exprs:
                            (+)
                                right: lValue { varID = s }
                                left: literal { token = "light" }
543.                call setFillColor { #exprs = 1 }
                        lValue: lValue { varID = circle }
                        exprs:
                            call getText
                                lValue: lValue { varID = text }
544.                call setFillColorRGB { #exprs = 3 }
                        lValue: lValue { varID = circle }
                        exprs:
                            lValue { varID = i }
                            lValue { varID = j }
                            lValue { varID = k }
545.                call setLineColor { #exprs = 1 }
                        lValue: lValue { varID = rect }
                        exprs:
                            lValue { varID = colors }
                                indexExpr: lValue { varID = i }
546.                call setLineColorRGB { #exprs = 3 }
                        lValue: lValue { varID = rect }
                        exprs:
                            lValue { varID = i }
                            (-)
                                right: lValue { varID = i }
                                left: literal { token = 255 }
                            literal { token = 0 }
547.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call getLayer
                            lValue: lValue { varID = rect }
548.                if { #stmts = 1 }
                        expr: (>=)
                            right: call getLayer
                                lValue: lValue { varID = circle }
                            left: call getLayer
                                lValue: lValue { varID = rect }
                        stmts:
549.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: call equals { #exprs = 1 }
                                    lValue: lValue { varID = colors }
                                        indexExpr: call getLayer
                                            lValue: lValue { varID = rect }
                                    exprs:
                                        literal { token = "green" }
550.                call setLayer { #exprs = 1 }
                        lValue: lValue { varID = img }
                        exprs:
                            unaryOp (neg)
                                expr: literal { token = 42 }
551.                call delete
                        lValue: lValue { varID = img }
552.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call clicked
                            lValue: lValue { varID = img }
553.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call containsPoint { #exprs = 2 }
                            lValue: lValue { varID = img }
                            exprs:
                                call clickX
                                    lValue: lValue { varID = ct }
                                call clickY
                                    lValue: lValue { varID = ct }
554.                if { #stmts = 1 }
                        expr: call containsPoint { #exprs = 2 }
                            lValue: lValue { varID = img }
                            exprs:
                                call clickX
                                    lValue: lValue { varID = ct }
                                call clickY
                                    lValue: lValue { varID = ct }
                        stmts:
555.                        while { #stmts = 1 }
                                expr: call hit { #exprs = 1 }
                                    lValue: lValue { varID = img }
                                    exprs:
                                        lValue { varID = rect }
                                stmts:
556.                                assign (=)
                                        lValue: lValue { varID = b }
                                        expr: (==)
                                            right: literal { token = true }
                                            left: call hit { #exprs = 1 }
                                                lValue: lValue { varID = img }
                                                exprs:
                                                    lValue { varID = rect }
558.                var e { vt = double }
                        initExpr: lValue { varID = Math, fieldID = E }
559.                var pi { vt = double }
                        initExpr: lValue { varID = Math, fieldID = PI }
560.                if { #stmts = 1 }
                        expr: (<)
                            right: lValue { varID = eps }
                            left: call abs { #exprs = 1 }
                                lValue: lValue { varID = Math }
                                exprs:
                                    (-)
                                        right: lValue { varID = img, fieldID = x }
                                        left: lValue { varID = rect, fieldID = x }
                        stmts:
561.                        assign (=)
                                lValue: lValue { varID = i }
                                expr: call abs { #exprs = 1 }
                                    lValue: lValue { varID = Math }
                                    exprs:
                                        lValue { varID = i }
562.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call acos { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                unaryOp (neg)
                                    expr: literal { token = 0.5 }
563.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call asin { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (/)
                                    right: literal { token = 2 }
                                    left: call sqrt { #exprs = 1 }
                                        lValue: lValue { varID = Math }
                                        exprs:
                                            literal { token = 3 }
564.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call atan { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (/)
                                    right: call sqrt { #exprs = 1 }
                                        lValue: lValue { varID = Math }
                                        exprs:
                                            literal { token = 2 }
                                    left: literal { token = 1 }
565.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call atan2 { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (-)
                                    right: lValue { varID = img, fieldID = x }
                                    left: call clickX
                                        lValue: lValue { varID = ct }
                                (-)
                                    right: lValue { varID = img, fieldID = y }
                                    left: call clickY
                                        lValue: lValue { varID = ct }
566.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call ceil { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
567.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call cos { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (/)
                                    right: literal { token = 2 }
                                    left: lValue { varID = Math, fieldID = PI }
568.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call cosh { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (*)
                                    right: literal { token = 2 }
                                    left: lValue { varID = Math, fieldID = PI }
569.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call exp { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                (+)
                                    right: literal { token = 1 }
                                    left: (*)
                                        right: lValue { varID = Math, fieldID = PI }
                                        left: literal { token = 2 }
570.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call floor { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                unaryOp (neg)
                                    expr: literal { token = 1.67 }
571.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call log { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                literal { token = 32 }
572.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call log10 { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
573.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call max { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = d }
574.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call max { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
575.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call min { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = d }
576.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call min { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
577.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call pow { #exprs = 2 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = d }
578.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call sin { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
579.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call sinh { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
580.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call sqrt { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
581.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call tan { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
582.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call tanh { #exprs = 1 }
                            lValue: lValue { varID = Math }
                            exprs:
                                lValue { varID = d }
584.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call compareTo { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = s }
585.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call equals { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = s }
586.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call indexOf { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = s }
587.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call length
                            lValue: lValue { varID = s }
588.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call substring { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = i }
589.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call substring { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = i }
590.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call toLowerCase
                            lValue: lValue { varID = s }
591.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call toUpperCase
                            lValue: lValue { varID = s }
592.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call trim
                            lValue: lValue { varID = s }
600.        func ct { #paramVars = 0, vt = void, #stmts = 1 }
                stmts:
602.                call println { #exprs = 1 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "Hello world" }
606.        func int { #paramVars = 0, vt = double, #stmts = 1 }
                stmts:
608.                return
                        expr: literal { token = 0 }
611.        func foo { #paramVars = 2, vt = double, #stmts = 1 }
                paramVars:
611.                var i { vt = int, isGlobal = false }
611.                var boolean { vt = GameObj, isGlobal = false }
                stmts:
613.                return
                        expr: literal { token = 0 }
616.        func bar { #paramVars = 2, vt = boolean, #stmts = 1 }
                paramVars:
616.                var s { vt = String, isGlobal = false }
616.                var gameObj { vt = GameObj, isGlobal = false }
                stmts:
619.                return
                        expr: lValue { varID = TRUE }
622.        func Double { #paramVars = 1, vt = int, #stmts = 1 }
                paramVars:
622.                var x { vt = int, isGlobal = false }
                stmts:
624.                return
                        expr: (*)
                            right: lValue { varID = x }
                            left: literal { token = 2 }
628.        func voidFunc { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
628.                var i { vt = int, isGlobal = false }
631.        func func { #paramVars = 0, vt = void, #stmts = 0 }
635.        func FUNC { #paramVars = 0, vt = void, #stmts = 0 }
638.        func AnotherFunc { #paramVars = 0, vt = void, #stmts = 0 }
642.        func anotherfunc { #paramVars = 0, vt = void, #stmts = 0 }
646.        func expectedErrors { #paramVars = 0, vt = void, #stmts = 227 }
                stmts:
648.                var intVar { vt = int }
                        initExpr: literal { token = 1 }
649.                var dblVar { vt = double }
                        initExpr: literal { token = 1.0 }
650.                var boolVar { vt = boolean }
                        initExpr: literal { token = false }
651.                var strVar { vt = String }
                        initExpr: literal { token = "a" }
652.                var objVar { vt = GameObj }
                        initExpr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 10 }
653.                var intArr { vt = array of int }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
                                literal { token = 3 }
654.                var objArr { vt = array of GameObj }
                        initExpr: arrayInit { #exprs = 1 }
                            exprs:
                                lValue { varID = objVar }
657.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call setText { #exprs = 1 }
                            lValue: lValue { varID = objVar }
                            exprs:
                                literal { token = "circle" }
659.                var screen { vt = double }
                        initExpr: call setScreen { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "menu" }
661.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: call setHeight { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 150 }
663.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: call voidFunc
665.                var title { vt = GameObj }
                        initExpr: call setTitle { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = "title" }
668.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = intVar }
670.                var b { vt = boolean }
                        initExpr: call intFuncInt { #exprs = 1 }
                            exprs:
                                literal { token = 2 }
672.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = visible }
                        expr: literal { token = 0 }
674.                var s { vt = String }
                        initExpr: lValue { varID = intVar }
676.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = intVar }
679.                var i { vt = int }
                        initExpr: literal { token = 3.4 }
681.                assign (=)
                        lValue: lValue { varID = i }
                        expr: literal { token = 1.2 }
683.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (*)
                            right: literal { token = 3.4 }
                            left: literal { token = 10 }
685.                var j { vt = int }
                        initExpr: (+)
                            right: literal { token = 3.14 }
                            left: literal { token = 5 }
687.                var plancksConst { vt = int }
                        initExpr: literal { token = 6.62e-34 }
689.                var exponentialNumberNoDot { vt = int }
                        initExpr: literal { token = 12e10 }
691.                var exponentialNumberWithDot { vt = int }
                        initExpr: literal { token = 3.42e2 }
693.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = autoDelete }
                        expr: lValue { varID = dblVar }
695.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: literal { token = 3.14 }
697.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = dblVar }
700.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call clicked
                            lValue: lValue { varID = ct }
702.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = x }
                        expr: lValue { varID = boolVar }
704.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = xSpeed }
                        expr: literal { token = false }
706.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = group }
                        expr: lValue { varID = boolVar }
708.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = boolVar }
711.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = objVar, fieldID = group }
713.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = ySpeed }
                        expr: literal { token = "fast" }
715.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = strVar }
717.                var score { vt = GameObj }
                        initExpr: literal { token = "100 pts" }
720.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = objVar }
722.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = width }
                        expr: lValue { varID = objVar }
724.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = objVar }
726.                var circle { vt = String }
                        initExpr: call circle { #exprs = 3 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 10 }
729.                var y { vt = int }
                        initExpr: call intFuncInt { #exprs = 1 }
                            exprs:
                                literal { token = 2.3 }
731.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call random { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0.0 }
                                literal { token = 10 }
733.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call random { #exprs = 2 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = false }
735.                call setBackColorRGB { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "red" }
                            literal { token = 0 }
                            literal { token = 0 }
737.                call setLayer { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = "front" }
739.                call roundDecimal { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 3.14159 }
                            lValue { varID = objVar }
741.                call substring { #exprs = 1 }
                        lValue: lValue { varID = strVar }
                        exprs:
                            lValue { varID = objVar }
744.                call pow { #exprs = 2 }
                        lValue: lValue { varID = Math }
                        exprs:
                            lValue { varID = boolVar }
                            literal { token = 3 }
746.                call dblFuncIntDbl { #exprs = 2 }
                        exprs:
                            literal { token = 0 }
                            literal { token = "pi" }
748.                call containsPoint { #exprs = 2 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            lValue { varID = strVar }
                            lValue { varID = dblVar }
750.                call exp { #exprs = 1 }
                        lValue: lValue { varID = Math }
                        exprs:
                            lValue { varID = objVar }
753.                call align { #exprs = 2 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = "left" }
                            literal { token = 0 }
755.                call boolFuncBoolStringGameObj { #exprs = 3 }
                        exprs:
                            lValue { varID = dblVar }
                            lValue { varID = strVar }
                            lValue { varID = objVar }
757.                call boolFuncBoolStringGameObj { #exprs = 3 }
                        exprs:
                            lValue { varID = strVar }
                            lValue { varID = objVar }
                            lValue { varID = boolVar }
759.                call boolFuncBoolStringGameObj { #exprs = 3 }
                        exprs:
                            lValue { varID = objVar }
                            lValue { varID = strVar }
                            lValue { varID = boolVar }
762.                call align { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            lValue { varID = intVar }
764.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call parseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 123 }
766.                call circle { #exprs = 4 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 1 }
                            literal { token = 1 }
768.                call setText { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = 1 }
770.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 1.0 }
772.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: call canParseInt { #exprs = 1 }
                            lValue: lValue { varID = ct }
                            exprs:
                                lValue { varID = boolVar }
774.                call align { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = true }
776.                call equals { #exprs = 1 }
                        lValue: lValue { varID = strVar }
                        exprs:
                            lValue { varID = objVar }
779.                call boolFuncBoolStringGameObj { #exprs = 3 }
                        exprs:
                            lValue { varID = boolVar }
                            lValue { varID = strVar }
                            literal { token = 42 }
781.                call hit { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = 0.0 }
783.                call hit { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = false }
785.                call hit { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = "the wall" }
788.                if { #stmts = 1 }
                        expr: (>)
                            right: literal { token = 0 }
                            left: call intFuncInt
                        stmts:
790.                        call dblFuncIntDbl
792.                call circle
                        lValue: lValue { varID = ct }
794.                call rect { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 10 }
796.                call circle { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
798.                call voidFunc { #exprs = 1 }
                        exprs:
                            literal { token = 1 }
800.                call setBackColor { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 255 }
                            literal { token = 0 }
                            literal { token = 0 }
802.                call delete { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = true }
804.                call setText { #exprs = 2 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            literal { token = "circle" }
                            literal { token = "green" }
807.                var k { vt = int }
                        initExpr: (/)
                            right: literal { token = 2 }
                            left: literal { token = 3 }
809.                call random { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            (/)
                                right: lValue { varID = intVar }
                                left: lValue { varID = intVar }
                            lValue { varID = intVar }
811.                assign (=)
                        lValue: lValue { varID = x }
                        expr: (+)
                            right: literal { token = 1 }
                            left: lValue { varID = x }
813.                for { #stmts = 1 }
                        expr: (<)
                            right: literal { token = 1 }
                            left: lValue { varID = x }
813.                    initStmt: assign (=)
                            lValue: lValue { varID = x }
                            expr: literal { token = 0 }
813.                    nextStmt: assign (++)
                            lValue: lValue { varID = x }
                        stmts:
815.                        call foo
817.                var j { vt = int }
                        initExpr: literal { token = 3 }
819.                var uninitializedVar { vt = int }
821.                if { #stmts = 1 }
                        expr: (<)
                            right: literal { token = 0 }
                            left: lValue { varID = uninitializedVar }
                        stmts:
822.                        assign (=)
                                lValue: lValue { varID = uninitializedVar }
                                expr: literal { token = 0 }
823.                var g { vt = GameObj }
825.                assign (=)
                        lValue: lValue { varID = g, fieldID = xSpeed }
                        expr: literal { token = 1 }
828.                var n
                        initExpr: literal { token = 100 }
830.                var gameOver
                        initExpr: literal { token = false }
832.                var r { vt = GameObj }
                        initExpr: call rectangle { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 10 }
                                literal { token = 10 }
834.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = isVisible }
                        expr: literal { token = false }
836.                call foo
                        lValue: lValue { varID = objVar }
839.                var ch
                        initExpr: literal { token = "A" }
841.                var obj
843.                call Circle { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 10 }
845.                call atan2 { #exprs = 2 }
                        lValue: lValue { varID = math }
                        exprs:
                            (-)
                                right: lValue { varID = r, fieldID = x }
                                left: call clickX
                                    lValue: lValue { varID = ct }
                            (-)
                                right: lValue { varID = r, fieldID = y }
                                left: call clickY
                                    lValue: lValue { varID = ct }
847.                call voidfunC
849.                assign (=)
                        lValue: lValue { varID = intvar }
                        expr: literal { token = 2 }
852.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: lValue { varID = Null }
854.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = NULL }
856.                while { #stmts = 1 }
                        expr: lValue { varID = True }
                        stmts:
858.                        assign (=)
                                lValue: lValue { varID = boolVar }
                                expr: lValue { varID = TRUE }
860.                if { #stmts = 1 }
                        expr: lValue { varID = False }
                        stmts:
862.                        assign (=)
                                lValue: lValue { varID = objVar, fieldID = clickable }
                                expr: lValue { varID = FALSE }
865.                if { #stmts = 1 }
                        expr: (=)
                            right: literal { token = 0 }
                            left: lValue { varID = i }
                        stmts:
866.                        assign (=)
                                lValue: lValue { varID = i }
                                expr: literal { token = 0 }
868.                var intArr2 { vt = array of int }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = 2 }
                                literal { token = 3.14 }
870.                var dblArr { vt = array of double }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
                                literal { token = 1 }
                                literal { token = "two" }
                                literal { token = 3.14 }
872.                var strArr { vt = array of String }
                        initExpr: newArray { vt = GameObj }
                            lengthExpr: literal { token = 100 }
874.                var boolArr { vt = array of boolean }
                        initExpr: call intArrFuncInt { #exprs = 1 }
                            exprs:
                                literal { token = 10 }
876.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: newArray { vt = int }
                            lengthExpr: literal { token = 1.5 }
879.                assign (++)
                        lValue: lValue { varID = boolVar }
881.                assign (++)
                        lValue: lValue { varID = strVar }
883.                assign (++)
                        lValue: lValue { varID = objVar }
885.                assign (--)
                        lValue: lValue { varID = boolVar }
887.                assign (--)
                        lValue: lValue { varID = strVar }
889.                assign (--)
                        lValue: lValue { varID = objVar }
892.                forArray { #stmts = 1 }
892.                    var: var x { vt = int, isGlobal = false }
                        expr: lValue { varID = intVar }
                        stmts:
893.                        call voidFunc
895.                forArray { #stmts = 1 }
895.                    var: var x { vt = double, isGlobal = false }
                        expr: lValue { varID = dblVar }
                        stmts:
896.                        call voidFunc
898.                forArray { #stmts = 1 }
898.                    var: var x { vt = boolean, isGlobal = false }
                        expr: lValue { varID = boolVar }
                        stmts:
899.                        call voidFunc
901.                forArray { #stmts = 1 }
901.                    var: var x { vt = String, isGlobal = false }
                        expr: lValue { varID = strVar }
                        stmts:
902.                        call voidFunc
904.                forArray { #stmts = 1 }
904.                    var: var x { vt = GameObj, isGlobal = false }
                        expr: lValue { varID = objVar }
                        stmts:
905.                        call voidFunc
907.                forArray { #stmts = 1 }
907.                    var: var x { vt = GameObj, isGlobal = false }
                        expr: lValue { varID = strVar }
                        stmts:
908.                        call voidFunc
911.                forArray { #stmts = 1 }
911.                    var: var x { vt = double, isGlobal = false }
                        expr: lValue { varID = intArr }
                        stmts:
912.                        call voidFunc
914.                forArray { #stmts = 1 }
914.                    var: var x { vt = String, isGlobal = false }
                        expr: lValue { varID = objArr }
                        stmts:
915.                        call voidFunc
918.                for { #stmts = 1 }
                        expr: lValue { varID = intVar }
                        stmts:
919.                        call voidFunc
921.                for { #stmts = 1 }
                        expr: lValue { varID = dblVar }
                        stmts:
922.                        call voidFunc
924.                for { #stmts = 1 }
                        expr: lValue { varID = strVar }
                        stmts:
925.                        call voidFunc
927.                for { #stmts = 1 }
                        expr: lValue { varID = objVar }
                        stmts:
928.                        call voidFunc
930.                doWhile { #stmts = 1 }
                        expr: lValue { varID = intVar }
                        stmts:
931.                        call voidFunc
936.                while { #stmts = 1 }
                        expr: lValue { varID = dblVar }
                        stmts:
937.                        call voidFunc
939.                while { #stmts = 1 }
                        expr: lValue { varID = strVar }
                        stmts:
940.                        call voidFunc
942.                while { #stmts = 1 }
                        expr: lValue { varID = objVar }
                        stmts:
943.                        call voidFunc
946.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = intVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = intVar }
                                stmts:
950.                                call voidFunc
                        stmts:
947.                        call voidFunc
952.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = dblVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = dblVar }
                                stmts:
956.                                call voidFunc
                        stmts:
953.                        call voidFunc
958.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = strVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = strVar }
                                stmts:
962.                                call voidFunc
                        stmts:
959.                        call voidFunc
964.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = objVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = objVar }
                                stmts:
968.                                call voidFunc
                        stmts:
965.                        call voidFunc
971.                var n
                        initExpr: literal { token = 100 }
973.                var d
                        initExpr: literal { token = 100.0 }
975.                var b
                        initExpr: literal { token = false }
978.                assign (+=)
                        lValue: lValue { varID = strVar }
                        expr: literal { token = "hello" }
980.                assign (-=)
                        lValue: lValue { varID = boolVar }
                        expr: literal { token = 1 }
982.                assign (*=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = objVar }
984.                assign (/=)
                        lValue: lValue { varID = objVar }
                        expr: literal { token = 3.14 }
986.                assign (+=)
                        lValue: lValue { varID = intVar }
                        expr: literal { token = "hello" }
988.                assign (-=)
                        lValue: lValue { varID = dblVar }
                        expr: call rect { #exprs = 4 }
                            lValue: lValue { varID = ct }
                            exprs:
                                literal { token = 0 }
                                literal { token = 0 }
                                literal { token = 1 }
                                literal { token = 2 }
990.                assign (*=)
                        lValue: lValue { varID = intVar }
                        expr: literal { token = false }
992.                assign (/=)
                        lValue: lValue { varID = dblVar }
                        expr: literal { token = true }
994.                assign (+=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
996.                assign (-=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
998.                assign (*=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
1000.                assign (/=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
1002.                if { #stmts = 1 }
                        expr: (==)
                            right: literal { token = "s" }
                            left: lValue { varID = strVar }
                        stmts:
1003.                        call voidFunc
1006.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (^)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
1008.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (&)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
1010.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (|)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
1012.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (>>)
                            right: literal { token = 2 }
                            left: lValue { varID = i }
1014.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (<<)
                            right: literal { token = 2 }
                            left: lValue { varID = i }
1016.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (>>>)
                            right: literal { token = 2 }
                            left: lValue { varID = i }
1019.                var ct { vt = String }
1021.                var String { vt = int }
1023.                var GameObj { vt = double }
1025.                var lowercasefirst { vt = int }
                        initExpr: literal { token = 1 }
1027.                var lowerCaseFirst { vt = int }
                        initExpr: literal { token = 10 }
1028.                var upperCaseFirst { vt = GameObj }
                        initExpr: lValue { varID = objVar }
1030.                var uppercasefirst { vt = GameObj }
                        initExpr: literal { token = null }
1032.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: (+)
                            right: literal { token = 1 }
                            left: lValue { varID = dblvar }
1036.                var DouBle { vt = int }
1038.                var BooLean { vt = double }
1040.                var string { vt = boolean }
1043.                assign (=)
                        lValue: lValue { varID = intVar }
                            indexExpr: literal { token = 0 }
                        expr: literal { token = 1 }
1046.                assign (=)
                        lValue: lValue { varID = intArr }
                            indexExpr: lValue { varID = dblVar }
                        expr: literal { token = 1 }
1049.                var numObjs { vt = int }
                        initExpr: lValue { varID = objArr, fieldID = Length }
1052.                var len { vt = int }
                        initExpr: lValue { varID = strVar, fieldID = length }
1054.                var size { vt = int }
                        initExpr: lValue { varID = intVar, fieldID = size }
1057.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: unaryOp (neg)
                            expr: lValue { varID = objVar }
1060.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = visible }
                        expr: unaryOp (not)
                            expr: lValue { varID = intVar }
1063.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: (+)
                            right: lValue { varID = intArr }
                            left: lValue { varID = strVar }
1065.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: (+)
                            right: lValue { varID = strVar }
                            left: lValue { varID = intArr }
1068.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (+)
                            right: unaryOp (not)
                                expr: lValue { varID = boolVar }
                            left: lValue { varID = boolVar }
1070.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: (+)
                            right: lValue { varID = objVar }
                            left: lValue { varID = objVar }
1072.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: (+)
                            right: literal { token = 1 }
                            left: lValue { varID = intArr }
1074.                assign (=)
                        lValue: lValue { varID = objArr }
                        expr: (+)
                            right: lValue { varID = objVar }
                            left: lValue { varID = objArr }
1077.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: (-)
                            right: lValue { varID = intVar }
                            left: lValue { varID = strVar }
1079.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (*)
                            right: literal { token = 0 }
                            left: lValue { varID = boolVar }
1081.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: (/)
                            right: literal { token = 2 }
                            left: lValue { varID = objVar }
1083.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: (%)
                            right: literal { token = 2 }
                            left: lValue { varID = intArr }
1086.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: (&&)
                            right: literal { token = 1001 }
                            left: lValue { varID = intVar }
1088.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (||)
                            right: literal { token = 1010 }
                            left: lValue { varID = boolVar }
1091.                if { #stmts = 1 }
                        expr: (<)
                            right: lValue { varID = boolVar }
                            left: lValue { varID = boolVar }
                        stmts:
1092.                        call voidFunc
1094.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (>)
                            right: lValue { varID = dblVar }
                            left: lValue { varID = objVar }
1096.                while { #stmts = 1 }
                        expr: (<=)
                            right: lValue { varID = intVar }
                            left: lValue { varID = boolVar }
                        stmts:
1097.                        call voidFunc
1100.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: (>=)
                            right: lValue { varID = intArr }
                            left: lValue { varID = dblVar }
1103.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: (/)
                            right: literal { token = 2 }
                            left: literal { token = 1 }
1105.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: (/)
                            right: literal { token = 8 }
                            left: literal { token = 3 }
1108.                var intVar { vt = int }
                        initExpr: literal { token = 13 }
1110.                var objArr { vt = array of GameObj }
                        initExpr: newArray { vt = GameObj }
                            lengthExpr: literal { token = 10 }
1113.                call update
1115.                call start
1117.                call onMousePress { #exprs = 2 }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
1120.                call println { #exprs = 1 }
                        exprs:
                            literal { token = "Hello world" }
1122.                call setHeight { #exprs = 1 }
                        exprs:
                            literal { token = 150 }
1130.                call foo
                        lValue: lValue { varID = GameObj }
1132.                call foo
                        lValue: lValue { varID = String }
1134.                call foo
                        lValue: lValue { varID = Code12Program }
1136.                call foo
                        lValue: lValue { varID = Code12Program }
1139.                call log { #exprs = 1 }
                        lValue: lValue { varID = ct }
                            indexExpr: literal { token = 0 }
                        exprs:
                            lValue { varID = objVar }
1141.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: call tan { #exprs = 1 }
                            lValue: lValue { varID = Math }
                                indexExpr: lValue { varID = intVar }
                            exprs:
                                literal { token = 0 }
1144.                call voidFunc
                        lValue: lValue { varID = intArr }
1147.                call voidFunc
                        lValue: lValue { varID = intArr }
                            indexExpr: literal { token = 0 }
1149.                call foo
                        lValue: lValue { varID = boolVar }
1152.                call prnitln
                        lValue: lValue { varID = ct }
1154.                call circ { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 10 }
1157.                call foo
                        lValue: lValue { varID = objArr }
                            indexExpr: literal { token = 0 }
1159.                call foo
                        lValue: lValue { varID = Math }
1162.                call intFuncInt
1164.                call dblFuncIntDbl
1166.                call log
                        lValue: lValue { varID = ct }
1168.                call atan2
                        lValue: lValue { varID = Math }
1170.                call boolFuncBoolStringGameObj { #exprs = 2 }
                        exprs:
                            literal { token = false }
                            literal { token = "" }
1172.                call rect { #exprs = 3 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = 0 }
                            literal { token = 0 }
                            literal { token = 10 }
1174.                call voidFunc { #exprs = 1 }
                        exprs:
                            lValue { varID = intVar }
1176.                call print { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            literal { token = "intVar =" }
                            lValue { varID = intVar }
1178.                call atan { #exprs = 2 }
                        lValue: lValue { varID = Math }
                        exprs:
                            literal { token = 4 }
                            literal { token = 3 }
1180.                call logm { #exprs = 2 }
                        lValue: lValue { varID = ct }
                        exprs:
                            lValue { varID = intVar }
                            lValue { varID = objVar }
1182.                var indent { vt = String }
                        initExpr: literal { token = "2 Tabs" }
1184.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "1 Space + 2 Tabs" }
1186.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "2 Tabs" }
1188.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "8 Spaces" }
1190.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "2 Tabs" }
1191.                if { #stmts = 1 }
                        expr: literal { token = true }
                        stmts:
1192.                        call println
                                lValue: lValue { varID = ct }
1193.                if { #stmts = 1 }
                        expr: literal { token = true }
                        stmts:
1194.                        call println
                                lValue: lValue { varID = ct }
1196.                assign (=)
                        lValue: lValue { varID = indent }
                        expr: literal { token = "4 Spaces + 1 Tab" }
1201.        func myFunc { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
1201.                var myVar { vt = int, isGlobal = false }
1206.        func update { #paramVars = 0, vt = GameObj, #stmts = 0 }
1210.        func onMousePress { #paramVars = 3, vt = String, #stmts = 0 }
                paramVars:
1210.                var obj { vt = GameObj, isGlobal = false }
1210.                var x { vt = double, isGlobal = false }
1210.                var y { vt = double, isGlobal = false }
1214.        func onMousePress { #paramVars = 2, vt = void, #stmts = 0 }
                paramVars:
1214.                var x { vt = double, isGlobal = false }
1214.                var y { vt = double, isGlobal = false }
1218.        func onKeyPress { #paramVars = 3, vt = void, #stmts = 0 }
                paramVars:
1218.                var obj { vt = GameObj, isGlobal = false }
1218.                var x { vt = double, isGlobal = false }
1218.                var y { vt = double, isGlobal = false }
1223.        func onKeyRelease { #paramVars = 0, vt = void, #stmts = 0 }
1228.        func onMousePress { #paramVars = 3, vt = void, #stmts = 0 }
                paramVars:
1228.                var obj { vt = boolean, isGlobal = false }
1228.                var x { vt = double, isGlobal = false }
1228.                var y { vt = double, isGlobal = false }
1233.        func onMouseDrag { #paramVars = 3, vt = void, #stmts = 0 }
                paramVars:
1233.                var obj { vt = GameObj, isGlobal = false }
1233.                var x { vt = int, isGlobal = false }
1233.                var y { vt = double, isGlobal = false }
1238.        func onMouseRelease { #paramVars = 3, vt = void, #stmts = 0 }
                paramVars:
1238.                var obj { vt = GameObj, isGlobal = false }
1238.                var x { vt = double, isGlobal = false }
1238.                var y { vt = String, isGlobal = false }
1243.        func onKeyPress { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
1243.                var keyName { vt = double, isGlobal = false }
1248.        func onKeyRelease { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
1248.                var keyName { vt = int, isGlobal = false }
1253.        func onCharTyped { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
1253.                var keyName { vt = GameObj, isGlobal = false }
        vars:
  5.        var myVar { vt = int, isGlobal = true }
                initExpr: literal { token = 1 }
  7.        var button { vt = GameObj, isGlobal = true }
                initExpr: call text { #exprs = 4 }
                    lValue: lValue { varID = ct }
                    exprs:
                        literal { token = "START" }
                        literal { token = 0 }
                        literal { token = 0 }
                        literal { token = 10 }
  9.        var intResult { vt = int, isGlobal = true }
                initExpr: call intFunc
597.        var newWidth { vt = double, isGlobal = true }
                initExpr: call getWidth
                    lValue: lValue { varID = ct }
