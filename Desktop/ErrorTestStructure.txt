    program ErrorTest { #funcs = 42, #vars = 20 }
        funcs:
 48.        func emptyFunc { #paramVars = 0, vt = void, #stmts = 0 }
 51.        func voidFunc { #paramVars = 0, vt = void, #stmts = 1 }
                stmts:
 53.                var i { vt = int, initExpr = 0 }
 55.        func intFunc { #paramVars = 0, vt = int, #stmts = 2 }
                stmts:
 57.                var i { vt = int, initExpr = 1 }
 58.                return
                        expr: lValue { varID = i }
 60.        func dblFunc { #paramVars = 0, vt = double, #stmts = 2 }
                stmts:
 62.                var d { vt = double, initExpr = 0.0 }
 63.                return
                        expr: lValue { varID = d }
 65.        func boolFunc { #paramVars = 0, vt = boolean, #stmts = 2 }
                stmts:
 67.                var b { vt = boolean, initExpr = true }
 68.                return
                        expr: lValue { varID = b }
 70.        func strFunc { #paramVars = 0, vt = String, #stmts = 2 }
                stmts:
 72.                var s { vt = String, initExpr = "" }
 73.                return
                        expr: lValue { varID = s }
 75.        func gObjFunc { #paramVars = 0, vt = GameObj, #stmts = 1 }
                stmts:
 77.                return
                        expr: call circle { #exprs = 3, class = ct }
                            exprs:
 77.                            (0.0)
 77.                            (0.0)
 77.                            (1.0)
 79.        func intArrFuncInt { #paramVars = 1, vt = array of int, #stmts = 1 }
                paramVars:
 79.                var n { vt = int, isGlobal = false }
                stmts:
 81.                return
                        expr: newArray { vt = int }
                            lengthExpr: lValue { varID = n }
 83.        func intFuncInt { #paramVars = 1, vt = int, #stmts = 1 }
                paramVars:
 83.                var i { vt = int, isGlobal = false }
                stmts:
 85.                return
                        expr: (+) { right = 1 }
                            left: (*) { right = 2 }
                                left: lValue { varID = i }
 87.        func dblFuncIntDbl { #paramVars = 2, vt = double, #stmts = 1 }
                paramVars:
 87.                var i { vt = int, isGlobal = false }
 87.                var d { vt = double, isGlobal = false }
                stmts:
 89.                return
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
 91.        func boolFuncBoolStringGameObj { #paramVars = 3, vt = boolean, #stmts = 1 }
                paramVars:
 91.                var b { vt = boolean, isGlobal = false }
 91.                var s { vt = String, isGlobal = false }
 91.                var g { vt = GameObj, isGlobal = false }
                stmts:
 93.                return
                        expr: (&&)
                            right: lValue { varID = g, fieldID = visible }
                            left: (&&)
                                right: call equals { #exprs = 1 }
                                    lValue: lValue { varID = s }
                                    exprs:
 93.                                    ("")
                                left: lValue { varID = b }
 95.        func recursiveFunc { #paramVars = 1, vt = int, #stmts = 2 }
                paramVars:
 95.                var i { vt = int, isGlobal = false }
                stmts:
 97.                if { #stmts = 1 }
                        expr: (<=) { right = 0 }
                            left: lValue { varID = i }
                        stmts:
 98.                        return { expr = 0 }
 99.                return
                        expr: (+) { left = 1 }
                            right: call recursiveFunc { #exprs = 1 }
                                exprs:
                                    (-) { right = 1 }
                                        left: lValue { varID = i }
101.        func multiLineFuncDecl { #paramVars = 3, vt = void, #stmts = 1 }
                paramVars:
101.                var arg1 { vt = int, isGlobal = false }
102.                var arg2 { vt = double, isGlobal = false }
103.                var arg3 { vt = boolean, isGlobal = false }
                stmts:
105.                call log { #exprs = 3, class = ct }
                        exprs:
                            lValue { varID = arg1 }
                            lValue { varID = arg2 }
                            lValue { varID = arg3 }
109.        func start { #paramVars = 0, isPublic = true, vt = int, #stmts = 412 }
                stmts:
113.                var LIMIT { vt = int, isConst = true, initExpr = 100 }
115.                var i { vt = int, initExpr = 3 }
116.                assign (=)
                        lValue: lValue { varID = i }
                        expr: unaryOp (neg) { expr = 5 }
117.                assign (++)
                        lValue: lValue { varID = i }
118.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (+) { right = 1 }
                            left: lValue { varID = i }
119.                assign (+=) { expr = 1 }
                        lValue: lValue { varID = i }
120.                assign (-=) { expr = 2 }
                        lValue: lValue { varID = i }
121.                assign (*=) { expr = 3 }
                        lValue: lValue { varID = i }
122.                assign (/=) { expr = 4 }
                        lValue: lValue { varID = i }
123.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intFunc
124.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intFuncInt { #exprs = 1 }
                            exprs:
                                (-)
                                    right: (*) { left = 345 }
                                        right: lValue { varID = i }
                                    left: (-)
                                        right: parens
                                            expr: (+)
                                                right: lValue { varID = i }
                                                left: lValue { varID = i }
                                        left: lValue { varID = i }
125.                var foo { vt = int }
                        initExpr: (+) { right = 4 }
                            left: lValue { varID = i }
126.                var score { vt = int, initExpr = 500 }
127.                var j { vt = int }
127.                var k { vt = int }
128.                var exponentialNumberNoDot { vt = double, initExpr = 12e10 }
129.                var exponentialNumberWithDot { vt = double, initExpr = 3.42e2 }
130.                var expontialNumberWithDecimalPlaces { vt = double, initExpr = 6.62e-34 }
131.                var d { vt = double, initExpr = 3.14 }
132.                assign (=) { expr = 100 }
                        lValue: lValue { varID = d }
133.                assign (=) { expr = .5 }
                        lValue: lValue { varID = d }
134.                assign (=) { expr = 1.2345e6 }
                        lValue: lValue { varID = d }
135.                assign (=) { expr = 1.2345e+67 }
                        lValue: lValue { varID = d }
136.                assign (=) { expr = .12e0 }
                        lValue: lValue { varID = d }
137.                assign (=)
                        lValue: lValue { varID = d }
                        expr: unaryOp (neg) { expr = .123e-123 }
138.                assign (=)
                        lValue: lValue { varID = d }
                        expr: unaryOp (neg) { expr = .5 }
139.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/) { right = 2 }
                            left: lValue { varID = d }
140.                assign (++)
                        lValue: lValue { varID = d }
141.                assign (+=) { expr = 0.5 }
                        lValue: lValue { varID = d }
142.                assign (-=) { expr = 7 }
                        lValue: lValue { varID = d }
143.                assign (*=) { expr = 8 }
                        lValue: lValue { varID = d }
144.                assign (/=) { expr = 8.0 }
                        lValue: lValue { varID = d }
145.                var d2 { vt = double, initExpr = 3 }
146.                var d3 { vt = double }
                        initExpr: (+)
                            right: (*) { left = 2 }
                                right: parens
                                    expr: (+)
                                        right: lValue { varID = d }
                                        left: lValue { varID = d2 }
                            left: lValue { varID = d }
147.                var x1 { vt = double }
147.                var x2 { vt = double }
147.                var y1 { vt = double }
147.                var y2 { vt = double }
148.                assign (=) { expr = 1 }
                        lValue: lValue { varID = x1 }
149.                assign (=) { expr = 2.0 }
                        lValue: lValue { varID = x2 }
150.                assign (=) { expr = .5e+1 }
                        lValue: lValue { varID = y1 }
151.                assign (=)
                        lValue: lValue { varID = y2 }
                        expr: unaryOp (neg) { expr = .5e-1 }
152.                var eps { vt = double, initExpr = 1e-4 }
153.                var name { vt = String, initExpr = "Einstein" }
154.                var b { vt = boolean, initExpr = true }
155.                var b2 { vt = boolean, initExpr = false }
156.                var b3 { vt = boolean }
                        initExpr: (||)
                            right: lValue { varID = b2 }
                            left: lValue { varID = b }
157.                var s { vt = String, initExpr = "A string variable" }
158.                assign (=)
                        lValue: lValue { varID = s }
                        expr: lValue { varID = s }
159.                assign (=) { expr = null }
                        lValue: lValue { varID = s }
161.                var colors { vt = array of String }
                        initExpr: arrayInit { #exprs = 5 }
                            exprs:
161.                            ("black")
161.                            ("white")
161.                            ("red")
161.                            ("green")
161.                            ("blue")
162.                assign (=) { expr = 100 }
                        lValue: lValue { varID = i }
163.                var strArr { vt = array of String }
                        initExpr: newArray { vt = String }
                            lengthExpr: lValue { varID = i }
164.                assign (=)
                        lValue: lValue { varID = strArr }
                        expr: lValue { varID = colors }
165.                var intArr { vt = array of int }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
165.                            (1)
165.                            (2)
165.                            (3)
166.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: newArray { vt = int, lengthExpr = 100 }
167.                var intArr2 { vt = array of int }
                        initExpr: newArray { vt = int }
                            lengthExpr: call length
                                lValue: lValue { varID = s }
168.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: lValue { varID = intArr2 }
169.                var dblArr { vt = array of double }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
169.                            (1.1)
169.                            (2.2)
169.                            (3.3)
170.                var dblArr2 { vt = array of double }
                        initExpr: newArray { vt = double, lengthExpr = 100 }
171.                assign (=)
                        lValue: lValue { varID = dblArr }
                        expr: lValue { varID = dblArr2 }
172.                var gObjArr { vt = array of GameObj }
                        initExpr: newArray { vt = GameObj }
                            lengthExpr: (*) { right = 2 }
                                left: lValue { varID = i }
174.                call voidFunc
175.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intFunc
176.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call dblFunc
177.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call boolFunc
178.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call strFunc
179.                var gObj { vt = GameObj }
                        initExpr: call gObjFunc
180.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: call intArrFuncInt { #exprs = 1 }
                            exprs:
                                lValue { varID = i }
181.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intFuncInt { #exprs = 1 }
                            exprs:
                                lValue { varID = i }
182.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call dblFuncIntDbl { #exprs = 2 }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = d }
183.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call boolFuncBoolStringGameObj { #exprs = 3 }
                            exprs:
                                lValue { varID = b }
                                lValue { varID = s }
                                lValue { varID = gObj }
184.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call recursiveFunc { #exprs = 1 }
                            exprs:
184.                            (2)
186.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (/) { right = 1, left = 5 }
187.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (/) { right = 20, left = 100 }
188.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (+)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
189.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (-)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
190.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (*)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
191.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (%)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
192.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (-)
                            right: lValue { varID = i }
                            left: (+)
                                right: lValue { varID = i }
                                left: (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
193.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (*)
                            right: parens
                                expr: (-)
                                    right: lValue { varID = i }
                                    left: parens
                                        expr: (+)
                                            right: lValue { varID = i }
                                            left: lValue { varID = i }
                            left: lValue { varID = i }
194.                assign (=)
                        lValue: lValue { varID = d }
                        expr: lValue { varID = i }
195.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
196.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
197.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
198.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
199.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (%)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
200.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
201.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
202.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
203.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
204.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (%)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
205.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
206.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
207.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
208.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (/)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
209.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (%)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
210.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (+)
                            right: (*)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
                            left: (-)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
211.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: lValue { varID = i }
                            left: (+)
                                right: (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
                                left: lValue { varID = d }
212.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (-)
                            right: (*)
                                right: lValue { varID = d }
                                left: lValue { varID = d }
                            left: (*)
                                right: lValue { varID = i }
                                left: lValue { varID = i }
213.                assign (=)
                        lValue: lValue { varID = d }
                        expr: parens
                            expr: (-)
                                right: (*)
                                    right: lValue { varID = d }
                                    left: lValue { varID = d }
                                left: (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = i }
214.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = s }
215.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+) { right = "s" }
                            left: (+)
                                right: lValue { varID = s }
                                left: lValue { varID = s }
216.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = i }
                            left: lValue { varID = s }
217.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = d }
                            left: lValue { varID = s }
218.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = b }
                            left: lValue { varID = s }
219.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = gObj }
                            left: lValue { varID = s }
220.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = i }
221.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = d }
222.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = b }
223.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+)
                            right: lValue { varID = s }
                            left: lValue { varID = gObj }
224.                assign (=)
                        lValue: lValue { varID = b }
                        expr: lValue { varID = b }
225.                assign (=)
                        lValue: lValue { varID = b }
                        expr: unaryOp (not)
                            expr: lValue { varID = b }
226.                assign (=)
                        lValue: lValue { varID = b }
                        expr: parens
                            expr: lValue { varID = b }
227.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
228.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
229.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
230.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
231.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
232.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==)
                            right: lValue { varID = gObj }
                            left: lValue { varID = gObj }
233.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
234.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
235.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
236.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
237.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
238.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (!=)
                            right: lValue { varID = gObj }
                            left: lValue { varID = gObj }
239.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
240.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
241.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
242.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
243.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
244.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
245.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
246.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = d }
                            left: lValue { varID = i }
247.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
248.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
249.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
250.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = i }
                            left: lValue { varID = d }
251.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
252.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
253.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
254.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=)
                            right: lValue { varID = d }
                            left: lValue { varID = d }
255.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (||)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
256.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (&&)
                            right: lValue { varID = b }
                            left: lValue { varID = b }
257.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<) { right = 2, left = 1 }
258.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (<=) { right = 2, left = 1.1 }
259.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>) { right = 2, left = 1 }
260.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (>=) { right = 2.2, left = 1 }
261.                assign (=)
                        lValue: lValue { varID = b2 }
                        expr: (||)
                            right: (&&)
                                right: (==)
                                    right: lValue { varID = b }
                                    left: lValue { varID = b }
                                left: lValue { varID = b3 }
                            left: lValue { varID = b2 }
262.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (==) { right = 0 }
                            left: (%) { right = 2 }
                                left: lValue { varID = i }
263.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (&&)
                            right: lValue { varID = b }
                            left: parens
                                expr: (||)
                                    right: lValue { varID = b }
                                    left: lValue { varID = b }
264.                assign (=)
                        lValue: lValue { varID = b }
                        expr: (&&)
                            right: parens
                                expr: (<) { right = 0.0001 }
                                    left: (-) { right = 3.14159 }
                                        left: staticField { fieldID = PI, class = Math }
                            left: parens
                                expr: (==) { right = 2 }
                                    left: (+) { right = 1, left = 1 }
266.                if { #elseStmts = 1, #stmts = 1 }
                        expr: (==) { right = 0 }
                            left: lValue { varID = i }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 1 }
                                expr: (<=) { right = 10 }
                                    left: lValue { varID = i }
                                elseStmts:
271.                                assign (*=) { expr = 5 }
                                        lValue: lValue { varID = i }
                                stmts:
269.                                assign (++)
                                        lValue: lValue { varID = i }
                        stmts:
267.                        call setBackColor { #exprs = 1, class = ct }
                                exprs:
                                    lValue { varID = colors }
                                        indexExpr: lValue { varID = i }
273.                if { #elseStmts = 1, #stmts = 2 }
                        expr: (>) { right = 0 }
                            left: lValue { varID = i }
                        elseStmts:
                            if { #elseStmts = 1, #stmts = 2 }
                                expr: (<=) { right = 10 }
                                    left: lValue { varID = i }
                                elseStmts:
                                    if { #elseStmts = 2, #stmts = 1 }
                                        expr: lValue { varID = b }
                                        elseStmts:
287.                                        var tempStr { vt = String, initExpr = "I'll be " }
288.                                        assign (=)
                                                lValue: lValue { varID = tempStr }
                                                expr: (+) { right = "out of scope soon" }
                                                    left: lValue { varID = tempStr }
                                        stmts:
284.                                        assign (++)
                                                lValue: lValue { varID = i }
                                stmts:
280.                                assign (=) { expr = 7 }
                                        lValue: lValue { varID = d }
281.                                call setSoundVolume { #exprs = 1, class = ct }
                                        exprs:
281.                                        (1)
                        stmts:
275.                        assign (=) { expr = 0 }
                                lValue: lValue { varID = j }
276.                        assign (=) { expr = 0 }
                                lValue: lValue { varID = k }
290.                if { #stmts = 1 }
                        expr: (&&)
                            right: (<=)
                                right: lValue { varID = eps }
                                left: call distance { #exprs = 4, class = ct }
                                    exprs:
                                        lValue { varID = x1 }
                                        lValue { varID = y1 }
                                        lValue { varID = x2 }
                                        lValue { varID = y2 }
                            left: call isError { #exprs = 1, class = ct }
                                exprs:
                                    call tan { #exprs = 1, class = Math }
                                        exprs:
                                            lValue { varID = d }
                        stmts:
291.                        call println { #exprs = 1, class = ct }
                                exprs:
291.                                ("oops")
293.                for { expr = false, #stmts = 1 }
                        stmts:
294.                        for { #stmts = 1 }
                                stmts:
295.                                for { #stmts = 1 }
295.                                    initStmt: assign (=) { expr = 0 }
                                            lValue: lValue { varID = i }
                                        stmts:
296.                                        for { #stmts = 1 }
                                                expr: (<) { right = 10 }
                                                    left: lValue { varID = i }
                                                stmts:
297.                                                for { #stmts = 1 }
297.                                                    nextStmt: assign (++)
                                                            lValue: lValue { varID = i }
                                                        stmts:
298.                                                        for { #stmts = 1 }
                                                                expr: lValue { varID = b }
                                                                stmts:
299.                                                                assign (=) { expr = 0 }
                                                                        lValue: lValue { varID = d }
300.                for { #stmts = 2 }
300.                    initStmt: var ii { vt = int, isGlobal = false, initExpr = 0 }
                        expr: (<) { right = 10 }
                            left: lValue { varID = ii }
300.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
302.                        for { #stmts = 1 }
302.                            initStmt: var jj { vt = int, isGlobal = false, initExpr = 0 }
                                expr: (!=) { right = 10 }
                                    left: lValue { varID = jj }
302.                            nextStmt: assign (+=) { expr = 1 }
                                    lValue: lValue { varID = jj }
                                stmts:
303.                                if { #stmts = 1 }
                                        expr: (||)
                                            right: (==) { right = 0 }
                                                left: lValue { varID = jj }
                                            left: (==) { right = 0 }
                                                left: lValue { varID = ii }
                                        stmts:
304.                                        break
305.                        break
307.                for { #stmts = 2 }
307.                    initStmt: var ii { vt = int, isGlobal = false, initExpr = 0 }
                        expr: (<) { right = 10 }
                            left: lValue { varID = ii }
307.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
309.                        for { #stmts = 2 }
309.                            initStmt: var jj { vt = int, isGlobal = false, initExpr = 0 }
                                expr: (!=) { right = 10 }
                                    left: lValue { varID = jj }
309.                            nextStmt: assign (+=) { expr = 1 }
                                    lValue: lValue { varID = jj }
                                stmts:
311.                                if { #stmts = 2 }
                                        expr: (&&)
                                            right: (==) { right = 0 }
                                                left: lValue { varID = jj }
                                            left: (==) { right = 0 }
                                                left: lValue { varID = ii }
                                        stmts:
313.                                        assign (=) { expr = 0 }
                                                lValue: lValue { varID = intArr }
                                                    indexExpr: lValue { varID = ii }
314.                                        break
316.                                break
318.                        break
320.                var xVar { vt = double, initExpr = 0 }
321.                var yVar { vt = double, initExpr = 1 }
322.                for { #stmts = 1 }
322.                    initStmt: var dx { vt = double, isGlobal = false, initExpr = .1 }
                        expr: (<) { right = 1 }
                            left: lValue { varID = xVar }
322.                    nextStmt: assign (+=)
                            lValue: lValue { varID = xVar }
                            expr: lValue { varID = dx }
                        stmts:
323.                        for { #stmts = 1 }
323.                            initStmt: var dy { vt = double, isGlobal = false }
                                    initExpr: unaryOp (neg) { expr = .5 }
                                expr: (>) { right = 0 }
                                    left: lValue { varID = yVar }
323.                            nextStmt: assign (+=)
                                    lValue: lValue { varID = yVar }
                                    expr: lValue { varID = dy }
                                stmts:
324.                                assign (=)
                                        lValue: lValue { varID = d }
                                        expr: (-)
                                            right: (/)
                                                right: lValue { varID = dy }
                                                left: lValue { varID = yVar }
                                            left: (+)
                                                right: lValue { varID = dx }
                                                left: lValue { varID = xVar }
325.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: newArray { vt = int, lengthExpr = 1 }
326.                forArray { #stmts = 1 }
326.                    var: var a { vt = int, isGlobal = false }
                        expr: lValue { varID = intArr }
                        stmts:
327.                        assign (=) { expr = 0 }
                                lValue: lValue { varID = a }
329.                while { #stmts = 1 }
                        expr: lValue { varID = b }
                        stmts:
330.                        assign (=) { expr = false }
                                lValue: lValue { varID = b }
331.                while { #stmts = 3 }
                        expr: lValue { varID = b }
                        stmts:
333.                        call voidFunc
334.                        assign (++)
                                lValue: lValue { varID = i }
335.                        assign (=) { expr = false }
                                lValue: lValue { varID = b }
337.                doWhile { #stmts = 1 }
                        expr: lValue { varID = b }
                        stmts:
338.                        assign (=) { expr = false }
                                lValue: lValue { varID = b }
340.                doWhile { #stmts = 1 }
                        expr: lValue { varID = b }
                        stmts:
342.                        assign (=) { expr = false }
                                lValue: lValue { varID = b }
346.                call print { #exprs = 1, class = ct }
                        exprs:
346.                        ("Hello world")
347.                call print { #exprs = 1, class = ct }
                        exprs:
                            (+) { right = "world" }
                                left: (+) { right = " ", left = "Hello" }
348.                call print { #exprs = 1, class = ct }
                        exprs:
348.                        ("Hello world\n")
349.                call print { #exprs = 1, class = ct }
                        exprs:
                            lValue { varID = i }
350.                call print { #exprs = 1, class = ct }
                        exprs:
                            lValue { varID = d }
351.                call print { #exprs = 1, class = ct }
                        exprs:
                            lValue { varID = b }
352.                call print { #exprs = 1, class = ct }
                        exprs:
                            (+) { left = "i = " }
                                right: lValue { varID = i }
353.                call print { #exprs = 1, class = ct }
                        exprs:
                            (+) { left = "d = " }
                                right: lValue { varID = d }
354.                call print { #exprs = 1, class = ct }
                        exprs:
                            lValue { varID = name }
355.                call print { #exprs = 1, class = ct }
                        exprs:
                            (+)
                                right: lValue { varID = name }
                                left: (+) { right = " ", left = "Hello" }
356.                var circleObj { vt = GameObj }
                        initExpr: call circle { #exprs = 3, class = ct }
                            exprs:
356.                            (50)
356.                            (50)
356.                            (20)
357.                call print { #exprs = 1, class = ct }
                        exprs:
                            lValue { varID = circleObj }
358.                call println { #exprs = 1, class = ct }
                        exprs:
358.                        ("Hello world")
359.                call println { #exprs = 1, class = ct }
                        exprs:
                            (+) { right = "world" }
                                left: (+) { right = " ", left = "Hello" }
360.                call println { #exprs = 1, class = ct }
                        exprs:
360.                        ("Hello world\n")
361.                call println { #exprs = 1, class = ct }
                        exprs:
                            lValue { varID = i }
362.                call println { #exprs = 1, class = ct }
                        exprs:
                            lValue { varID = d }
363.                call println { #exprs = 1, class = ct }
                        exprs:
                            lValue { varID = b }
364.                call println { #exprs = 1, class = ct }
                        exprs:
                            (+) { left = "i = " }
                                right: lValue { varID = i }
365.                call println { #exprs = 1, class = ct }
                        exprs:
                            (+) { left = "d = " }
                                right: lValue { varID = d }
366.                call println { #exprs = 1, class = ct }
                        exprs:
                            lValue { varID = name }
367.                call println { #exprs = 1, class = ct }
                        exprs:
                            (+)
                                right: lValue { varID = name }
                                left: (+) { right = " ", left = "Hello" }
368.                call println { #exprs = 1, class = ct }
                        exprs:
                            lValue { varID = circleObj }
369.                call log { #exprs = 1, class = ct }
                        exprs:
                            lValue { varID = i }
370.                call log { #exprs = 1, class = ct }
                        exprs:
                            lValue { varID = d }
371.                call log { #exprs = 1, class = ct }
                        exprs:
                            lValue { varID = b }
372.                call log { #exprs = 1, class = ct }
                        exprs:
                            lValue { varID = circleObj }
373.                var obj2 { vt = GameObj }
                        initExpr: lValue { varID = circleObj }
374.                var obj3 { vt = GameObj }
                        initExpr: lValue { varID = obj2 }
375.                call log { #exprs = 9, class = ct }
                        exprs:
375.                        ("circleObj = ")
                            lValue { varID = circleObj }
375.                        ("obj2 = ")
                            lValue { varID = obj2 }
375.                        ("obj3=")
                            lValue { varID = obj3 }
375.                        (3.14)
                            staticField { fieldID = PI, class = Math }
375.                        (42)
376.                call logm { #exprs = 2, class = ct }
                        exprs:
376.                        ("message")
376.                        (null)
377.                call logm { #exprs = 3, class = ct }
                        exprs:
377.                        ("message")
                            lValue { varID = obj2 }
                            lValue { varID = obj3 }
378.                call setOutputFile { #exprs = 1, class = ct }
                        exprs:
378.                        ("output.txt")
379.                call setOutputFile { #exprs = 1, class = ct }
                        exprs:
379.                        ("output/nameList.txt")
380.                var outputFilename { vt = String, initExpr = "output.txt" }
381.                call setOutputFile { #exprs = 1, class = ct }
                        exprs:
                            lValue { varID = outputFilename }
383.                call showAlert { #exprs = 1, class = ct }
                        exprs:
383.                        ("alert meassage")
384.                var message { vt = String, initExpr = "alert!" }
385.                call showAlert { #exprs = 1, class = ct }
                        exprs:
                            lValue { varID = message }
386.                var n { vt = int }
                        initExpr: call inputInt { #exprs = 1, class = ct }
                            exprs:
386.                            ("enter a number: ")
387.                assign (=)
                        lValue: lValue { varID = n }
                        expr: call inputInt { #exprs = 1, class = ct }
                            exprs:
387.                            ("enter a number: ")
388.                assign (=)
                        lValue: lValue { varID = n }
                        expr: call inputInt { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = message }
389.                var x { vt = double }
                        initExpr: call inputNumber { #exprs = 1, class = ct }
                            exprs:
389.                            ("enter a number: ")
390.                assign (=)
                        lValue: lValue { varID = x }
                        expr: call inputNumber { #exprs = 1, class = ct }
                            exprs:
390.                            ("enter a number: ")
391.                assign (=)
                        lValue: lValue { varID = x }
                        expr: call inputNumber { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = message }
392.                var quit { vt = boolean }
                        initExpr: call inputYesNo { #exprs = 1, class = ct }
                            exprs:
392.                            ("Quit?")
393.                assign (=)
                        lValue: lValue { varID = quit }
                        expr: call inputYesNo { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = message }
394.                var inputStr { vt = String }
                        initExpr: call inputString { #exprs = 1, class = ct }
                            exprs:
394.                            ("Quit?")
395.                assign (=)
                        lValue: lValue { varID = inputStr }
                        expr: call inputString { #exprs = 1, class = ct }
                            exprs:
395.                            ("Quit?")
396.                assign (=)
                        lValue: lValue { varID = inputStr }
                        expr: call inputString { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = message }
398.                call setTitle { #exprs = 1, class = ct }
                        exprs:
398.                        ("Title")
399.                var title { vt = String, initExpr = "Title" }
400.                call setTitle { #exprs = 1, class = ct }
                        exprs:
                            lValue { varID = title }
401.                call setTitle { #exprs = 1, class = ct }
                        exprs:
                            (+)
                                right: lValue { varID = i }
                                left: (+) { right = " " }
                                    left: lValue { varID = title }
402.                call setTitle { #exprs = 1, class = ct }
                        exprs:
                            (+)
                                right: lValue { varID = d }
                                left: lValue { varID = title }
403.                call setHeight { #exprs = 1, class = ct }
                        exprs:
                            (/) { right = 16 }
                                left: (*) { right = 9, left = 100.0 }
404.                call setHeight { #exprs = 1, class = ct }
                        exprs:
                            lValue { varID = i }
405.                call setHeight { #exprs = 1, class = ct }
                        exprs:
                            lValue { varID = d }
406.                call setHeight { #exprs = 1, class = ct }
                        exprs:
                            (+)
                                right: (*) { right = 4, left = 5 }
                                left: (*)
                                    right: lValue { varID = d }
                                    left: lValue { varID = i }
407.                var height { vt = double }
                        initExpr: call getHeight { class = ct }
408.                assign (=)
                        lValue: lValue { varID = height }
                        expr: call getHeight { class = ct }
409.                var width { vt = double }
                        initExpr: (-) { right = 10 }
                            left: (*) { right = 0.5 }
                                left: call getWidth { class = ct }
410.                assign (=)
                        lValue: lValue { varID = width }
                        expr: call getWidth { class = ct }
411.                var pxPerUnit { vt = double }
                        initExpr: call getPixelsPerUnit { class = ct }
412.                assign (=)
                        lValue: lValue { varID = pxPerUnit }
                        expr: call getPixelsPerUnit { class = ct }
413.                var pixelWidth { vt = int }
                        initExpr: call round { #exprs = 1, class = ct }
                            exprs:
                                (*)
                                    right: call getPixelsPerUnit { class = ct }
                                    left: call getWidth { class = ct }
414.                var pixelHeight { vt = int }
                        initExpr: call round { #exprs = 1, class = ct }
                            exprs:
                                (*)
                                    right: call getPixelsPerUnit { class = ct }
                                    left: call getHeight { class = ct }
415.                var currentScreen { vt = String }
                        initExpr: call getScreen { class = ct }
416.                assign (=)
                        lValue: lValue { varID = currentScreen }
                        expr: call getScreen { class = ct }
417.                call clearScreen { class = ct }
418.                call clearGroup { #exprs = 1, class = ct }
                        exprs:
418.                        ("targets")
419.                call clearGroup { #exprs = 1, class = ct }
                        exprs:
419.                        ("")
420.                call setBackColor { #exprs = 1, class = ct }
                        exprs:
420.                        ("orange")
421.                call setBackColor { #exprs = 1, class = ct }
                        exprs:
421.                        ("light blue")
422.                var backColor { vt = String, initExpr = "red" }
423.                call setBackColor { #exprs = 1, class = ct }
                        exprs:
                            lValue { varID = backColor }
424.                call setBackColorRGB { #exprs = 3, class = ct }
                        exprs:
424.                        (255)
424.                        (0)
424.                        (0)
425.                call setBackColorRGB { #exprs = 3, class = ct }
                        exprs:
                            lValue { varID = i }
                            lValue { varID = i }
                            lValue { varID = i }
426.                call setBackImage { #exprs = 1, class = ct }
                        exprs:
426.                        ("background.png")
427.                call setBackImage { #exprs = 1, class = ct }
                        exprs:
427.                        ("C:\\Users\\ben\\Pictures\\landscape.jpg")
428.                var filename { vt = String, initExpr = "landscape.png" }
429.                call setBackImage { #exprs = 1, class = ct }
                        exprs:
                            lValue { varID = filename }
431.                assign (=) { expr = 50 }
                        lValue: lValue { varID = x }
432.                var y { vt = double, initExpr = 50 }
433.                var diameter { vt = double, initExpr = 10 }
434.                var circle { vt = GameObj }
                        initExpr: call circle { #exprs = 3, class = ct }
                            exprs:
434.                            (50)
434.                            (20)
434.                            (10)
435.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call circle { #exprs = 3, class = ct }
                            exprs:
435.                            (50.0)
435.                            (20.0)
435.                            (10.0)
436.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call circle { #exprs = 4, class = ct }
                            exprs:
436.                            (50)
436.                            (20)
436.                            (10.5)
436.                            ("blue")
437.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call circle { #exprs = 3, class = ct }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = diameter }
438.                var color { vt = String, initExpr = "green" }
439.                assign (=)
                        lValue: lValue { varID = circle }
                        expr: call circle { #exprs = 4, class = ct }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = diameter }
                                lValue { varID = color }
440.                var rect { vt = GameObj }
                        initExpr: call rect { #exprs = 4, class = ct }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = width }
                                lValue { varID = height }
441.                assign (=)
                        lValue: lValue { varID = rect }
                        expr: call rect { #exprs = 5, class = ct }
                            exprs:
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = width }
                                lValue { varID = height }
                                lValue { varID = color }
442.                assign (=)
                        lValue: lValue { varID = rect }
                        expr: call rect { #exprs = 4, class = ct }
                            exprs:
442.                            (50.0)
442.                            (33.3)
442.                            (11.2)
442.                            (23.890)
443.                assign (=)
                        lValue: lValue { varID = rect }
                        expr: call rect { #exprs = 5, class = ct }
                            exprs:
443.                            (50)
443.                            (33)
443.                            (11)
443.                            (23)
443.                            ("green")
444.                var line { vt = GameObj }
                        initExpr: call line { #exprs = 4, class = ct }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = d }
                                lValue { varID = width }
                                lValue { varID = height }
445.                assign (=)
                        lValue: lValue { varID = line }
                        expr: call line { #exprs = 5, class = ct }
                            exprs:
                                lValue { varID = x1 }
                                lValue { varID = y1 }
                                lValue { varID = x2 }
                                lValue { varID = y2 }
                                lValue { varID = color }
446.                assign (=)
                        lValue: lValue { varID = line }
                        expr: call line { #exprs = 4, class = ct }
                            exprs:
446.                            (0.0)
446.                            (.0)
446.                            (100.0)
446.                            (95.0)
447.                assign (=)
                        lValue: lValue { varID = line }
                        expr: call line { #exprs = 5, class = ct }
                            exprs:
447.                            (0)
447.                            (0)
447.                            (100)
447.                            (95)
447.                            ("red")
448.                var text { vt = GameObj }
                        initExpr: call text { #exprs = 4, class = ct }
                            exprs:
                                lValue { varID = s }
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = height }
449.                assign (=)
                        lValue: lValue { varID = text }
                        expr: call text { #exprs = 5, class = ct }
                            exprs:
                                lValue { varID = s }
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = height }
                                lValue { varID = color }
450.                assign (=)
                        lValue: lValue { varID = text }
                        expr: call text { #exprs = 4, class = ct }
                            exprs:
                                (+) { left = "Score: " }
                                    right: lValue { varID = score }
450.                            (20.0)
450.                            (90.0)
450.                            (10.0)
451.                assign (=)
                        lValue: lValue { varID = text }
                        expr: call text { #exprs = 5, class = ct }
                            exprs:
                                (+) { left = "Score: " }
                                    right: lValue { varID = score }
451.                            (20)
451.                            (90)
451.                            (10)
451.                            ("purple")
452.                var img { vt = GameObj }
                        initExpr: call image { #exprs = 4, class = ct }
                            exprs:
                                lValue { varID = filename }
                                lValue { varID = x }
                                lValue { varID = y }
                                lValue { varID = width }
453.                assign (=)
                        lValue: lValue { varID = img }
                        expr: call image { #exprs = 4, class = ct }
                            exprs:
453.                            ("car.png")
453.                            (42)
453.                            (25)
453.                            (38.7)
454.                assign (=)
                        lValue: lValue { varID = img }
                        expr: call image { #exprs = 4, class = ct }
                            exprs:
454.                            ("C:\\Users\\john\\Pictures\\car.jpg")
454.                            (42)
454.                            (25)
454.                            (38)
455.                var objs { vt = array of GameObj }
                        initExpr: arrayInit { #exprs = 5 }
                            exprs:
                                lValue { varID = circle }
                                lValue { varID = rect }
                                lValue { varID = line }
                                lValue { varID = text }
                                lValue { varID = img }
456.                assign (=)
                        lValue: lValue { varID = img }
                        expr: lValue { varID = rect }
458.                var mouseClicked { vt = boolean }
                        initExpr: call clicked { class = ct }
459.                if { #stmts = 1 }
                        expr: call clicked { class = ct }
                        stmts:
460.                        assign (=)
                                lValue: lValue { varID = mouseClicked }
                                expr: call clicked { class = ct }
461.                if { #stmts = 1 }
                        expr: (>) { right = 50 }
                            left: call clickX { class = ct }
                        stmts:
462.                        assign (=)
                                lValue: lValue { varID = x }
                                expr: call clickX { class = ct }
463.                assign (=)
                        lValue: lValue { varID = x }
                        expr: call clickX { class = ct }
464.                if { #stmts = 1 }
                        expr: (<=)
                            right: lValue { varID = x }
                            left: call clickY { class = ct }
                        stmts:
465.                        assign (=)
                                lValue: lValue { varID = y }
                                expr: call clickY { class = ct }
466.                assign (=)
                        lValue: lValue { varID = y }
                        expr: call clickY { class = ct }
467.                var keyName { vt = String, initExpr = "space" }
468.                var keyPressed { vt = boolean }
                        initExpr: call keyPressed { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = keyName }
469.                if { #stmts = 1 }
                        expr: call keyPressed { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = keyName }
                        stmts:
470.                        if { #stmts = 1 }
                                expr: call keyPressed { #exprs = 1, class = ct }
                                    exprs:
470.                                    ("up")
                                stmts:
471.                                assign (=)
                                        lValue: lValue { varID = keyPressed }
                                        expr: call keyPressed { #exprs = 1, class = ct }
                                            exprs:
471.                                            ("up")
472.                if { #stmts = 1 }
                        expr: call charTyped { #exprs = 1, class = ct }
                            exprs:
472.                            ("+")
                        stmts:
473.                        assign (++)
                                lValue: lValue { varID = x }
474.                var ch { vt = String, initExpr = "+" }
475.                if { #stmts = 1 }
                        expr: call charTyped { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = ch }
                        stmts:
476.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: call charTyped { #exprs = 1, class = ct }
                                    exprs:
476.                                    ("+")
477.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call charTyped { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = ch }
479.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call loadSound { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = filename }
480.                call loadSound { #exprs = 1, class = ct }
                        exprs:
480.                        ("pow.wav")
481.                if { #stmts = 1 }
                        expr: call loadSound { #exprs = 1, class = ct }
                            exprs:
481.                            ("sounds/ding.mp3")
                        stmts:
482.                        call sound { #exprs = 1, class = ct }
                                exprs:
482.                                ("sounds/ding.mp3")
483.                call sound { #exprs = 1, class = ct }
                        exprs:
                            lValue { varID = filename }
484.                call setSoundVolume { #exprs = 1, class = ct }
                        exprs:
                            lValue { varID = d }
485.                call setSoundVolume { #exprs = 1, class = ct }
                        exprs:
485.                        (1)
486.                call setSoundVolume { #exprs = 1, class = ct }
                        exprs:
486.                        (0.5)
488.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call random { #exprs = 2, class = ct }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
489.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call random { #exprs = 2, class = ct }
                            exprs:
489.                            (0)
489.                            (100)
490.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call round { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = d }
491.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call round { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = i }
492.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call round { #exprs = 1, class = ct }
                            exprs:
492.                            (1.62)
493.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call round { #exprs = 1, class = ct }
                            exprs:
                                (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = d }
494.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call round { #exprs = 1, class = ct }
                            exprs:
                                (+) { left = 1 }
                                    right: (*)
                                        right: lValue { varID = i }
                                        left: lValue { varID = d }
495.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call round { #exprs = 1, class = ct }
                            exprs:
                                call distance { #exprs = 4, class = ct }
                                    exprs:
                                        lValue { varID = x1 }
                                        lValue { varID = y1 }
                                        lValue { varID = x2 }
                                        lValue { varID = y2 }
496.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call roundDecimal { #exprs = 2, class = ct }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = i }
497.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call roundDecimal { #exprs = 2, class = ct }
                            exprs:
                                (+) { right = 1 }
                                    left: (*)
                                        right: lValue { varID = i }
                                        left: lValue { varID = d }
                                (*) { right = 2 }
                                    left: lValue { varID = i }
498.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call roundDecimal { #exprs = 2, class = ct }
                            exprs:
498.                            (2.71828182846)
498.                            (2)
499.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call roundDecimal { #exprs = 2, class = ct }
                            exprs:
                                call distance { #exprs = 4, class = ct }
                                    exprs:
                                        lValue { varID = x1 }
                                        lValue { varID = y1 }
                                        lValue { varID = x2 }
                                        lValue { varID = y2 }
499.                            (1)
500.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intDiv { #exprs = 2, class = ct }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
501.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call intDiv { #exprs = 2, class = ct }
                            exprs:
501.                            (5)
501.                            (2)
502.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call isError { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = d }
503.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call isError { #exprs = 1, class = ct }
                            exprs:
                                (/)
                                    right: lValue { varID = d }
                                    left: lValue { varID = d }
504.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call isError { #exprs = 1, class = ct }
                            exprs:
                                (/)
                                    right: lValue { varID = i }
                                    left: lValue { varID = d }
505.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call isError { #exprs = 1, class = ct }
                            exprs:
                                (/) { right = 0, left = 0.0 }
506.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call distance { #exprs = 4, class = ct }
                            exprs:
                                lValue { varID = circle, fieldID = x }
                                lValue { varID = circle, fieldID = y }
                                lValue { varID = rect, fieldID = x }
                                lValue { varID = rect, fieldID = y }
507.                if { #stmts = 1 }
                        expr: (<)
                            right: (/) { right = 2 }
                                left: parens
                                    expr: (+)
                                        right: lValue { varID = rect, fieldID = width }
                                        left: lValue { varID = circle, fieldID = width }
                            left: call distance { #exprs = 4, class = ct }
                                exprs:
                                    lValue { varID = circle, fieldID = x }
                                    lValue { varID = circle, fieldID = y }
                                    lValue { varID = rect, fieldID = x }
                                    lValue { varID = rect, fieldID = y }
                        stmts:
508.                        assign (=)
                                lValue: lValue { varID = i }
                                expr: call getTimer { class = ct }
509.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (-)
                            right: lValue { varID = i }
                            left: call getTimer { class = ct }
510.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call getVersion { class = ct }
511.                call round { #exprs = 1, class = ct }
                        exprs:
                            call getVersion { class = ct }
513.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = d }
514.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1, class = ct }
                            exprs:
                                (*)
                                    right: lValue { varID = i }
                                    left: lValue { varID = d }
515.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1, class = ct }
                            exprs:
515.                            (.707)
516.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1, class = ct }
                            exprs:
                                staticField { fieldID = PI, class = Math }
517.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call toInt { #exprs = 1, class = ct }
                            exprs:
517.                            (6.0221409e+2)
518.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call parseInt { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = s }
519.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call parseInt { #exprs = 1, class = ct }
                            exprs:
519.                            ("345")
520.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call canParseInt { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = s }
521.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call canParseInt { #exprs = 1, class = ct }
                            exprs:
521.                            ("12345")
522.                while { #stmts = 1 }
                        expr: call canParseInt { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = s }
                        stmts:
523.                        assign (=)
                                lValue: lValue { varID = d }
                                expr: call parseNumber { #exprs = 1, class = ct }
                                    exprs:
                                        lValue { varID = s }
524.                assign (=)
                        lValue: lValue { varID = d }
                        expr: (*) { right = 100 }
                            left: call parseNumber { #exprs = 1, class = ct }
                                exprs:
524.                                ("123.45")
525.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call canParseNumber { #exprs = 1, class = ct }
                            exprs:
525.                            ("543.210")
526.                while { #stmts = 1 }
                        expr: call canParseNumber { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = s }
                        stmts:
527.                        assign (=)
                                lValue: lValue { varID = s }
                                expr: call formatDecimal { #exprs = 1, class = ct }
                                    exprs:
                                        lValue { varID = d }
528.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call formatDecimal { #exprs = 2, class = ct }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = i }
529.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call formatDecimal { #exprs = 2, class = ct }
                            exprs:
                                lValue { varID = d }
                                call intDiv { #exprs = 2, class = ct }
                                    exprs:
                                        (*) { left = 2 }
                                            right: lValue { varID = i }
                                        lValue { varID = i }
530.                assign (=)
                        lValue: lValue { varID = s }
                        expr: (+) { right = ":00" }
                            left: call formatDecimal { #exprs = 2, class = ct }
                                exprs:
530.                                (6.0221)
530.                                (7)
531.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call formatInt { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = i }
532.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call formatInt { #exprs = 2, class = ct }
                            exprs:
                                (+) { right = 1 }
                                    left: lValue { varID = i }
                                (+)
                                    right: lValue { varID = k }
                                    left: lValue { varID = j }
534.                assign (=)
                        lValue: lValue { varID = rect, fieldID = x }
                        expr: (-) { right = 10 }
                            left: lValue { varID = circle, fieldID = y }
535.                assign (=)
                        lValue: lValue { varID = circle, fieldID = width }
                        expr: (*) { right = 1.5 }
                            left: lValue { varID = circle, fieldID = height }
536.                assign (=)
                        lValue: lValue { varID = rect, fieldID = height }
                        expr: (*) { right = 1.1 }
                            left: lValue { varID = img, fieldID = height }
537.                assign (=)
                        lValue: lValue { varID = line, fieldID = x }
                        expr: (+)
                            right: lValue { varID = line, fieldID = width }
                            left: lValue { varID = line, fieldID = x }
538.                assign (=)
                        lValue: lValue { varID = img, fieldID = width }
                        expr: (*) { right = .9 }
                            left: lValue { varID = img, fieldID = width }
539.                assign (=) { expr = 0 }
                        lValue: lValue { varID = img, fieldID = xSpeed }
540.                assign (=) { expr = .5 }
                        lValue: lValue { varID = img, fieldID = ySpeed }
541.                assign (=) { expr = 3 }
                        lValue: lValue { varID = line, fieldID = lineWidth }
542.                assign (=)
                        lValue: lValue { varID = img, fieldID = lineWidth }
                        expr: (*) { right = 2 }
                            left: lValue { varID = line, fieldID = lineWidth }
543.                assign (=) { expr = false }
                        lValue: lValue { varID = rect, fieldID = visible }
544.                assign (=)
                        lValue: lValue { varID = circle, fieldID = clickable }
                        expr: lValue { varID = circle, fieldID = visible }
545.                if { #stmts = 1 }
                        expr: lValue { varID = img, fieldID = visible }
                        stmts:
546.                        assign (=) { expr = true }
                                lValue: lValue { varID = img, fieldID = clickable }
547.                if { #stmts = 1 }
                        expr: (!=) { right = false }
                            left: lValue { varID = img, fieldID = clickable }
                        stmts:
548.                        assign (=)
                                lValue: lValue { varID = img, fieldID = autoDelete }
                                expr: lValue { varID = img, fieldID = visible }
549.                assign (=)
                        lValue: lValue { varID = line, fieldID = group }
                        expr: lValue { varID = s }
550.                assign (=)
                        lValue: lValue { varID = line, fieldID = autoDelete }
                        expr: (||)
                            right: (&&)
                                right: (==) { right = 1 }
                                    left: call indexOf { #exprs = 1 }
                                        lValue: lValue { varID = s }
                                        exprs:
                                            lValue { varID = line, fieldID = group }
                                left: call equals { #exprs = 1 }
                                    lValue: lValue { varID = s }
                                    exprs:
550.                                    ("world")
                            left: call equals { #exprs = 1 }
                                lValue: lValue { varID = s }
                                exprs:
550.                                ("hello")
552.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call getType
                            lValue: lValue { varID = rect }
553.                call println { #exprs = 1, class = ct }
                        exprs:
                            (+) { right = "more text" }
                                left: call getText
                                    lValue: lValue { varID = text }
554.                call setText { #exprs = 1 }
                        lValue: lValue { varID = img }
                        exprs:
554.                        ("racecar.png")
555.                call setText { #exprs = 1 }
                        lValue: lValue { varID = text }
                        exprs:
                            (+) { left = "Score: " }
                                right: lValue { varID = d }
556.                call setText { #exprs = 1 }
                        lValue: lValue { varID = text }
                        exprs:
                            (+) { left = "Score: " }
                                right: lValue { varID = i }
557.                call log { #exprs = 1, class = ct }
                        exprs:
                            call toString
                                lValue: lValue { varID = line }
558.                call setSize { #exprs = 2 }
                        lValue: lValue { varID = img }
                        exprs:
                            (*) { right = 1.1 }
                                left: lValue { varID = img, fieldID = width }
                            (*) { right = 1.1 }
                                left: lValue { varID = img, fieldID = height }
559.                call align { #exprs = 1 }
                        lValue: lValue { varID = text }
                        exprs:
                            lValue { varID = s }
560.                call align { #exprs = 2 }
                        lValue: lValue { varID = text }
                        exprs:
                            lValue { varID = s }
560.                        (true)
561.                call align { #exprs = 2 }
                        lValue: lValue { varID = text }
                        exprs:
                            lValue { varID = s }
561.                        (false)
562.                call setFillColor { #exprs = 1 }
                        lValue: lValue { varID = circle }
                        exprs:
                            (+) { left = "light" }
                                right: lValue { varID = s }
563.                call setFillColor { #exprs = 1 }
                        lValue: lValue { varID = circle }
                        exprs:
                            call getText
                                lValue: lValue { varID = text }
564.                call setFillColorRGB { #exprs = 3 }
                        lValue: lValue { varID = circle }
                        exprs:
                            lValue { varID = i }
                            lValue { varID = j }
                            lValue { varID = k }
565.                call setLineColor { #exprs = 1 }
                        lValue: lValue { varID = rect }
                        exprs:
                            lValue { varID = colors }
                                indexExpr: lValue { varID = i }
566.                call setLineColorRGB { #exprs = 3 }
                        lValue: lValue { varID = rect }
                        exprs:
                            lValue { varID = i }
                            (-) { left = 255 }
                                right: lValue { varID = i }
566.                        (0)
567.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call getLayer
                            lValue: lValue { varID = rect }
568.                if { #stmts = 1 }
                        expr: (>=)
                            right: call getLayer
                                lValue: lValue { varID = circle }
                            left: call getLayer
                                lValue: lValue { varID = rect }
                        stmts:
569.                        assign (=)
                                lValue: lValue { varID = b }
                                expr: call equals { #exprs = 1 }
                                    lValue: lValue { varID = colors }
                                        indexExpr: call getLayer
                                            lValue: lValue { varID = rect }
                                    exprs:
569.                                    ("green")
570.                call setLayer { #exprs = 1 }
                        lValue: lValue { varID = img }
                        exprs:
                            unaryOp (neg) { expr = 42 }
571.                call delete
                        lValue: lValue { varID = img }
572.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call clicked
                            lValue: lValue { varID = img }
573.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call containsPoint { #exprs = 2 }
                            lValue: lValue { varID = img }
                            exprs:
                                call clickX { class = ct }
                                call clickY { class = ct }
574.                if { #stmts = 1 }
                        expr: call containsPoint { #exprs = 2 }
                            lValue: lValue { varID = img }
                            exprs:
                                call clickX { class = ct }
                                call clickY { class = ct }
                        stmts:
575.                        while { #stmts = 1 }
                                expr: call hit { #exprs = 1 }
                                    lValue: lValue { varID = img }
                                    exprs:
                                        lValue { varID = rect }
                                stmts:
576.                                assign (=)
                                        lValue: lValue { varID = b }
                                        expr: (==) { right = true }
                                            left: call hit { #exprs = 1 }
                                                lValue: lValue { varID = img }
                                                exprs:
                                                    lValue { varID = rect }
578.                var e { vt = double }
                        initExpr: staticField { fieldID = E, class = Math }
579.                var pi { vt = double }
                        initExpr: staticField { fieldID = PI, class = Math }
580.                if { #stmts = 1 }
                        expr: (<)
                            right: lValue { varID = eps }
                            left: call abs { #exprs = 1, class = Math }
                                exprs:
                                    (-)
                                        right: lValue { varID = img, fieldID = x }
                                        left: lValue { varID = rect, fieldID = x }
                        stmts:
581.                        assign (=)
                                lValue: lValue { varID = i }
                                expr: call abs { #exprs = 1, class = Math }
                                    exprs:
                                        lValue { varID = i }
582.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call acos { #exprs = 1, class = Math }
                            exprs:
                                unaryOp (neg) { expr = 0.5 }
583.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call asin { #exprs = 1, class = Math }
                            exprs:
                                (/) { right = 2 }
                                    left: call sqrt { #exprs = 1, class = Math }
                                        exprs:
583.                                        (3)
584.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call atan { #exprs = 1, class = Math }
                            exprs:
                                (/) { left = 1 }
                                    right: call sqrt { #exprs = 1, class = Math }
                                        exprs:
584.                                        (2)
585.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call atan2 { #exprs = 2, class = Math }
                            exprs:
                                (-)
                                    right: lValue { varID = img, fieldID = x }
                                    left: call clickX { class = ct }
                                (-)
                                    right: lValue { varID = img, fieldID = y }
                                    left: call clickY { class = ct }
586.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call ceil { #exprs = 1, class = Math }
                            exprs:
                                lValue { varID = d }
587.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call cos { #exprs = 1, class = Math }
                            exprs:
                                (/) { right = 2 }
                                    left: staticField { fieldID = PI, class = Math }
588.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call cosh { #exprs = 1, class = Math }
                            exprs:
                                (*) { right = 2 }
                                    left: staticField { fieldID = PI, class = Math }
589.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call exp { #exprs = 1, class = Math }
                            exprs:
                                (+) { right = 1 }
                                    left: (*) { left = 2 }
                                        right: staticField { fieldID = PI, class = Math }
590.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call floor { #exprs = 1, class = Math }
                            exprs:
                                unaryOp (neg) { expr = 1.67 }
591.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call log { #exprs = 1, class = Math }
                            exprs:
591.                            (32)
592.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call log10 { #exprs = 1, class = Math }
                            exprs:
                                lValue { varID = d }
593.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call max { #exprs = 2, class = Math }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = d }
594.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call max { #exprs = 2, class = Math }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
595.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call min { #exprs = 2, class = Math }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = d }
596.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call min { #exprs = 2, class = Math }
                            exprs:
                                lValue { varID = i }
                                lValue { varID = i }
597.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call pow { #exprs = 2, class = Math }
                            exprs:
                                lValue { varID = d }
                                lValue { varID = d }
598.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call sin { #exprs = 1, class = Math }
                            exprs:
                                lValue { varID = d }
599.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call sinh { #exprs = 1, class = Math }
                            exprs:
                                lValue { varID = d }
600.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call sqrt { #exprs = 1, class = Math }
                            exprs:
                                lValue { varID = d }
601.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call tan { #exprs = 1, class = Math }
                            exprs:
                                lValue { varID = d }
602.                assign (=)
                        lValue: lValue { varID = d }
                        expr: call tanh { #exprs = 1, class = Math }
                            exprs:
                                lValue { varID = d }
604.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call compareTo { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = s }
605.                assign (=)
                        lValue: lValue { varID = b }
                        expr: call equals { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = s }
606.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call indexOf { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = s }
607.                assign (=)
                        lValue: lValue { varID = i }
                        expr: call length
                            lValue: lValue { varID = s }
608.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call substring { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = i }
609.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call substring { #exprs = 1 }
                            lValue: lValue { varID = s }
                            exprs:
                                lValue { varID = i }
610.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call toLowerCase
                            lValue: lValue { varID = s }
611.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call toUpperCase
                            lValue: lValue { varID = s }
612.                assign (=)
                        lValue: lValue { varID = s }
                        expr: call trim
                            lValue: lValue { varID = s }
614.                var coins { vt = array of GameObj }
615.                var walls { vt = array of GameObj }
616.                var multilineArrayInit { vt = array of int }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
616.                            (1)
617.                            (2)
618.                            (3)
621.                call log { #exprs = 3, class = ct }
                        exprs:
619.                        (1)
620.                        (2)
621.                        (3)
623.                if { #stmts = 1 }
                        expr: (==) { right = 1 }
                            left: call random { #exprs = 2, class = ct }
                                exprs:
622.                                (1)
623.                                (2)
                        stmts:
624.                        call println { #exprs = 1, class = ct }
                                exprs:
624.                                ("heads")
627.                call log { #exprs = 4, class = ct }
                        exprs:
625.                        (1)
                            call random { #exprs = 2, class = ct }
                                exprs:
625.                                (1)
626.                                (100)
627.                        (3)
627.                        (4)
641.        func update { #paramVars = 0, vt = void, #stmts = 1 }
                stmts:
644.                return { expr = 0 }
652.        func bar { #paramVars = 2, vt = boolean, #stmts = 1 }
                paramVars:
652.                var s { vt = String, isGlobal = false }
652.                var gameObj { vt = GameObj, isGlobal = false }
                stmts:
655.                return
                        expr: lValue { varID = TRUE }
658.        func Double { #paramVars = 1, vt = int, #stmts = 1 }
                paramVars:
658.                var x { vt = int, isGlobal = false }
                stmts:
660.                return
                        expr: (*) { left = 2 }
                            right: lValue { varID = x }
664.        func voidFunc { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
664.                var i { vt = int, isGlobal = false }
667.        func func { #paramVars = 0, vt = void, #stmts = 0 }
671.        func FUNC { #paramVars = 0, vt = void, #stmts = 0 }
675.        func AnotherFunc { #paramVars = 0, vt = void, #stmts = 0 }
679.        func anotherfunc { #paramVars = 0, vt = void, #stmts = 0 }
683.        func expectedErrors { #paramVars = 0, vt = void, #stmts = 282 }
                stmts:
685.                var intVar { vt = int, initExpr = 1 }
686.                var dblVar { vt = double, initExpr = 1.0 }
687.                var boolVar { vt = boolean, initExpr = false }
688.                var strVar { vt = String, initExpr = "a" }
689.                var objVar { vt = GameObj }
                        initExpr: call circle { #exprs = 3, class = ct }
                            exprs:
689.                            (0)
689.                            (0)
689.                            (10)
690.                var intArr { vt = array of int }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
690.                            (1)
690.                            (2)
690.                            (3)
691.                var objArr { vt = array of GameObj }
                        initExpr: arrayInit { #exprs = 1 }
                            exprs:
                                lValue { varID = objVar }
694.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call setText { #exprs = 1 }
                            lValue: lValue { varID = objVar }
                            exprs:
694.                            ("circle")
696.                var screen { vt = double }
                        initExpr: call setScreen { #exprs = 1, class = ct }
                            exprs:
696.                            ("menu")
698.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: call setHeight { #exprs = 1, class = ct }
                            exprs:
698.                            (150)
700.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: call voidFunc
702.                var title { vt = GameObj }
                        initExpr: call setTitle { #exprs = 1, class = ct }
                            exprs:
702.                            ("title")
705.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = intVar }
707.                var b { vt = boolean }
                        initExpr: call intFuncInt { #exprs = 1 }
                            exprs:
707.                            (2)
709.                assign (=) { expr = 0 }
                        lValue: lValue { varID = objVar, fieldID = visible }
711.                var s { vt = String }
                        initExpr: lValue { varID = intVar }
713.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = intVar }
716.                var i { vt = int, initExpr = 3.4 }
718.                assign (=) { expr = 1.2 }
                        lValue: lValue { varID = i }
720.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (*) { right = 3.4, left = 10 }
722.                var j { vt = int }
                        initExpr: (+) { right = 3.14, left = 5 }
724.                var plancksConst { vt = int, initExpr = 6.62e-34 }
726.                var exponentialNumberNoDot { vt = int, initExpr = 12e10 }
728.                var exponentialNumberWithDot { vt = int, initExpr = 3.42e2 }
730.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = autoDelete }
                        expr: lValue { varID = dblVar }
732.                assign (=) { expr = 3.14 }
                        lValue: lValue { varID = strVar }
734.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = dblVar }
737.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call clicked { class = ct }
739.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = x }
                        expr: lValue { varID = boolVar }
741.                assign (=) { expr = false }
                        lValue: lValue { varID = objVar, fieldID = xSpeed }
743.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = group }
                        expr: lValue { varID = boolVar }
745.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = boolVar }
748.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = objVar, fieldID = group }
750.                assign (=) { expr = "fast" }
                        lValue: lValue { varID = objVar, fieldID = ySpeed }
752.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = strVar }
754.                var score { vt = GameObj, initExpr = "100 pts" }
757.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = objVar }
759.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = width }
                        expr: lValue { varID = objVar }
761.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = objVar }
763.                var circle { vt = String }
                        initExpr: call circle { #exprs = 3, class = ct }
                            exprs:
763.                            (0)
763.                            (0)
763.                            (10)
766.                var y { vt = int }
                        initExpr: call intFuncInt { #exprs = 1 }
                            exprs:
766.                            (2.3)
768.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call random { #exprs = 2, class = ct }
                            exprs:
768.                            (0.0)
768.                            (10)
770.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call random { #exprs = 2, class = ct }
                            exprs:
770.                            (0)
770.                            (false)
772.                call setBackColorRGB { #exprs = 3, class = ct }
                        exprs:
772.                        ("red")
772.                        (0)
772.                        (0)
774.                call setLayer { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
774.                        ("front")
776.                call roundDecimal { #exprs = 2, class = ct }
                        exprs:
776.                        (3.14159)
                            lValue { varID = objVar }
778.                call substring { #exprs = 1 }
                        lValue: lValue { varID = strVar }
                        exprs:
                            lValue { varID = objVar }
781.                call pow { #exprs = 2, class = Math }
                        exprs:
                            lValue { varID = boolVar }
781.                        (3)
783.                call dblFuncIntDbl { #exprs = 2 }
                        exprs:
783.                        (0)
783.                        ("pi")
785.                call containsPoint { #exprs = 2 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            lValue { varID = strVar }
                            lValue { varID = dblVar }
787.                call exp { #exprs = 1, class = Math }
                        exprs:
                            lValue { varID = objVar }
790.                call align { #exprs = 2 }
                        lValue: lValue { varID = objVar }
                        exprs:
790.                        ("left")
790.                        (0)
792.                call boolFuncBoolStringGameObj { #exprs = 3 }
                        exprs:
                            lValue { varID = dblVar }
                            lValue { varID = strVar }
                            lValue { varID = objVar }
794.                call boolFuncBoolStringGameObj { #exprs = 3 }
                        exprs:
                            lValue { varID = strVar }
                            lValue { varID = objVar }
                            lValue { varID = boolVar }
796.                call boolFuncBoolStringGameObj { #exprs = 3 }
                        exprs:
                            lValue { varID = objVar }
                            lValue { varID = strVar }
                            lValue { varID = boolVar }
799.                call align { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
                            lValue { varID = intVar }
801.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: call parseInt { #exprs = 1, class = ct }
                            exprs:
801.                            (123)
803.                call circle { #exprs = 4, class = ct }
                        exprs:
803.                        (0)
803.                        (0)
803.                        (1)
803.                        (1)
805.                call setText { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
805.                        (1)
807.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: call canParseInt { #exprs = 1, class = ct }
                            exprs:
807.                            (1.0)
809.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: call canParseInt { #exprs = 1, class = ct }
                            exprs:
                                lValue { varID = boolVar }
811.                call align { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
811.                        (true)
813.                call equals { #exprs = 1 }
                        lValue: lValue { varID = strVar }
                        exprs:
                            lValue { varID = objVar }
816.                call boolFuncBoolStringGameObj { #exprs = 3 }
                        exprs:
                            lValue { varID = boolVar }
                            lValue { varID = strVar }
816.                        (42)
818.                call hit { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
818.                        (0.0)
820.                call hit { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
820.                        (false)
822.                call hit { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
822.                        ("the wall")
825.                if { #stmts = 1 }
                        expr: (>) { right = 0 }
                            left: call intFuncInt
                        stmts:
826.                        call voidFunc
828.                call dblFuncIntDbl
830.                call circle { class = ct }
832.                call rect { #exprs = 3, class = ct }
                        exprs:
832.                        (0)
832.                        (0)
832.                        (10)
834.                call circle { #exprs = 2, class = ct }
                        exprs:
834.                        (0)
834.                        (0)
836.                call voidFunc { #exprs = 1 }
                        exprs:
836.                        (1)
838.                call setBackColor { #exprs = 3, class = ct }
                        exprs:
838.                        (255)
838.                        (0)
838.                        (0)
840.                call delete { #exprs = 1 }
                        lValue: lValue { varID = objVar }
                        exprs:
840.                        (true)
842.                call setText { #exprs = 2 }
                        lValue: lValue { varID = objVar }
                        exprs:
842.                        ("circle")
842.                        ("green")
845.                var k { vt = int }
                        initExpr: (/) { right = 2, left = 3 }
847.                call random { #exprs = 2, class = ct }
                        exprs:
                            (/)
                                right: lValue { varID = intVar }
                                left: lValue { varID = intVar }
                            lValue { varID = intVar }
849.                assign (=)
                        lValue: lValue { varID = x }
                        expr: (+) { right = 1 }
                            left: lValue { varID = x }
851.                for { #stmts = 1 }
851.                    initStmt: assign (=) { expr = 0 }
                            lValue: lValue { varID = x }
                        expr: (<) { right = 1 }
                            left: lValue { varID = x }
851.                    nextStmt: assign (++)
                            lValue: lValue { varID = x }
                        stmts:
852.                        call voidFunc
854.                call foo
856.                var j { vt = int, initExpr = 3 }
858.                var uninitializedVar { vt = int }
860.                if { #stmts = 1 }
                        expr: (<) { right = 0 }
                            left: lValue { varID = uninitializedVar }
                        stmts:
861.                        assign (=) { expr = 0 }
                                lValue: lValue { varID = uninitializedVar }
862.                var g { vt = GameObj }
864.                assign (=) { expr = 1 }
                        lValue: lValue { varID = g, fieldID = xSpeed }
871.                var r { vt = GameObj }
                        initExpr: call rectangle { #exprs = 4, class = ct }
                            exprs:
871.                            (0)
871.                            (0)
871.                            (10)
871.                            (10)
873.                assign (=) { expr = false }
                        lValue: lValue { varID = objVar, fieldID = isVisible }
875.                call foo
                        lValue: lValue { varID = objVar }
882.                call Circle { #exprs = 3, class = ct }
                        exprs:
882.                        (0)
882.                        (0)
882.                        (10)
884.                call atan2 { #exprs = 2 }
                        lValue: lValue { varID = math }
                        exprs:
                            (-)
                                right: lValue { varID = r, fieldID = x }
                                left: call clickX { class = ct }
                            (-)
                                right: lValue { varID = r, fieldID = y }
                                left: call clickY { class = ct }
886.                call voidfunC
888.                assign (=) { expr = 2 }
                        lValue: lValue { varID = intvar }
891.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: lValue { varID = Null }
893.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = NULL }
895.                while { #stmts = 1 }
                        expr: lValue { varID = True }
                        stmts:
896.                        call voidFunc
898.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: lValue { varID = TRUE }
900.                if { #stmts = 1 }
                        expr: lValue { varID = False }
                        stmts:
901.                        call voidFunc
903.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = clickable }
                        expr: lValue { varID = FALSE }
906.                if { #stmts = 1 }
                        expr: (=) { right = 0 }
                            left: lValue { varID = i }
                        stmts:
907.                        assign (=) { expr = 0 }
                                lValue: lValue { varID = i }
909.                var intArr2 { vt = array of int }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
909.                            (1)
909.                            (2)
909.                            (3.14)
911.                var dblArr { vt = array of double }
                        initExpr: arrayInit { #exprs = 3 }
                            exprs:
911.                            (1)
911.                            ("two")
911.                            (3.14)
913.                var strArr { vt = array of String }
                        initExpr: newArray { vt = GameObj, lengthExpr = 100 }
915.                var boolArr { vt = array of boolean }
                        initExpr: call intArrFuncInt { #exprs = 1 }
                            exprs:
915.                            (10)
917.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: newArray { vt = int, lengthExpr = 1.5 }
920.                assign (++)
                        lValue: lValue { varID = boolVar }
922.                assign (++)
                        lValue: lValue { varID = strVar }
924.                assign (++)
                        lValue: lValue { varID = objVar }
926.                assign (--)
                        lValue: lValue { varID = boolVar }
928.                assign (--)
                        lValue: lValue { varID = strVar }
930.                assign (--)
                        lValue: lValue { varID = objVar }
933.                forArray { #stmts = 1 }
933.                    var: var x { vt = int, isGlobal = false }
                        expr: lValue { varID = intVar }
                        stmts:
934.                        call voidFunc
936.                forArray { #stmts = 1 }
936.                    var: var x { vt = double, isGlobal = false }
                        expr: lValue { varID = dblVar }
                        stmts:
937.                        call voidFunc
939.                forArray { #stmts = 1 }
939.                    var: var x { vt = boolean, isGlobal = false }
                        expr: lValue { varID = boolVar }
                        stmts:
940.                        call voidFunc
942.                forArray { #stmts = 1 }
942.                    var: var x { vt = String, isGlobal = false }
                        expr: lValue { varID = strVar }
                        stmts:
943.                        call voidFunc
945.                forArray { #stmts = 1 }
945.                    var: var x { vt = GameObj, isGlobal = false }
                        expr: lValue { varID = objVar }
                        stmts:
946.                        call voidFunc
948.                forArray { #stmts = 1 }
948.                    var: var x { vt = GameObj, isGlobal = false }
                        expr: lValue { varID = strVar }
                        stmts:
949.                        call voidFunc
952.                forArray { #stmts = 1 }
952.                    var: var x { vt = double, isGlobal = false }
                        expr: lValue { varID = intArr }
                        stmts:
953.                        call voidFunc
955.                forArray { #stmts = 1 }
955.                    var: var x { vt = String, isGlobal = false }
                        expr: lValue { varID = objArr }
                        stmts:
956.                        call voidFunc
959.                for { #stmts = 1 }
                        expr: lValue { varID = intVar }
                        stmts:
960.                        call voidFunc
962.                for { #stmts = 1 }
                        expr: lValue { varID = dblVar }
                        stmts:
963.                        call voidFunc
965.                for { #stmts = 1 }
                        expr: lValue { varID = strVar }
                        stmts:
966.                        call voidFunc
968.                for { #stmts = 1 }
                        expr: lValue { varID = objVar }
                        stmts:
969.                        call voidFunc
971.                doWhile { #stmts = 1 }
                        expr: lValue { varID = intVar }
                        stmts:
972.                        call voidFunc
977.                while { #stmts = 1 }
                        expr: lValue { varID = dblVar }
                        stmts:
978.                        call voidFunc
980.                while { #stmts = 1 }
                        expr: lValue { varID = strVar }
                        stmts:
981.                        call voidFunc
983.                while { #stmts = 1 }
                        expr: lValue { varID = objVar }
                        stmts:
984.                        call voidFunc
987.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = intVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = intVar }
                                stmts:
991.                                call voidFunc
                        stmts:
988.                        call voidFunc
993.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = dblVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = dblVar }
                                stmts:
997.                                call voidFunc
                        stmts:
994.                        call voidFunc
999.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = strVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = strVar }
                                stmts:
1003.                                call voidFunc
                        stmts:
1000.                        call voidFunc
1005.                if { #elseStmts = 1, #stmts = 1 }
                        expr: lValue { varID = objVar }
                        elseStmts:
                            if { #stmts = 1 }
                                expr: lValue { varID = objVar }
                                stmts:
1009.                                call voidFunc
                        stmts:
1006.                        call voidFunc
1019.                assign (+=) { expr = "hello" }
                        lValue: lValue { varID = strVar }
1021.                assign (-=) { expr = 1 }
                        lValue: lValue { varID = boolVar }
1023.                assign (*=)
                        lValue: lValue { varID = objVar }
                        expr: lValue { varID = objVar }
1025.                assign (/=) { expr = 3.14 }
                        lValue: lValue { varID = objVar }
1027.                assign (+=) { expr = "hello" }
                        lValue: lValue { varID = intVar }
1029.                assign (-=)
                        lValue: lValue { varID = dblVar }
                        expr: call rect { #exprs = 4, class = ct }
                            exprs:
1029.                            (0)
1029.                            (0)
1029.                            (1)
1029.                            (2)
1031.                assign (*=) { expr = false }
                        lValue: lValue { varID = intVar }
1033.                assign (/=) { expr = true }
                        lValue: lValue { varID = dblVar }
1035.                assign (+=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
1037.                assign (-=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
1039.                assign (*=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
1041.                assign (/=)
                        lValue: lValue { varID = intVar }
                        expr: lValue { varID = dblVar }
1043.                if { #stmts = 1 }
                        expr: (==) { right = "s" }
                            left: lValue { varID = strVar }
                        stmts:
1044.                        call voidFunc
1047.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (^)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
1049.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (&)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
1051.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (|)
                            right: lValue { varID = i }
                            left: lValue { varID = i }
1053.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (>>) { right = 2 }
                            left: lValue { varID = i }
1055.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (<<) { right = 2 }
                            left: lValue { varID = i }
1057.                assign (=)
                        lValue: lValue { varID = i }
                        expr: (>>>) { right = 2 }
                            left: lValue { varID = i }
1066.                var lowercasefirst { vt = int, initExpr = 1 }
1068.                var lowerCaseFirst { vt = int, initExpr = 10 }
1069.                var upperCaseFirst { vt = GameObj }
                        initExpr: lValue { varID = objVar }
1071.                var uppercasefirst { vt = GameObj, initExpr = null }
1073.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: (+) { right = 1 }
                            left: lValue { varID = dblvar }
1077.                var DouBle { vt = int }
1079.                var BooLean { vt = double }
1081.                var string { vt = boolean }
1084.                assign (=) { expr = 1 }
                        lValue: lValue { varID = intVar, indexExpr = 0 }
1087.                assign (=) { expr = 1 }
                        lValue: lValue { varID = intArr }
                            indexExpr: lValue { varID = dblVar }
1090.                var numObjs { vt = int }
                        initExpr: lValue { varID = objArr, fieldID = Length }
1093.                var len { vt = int }
                        initExpr: lValue { varID = strVar, fieldID = length }
1095.                var size { vt = int }
                        initExpr: lValue { varID = intVar, fieldID = size }
1098.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: unaryOp (neg)
                            expr: lValue { varID = objVar }
1101.                assign (=)
                        lValue: lValue { varID = objVar, fieldID = visible }
                        expr: unaryOp (not)
                            expr: lValue { varID = intVar }
1104.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: (+)
                            right: lValue { varID = intArr }
                            left: lValue { varID = strVar }
1106.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: (+)
                            right: lValue { varID = strVar }
                            left: lValue { varID = intArr }
1109.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (+)
                            right: unaryOp (not)
                                expr: lValue { varID = boolVar }
                            left: lValue { varID = boolVar }
1111.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: (+)
                            right: lValue { varID = objVar }
                            left: lValue { varID = objVar }
1113.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: (+) { right = 1 }
                            left: lValue { varID = intArr }
1115.                assign (=)
                        lValue: lValue { varID = objArr }
                        expr: (+)
                            right: lValue { varID = objVar }
                            left: lValue { varID = objArr }
1118.                assign (=)
                        lValue: lValue { varID = strVar }
                        expr: (-)
                            right: lValue { varID = intVar }
                            left: lValue { varID = strVar }
1120.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (*) { right = 0 }
                            left: lValue { varID = boolVar }
1122.                assign (=)
                        lValue: lValue { varID = objVar }
                        expr: (/) { right = 2 }
                            left: lValue { varID = objVar }
1124.                assign (=)
                        lValue: lValue { varID = intArr }
                        expr: (%) { right = 2 }
                            left: lValue { varID = intArr }
1127.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: (&&) { right = 1001 }
                            left: lValue { varID = intVar }
1129.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (||) { right = 1010 }
                            left: lValue { varID = boolVar }
1132.                if { #stmts = 1 }
                        expr: (<)
                            right: lValue { varID = boolVar }
                            left: lValue { varID = boolVar }
                        stmts:
1133.                        call voidFunc
1135.                assign (=)
                        lValue: lValue { varID = boolVar }
                        expr: (>)
                            right: lValue { varID = dblVar }
                            left: lValue { varID = objVar }
1137.                while { #stmts = 1 }
                        expr: (<=)
                            right: lValue { varID = intVar }
                            left: lValue { varID = boolVar }
                        stmts:
1138.                        call voidFunc
1141.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: (>=)
                            right: lValue { varID = intArr }
                            left: lValue { varID = dblVar }
1144.                assign (=)
                        lValue: lValue { varID = intVar }
                        expr: (/) { right = 2, left = 1 }
1146.                assign (=)
                        lValue: lValue { varID = dblVar }
                        expr: (/) { right = 8, left = 3 }
1149.                var intVar { vt = int, initExpr = 13 }
1151.                var objArr { vt = array of GameObj }
                        initExpr: newArray { vt = GameObj, lengthExpr = 10 }
1154.                call update
1156.                call start
1158.                call onMousePress { #exprs = 2 }
                        exprs:
1158.                        (0)
1158.                        (0)
1161.                call println { #exprs = 1 }
                        exprs:
1161.                        ("Hello world")
1163.                call setHeight { #exprs = 1 }
                        exprs:
1163.                        (150)
1175.                call foo
                        lValue: lValue { varID = Code12Program }
1177.                call foo
                        lValue: lValue { varID = Code12 }
1180.                call log { #exprs = 1 }
                        lValue: lValue { varID = boolVar, indexExpr = 0 }
                        exprs:
                            lValue { varID = objVar }
1185.                call voidFunc
                        lValue: lValue { varID = intArr }
1188.                call voidFunc
                        lValue: lValue { varID = intArr, indexExpr = 0 }
1190.                call foo
                        lValue: lValue { varID = boolVar }
1193.                call prnitln { class = ct }
1195.                call circ { #exprs = 3, class = ct }
                        exprs:
1195.                        (0)
1195.                        (0)
1195.                        (10)
1198.                call foo
                        lValue: lValue { varID = objArr, indexExpr = 0 }
1200.                call foo { class = Math }
1203.                call intFuncInt
1205.                call dblFuncIntDbl
1207.                call log { class = ct }
1209.                call atan2 { class = Math }
1211.                call boolFuncBoolStringGameObj { #exprs = 2 }
                        exprs:
1211.                        (false)
1211.                        ("")
1213.                call rect { #exprs = 3, class = ct }
                        exprs:
1213.                        (0)
1213.                        (0)
1213.                        (10)
1215.                call voidFunc { #exprs = 1 }
                        exprs:
                            lValue { varID = intVar }
1217.                call print { #exprs = 2, class = ct }
                        exprs:
1217.                        ("intVar =")
                            lValue { varID = intVar }
1219.                call atan { #exprs = 2, class = Math }
                        exprs:
1219.                        (4)
1219.                        (3)
1221.                call logm { #exprs = 2, class = ct }
                        exprs:
                            lValue { varID = intVar }
                            lValue { varID = objVar }
1223.                var indent { vt = String, initExpr = "2 Tabs" }
1225.                assign (=) { expr = "1 Space + 2 Tabs" }
                        lValue: lValue { varID = indent }
1227.                assign (=) { expr = "2 Tabs" }
                        lValue: lValue { varID = indent }
1229.                assign (=) { expr = "8 Spaces" }
                        lValue: lValue { varID = indent }
1231.                assign (=) { expr = "2 Tabs" }
                        lValue: lValue { varID = indent }
1233.                assign (=) { expr = "4 Spaces + 1 Tab" }
                        lValue: lValue { varID = indent }
1235.                assign (=) { expr = "2 Tabs" }
                        lValue: lValue { varID = indent }
1237.                if { expr = false, #stmts = 1 }
                        stmts:
1239.                        call voidFunc
1241.                if { expr = false, #stmts = 1 }
                        stmts:
1243.                        call voidFunc
1244.                if { expr = false, #stmts = 2 }
                        stmts:
1247.                        call voidFunc
1248.                        call voidFunc
1250.                if { expr = false, #stmts = 1 }
                        stmts:
1251.                        call voidFunc
1253.                call voidFunc
1254.                if { expr = false, #stmts = 2 }
                        stmts:
1256.                        call voidFunc
1258.                        call voidFunc
1260.                if { expr = false, #stmts = 1 }
                        stmts:
1263.                        call voidFunc
1265.                if { expr = false, #stmts = 1 }
                        stmts:
1267.                        call voidFunc
1270.                if { expr = false, #elseStmts = 1, #stmts = 1 }
                        elseStmts:
1274.                        call voidFunc
                        stmts:
1271.                        call voidFunc
1275.                if { expr = false, #elseStmts = 1, #stmts = 1 }
                        elseStmts:
1279.                        call voidFunc
                        stmts:
1276.                        call voidFunc
1280.                if { expr = false, #elseStmts = 1, #stmts = 1 }
                        elseStmts:
1283.                        call voidFunc
                        stmts:
1281.                        call voidFunc
1285.                call voidFunc
1286.                if { expr = false, #elseStmts = 1, #stmts = 1 }
                        elseStmts:
1291.                        call voidFunc
                        stmts:
1287.                        call voidFunc
1293.                if { expr = false, #elseStmts = 1, #stmts = 1 }
                        elseStmts:
                            if { expr = false, #stmts = 1 }
                                stmts:
1297.                                call voidFunc
                        stmts:
1294.                        call voidFunc
1298.                if { expr = false, #elseStmts = 1, #stmts = 1 }
                        elseStmts:
                            if { expr = false, #stmts = 1 }
                                stmts:
1303.                                call voidFunc
                        stmts:
1299.                        call voidFunc
1305.                if { expr = false, #elseStmts = 1, #stmts = 1 }
                        elseStmts:
                            if { expr = false, #elseStmts = 1, #stmts = 1 }
                                elseStmts:
1311.                                call voidFunc
                                stmts:
1309.                                call voidFunc
                        stmts:
1306.                        call voidFunc
1312.                if { expr = false, #elseStmts = 1, #stmts = 1 }
                        elseStmts:
                            if { expr = false, #elseStmts = 1, #stmts = 1 }
                                elseStmts:
1318.                                call voidFunc
                                stmts:
1315.                                call voidFunc
                        stmts:
1313.                        call voidFunc
1319.                if { expr = false, #elseStmts = 1, #stmts = 1 }
                        elseStmts:
                            if { expr = false, #elseStmts = 1, #stmts = 1 }
                                elseStmts:
                                    if { expr = false, #elseStmts = 1, #stmts = 1 }
                                        elseStmts:
1328.                                        call voidFunc
                                        stmts:
1325.                                        call voidFunc
                                stmts:
1322.                                call voidFunc
                        stmts:
1320.                        call voidFunc
1329.                if { expr = false, #stmts = 1 }
                        stmts:
1330.                        if { expr = false, #elseStmts = 1, #stmts = 1 }
                                elseStmts:
1334.                                call voidFunc
                                stmts:
1331.                                call voidFunc
1335.                if { expr = false, #stmts = 1 }
                        stmts:
1337.                        if { expr = false, #elseStmts = 1, #stmts = 1 }
                                elseStmts:
1343.                                call voidFunc
                                stmts:
1339.                                call voidFunc
1347.                if { expr = false, #stmts = 1 }
                        stmts:
1348.                        if { expr = false, #elseStmts = 1, #stmts = 1 }
                                elseStmts:
                                    if { expr = false, #stmts = 1 }
                                        stmts:
1352.                                        call voidFunc
                                stmts:
1349.                                call voidFunc
1353.                for { #stmts = 1 }
1353.                    initStmt: var ii { vt = int, isGlobal = false, initExpr = 0 }
                        expr: (<) { right = 100 }
                            left: lValue { varID = ii }
1353.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
1355.                        call voidFunc
1356.                for { #stmts = 1 }
1356.                    initStmt: var ii { vt = int, isGlobal = false, initExpr = 0 }
                        expr: (<) { right = 100 }
                            left: lValue { varID = ii }
1356.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
1359.                        call voidFunc
1361.                for { #stmts = 1 }
1361.                    initStmt: var ii { vt = int, isGlobal = false, initExpr = 0 }
                        expr: (<) { right = 100 }
                            left: lValue { varID = ii }
1361.                    nextStmt: assign (++)
                            lValue: lValue { varID = ii }
                        stmts:
1364.                        call voidFunc
1366.                while { expr = false, #stmts = 1 }
                        stmts:
1368.                        call voidFunc
1369.                while { expr = false, #stmts = 1 }
                        stmts:
1372.                        call voidFunc
1374.                while { expr = false, #stmts = 1 }
                        stmts:
1375.                        call voidFunc
1377.                call voidFunc
1378.                doWhile { expr = false, #stmts = 1 }
                        stmts:
1380.                        call voidFunc
1382.                doWhile { expr = false, #stmts = 1 }
                        stmts:
1385.                        call voidFunc
1388.                doWhile { expr = false, #stmts = 1 }
                        stmts:
1389.                        call voidFunc
1392.                var x1 { vt = int }
1394.                var x2 { vt = int }
1394.                var x3 { vt = int }
1395.                var circle { vt = GameObj }
                        initExpr: call circle { #exprs = 3, class = ct }
                            exprs:
1395.                            (0)
1395.                            (0)
1397.                            (10)
1401.                call log { #exprs = 3, class = ct }
                        exprs:
1398.                        (1)
1399.                        (2)
1401.                        (3)
1402.                var multiLineArrInit { vt = array of int }
                        initExpr: arrayInit { #exprs = 2 }
                            exprs:
1402.                            (1)
1404.                            (2)
1405.                var multiLineArrDec { vt = array of int }
                        initExpr: newArray { vt = int }
                            lengthExpr: call random { #exprs = 2, class = ct }
                                exprs:
1405.                                (1)
1407.                                (10)
1410.                if { #elseStmts = 1, #stmts = 1 }
                        expr: (>) { right = 3 }
                            left: call random { #exprs = 2, class = ct }
                                exprs:
1408.                                (1)
1410.                                (2)
                        elseStmts:
                            if { #stmts = 1 }
                                expr: (>) { right = 3 }
                                    left: call random { #exprs = 2, class = ct }
                                        exprs:
1412.                                        (1)
1414.                                        (2)
                                stmts:
1415.                                call voidFunc
                        stmts:
1411.                        call voidFunc
1418.                while { #stmts = 1 }
                        expr: (>) { right = 3 }
                            left: call random { #exprs = 2, class = ct }
                                exprs:
1416.                                (1)
1418.                                (2)
                        stmts:
1419.                        call voidFunc
1420.                doWhile { #stmts = 1 }
                        expr: (<) { right = 0 }
                            left: call max { #exprs = 2, class = Math }
                                exprs:
1422.                                (1)
1424.                                (0)
                        stmts:
1421.                        call voidFunc
1427.                for { #stmts = 1 }
                        expr: (<) { right = 0 }
                            left: call max { #exprs = 2, class = Math }
                                exprs:
1425.                                (1)
1427.                                (0)
                        stmts:
1428.                        call voidFunc
1429.                if { expr = false, #stmts = 1 }
                        stmts:
1430.                        call voidFunc
1432.                call voidFunc
1433.                if { expr = false, #elseStmts = 1, #stmts = 1 }
                        elseStmts:
1436.                        call voidFunc
                        stmts:
1434.                        call voidFunc
1438.                call voidFunc
1439.                if { expr = false, #elseStmts = 1, #stmts = 1 }
                        elseStmts:
                            if { expr = false, #stmts = 1 }
                                stmts:
1442.                                call voidFunc
                        stmts:
1440.                        call voidFunc
1444.                call voidFunc
1445.                if { expr = false, #stmts = 1 }
                        stmts:
1446.                        call voidFunc
1448.                while { expr = false, #stmts = 1 }
                        stmts:
1449.                        call voidFunc
1450.                for { expr = false, #stmts = 1 }
                        stmts:
1451.                        call voidFunc
1453.                call voidFunc
1454.                while { expr = false, #stmts = 1 }
                        stmts:
1455.                        call voidFunc
1457.                call voidFunc
1467.                var privateInt { vt = int, initExpr = 0 }
1469.                var publicDouble { vt = double, initExpr = 0 }
1471.                var halfIntVar { vt = double }
                        initExpr: (/) { right = 2 }
                            left: cast { vt = int }
                                expr: lValue { varID = intVar }
1472.                if { expr = false }
1474.                var bogusVarInit { vt = int, initExpr = 0 }
1475.                if { expr = false, #elseStmts = 1, #stmts = 1 }
                        elseStmts:
                            if { expr = false }
                        stmts:
1476.                        call voidFunc
1479.                var bogusVarDecl { vt = int }
1480.                if { expr = false, #stmts = 1 }
                        stmts:
1481.                        call voidFunc
1484.                var bogusArrayInit { vt = array of int }
                        initExpr: arrayInit { #exprs = 1 }
                            exprs:
1484.                            (0)
1485.                while { expr = false }
1487.                var bogusArrayDecl { vt = array of int }
1521.        func myFunc { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
1521.                var myVar { vt = int, isGlobal = false }
1525.        func update { #paramVars = 0, vt = GameObj, #stmts = 0 }
1529.        func onMousePress { #paramVars = 3, vt = String, #stmts = 0 }
                paramVars:
1529.                var obj { vt = GameObj, isGlobal = false }
1529.                var x { vt = double, isGlobal = false }
1529.                var y { vt = double, isGlobal = false }
1533.        func onMousePress { #paramVars = 2, vt = void, #stmts = 0 }
                paramVars:
1533.                var x { vt = double, isGlobal = false }
1533.                var y { vt = double, isGlobal = false }
1537.        func onKeyPress { #paramVars = 3, vt = void, #stmts = 0 }
                paramVars:
1537.                var obj { vt = GameObj, isGlobal = false }
1537.                var x { vt = double, isGlobal = false }
1537.                var y { vt = double, isGlobal = false }
1541.        func onKeyRelease { #paramVars = 0, vt = void, #stmts = 0 }
1545.        func onMousePress { #paramVars = 3, vt = void, #stmts = 0 }
                paramVars:
1545.                var obj { vt = boolean, isGlobal = false }
1545.                var x { vt = double, isGlobal = false }
1545.                var y { vt = double, isGlobal = false }
1549.        func onMouseDrag { #paramVars = 3, vt = void, #stmts = 0 }
                paramVars:
1549.                var obj { vt = GameObj, isGlobal = false }
1549.                var x { vt = int, isGlobal = false }
1549.                var y { vt = double, isGlobal = false }
1553.        func onMouseRelease { #paramVars = 3, vt = void, #stmts = 0 }
                paramVars:
1553.                var obj { vt = GameObj, isGlobal = false }
1553.                var x { vt = double, isGlobal = false }
1553.                var y { vt = String, isGlobal = false }
1557.        func onKeyPress { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
1557.                var keyName { vt = double, isGlobal = false }
1561.        func onKeyRelease { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
1561.                var keyName { vt = int, isGlobal = false }
1565.        func onCharTyped { #paramVars = 1, vt = void, #stmts = 0 }
                paramVars:
1565.                var keyName { vt = GameObj, isGlobal = false }
1569.        func overIndentedFunc { #paramVars = 0, vt = void, #stmts = 0 }
1573.        func underIndentedFunc { #paramVars = 0, vt = void, #stmts = 0 }
1576.        func funcWithUnindentedBody { #paramVars = 0, vt = int, #stmts = 1 }
                stmts:
1579.                return { expr = 0 }
1581.        func multiLineFuncDef { #paramVars = 2, vt = void, #stmts = 0 }
                paramVars:
1581.                var arg1 { vt = int, isGlobal = false }
1583.                var arg2 { vt = int, isGlobal = false }
1586.        func multilineReturnFunc { #paramVars = 0, vt = int, #stmts = 1 }
                stmts:
1590.                return
                        expr: call max { #exprs = 2, class = Math }
                            exprs:
1588.                            (1)
1590.                            (2)
1592.        func missingCurlyBracketFunc { #paramVars = 0, vt = void, stmts = false }
1594.        func lastFunc { #paramVars = 0, vt = void, #stmts = 0 }
        vars:
  7.        var myVar { vt = int, isGlobal = true, initExpr = 1 }
  9.        var button { vt = GameObj, isGlobal = true }
                initExpr: call text { #exprs = 4, class = ct }
                    exprs:
  9.                    ("START")
  9.                    (0)
  9.                    (0)
  9.                    (10)
 11.        var intResult { vt = int, isGlobal = true }
                initExpr: call intFunc
 13.        var overIndentedInstanceVar { vt = int, isGlobal = true }
 15.        var underIndentedInstanceVar { vt = int, isGlobal = true }
 16.        var classLevelMultilineIntArray1 { vt = array of int, isGlobal = true }
                initExpr: arrayInit { #exprs = 2 }
                    exprs:
 16.                    (1)
 18.                    (2)
 19.        var classLevelMultilineIntArray2 { vt = array of int, isGlobal = true }
                initExpr: arrayInit { #exprs = 3 }
                    exprs:
 19.                    (1)
 20.                    (2)
 22.                    (3)
 23.        var classLevelMultilineIntArray3 { vt = array of int, isGlobal = true }
                initExpr: newArray { vt = int }
                    lengthExpr: call max { #exprs = 2, class = Math }
                        exprs:
 23.                        (1)
 25.                        (2)
 27.        var classLevelVarTypeMismatchIntDouble { vt = int, isGlobal = true, initExpr = 0.1 }
 29.        var MAX_ENEMIES { vt = int, isConst = true, isGlobal = true, initExpr = 100 }
 30.        var numEnemies { vt = int, isGlobal = true }
                initExpr: call min { #exprs = 2, class = Math }
                    exprs:
 30.                    (1000)
                        lValue { varID = MAX_ENEMIES }
 31.        var doubleArr { vt = array of double, isGlobal = true }
                initExpr: arrayInit { #exprs = 3 }
                    exprs:
 31.                    (1.0)
 32.                    (2.0)
 33.                    (3.0)
 34.        var leftWall { vt = GameObj, isGlobal = true }
 34.        var rightWall { vt = GameObj, isGlobal = true }
 34.        var topWall { vt = GameObj, isGlobal = true }
 34.        var bottomWall { vt = GameObj, isGlobal = true }
 35.        var enemies { vt = array of GameObj, isGlobal = true }
 36.        var friends { vt = array of GameObj, isGlobal = true }
                initExpr: newArray { vt = GameObj }
                    lengthExpr: lValue { varID = MAX_ENEMIES }
 37.        var myPrivateVar { vt = int, isGlobal = true }
631.        var newWidth { vt = double, isGlobal = true }
                initExpr: call getWidth { class = ct }
