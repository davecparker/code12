This file is a log of generic syntax errors detected by the Code12 parser.
It is appended to each time a generic syntax error is found. 
Conflicts in this file should be resolved by preserving the union of all the lines.
------------------------------------------------------------------------------------

clas StructureTest extends Code12Program
imort Code12.*;
 
		ct.circle;
		ct.circle X, y, 20
		ct.circle X, y, 20;
		ct.circle = (10, 20, 30);
		ct.rect( 50, 10, 50; 10 );
		if (d == i]
		if (d == i
		if (d == i))
		i = foo( 3, 4);;
		i = foo( 3, 4]
		i += ;
		ct.circle = 300, 200, 30;
		ct.circle(20;; 30);
		ct.circle(20[] 30);
		ct.circle(20[ 30);
		ct.circle{20 30};
		int x = = 3;
		circle 20, 40;
		circle.ct 20, 40;
		circle.ct( 20 +, 40);
		circle.ct( + );
		circle.ct( 3 + );
		circle.ct( 20 ] );
		^ circle.ct( 20  );
		= circle.ct( 20  );
		circle.ct( 20 )  );
		if x < 0 then
		if x < 0 
		if (x < 0 
		if (x
		if (x []
		if (x [
		if (x ]
		if 
		if ()
		ct.circle( 20 ) p
		3
		*
		ct.circle( 20, 9 
		ct.circle( 
		ct.circle
		foo bar!
		if ( ct.random(1
		2) > 3 )
		for ( x : doubleArr )
		GameObj.delete(3);
		double System;
		double z, int, double;
		int static = 3;
		int  = 3;
		int do = 3;
		For (int j = i; j < 10; j++)
		i = (integer) Math.PI * foo(1, 3.1);
		i = (do) Math.PI * foo(1, 3.1);
		i = (d) Math.PI * foo(1, 3.1);
		final true X = 50;
		final void X = 50;
		void y;
		void speed = 0.3;
		x ct.rect( X, 10, 50, 10 );
		if ct.rect( X, 10, 50, 10 );
        double x = ct.random(0, 100)
      c;setFillColor("blue");
      c:setFillColor("blue");
      int tot 0;
   void foo(int )
   void foo(i)
   void foo(40)
   void foo(i, x)
   void foo(int a :)
   void foo(8, String s)
   void foo(in a, String s)
	int[] intArr = new int[10]
	int[] intArr2 = new int[];
	GameObj[] = new GameObj[5];
			int len = gObjArr.length
aimport Code12.*;
		frameRateDisplay.
		ct.circle(ct.random(0, 100), ct.random(0, 100), 5;)
	int numObjects 0;
		int time = ct.getTimer()
   public final String[] LEVEL1 =  
        "111111111111111111111111111111"
     ArrayList<GameObj> platforms = new ArrayList<GameObj>();
     ArrayList<GameObj> coins = new ArrayList<GameObj>();
     ArrayList<GameObj> enemies = new ArrayList<GameObj>();
      Iterator<GameObj> it = coins.iterator();
         player = ct.image("player_forwards.png", platforms.get(0).x, platforms.get(0).y, 5);
      ct.setBackImage("underwater.jpg" 
      ct.setBackImage("underwater.jpg", ); 
			double average = (GameO) "Hey";
		else if (ct.clicked() ~= false)
		else if (ct.clicked() ~= false)
		else if (ct.clicked() 8 false)
		else if (ct.clicked()  false)
		else obj == null;
		else obj != null;
		else obj ~= null;
		else blah
		else what
		ct.logm( "Current stats:", runs, hits, errors );	}
		ct.println( playAgain );;
public void start
	int a = {};
	int a[] = {};
		b = not 1;
		ct.println(~2);
		if (GameObj != null)
		if (GameObj != null)
		if (GameObj != null)
		ct.println(break);
		ERROR "requires a return value"
	invoidt funcWrongReturnValueType6()
		for (int i : {1, 2})
		for (int i : new Double[10])
		while ( )
      ct.println(++d);
      ct.println(d++);
		intVar %= Math.PI;
		intVar %= 10;
		i %= 10;
      i %= 10;
		double minOf3 = Math.min(1, 2, 3)
		ct.rect(50, 64, 80, 4, "white");	}
		ct.rect(35,  ,  50, 28, "blue");
	String 
	String textColor = "black"
		ct.text( "In Code We Trust", xField, flagTop + fieldHeight - textSize * 0.3
				textSize, textColor );
		ct.println(~2);
		boolean boolVar = rect.getText().equals("");
		Boolean boolVar = rect.getText().equals("");
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
	int[][] multiDimArr;
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
	double classLevelOpAssign += 1;
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
	String classLevelStringLength = classLevelString.length()
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
		String ct;
		intFunc[0]();
		dblFuncIntDbl[intVar](0, 0.1);
		dblVar = Math[intVar].tan(0);
