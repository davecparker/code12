this = {}; _fn = {}   -- This file was generated by Code12 from "MainProgram.java"
package.path = package.path .. ';../../Desktop/Code12/?.lua;../../../Desktop/Code12/?.lua'
require('Code12.api')
    
    --Instance Variables
    this.display = nil; 
    this.displayText = ""
    this.buttons = { length = 20, default = nil }
    this.clearBack = nil; 
    this.operatorButtons = "+-*/.=()%"
    this.compare = nil; 
    this.equation = nil; 
    --Instance Variables for the calculate method
    this.temp = nil; 
    this.displayingAnswer = false
    
    
        
        
    
    
    function _fn.start()
        
        
        --///////////////////////////////////////////////////////////////////////////////
        -- Calculator Screen
        
        ct.setScreen("Calculator")
        --Adds the 0 number key
        ct.checkArrayIndex(this.buttons, 0); this.buttons[1+(0)] = ct.rect(20, 83, 15, 10, "gray")
        ct.text("0", 20, 83, 10, "black")
        
        --Adds the backspace/clear key
        ct.checkArrayIndex(this.buttons, 19); this.buttons[1+(19)] = ct.rect(71, 31, 15, 10, "gray")
        this.clearBack = ct.text("AC", 71, 31, 10, "black")
        
        
        local num = 1
        --Prints the number keys (1-9)
        local y = 70; while y >= 44 do
            
            local x = 20; while x <= 54 do
                
                ct.checkArrayIndex(this.buttons, num); this.buttons[1+(num)] = ct.rect(x, y, 15, 10, "gray")
                ct.text(ct.formatInt(num), x, y, 10, "black")
                num = num + 1
            x = x + (17); end
        y = y - (13); end
        
        --adds basic math operator buttons
        local y = 83; while y >= 44 do
            
            ct.checkArrayIndex(this.buttons, num); this.buttons[1+(num)] = ct.rect(71, y, 15, 10, "gray")
            ct.text(ct.substring(this.operatorButtons, num % 10, num % 10 + 1), 71, y - 1, 10, "black")
            num = num + 1
        y = y - (13); end
        
        --adds equals and decimal button
        local x = 37; while x <= 54 do
            
            ct.checkArrayIndex(this.buttons, num); this.buttons[1+(num)] = ct.rect(x, 83, 15, 10, "gray")
            ct.text(ct.substring(this.operatorButtons, num % 10, num % 10 + 1), x, 83, 10, "black")
            num = num + 1
        x = x + (17); end
        
        
        -- adds (, ), % and clear button
        local x = 20; while x <= 54 do
            
            ct.checkArrayIndex(this.buttons, num); this.buttons[1+(num)] = ct.rect(x, 31, 15, 10, "gray")
            local y = 31
            local buttonId = num % 10
            this.compare = ct.substring(this.operatorButtons, num % 10, num % 10 + 1)
            if (this.compare == "(") or (this.compare == ")") then
                y = 30; end
            ct.text(this.compare, x, y, 10, "black")
            num = num + 1
        x = x + (17); end
        
        for _, button in ipairs(this.buttons) do
            
            button.clickable = true
        end
        
        --Initializes the display
        ct.setTitle("Calculator")
        this.displayText = ""
        this.display = ct.text(this.displayText, 78, 18, 12, "black")
        this.display:align("right")
        
        -- ct.clearScreen();
        
        --///////////////////////////////////////////////////////////////////////////////
        -- Equation Solver
        
        --equation = ct.inputString("Enter an equation");
        --ct.println( Test ( 3 ) );
        --ct.println( findIntRoot() );
    end
    -- public String findIntRoot ()
    -- {
    --    for ( int x = 0; x < 1000; x++ )
    --    {
    --       if( Test( x ) )
    --       {
    --          return ct.formatInt( x );
    --       }
    --       if( Test( -x ) )
    --       {
    --          return ct.formatInt( -x );
    --       }
    --    }
    --   return "Cannot find integar root";
    -- }   
    
    -- public boolean Test( int x )
    -- {
    --    for( int i = 0; i < equation.length(); i++ )
    --    {  
    --       String temporary = equation.substring(i,i+1);
    --       if( temporary.equals("x") )
    --       {
    --          String temp1 = equation.substring(0,i);
    --          String temp2 = equation.substring(i+1,equation.length() );
    --          equation = temp1 + x + temp2;
    --       }
    --    } 
    
    --    return ct.parseNumber( calculate( equation ) ) == 0;
    -- }
    
    --///////////////////////////////////////////////////////////////////////////////   
    
    function _fn.update()
        
        
    end
    
    function _fn.onKeyPress(keyName)
        
        if (keyName == "backspace") then
            
            _fn.Input(19)
        
        elseif ct.canParseInt(ct.substring(keyName, string.len(keyName) - 1, string.len(keyName))) then
            
            local i = ct.parseInt(ct.substring(keyName, string.len(keyName) - 1, string.len(keyName)))
            _fn.Input(i)
        end
        
    end
    
    
    function _fn.onMousePress(obj, x, y)
        
        local i = -1
        local j = 0; while j < this.buttons.length do
            
            if obj == ct.indexArray(this.buttons, j) then
                
                i = j
                break
            end
        j = j + 1; end
        _fn.Input(i)
    end
    
    
    --Handles inputs from mouse and keyboard
    function _fn.Input(i)
        
        if i ~= -1 then
            
            
            if string.len(this.displayText) < 12 and i < 18 and i ~= 15 then
                
                if i < 10 then
                    
                    --clears the display text if you enter a number while displaying a previously calculated answer          
                    if this.displayingAnswer then
                        
                        this.displayText = ""
                        this.displayingAnswer = false
                        this.clearBack:setText("AC")
                    end
                    
                    this.displayText = this.displayText .. i
                
                else 
                    
                    if this.displayingAnswer then
                        
                        this.displayingAnswer = false
                        this.clearBack:setText("AC")
                    end
                    
                    this.displayText = this.displayText .. ct.substring(this.operatorButtons, i % 10, i % 10 + 1)
                end
                
                this.display:setText(this.displayText)
            end
            
            if i == 14 then
                
                local currentNumber = ""
                local j = 0; 
                --Finds the last number including decimal up until a mathmatical operator
                j = string.len(this.displayText) - 1; while j >= 0 do
                    
                    this.compare = ct.substring(this.displayText, j, j + 1)
                    if (this.compare == "+") or (this.compare == "-") or (this.compare == "*") or (this.compare == "/") then
                        
                        break
                    end
                j = j - 1; end
                
                currentNumber = ct.substring(this.displayText, j + 1)
                
                if ct.indexOfString(currentNumber, ".") == -1 then
                    
                    if not (currentNumber == "") then
                        
                        this.displayText = this.displayText .. ct.substring(this.operatorButtons, i % 10, i % 10 + 1)
                        this.display:setText(this.displayText)
                    
                    else 
                        
                        this.displayText = this.displayText .. "0" .. ct.substring(this.operatorButtons, i % 10, i % 10 + 1)
                        this.display:setText(this.displayText)
                    end
                end
            end
            
            if i == 15 then
                
                if not (this.displayText == "") and not ct.canParseNumber(this.displayText) then
                    
                    local result = this.displayText
                    this.displayText = _fn.calculate(result)
                    this.display:setText(this.displayText)
                    this.displayingAnswer = true
                    this.clearBack:setText("C")
                end
            end
            
            if i == 19 then
                
                if not (this.displayText == "") then
                    
                    if this.displayingAnswer then
                        
                        this.displayText = ""
                        this.display:setText(this.displayText)
                        this.displayingAnswer = false
                        this.clearBack:setText("AC")
                    
                    else 
                        
                        this.displayText = ct.substring(this.displayText, 0, string.len(this.displayText) - 1)
                        this.display:setText(this.displayText)
                    end
                end
            end
        end
    end
    
    
    -- Method that takes the currently displayed function and calculates the value
    -- Takes a string representing the displayed value (composed of numbers and math operators)
    -- Returns a string of a single number (double)
    
    
    --Helper methods for Calculate
    
    --Precedence of mathmatical operators
    function _fn.precedence(operator)
        
        if (operator == "+") or (operator == "-") then
            
            return 5
        end
        if (operator == "*") or (operator == "/") then
            
            return 4
        end
        if (operator == "^") then
            
            return 3
        end
        if (operator == "!") then
            
            return 2
        end
        
        return 0
    end
    
    --Handles simple numerical calculations
    --Takes two doubles and a string representing a mathmatical operator
    --Returns a double representing the result of applying the operator to the two numbers
    function _fn.simpleCalculate(n1, n2, o)
        
        if (o == "-") then
            
            return n1 - n2
        end
        if (o == "+") then
            
            return n1 + n2
        end
        if (o == "*") then
            
            return n1 * n2
        end
        --Add exception to handle dividing by zero!
        if (o == "/") then
            
            return n1 / n2
        end
        if (o == "^") then
            
            return math.pow(n1, n2)
        end
        
        return 0
    end
    
    --Handles precidence of parenthesis by evaluating the inner portion as a seperate expression
    function _fn.paren(afterParen)
        
        local i = 0; 
        local tempParen = nil; 
        local tempParen1 = nil; 
        local parenReturn = nil; 
        local result = 0; 
        
        i = 0; while i < string.len(afterParen) do
            
            tempParen = ct.substring(afterParen, i, i + 1)
            if (tempParen == ")") then
                break; end
            if (tempParen == "(") then
                
                parenReturn = _fn.paren(ct.substring(afterParen, i + 1))
                tempParen = ct.substring(afterParen, 0, i)
                tempParen1 = ct.formatDecimal(ct.indexArray(parenReturn, 0))
                result = ct.parseNumber(_fn.calculate(tempParen .. tempParen1))
                i = i + (ct.toInt(ct.indexArray(parenReturn, 1)))
                local results = { result, i + 1, length = 2, default = 0 }
                return results
            end
            
        i = i + 1; end
        
        afterParen = ct.substring(afterParen, 0, i)
        result = ct.parseNumber(_fn.calculate(afterParen))
        local results = { result, i + 1, length = 2, default = 0 }
        return results
    end
    
    function _fn.calculate(toCalculate)
        
        local i = 0
        local valueCount = 0
        local operatorCount = 0
        local returnMe = "math error"
        local tempCalc = nil; 
        local parenReturn = nil; 
        local values = { length = 12, default = 0 }
        local operators = { length = 12, default = nil }
        
        while true do
            
            tempCalc = ct.substring(toCalculate, i, i + 1)
            if (tempCalc == "(") then
                
                parenReturn = _fn.paren(ct.substring(toCalculate, 1))
                valueCount = valueCount + (1)
                ct.checkArrayIndex(values, valueCount - 1); values[1+(valueCount - 1)] = ct.indexArray(parenReturn, 0)
                local y = ct.toInt(ct.indexArray(parenReturn, 1)) + 1
                
                if y >= string.len(toCalculate) - 1 then
                    
                    break
                end
                
                toCalculate = ct.substring(toCalculate, y)
                i = 0
            
            elseif i == (string.len(toCalculate) - 1) then
                
                --checks for operators at the end of
                if (tempCalc == "+") or (tempCalc == "-") or (tempCalc == "*") or (tempCalc == "/") or (tempCalc == "^") or (tempCalc == "(") then
                    
                    return returnMe
                
                else 
                    
                    valueCount = valueCount + (1)
                    ct.checkArrayIndex(values, valueCount - 1); values[1+(valueCount - 1)] = ct.parseNumber(toCalculate)
                    break
                end
            
            else 
                
                if (tempCalc == "+") or (tempCalc == "-") or (tempCalc == "*") or (tempCalc == "/") or (tempCalc == "^") then
                    
                    
                    --Having found the end of a number pushes it to the values array
                    if i ~= 0 then
                        
                        valueCount = valueCount + (1)
                        ct.checkArrayIndex(values, valueCount - 1); values[1+(valueCount - 1)] = ct.parseNumber(ct.substring(toCalculate, 0, i))
                    end
                    
                    --Checks if the operator array is empty
                    if operatorCount == 0 then
                        
                        operatorCount = operatorCount + (1)
                        ct.checkArrayIndex(operators, operatorCount - 1); operators[1+(operatorCount - 1)] = ct.substring(toCalculate, i, i + 1)
                    
                    else 
                        
                        --Compares the precedence of the operators
                        if _fn.precedence(ct.substring(toCalculate, i, i + 1)) >= _fn.precedence(ct.indexArray(operators, operatorCount - 1)) then
                            
                            local operator = ct.indexArray(operators, operatorCount - 1)
                            local num1 = ct.indexArray(values, valueCount - 2)
                            local num2 = ct.indexArray(values, valueCount - 1)
                            if num2 == 0 and (operator == "/") then
                                return "Div by zero no!"; 
                            else 
                                ct.checkArrayIndex(values, valueCount - 2); values[1+(valueCount - 2)] = _fn.simpleCalculate(num1, num2, operator); end
                            ct.checkArrayIndex(operators, operatorCount - 1); operators[1+(operatorCount - 1)] = ct.substring(toCalculate, i, i + 1)
                            valueCount = valueCount - (1)
                        
                        else 
                            
                            operatorCount = operatorCount + (1)
                            ct.checkArrayIndex(operators, operatorCount - 1); operators[1+(operatorCount - 1)] = ct.substring(toCalculate, i, i + 1)
                        end
                    end
                    
                    toCalculate = ct.substring(toCalculate, i + 1)
                    i = 0
                
                else 
                    
                    i = i + 1
                end
            end
        end
        while operatorCount > 0 do
            
            local num1 = ct.indexArray(values, valueCount - 2)
            local num2 = ct.indexArray(values, valueCount - 1)
            local operator = ct.indexArray(operators, operatorCount - 1)
            if num2 == 0 and (operator == "/") then
                return "Div by zero no!"; 
            else 
                ct.checkArrayIndex(values, valueCount - 2); values[1+(valueCount - 2)] = _fn.simpleCalculate(num1, num2, operator); end
            valueCount = valueCount - (1)
            operatorCount = operatorCount - (1)
        end
        
        
        --Formating and returning result 
        local result = ct.indexArray(values, 0)
        
        if result == 0 then
            
            return "0.0"
        
        elseif math.abs(result) > 999999 or math.abs(result) < 0.000001 then
            
            
            local exp = 0
            local coefficient = 0
            local expStr = ""
            
            
            if result > 1 then
                
                expStr = ct.formatInt(ct.toInt(result))
                exp = string.len(expStr) - 1
                
                coefficient = result / math.pow(10, exp)
                expStr = "e+" .. ct.formatInt(exp)
            end
            
            if result < 1 then
                
                exp = 0
                while result < 1 do
                    
                    result = result * (10)
                    exp = exp - 1
                end
                
                coefficient = result
                expStr = "e" .. ct.formatInt(exp)
            end
            
            result = ct.roundDecimal(coefficient, 11 - string.len(expStr))
            
            return ct.formatDecimal(result) .. expStr
        end
        
        
        returnMe = ct.formatDecimal(result)
        if string.len(returnMe) > 12 then
            
            returnMe = ct.formatInt(ct.toInt(result))
            local decimalPlaces = 11 - string.len(returnMe)
            result = ct.roundDecimal(result, decimalPlaces)
            returnMe = ct.formatDecimal(result)
        end
        
        if ct.toInt(result) == result then
            
            returnMe = ct.formatInt(ct.toInt(result))
            return returnMe
        end
        
        return returnMe
    end
