this = {}; _fn = {}   -- This file was generated by Code12 from "DuckHuntLineHits.java"
package.path = package.path .. ';../../Desktop/Code12/?.lua;../../../Desktop/Code12/?.lua'
require('Code12.api')
-- Click the mouse anywhere in the app window to make the gun move horizontally to the click
-- location and fire straight upwards towards the ducks.



    
    
        
        
    
    
    this.gun = nil; 
    this.ducksHitDisplay = nil; 
    this.accuracyDisplay = nil; 
    this.yMax = 0; 
    this.maxSizeBullets = 0; 
    this.maxSizeDucks = 0; 
    this.bulletsArr = nil; 
    this.ducksArr = nil; 
    this.duckYStartsArr = nil; 
    this.bulletsCount = 0; 
    this.bulletsMissed = 0; 
    this.ducksCount = 0; 
    this.ducksHit = 0; 
    this.ducksMissed = 0; 
    this.amplitude = 0; 
    this.period = 0; 
    this.leftWall = nil; this.topWall = nil; 
    this.paused = false; 
    this.turboMode = false; 
    this.frameCount = 0
    
    function _fn.start()
        
        -- Set title
        ct.setTitle("Duck Hunt")
        
        -- Set background
        ct.setHeight(ct.intDiv(100 * 9, 16))
        this.yMax = ct.getHeight()
        ct.setBackImage("stage.png")
        
        -- Initialize count variables
        this.bulletsCount = 0
        this.bulletsMissed = 0
        this.ducksCount = 0
        this.ducksHit = 0
        this.ducksMissed = 0
        
        -- Make ducksHitDisplay
        local scoreHeight = 5
        local scoreColor = "dark magenta"
        this.ducksHitDisplay = ct.text("Ducks hit: ", 0, this.yMax, scoreHeight, scoreColor)
        this.ducksHitDisplay:align("bottom left", true)
        
        -- Make accuracyDisplay
        this.accuracyDisplay = ct.text("Shot Accuracy: ", 100, this.yMax, scoreHeight, scoreColor)
        this.accuracyDisplay:align("bottom right", true)
        
        -- Make gun
        this.gun = ct.image("gun.png", 50, this.yMax - scoreHeight, 8)
        this.gun:align("bottom", true)
        
        -- Initialize arrays
        this.maxSizeDucks = 5000
        this.maxSizeBullets = 100
        this.bulletsArr = { length = this.maxSizeBullets, default = nil }
        this.ducksArr = { length = this.maxSizeDucks, default = nil }
        this.duckYStartsArr = { length = this.maxSizeDucks, default = 0 }
        
        -- Initialize amplitude and period for ducks' path
        this.amplitude = 5
        this.period = 100
        
        -- Make walls
        this.leftWall = ct.line(0, 0, 0, ct.getHeight(), "red")
        this.topWall = ct.line(0, 0, 100, 0, "red")
        
        -- Start the game unpaused and with turbo mode off
        this.paused = false
        this.turboMode = false
    end
    
    function _fn.update()
        
        this.frameCount = this.frameCount + 1
        --       if ( ct.keyPressed("space") )
        --       {
        --          paused = !paused;
        --          ct.println( "paused = " + paused );
        --       }
        --       if ( ct.keyPressed("t") )
        --       {
        --          turboMode = !turboMode;
        --          ct.println( "turboMode = " + turboMode );
        --       }
        
        -- Make ducks at random times and positions
        if not this.paused and this.frameCount % 180 == 1 then
            
            local numberOfDucks = 1
            if this.turboMode then
                numberOfDucks = 100; end
            local i = 1; while i <= numberOfDucks do
                
                local x = 95
                local y = ct.random(10, ct.toInt(this.yMax / 2))
                local duck = _fn.createDuck(x, y, -0.1)
            i = i + 1; end
        end
        
        -- If a duck goes off screen, delete it
        -- Else make it move up/down on sinusoidal path
        local j = this.ducksCount - 1; while j >= 0 do
            
            local duck = ct.indexArray(this.ducksArr, j)
            local duckYStart = ct.indexArray(this.duckYStartsArr, j)
            if duck:hit(this.leftWall) then
                
                _fn.deleteDuck(j)
                this.ducksMissed = this.ducksMissed + 1
                ct.println("duck #"..tostring(this.ducksMissed).." hit left wall")
            
            else 
                
                --duck.ySpeed = ct.random( -1, 1 ) / 4.0;
                duck.y = ct.indexArray(this.duckYStartsArr, j) + this.amplitude * math.sin(2 * math.pi / this.period * duck.x)
            end
        j = j - 1; end
        
        -- Check for duck-bullet hits and going off screen
        local i = this.bulletsCount - 1; while i >= 0 do
            
            local bullet = ct.indexArray(this.bulletsArr, i)
            -- Delete bullet if it has gone off screen
            if this.topWall:hit(bullet) then
                
                _fn.deleteBullet(i)
                this.bulletsMissed = this.bulletsMissed + 1
                ct.println("bullet #"..tostring(this.bulletsMissed).." hit top wall")
                
                -- Don't check this bullet hitting ducks
                break
            end
            -- Check for bullet hitting any ducks
            local j = this.ducksCount - 1; while j >= 0 do
                
                local duck = ct.indexArray(this.ducksArr, j)
                if duck:hit(bullet) then
                    
                    ct.sound("quack.wav")
                    _fn.makeDeadDuck(duck)
                    
                    -- Delete bullet and duck
                    _fn.deleteBullet(i)
                    _fn.deleteDuck(j)
                    this.ducksHit = this.ducksHit + 1
                    -- Don't let this bullet affect any more ducks
                    break
                end
            j = j - 1; end
        i = i - 1; end
        
        -- Update ducksHitDisplay
        local percent = ct.round(100.0 * this.ducksHit / (this.ducksHit + this.ducksMissed))
        this.ducksHitDisplay:setText("Ducks hit: "..tostring(percent).."%")
        
        -- Update accuracyDisplay
        percent = ct.round(100.0 * this.ducksHit / (this.ducksHit + this.bulletsMissed))
        this.accuracyDisplay:setText("Shot Accuracy: "..tostring(percent).."%")
    end
    
    -- Makes a bullet at position xStart, yStart that will then
    -- move up the window and delete itself once outside the window
    function _fn.fireBullet(xStart, yStart)
        
        local bullet = nil
        if this.bulletsCount < this.maxSizeBullets then
            
            --GameObj bullet = ct.circle( xStart, yStart, 1, "blue" );
            bullet = ct.line(xStart, yStart, xStart, yStart + 2, "blue")
            bullet.lineWidth = 5
            bullet.ySpeed = -3
            ct.checkArrayIndex(this.bulletsArr, this.bulletsCount); this.bulletsArr[1+(this.bulletsCount)] = bullet
            this.bulletsCount = this.bulletsCount + 1
        
        else 
            
            ct.println("Too many bullets on screen.")
        end
        return bullet
    end
    
    -- Deletes a bullet
    function _fn.deleteBullet(index)
        
        local bullet = ct.indexArray(this.bulletsArr, index)
        bullet:delete()
        local i = index; while i < this.bulletsCount - 1 do
            
            ct.checkArrayIndex(this.bulletsArr, i); this.bulletsArr[1+(i)] = ct.indexArray(this.bulletsArr, i + 1)
        i = i + 1; end
        this.bulletsCount = this.bulletsCount - 1
    end
    
    -- Makes a duck to the right of the window at y-coordinate yStart
    -- that will then accross the window horizontally with speed xSpeed
    function _fn.createDuck(xStart, yStart, xSpeed)
        
        local duck = nil
        if this.ducksCount < this.maxSizeDucks then
            
            duck = ct.image("rubber-duck.png", xStart, yStart, 5)
            duck.xSpeed = xSpeed
            ct.checkArrayIndex(this.ducksArr, this.ducksCount); this.ducksArr[1+(this.ducksCount)] = duck
            ct.checkArrayIndex(this.duckYStartsArr, this.ducksCount); this.duckYStartsArr[1+(this.ducksCount)] = yStart
            this.ducksCount = this.ducksCount + 1
        
        else 
            
            ct.println("Too many ducks on screen.")
        end
        
        return duck
    end
    
    -- Deletes a duck
    function _fn.deleteDuck(index)
        
        local duck = ct.indexArray(this.ducksArr, index)
        duck:delete()
        local i = index; while i < this.ducksCount - 1 do
            
            ct.checkArrayIndex(this.ducksArr, i); this.ducksArr[1+(i)] = ct.indexArray(this.ducksArr, i + 1)
            ct.checkArrayIndex(this.duckYStartsArr, i); this.duckYStartsArr[1+(i)] = ct.indexArray(this.duckYStartsArr, i + 1)
            
        i = i + 1; end
        this.ducksCount = this.ducksCount - 1
    end
    
    -- Makes a dead duck at duck's position
    function _fn.makeDeadDuck(duck)
        
        local deadDuck = ct.image("dead-duck.png", duck.x, duck.y, duck.height)
        deadDuck.autoDelete = true
        deadDuck.ySpeed = 1
        return deadDuck
    end
    
    -- Moves the gun horizontally and fires a bullet when the mouse
    -- is clicked
    function _fn.onMousePress(obj, x, y)
        
        -- Play squirt sound
        ct.sound("squirt.wav")
        
        -- Move the gun horizontally to match the click location
        this.gun.x = x
        
        -- Fire a new bullet
        local xStart = this.gun.x
        local yStart = this.gun.y - this.gun.height * 0.9
        _fn.fireBullet(xStart, yStart)
    end
    
    function _fn.onKeyPress(keyName)
        
        if (keyName == "space") then
            
            this.paused = not this.paused
            if this.paused then
                ct.println("paused"); 
            else 
                ct.println("unpaused"); end
        end
        if (keyName == "t") then
            
            this.turboMode = not this.turboMode
            if this.turboMode then
                ct.println("turboMode on"); 
            else 
                ct.println("turboMode off"); end
            
        end
    end
