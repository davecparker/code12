this = {}; _fn = {}   -- This file was generated by Code12 from "MainProgram.java"
package.path = package.path .. ';../../Desktop/Code12/?.lua;../../../Desktop/Code12/?.lua'
require('Code12.api')
    
    --Instance Variables
    this.display = nil; 
    this.displayText = ""
    this.buttons = { length = 20 }
    this.clearBack = nil; 
    this.operatorButtons = { "+", "-", "*", "/", ".", "=", "(", ")", "%", length = 9 }
    this.errorMessages = { "Cannot divide by zero!", length = 1 }
    this.equation = nil; 
    this.compare = nil; 
    --Instance Variables for the calculate method
    this.values = { length = 12 }
    this.operators = { length = 12 }
    this.temp = nil; 
    this.displayingAnswer = false
    
    
        
        
    
    
    function _fn.start()
        
        
        --///////////////////////////////////////////////////////////////////////////////
        -- Calculator Screen
        
        ct.setScreen("Calculator")
        --Adds the 0 number key
        this.buttons[1+(0)] = ct.rect(20, 83, 15, 10, "gray")
        ct.text("0", 20, 83, 10, "black")
        
        --Adds the backspace/clear key
        this.buttons[1+(19)] = ct.rect(71, 31, 15, 10, "gray")
        this.clearBack = ct.text("AC", 71, 31, 10, "black")
        
        
        local num = 1
        --Prints the number keys (1-9)
        local y = 70; while y >= 44 do
            
            local x = 20; while x <= 54 do
                
                this.buttons[1+(num)] = ct.rect(x, y, 15, 10, "gray")
                ct.text(ct.formatInt(num), x, y - 1, 10, "black")
                num = num + 1
            x = x + (17); end
        y = y - (13); end
        
        --adds basic math operator buttons
        local y = 83; while y >= 44 do
            
            this.buttons[1+(num)] = ct.rect(71, y, 15, 10, "gray")
            ct.text(this.operatorButtons[1+(num % 10)], 71, y - 1, 10, "black")
            num = num + 1
        y = y - (13); end
        
        --adds equals and decimal button
        local x = 37; while x <= 54 do
            
            this.buttons[1+(num)] = ct.rect(x, 83, 15, 10, "gray")
            ct.text(this.operatorButtons[1+(num % 10)], x, 83, 10, "black")
            num = num + 1
        x = x + (17); end
        
        
        -- adds (, ), % and clear button
        local x = 20; while x <= 54 do
            
            this.buttons[1+(num)] = ct.rect(x, 31, 15, 10, "gray")
            local y = 31
            local buttonId = num % 10
            this.compare = this.operatorButtons[1+(buttonId)]
            if (this.compare == "(") or (this.compare == ")") then
                y = 30; end
            ct.text(this.operatorButtons[1+(num % 10)], x, y, 10, "black")
            num = num + 1
        x = x + (17); end
        
        for _, button in ipairs(this.buttons) do
            
            button.clickable = true
        end
        
        --Initializes the display
        ct.setTitle("Calculator")
        this.displayText = ""
        this.display = ct.text(this.displayText, 56, 18, 12, "black")
        
        -- ct.clearScreen();
        
        --///////////////////////////////////////////////////////////////////////////////
        -- Equation Solver
        
        -- equation = ct.inputString("Enter an equation");
        -- ct.println( Test( 2 ) );
    end
    
    --
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    --///////////////////////////////////////////////////////////////////////////////   
    
    function _fn.update()
        
        
    end
    
    function _fn.onKeyPress(keyName)
        
        if ct.canParseInt(ct.substring(keyName, string.len(keyName) - 1, string.len(keyName))) then
            
            local i = ct.parseInt(ct.substring(keyName, string.len(keyName) - 1, string.len(keyName)))
            _fn.Input(i)
        end
    end
    
    
    function _fn.onMousePress(obj, x, y)
        
        local i = -1
        i = 0; while i < this.buttons.length do
            
            if obj == this.buttons[1+(i)] then
                
                break
            end
        i = i + 1; end
        _fn.Input(i)
    end
    
    
    
    --Handles inputs from mouse and keyboard
    function _fn.Input(i)
        
        if i ~= -1 then
            
            
            if string.len(this.displayText) < 12 and i < 14 then
                
                
                if i < 10 then
                    
                    --clears the display text if you enter a number while displaying a previously calculated answer          
                    if this.displayingAnswer then
                        
                        _fn.updateDisplay()
                        this.displayText = ""
                        this.displayingAnswer = false
                        this.clearBack:setText("AC")
                    end
                    
                    this.displayText = this.displayText .. i
                
                else 
                    
                    this.displayText = this.displayText .. this.operatorButtons[1+(i % 10)]
                end
                
                _fn.updateDisplay()
            end
            
            if i == 14 then
                
                local currentNumber = ""
                local j = 0; 
                --Finds the last number including decimal up until a mathmatical operator
                j = string.len(this.displayText) - 1; while j >= 0 do
                    
                    this.compare = ct.substring(this.displayText, j, j + 1)
                    if (this.compare == "+") or (this.compare == "-") or (this.compare == "*") or (this.compare == "/") then
                        
                        break
                    end
                j = j - 1; end
                
                currentNumber = ct.substring(this.displayText, j + 1)
                
                if ct.indexOfString(currentNumber, ".") == -1 then
                    
                    if not (currentNumber == "") then
                        
                        this.displayText = this.displayText .. this.operatorButtons[1+(i % 10)]
                        _fn.updateDisplay()
                    
                    else 
                        
                        this.displayText = this.displayText .. "0" .. this.operatorButtons[1+(i % 10)]
                        _fn.updateDisplay()
                    end
                end
            end
            
            if i == 15 then
                
                if not (this.displayText == "") and not ct.canParseNumber(this.displayText) then
                    
                    local result = this.displayText
                    this.displayText = _fn.calculate(result)
                    _fn.updateDisplay()
                    this.displayingAnswer = true
                    this.clearBack:setText("C")
                end
            end
            
            if i == 19 then
                
                if not (this.displayText == "") then
                    
                    if this.displayingAnswer then
                        
                        this.displayText = ""
                        _fn.updateDisplay()
                        this.displayingAnswer = false
                        this.clearBack:setText("AC")
                    
                    else 
                        
                        this.displayText = ct.substring(this.displayText, 0, string.len(this.displayText) - 1)
                        _fn.updateDisplay()
                    end
                end
            end
        end
    end
    
    
    
    --Method that takes a newDisplay value and redraws the display to properly display the new value
    function _fn.updateDisplay()
        
        this.display:setText(this.displayText)
        local newX = 77 - (this.display.width / 2.0)
        this.display:delete()
        this.display = ct.text(this.displayText, newX, 18, 12, "black")
    end
    
    
    -- Method that takes the currently displayed function and calculates the value
    -- Takes a string representing the displayed value (composed of numbers and math operators)
    -- Returns a string of a single number (double)
    
    
    --Helper methods for Calculate
    
    --IndexOf for arrays
    function _fn.findIndex(array, findMe)
        
        local i = 0; while i < array.length do
            
            if (findMe == array[1+(i)]) then
                
                return i
            end
        i = i + 1; end
        
        return -1
    end
    
    --Handles simple numerical calculations
    --Takes two doubles and a string representing a mathmatical operator
    --Returns a double representing the result of applying the operator to the two numbers
    function _fn.simpleCalculate(n1, n2, o)
        
        if (o == "-") then
            
            return n1 - n2
        end
        if (o == "+") then
            
            return n1 + n2
        end
        if (o == "*") then
            
            return n1 * n2
        end
        --Add exception to handle dividing by zero!
        if (o == "/") then
            
            return n1 / n2
        end
        
        return 0
    end
    
    function _fn.calculate(toCalculate)
        
        local i = 0
        local valueCount = 0
        local operatorCount = 0
        
        while string.len(toCalculate) > 0 do
            
            if i == (string.len(toCalculate) - 1) then
                
                valueCount = valueCount + (1)
                this.values[1+(valueCount - 1)] = ct.parseNumber(toCalculate)
                break
            
            else 
                
                this.compare = ct.substring(toCalculate, i, i + 1)
                if (this.compare == "+") or (this.compare == "-") or (this.compare == "*") or (this.compare == "/") then
                    
                    --Having found the end of a number pushes it to the values array
                    valueCount = valueCount + (1)
                    this.values[1+(valueCount - 1)] = ct.parseNumber(ct.substring(toCalculate, 0, i))
                    
                    --Checks if the operator array is empty
                    if operatorCount == 0 then
                        
                        operatorCount = operatorCount + (1)
                        this.operators[1+(operatorCount - 1)] = ct.substring(toCalculate, i, i + 1)
                        toCalculate = ct.substring(toCalculate, i + 1)
                        i = 0
                    
                    else 
                        
                        --Compares the precedence of the operators
                        if _fn.findIndex(this.operatorButtons, ct.substring(toCalculate, i, i + 1)) <= _fn.findIndex(this.operatorButtons, this.operators[1+(operatorCount - 1)]) then
                            
                            local operator = this.operators[1+(operatorCount - 1)]
                            local num1 = this.values[1+(valueCount - 2)]
                            local num2 = this.values[1+(valueCount - 1)]
                            this.values[1+(valueCount - 2)] = _fn.simpleCalculate(num1, num2, operator)
                            this.operators[1+(operatorCount - 1)] = ct.substring(toCalculate, i, i + 1)
                            valueCount = valueCount - (1)
                            toCalculate = ct.substring(toCalculate, i + 1)
                            i = 0
                        
                        else 
                            
                            operatorCount = operatorCount + (1)
                            this.operators[1+(operatorCount - 1)] = ct.substring(toCalculate, i, i + 1)
                        end
                    end
                
                else 
                    
                    i = i + 1
                end
            end
        end
        
        while operatorCount > 0 do
            
            local num1 = this.values[1+(valueCount - 2)]
            local num2 = this.values[1+(valueCount - 1)]
            local operator = this.operators[1+(operatorCount - 1)]
            this.values[1+(valueCount - 2)] = _fn.simpleCalculate(num1, num2, operator)
            valueCount = valueCount - (1)
            operatorCount = operatorCount - (1)
        end
        
        
        --Formating and returning result
        local result = this.values[1+(0)]
        
        if result > 999999999 or result < 0.000000001 then
            
            local exponant = 0
            local coefficient = 0
            local exp = ""
            
            
            if result > 1 then
                
                exp = ct.formatInt(ct.toInt(result))
                exponant = string.len(exp) - 1
                
                coefficient = result / math.pow(10, exponant)
                exp = "+e" .. ct.formatInt(exponant)
            end
            
            if result < 1 then
                
                exp = ct.formatDecimal(result)
                exponant = -1 * (string.len(exp) - 1)
                
                coefficient = result * math.pow(10, exponant)
                exp = "-e" .. ct.formatInt(exponant)
            end
            
            result = ct.roundDecimal(coefficient, 11 - string.len(exp))
            return ct.formatDecimal(result) .. exp
        end
        
        this.compare = ct.formatDecimal(result)
        if string.len(this.compare) > 12 then
            
            this.compare = ct.formatInt(ct.toInt(result))
            local decimalPlaces = 11 - string.len(this.compare)
            
            result = ct.roundDecimal(result, decimalPlaces)
        end
        
        if ct.toInt(result) == result then
            return ct.formatInt(ct.toInt(result)); end
        
        return ct.formatDecimal(result)
    end
