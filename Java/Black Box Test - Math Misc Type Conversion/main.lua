this = {}; _fn = {}   -- This file was generated by Code12 from "MathMiscTypeConversionTest - Desktop.java"
package.path = package.path .. ';../../Desktop/Code12/?.lua;../../../Desktop/Code12/?.lua'
require('Code12.api')
-- --------------
-- int ct.random( int min, int max )
-- int ct.round( double d )
-- double ct.roundDecimal( double d, int numPlaces )
-- boolean ct.isError( double d )
-- double ct.distance( double x1, double y1, double x2, double y2 )
-- int ct.getTimer( )
-- double getVersion( )

-- Type Conversion
-- ---------------
-- int ct.toInt( double d )                // truncates
-- int ct.parseInt( String s )             // 0 if failure
-- boolean ct.canParseInt( String s )
-- double ct.parseNumber( String s )       // NaN if failure
-- boolean ct.canParseNumber( String s )
-- String ct.formatDecimal( double d )
-- String ct.formatDecimal( double d, int numPlaces )
-- String ct.formatInt( int i )
-- String ct.formatInt( int i, int numDigits )    // uses leading 0's


-- import java.io.PrintWriter;
-- import org.apache.commons.math3.special.Gamma;


    
    
        
        
    
    
    this.EPSILON = 0.0000001
    
    this.allTestsPassed = true
    
    --    PrintWriter writer;
    --     boolean fileOutputOn = false;
    --     boolean testRandomIsUniform = false;
    this.frameCount = 0; 
    this.avgFrameCount = 0; 
    this.start = 0; 
    this.framesPerSecondText = nil; 
    this.timeDisplay = nil; 
    this.startButton = nil; 
    this.timerStartTime = 0; 
    this.timerStarted = false; 
    
    function _fn.start()
        
        -- ct.random( 100, 0 ); // Throws Exception in thread "AWT-EventQueue-0" java.lang.IllegalArgumentException: bound must be positive   
        --        at java.util.Random.nextInt(Random.java:388)
        --       at Code12.Game.random(Game.java:276)
        --       if ( fileOutputOn )
        --             initPrintWriter();
        ct.println("Tests started")
        _fn.runTests_random(true)
        _fn.runTests_round(true)
        _fn.runTests_roundDecimal(true)
        _fn.runTests_isError(true)
        _fn.runTests_distance(true)
        _fn.runTests_getVersion(true)
        _fn.runTests_toInt(true)
        _fn.runTests_parseInt(true)
        _fn.runTests_canParseInt(true)
        _fn.runTests_parseNumber(true)
        _fn.runTests_canParseNumber(true)
        _fn.runTests_formatDecimal(true)
        _fn.runTests_formatInt(true)
        ct.println("Tests finished")
        if this.allTestsPassed then
            _fn.print("All tests passed"); end
        --         if ( fileOutputOn )
        --          writer.close();
        
        this.framesPerSecondText = ct.text("", 5, 5, 5)
        this.framesPerSecondText:align("left")
        
        this.timeDisplay = ct.text("00:00:00.00", 5, 10, 5)
        this.timeDisplay:align("left")
        
        this.startButton = ct.text("Start Timer", 5, 15, 5)
        this.startButton:align("left")
        this.startButton.clickable = true
        
        _fn.initTests_getTimer(true)
    end
    
    function _fn.update()
        
        _fn.runTests_getTimer(true)
    end
    
    function _fn.onMousePress(obj, x, y)
        
        if obj == this.startButton then
            
            this.timerStartTime = ct.getTimer()
            this.timerStarted = true
            this.startButton.visible = false
        end
    end
    
    
    -- Utility functions 
    -- -------------------------------------------------------------
    --    public void initPrintWriter()
    --     {
    --         try
    --       {
    --          writer = new PrintWriter( "output.txt" );
    --         }
    --         catch(Exception e)
    --       {
    --          ct.println( "Error writing to output.txt" );
    --          ct.println( e.toString() );
    --       }
    --     }
    
    function _fn.print(line)
        
        --         if ( fileOutputOn )
        --             writer.println( line );
        ct.println(line)
    end
    
    function _fn.printError(error)
        
        this.allTestsPassed = false
        _fn.print(error)
    end
    
    function _fn.testRound(d, expected)
        
        local output = ct.round(d)
        if output ~= expected then
            _fn.printError("ct.round(" .. d .. ") = " .. output .. "; " .. expected .. " expected"); end
    end
    
    function _fn.testRoundDecimal(d, numPlaces, expected)
        
        local output = ct.roundDecimal(d, numPlaces)
        if math.abs(output - expected) > this.EPSILON then
            _fn.printError("ct.roundDecimal(" .. d .. ", " .. numPlaces .. ") = " .. output .. "; " .. expected .. " expected"); end
    end
    
    function _fn.testIsError(d, expression)
        
        if not ct.isError(d) then
            _fn.printError("ct.isError(" .. expression .. ") = ct.isError(" .. d .. ") = false"); end
    end
    
    function _fn.testDistance(x1, y1, x2, y2, expected)
        
        local output = ct.distance(x1, y1, x2, y2)
        if math.abs(output - expected) > this.EPSILON then
            _fn.printError("ct.distance(" .. x1 .. "," .. y1 .. "," .. x2 .. "," .. y2 .. ") = " .. output .. "; " .. expected .. " expected"); end
    end
    
    function _fn.testToInt(d, expected)
        
        local output = ct.toInt(d)
        if output ~= expected then
            _fn.printError("ct.toInt(" .. d .. ") = " .. output .. "; " .. expected .. " expected"); end
    end
    
    function _fn.testParseInt(s, expected)
        
        local output = ct.parseInt(s)
        if output ~= expected then
            _fn.printError("ct.parseInt(" .. s .. ") = " .. output .. "; " .. expected .. " expected"); end
    end
    
    function _fn.testCanParseInt(s, expected)
        
        local output = ct.canParseInt(s)
        if output ~= expected then
            
            if output then
                _fn.printError("ct.canParseInt(" .. s .. ") = true; false expected"); 
            else 
                _fn.printError("ct.canParseInt(" .. s .. ") = false; true expected"); end
        end
    end
    
    function _fn.testParseNumber(s, expected)
        
        local output = ct.parseNumber(s)
        if math.abs(output - expected) > this.EPSILON then
            _fn.printError("ct.parseNumber(" .. s .. ") = " .. output .. "; " .. expected .. " expected"); end
    end
    
    function _fn.testParseNumberError(s)
        
        local output = ct.parseNumber(s)
        if not ct.isError(output) then
            _fn.printError("ct.parseNumber(" .. s .. ") = " .. output .. "; NaN expected"); end
    end
    
    function _fn.testCanParseNumber(s, expected)
        
        local output = ct.canParseNumber(s)
        if output ~= expected then
            
            if output then
                _fn.printError("ct.canParseNumber(" .. s .. ") = true; false expected"); 
            else 
                _fn.printError("ct.canParseInt(" .. s .. ") = false; true expected"); end
        end
    end
    
    function _fn.testFormatDecimal(d, expected)
        
        local output = ct.formatDecimal(d)
        if not (output == expected) then
            _fn.printError("ct.formatDecimal(" .. d .. ") = " .. output .. "; " .. expected .. " expected"); end
    end
    
    function _fn.testFormatDecimalNumPlaces(d, numPlaces, expected)
        
        local output = ct.formatDecimal(d, numPlaces)
        if not (output == expected) then
            _fn.printError("ct.formatDecimal(" .. d .. ", " .. numPlaces .. ") = " .. output .. "; " .. expected .. " expected"); end
    end
    
    function _fn.testFormatInt(i, expected)
        
        local output = ct.formatInt(i)
        if not (output == expected) then
            _fn.printError("ct.formatInt(" .. i .. ") = " .. output .. "; " .. expected .. " expected"); end
    end
    
    function _fn.testFormatIntNumPlaces(i, numPlaces, expected)
        
        local output = ct.formatInt(i, numPlaces)
        if not (output == expected) then
            _fn.printError("ct.formatInt(" .. i .. ", " .. numPlaces .. ") = " .. output .. "; " .. expected .. " expected"); end
    end
    
    -- Tests 
    -- -------------------------------------------------------------
    
    function _fn.runTests_random(run)
        
        if run then
            
            --          int chiSqrTestsFailed = 0;
            --          int chiSqrTestsDone = 0;
            --          double alpha = 0.05; // Level of significance for Chi-Squared Tests
            
            local range = 1; while range <= 200 do
                
                local min = -100; while min <= 100 do
                    
                    local max = min + range
                    --                 int[] observedFreq = new int[range + 1];
                    
                    local randomMaxCount = 500
                    
                    local count = 1; while count <= randomMaxCount do
                        
                        local rand = ct.random(min, max)
                        --                      observedFreq[ rand - min ]++;
                        
                        -- test if return value is between min and max
                        if rand < min or rand > max then
                            _fn.printError("ct.random(" .. min .. "," .. max .. ") = " .. rand); end
                    count = count + 1; end
                    --                if ( testRandomIsUniform )
                    --                     {
                    --                    // test if return value is uniformly distributed (Chi Square test)
                    --                    double expectedFreq = (double)(randomMaxCount) / (range + 1);
                    --                    double chiSqr = 0;
                    --                    for ( int i = 0; i < range + 1; i++ )
                    --                    {
                    --                       double dev = observedFreq[i] - expectedFreq;
                    --                       chiSqr +=  dev * dev / expectedFreq;
                    --                    }
                    --                    double dof = randomMaxCount - 1;
                    --                    double pValue = Gamma.regularizedGammaQ(dof / 2, chiSqr / 2);
                    --                    chiSqrTestsDone++;
                    --                    
                    --                    if ( pValue < alpha )
                    --                        chiSqrTestsFailed++;
                    --                     }
                min = min + 1; end
            range = range + 1; end
            --          if ( testRandomIsUniform )
            --             {
            --              double fractionOfChiSqrTestsFailed = (double)(chiSqrTestsFailed) / chiSqrTestsDone;
            --              if ( fractionOfChiSqrTestsFailed > alpha )
            --                 printError( "Fraction of Chi Square Tests Failed = " + fractionOfChiSqrTestsFailed + " (alpha = " + alpha + ")" );
            --          }      
            _fn.print("ct.random tests done")
        end
    end
    
    function _fn.runTests_round(run)
        
        if run then
            
            _fn.testRound(3.14159265, 3)
            
            _fn.testRound(-3.14159265, -3)
            
            _fn.testRound(31.622776601683793319988935444327, 32)
            
            _fn.testRound(-31.622776601683793319988935444327, -32)
            
            _fn.testRound(-3.5, -3)
            _fn.testRound(-2.5, -2)
            
            _fn.testRound(2.99792458, 3)
            _fn.testRound(29.9792458, 30)
            _fn.testRound(299.792458, 300)
            _fn.testRound(2997.92458, 2998)
            _fn.testRound(29979.2458, 29979)
            _fn.testRound(299792.458, 299792)
            _fn.testRound(2997924.58, 2997925)
            _fn.testRound(29979245.8, 29979246)
            _fn.testRound(299792458.0, 299792458)
            
            _fn.testRound(-2.99792458, -3)
            _fn.testRound(-29.9792458, -30)
            _fn.testRound(-299.792458, -300)
            _fn.testRound(-2997.92458, -2998)
            _fn.testRound(-29979.2458, -29979)
            _fn.testRound(-299792.458, -299792)
            _fn.testRound(-2997924.58, -2997925)
            _fn.testRound(-29979245.8, -29979246)
            _fn.testRound(-299792458.0, -299792458)
            
            _fn.print("ct.round tests done")
        end
    end
    
    function _fn.runTests_roundDecimal(run)
        
        if run then
            
            -- if digit in next place is a five, ct.roundDecimal( double d, int numPlaces ) rounds to nearest even digit
            _fn.testRoundDecimal(0.05, 1, 0.0)
            _fn.testRoundDecimal(-0.05, 1, 0.0)
            _fn.testRoundDecimal(-3.15, 1, -3.2)
            _fn.testRoundDecimal(-3.25, 1, -3.2)
            
            _fn.testRoundDecimal(123.4, 0, 123.0)
            _fn.testRoundDecimal(123.5, 0, 124.0)
            _fn.testRoundDecimal(-123.4, 0, -123.0)
            _fn.testRoundDecimal(-123.5, 0, -124.0)
            
            _fn.testRoundDecimal(0.049, 1, 0.0)
            _fn.testRoundDecimal(-0.049, 1, -0.0)
            
            _fn.testRoundDecimal(3.14159265, 1, 3.1)
            _fn.testRoundDecimal(3.14159265, 2, 3.14)
            _fn.testRoundDecimal(3.14159265, 3, 3.142)
            _fn.testRoundDecimal(3.14159265, 4, 3.1416)
            _fn.testRoundDecimal(3.14159265, 5, 3.14159)
            _fn.testRoundDecimal(3.14159265, 6, 3.141593)
            _fn.testRoundDecimal(3.14159265, 7, 3.1415927)
            _fn.testRoundDecimal(3.14159265, 8, 3.14159265)
            
            _fn.testRoundDecimal(-3.14159265, 1, -3.1)
            _fn.testRoundDecimal(-3.14159265, 2, -3.14)
            _fn.testRoundDecimal(-3.14159265, 3, -3.142)
            _fn.testRoundDecimal(-3.14159265, 4, -3.1416)
            _fn.testRoundDecimal(-3.14159265, 5, -3.14159)
            _fn.testRoundDecimal(-3.14159265, 6, -3.141593)
            _fn.testRoundDecimal(-3.14159265, 7, -3.1415927)
            _fn.testRoundDecimal(-3.14159265, 8, -3.14159265)
            
            _fn.testRoundDecimal(31.622776601683793319988935444327, 1, 31.6)
            _fn.testRoundDecimal(31.622776601683793319988935444327, 2, 31.62)
            _fn.testRoundDecimal(31.622776601683793319988935444327, 3, 31.623)
            _fn.testRoundDecimal(31.622776601683793319988935444327, 29, 31.62277660168379331998893544433)
            
            _fn.testRoundDecimal(-31.622776601683793319988935444327, 1, -31.6)
            _fn.testRoundDecimal(-31.622776601683793319988935444327, 2, -31.62)
            _fn.testRoundDecimal(-31.622776601683793319988935444327, 3, -31.623)
            _fn.testRoundDecimal(-31.622776601683793319988935444327, 29, -31.62277660168379331998893544433)
            
            _fn.print("ct.roundDecimal tests done")
        end
    end
    
    function _fn.runTests_isError(run)
        
        if run then
            
            _fn.testIsError(math.sqrt(-1), "Math.sqrt(-1)")
            _fn.testIsError(math.asin(2), "Math.asin(2)")
            _fn.testIsError(math.acos(2), "Math.asin(2)")
            _fn.testIsError(math.log(-1), "Math.log(-1)")
            _fn.testIsError(math.pow(-1, 0.5), "Math.pow(-1, 0.5)")
            _fn.testIsError(math.pow(-4, 0.25), "Math.pow(-4, 0.25)")
            
            _fn.print("ct.isError tests done")
        end
    end
    
    function _fn.runTests_distance(run)
        
        if run then
            
            _fn.testDistance(0, 0, 3, 4, 5)
            _fn.testDistance(10, 20, 13, 24, 5)
            _fn.testDistance(0, 0, -5, -12, 13)
            _fn.testDistance(-8, 15, 0, 0, 17)
            _fn.testDistance(-75, -34, -37, 85, 124.9199744)
            _fn.testDistance(-5.16, 64.79, 86.54, -29.152, 131.2782898)
            _fn.testDistance(1, 2, 1.01, 2.02, 0.02236068)
            _fn.testDistance(5, 10, 5.1, 1010, 1000.000005)
            _fn.testDistance(7, 8, 7.0001, 8.0001, 0.000141421)
            
            _fn.print("ct.distance tests done")
        end
    end
    
    function _fn.initTests_getTimer(run)
        
        if run then
            
            this.frameCount = 0
            this.start = ct.getTimer()
        end
    end
    
    function _fn.runTests_getTimer(run)
        
        if run then
            
            local newStart = ct.getTimer()
            this.frameCount = this.frameCount + 1
            local secondsPerFrame = (newStart - this.start) / 1000.0
            this.start = newStart
            local framesPerSecond = ct.roundDecimal(1 / secondsPerFrame, 2)
            -- ct.println( "Frames Per Second: " + framesPerSecond );
            
            local secondsPerFrameSinceStart = newStart / 1000.0
            local avgFramesPerSecond = ct.roundDecimal(this.frameCount / secondsPerFrameSinceStart, 2)
            this.framesPerSecondText:setText("Avg Frames Per Second: " .. avgFramesPerSecond)
            
            if this.timerStarted then
                
                local sec = (ct.getTimer() - this.timerStartTime) / 1000.0
                local time = ct.toInt(sec)
                local hrs = ct.intDiv(time, 3600)
                time = time % 3600
                local min = ct.intDiv(time, 60)
                sec = sec - hrs * 3600 - min * 60
                this.timeDisplay:setText(hrs .. ":" .. min .. ":" .. sec)
            end
        end
    end
    
    function _fn.runTests_getVersion(run)
        
        if run then
            
            local version = ct.getVersion()
            if version ~= 0.5 then
                
                this.allTestsPassed = false
                _fn.printError("ct.getVersion() = " .. version .. "; 0.5 expected")
            end
            _fn.print("ct.getVersion tests done")
        end
    end
    
    function _fn.runTests_toInt(run)
        
        if run then
            
            local i = 0; while i <= 100000 do
                
                _fn.testToInt(i, i)
                _fn.testToInt(i / 1000.0, ct.intDiv(i, 1000))
            i = i + 1; end
            _fn.print("ct.toInt tests done")
        end
    end
    
    function _fn.runTests_parseInt(run)
        
        if run then
            
            -- test valid input
            _fn.testParseInt("0", 0)
            _fn.testParseInt(" 0", 0)
            _fn.testParseInt("-0", 0)
            _fn.testParseInt("+0", 0)
            _fn.testParseInt("1", 1)
            _fn.testParseInt(" 123", 123)
            _fn.testParseInt("  +4567", 4567)
            _fn.testParseInt("  -987654321  ", -987654321)
            
            -- test invalid input
            _fn.testParseInt("", 0)
            _fn.testParseInt("3.14", 0)
            _fn.testParseInt("seven", 0)
            _fn.testParseInt("8/2", 0)
            _fn.testParseInt("  + 4567 ", 0)
            
            _fn.print("ct.parseInt tests done")
        end
    end
    
    function _fn.runTests_canParseInt(run)
        
        if run then
            
            -- test valid input
            _fn.testCanParseInt("0", true)
            _fn.testCanParseInt(" 0", true)
            _fn.testCanParseInt("-0", true)
            _fn.testCanParseInt("+0", true)
            _fn.testCanParseInt("1", true)
            _fn.testCanParseInt(" 123", true)
            _fn.testCanParseInt("  +4567", true)
            _fn.testCanParseInt("  -987654321  ", true)
            
            -- test invalid input
            _fn.testCanParseInt("", false)
            _fn.testCanParseInt("3.14", false)
            _fn.testCanParseInt("seven", false)
            _fn.testCanParseInt("8/2", false)
            _fn.testCanParseInt("  + 4567 ", false)
            _fn.testCanParseInt("1 + sqrt(2)", false)
            _fn.testCanParseInt("Math.PI", false)
            
            _fn.print("ct.canParseInt tests done")
        end
    end
    
    function _fn.runTests_parseNumber(run)
        
        if run then
            
            -- test valid input
            _fn.testParseNumber("0", 0.0)
            _fn.testParseNumber(" 0", 0.0)
            _fn.testParseNumber("-0", 0.0)
            _fn.testParseNumber("+0", 0.0)
            _fn.testParseNumber("1", 1.0)
            _fn.testParseNumber(" 123", 123.0)
            _fn.testParseNumber("  +4567", 4567.0)
            _fn.testParseNumber("  -987654321  ", -987654321.0)
            _fn.testParseNumber("3.14159", 3.14159)
            _fn.testParseNumber(" 3.14159", 3.14159)
            _fn.testParseNumber("3.14159 ", 3.14159)
            _fn.testParseNumber("+1.618033989", 1.618033989)
            _fn.testParseNumber("-0.618033989", -0.618033989)
            _fn.testParseNumber(".123456", 0.123456)
            _fn.testParseNumber("+.123456", 0.123456)
            _fn.testParseNumber("-.123456", -0.123456)
            _fn.testParseNumber("  987654.321   ", 987654.321)
            
            -- test invalid input
            _fn.testParseNumberError("3.14.159")
            _fn.testParseNumberError("Math.PI")
            _fn.testParseNumberError("Hello World")
            _fn.testParseNumberError("1+2")
            _fn.testParseNumberError("3^2")
            _fn.testParseNumberError("foo")
            _fn.testParseNumberError("1 + sqrt(2)")
            _fn.testParseNumberError("0xFFFF00")
            _fn.testParseNumberError("")
            
            _fn.print("ct.parseNumber tests done")
        end
    end
    
    function _fn.runTests_canParseNumber(run)
        
        if run then
            
            _fn.testCanParseNumber("0", true)
            _fn.testCanParseNumber(" 0", true)
            _fn.testCanParseNumber("-0", true)
            _fn.testCanParseNumber("+0", true)
            _fn.testCanParseNumber("1", true)
            _fn.testCanParseNumber(" 123", true)
            _fn.testCanParseNumber("  +4567", true)
            _fn.testCanParseNumber("  -987654321  ", true)
            _fn.testCanParseNumber("3.14159", true)
            _fn.testCanParseNumber(" 3.14159", true)
            _fn.testCanParseNumber("3.14159 ", true)
            _fn.testCanParseNumber("+1.618033989", true)
            _fn.testCanParseNumber("-0.618033989", true)
            _fn.testCanParseNumber(".123456", true)
            _fn.testCanParseNumber("+.123456", true)
            _fn.testCanParseNumber("-.123456", true)
            _fn.testCanParseNumber("  987654.321   ", true)
            
            _fn.testCanParseNumber("3.14.159", false)
            _fn.testCanParseNumber("Math.PI", false)
            _fn.testCanParseNumber("Hello World", false)
            _fn.testCanParseNumber("1+2", false)
            _fn.testCanParseNumber("3^2", false)
            _fn.testCanParseNumber("foo", false)
            _fn.testCanParseNumber("1 + sqrt(2)", false)
            _fn.testCanParseNumber("0xFFFF00", false)
            _fn.testCanParseNumber("", false)
            
            _fn.print("ct.canParseNumber tests done")
        end
    end
    
    function _fn.runTests_formatDecimal(run)
        
        if run then
            
            _fn.testFormatDecimal(0.0, "0.0")
            _fn.testFormatDecimal(1, "1.0")
            _fn.testFormatDecimal(4567.0, "4567.0")
            _fn.testFormatDecimal(3.14159, "3.14159")
            _fn.testFormatDecimalNumPlaces(3.14159, 7, "3.1415900")
            _fn.testFormatDecimalNumPlaces(3.14159, 5, "3.14159")
            _fn.testFormatDecimalNumPlaces(3.14159, 3, "3.142")
            _fn.testFormatDecimalNumPlaces(987654.321, 10, "987654.3210000000")
            --          testFormatDecimal( 1.23456E2, 2, "123.46" );
            
            _fn.testFormatDecimal(-1, "-1.0")
            _fn.testFormatDecimal(-4567.0, "-4567.0")
            _fn.testFormatDecimal(-3.14159, "-3.14159")
            _fn.testFormatDecimalNumPlaces(-3.14159, 7, "-3.1415900")
            _fn.testFormatDecimalNumPlaces(-3.14159, 5, "-3.14159")
            _fn.testFormatDecimalNumPlaces(-3.14159, 3, "-3.142")
            _fn.testFormatDecimalNumPlaces(-987654.321, 10, "-987654.3210000000")
            --          testFormatDecimal( -1.23456E2, 2, "-123.46" );
            
            _fn.testFormatDecimal(math.exp(1), "" .. math.exp(1))
            _fn.testFormatDecimal(math.pi, "" .. math.pi)
            --          testFormatDecimal( Math.sqrt(-1), "NaN" );
            --          testFormatDecimal( -Math.sqrt(-1), "NaN" );
            --          testFormatDecimal( 0.0/0.0, "NaN" );
            --          testFormatDecimal( 0/0.0, "NaN" );
            --          testFormatDecimal( 0.0/0, "NaN" );
            --          testFormatDecimal( 1.0/0.0, "Infinity" );
            --          testFormatDecimal( 1/0.0, "Infinity" );
            --          testFormatDecimal( 1.0/0, "Infinity" );
            --          testFormatDecimal( -1/0.0, "-Infinity" );
            
            
            -- Very large and small doubles formated in exponential notation
            _fn.testFormatDecimal(1234567.0, "1234567.0")
            _fn.testFormatDecimal(12345678.0, "1.2345678E7")
            _fn.testFormatDecimal(123456789.0, "1.23456789E8")
            
            --          testFormatDecimal( Double.MAX_VALUE, "1.7976931348623157E308" );
            --          testFormatDecimal( -Double.MAX_VALUE, "-1.7976931348623157E308" );
            --          testFormatDecimal( Double.MIN_VALUE, "4.9E-324" );
            --          testFormatDecimal( -Double.MIN_VALUE, "-4.9E-324" );
            
            -- What should output be if numPlaces < 1 ?
            --          testFormatDecimalNumPlaces( 3.14159, 0, "3" );
            --          testFormatDecimalNumPlaces( -0.618033989, -1, "-1.0" );
            --          testFormatDecimalNumPlaces( 123.123, -2, "123.0" );
            --          testFormatDecimalNumPlaces( 12345.12345, -3, "12345.0" );
            
            _fn.print("ct.formatDecimal tests done")
        end
    end
    
    function _fn.runTests_formatInt(run)
        
        if run then
            
            _fn.testFormatInt(0, "0")
            _fn.testFormatInt(123, "123")
            _fn.testFormatInt(-123, "-123")
            _fn.testFormatInt(123456, "123456")
            _fn.testFormatInt(-123456, "-123456")
            _fn.testFormatInt(123456789, "123456789")
            _fn.testFormatInt(2147483647, "2147483647")
            _fn.testFormatInt(-2147483648, "-2147483648")
            
            _fn.testFormatIntNumPlaces(0, 3, "000")
            _fn.testFormatIntNumPlaces(123, 5, "00123")
            _fn.testFormatIntNumPlaces(654, 10, "0000000654")
            
            _fn.testFormatIntNumPlaces(-123, 5, "-0123")
            _fn.testFormatIntNumPlaces(123456, 2, "123456")
            _fn.testFormatIntNumPlaces(123456, 6, "123456")
            _fn.testFormatIntNumPlaces(123456, 10, "0000123456")
            _fn.testFormatIntNumPlaces(-123456, 2, "-123456")
            _fn.testFormatIntNumPlaces(-123456, 6, "-123456")
            _fn.testFormatIntNumPlaces(-123456, 10, "-000123456")
            _fn.testFormatIntNumPlaces(123456789, 12, "000123456789")
            --          testFormatIntNumPlaces( Integer.MAX_VALUE, 10, "2147483647" ); // Max int value
            --          testFormatIntNumPlaces( Integer.MAX_VALUE, 15, "000002147483647" ); 
            --          testFormatIntNumPlaces( Integer.MIN_VALUE, 10, "-2147483648" ); // Min int value
            --          testFormatIntNumPlaces( Integer.MIN_VALUE, 20, "-0000000002147483648" );
            
            _fn.print("ct.formatInt tests done")
        end
    end
