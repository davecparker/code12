this = {}; _fn = {}   -- This file was generated by Code12 from "Towers.java"
package.path = package.path .. ';../../Desktop/Code12/?.lua;../../../Desktop/Code12/?.lua'
require('Code12.api')




    
    this.base = nil; 
    this.pole1 = nil; 
    this.pole1box = nil; 
    this.pole2 = nil; 
    this.pole2box = nil; 
    this.pole3 = nil; 
    this.pole3box = nil; 
    
    this.small = nil; 
    this.medium = nil; 
    this.large = nil; 
    
    this.poles = nil; 
    
    this.totalDisks = 3
    this.count = 0
    
    
        
        
    
    
    function _fn.start()
        
        -- Initial base 
        this.base = ct.rect(ct.getWidth() / 2, ct.getHeight() / 2 + 20, 70, 5, "gray")
        this.base.lineWidth = 5
        this.pole1 = ct.rect(this.base.x / 3, this.base.y - 7.5, 3, 20, "gray")
        this.pole1.lineWidth = 3
        this.pole1box = ct.rect(this.pole1.x, this.pole1.y, this.pole1.width, ct.getHeight())
        this.pole2 = ct.rect(this.base.x, this.base.y - 7.5, 3, 20, "gray")
        this.pole2.lineWidth = 3
        this.pole2box = ct.rect(this.pole2.x, this.pole2.y, this.pole2.width, ct.getHeight())
        this.pole3 = ct.rect(this.base.x + 34, this.base.y - 7.5, 3, 20, "gray")
        this.pole3.lineWidth = 3
        this.pole3box = ct.rect(this.pole3.x, this.pole3.y, this.pole3.width, ct.getHeight())
        
        this.small = ct.circle(this.pole2.x, this.pole2.y - 9, 10, "blue")
        this.small.height = 3
        this.small.lineWidth = 3
        this.small:setLineColor("dark blue")
        
        this.medium = ct.circle(this.pole2.x, this.pole2.y - 5, 15, "green")
        this.medium.height = 5
        this.medium.lineWidth = 3
        this.medium:setLineColor("dark green")
        
        this.large = ct.circle(this.pole2.x, this.pole2.y + 1, 18, "red")
        this.large.height = 7
        this.large.lineWidth = 3
        this.large:setLineColor("dark red")
        
        this.poles = { length = 3, default = nil }
        ct.checkArrayIndex(this.poles, 0); this.poles[1+(0)] = this.small
        ct.checkArrayIndex(this.poles, 1); this.poles[1+(1)] = this.medium
        ct.checkArrayIndex(this.poles, 2); this.poles[1+(2)] = this.large
        
        
    end
    
    
    --three arrays for size
    -- a sub 0 diam of bottom guy
    -- count var ti keep track of amt on each pole
    -- compare diameter
    -- width
    --/array of gmae obj
    -- find obj in pole, pole is an array
    --GameObj[] pole. obect trying to find
    -- findObj(GameObj[]pole, a )
    -- findObj( a)
    --while 0 to null
    -- boolean movetopole( obj, pole)
    function _fn.update()
        
        this.small.clickable = true
        this.medium.clickable = true
        this.large.clickable = true
        
        
    end
    
    function _fn.findObj(arr, obj)
        
        
    end
    
    
    --public boolean moveToPole( GameObj obj, GameObj[] p)
    --{
    
    --}
    
    -- dont keep track of their y coordinate positions
    -- keep track if theyre on top or not?
    
    -- Helper function to determine if disk is on top of the others
    -- The first object passed in parameter is the one being checked
    function _fn.isOnTopOfAll(obj, obj2, obj3)
        
        if obj.y <= obj2.y and obj.y <= obj3.y then
            return true; 
        else 
            return false; end
    end
    
    function _fn.isUnderneathAll(obj, obj2, obj3)
        
        if obj.y > obj2.y and obj.y > obj3.y then
            return true; 
        else 
            return false; end
    end
    
    -- Helper function to determine if object is smaller or bigger than others
    -- If ( bigger ) can't put on top of smaller
    -- If ( smaller ) can put on top of bigger
    
    
    -- Helper function to let moved disks fall to the base of a given pole 
    -- Once they reach the base of the pole, they stop falling ( ySpeed = 0 )
    function _fn.moveDiskToPole(obj)
        
        
        if this.small:hit(this.pole1box) or this.small:hit(this.pole2box) or this.small:hit(this.pole3box) then
            
            this.small.ySpeed = 1
            if this.small.y > (this.pole1.y - this.pole1.height / 2) then
                this.small.ySpeed = 0; end
        end
        
        if this.medium:hit(this.pole1box) or this.medium:hit(this.pole2box) or this.medium:hit(this.pole3box) then
            
            this.medium.ySpeed = 1
            if this.medium.y > (this.pole1.y - this.pole1.height / 2) then
                this.medium.ySpeed = 0; end
            
        end
        
        if this.large:hit(this.pole1box) or this.large:hit(this.pole2box) or this.large:hit(this.pole3box) then
            
            this.large.ySpeed = 1
            if this.large.y > (this.pole1.y - this.pole1.height / 2) then
                this.large.ySpeed = 0; end
            
        end
        
        
        
    end
    
    function _fn.onMousePress(obj, x, y)
        
        local lastX = x
        local lastY = y
        
        
        -- TODO: save the previous x and y of the disks so that if the user makes an invalid move,
        -- the disks go back to their old position
        
    end
    
    --TODO: add function to check winning conditions
    -- small > medium > large on a different pole than the starting
    
    function _fn.onMouseDrag(obj, x, y)
        
        if obj == this.small then
            
            if _fn.isOnTopOfAll(this.small, this.medium, this.large) then
                
                -- Can only click on object when it is on top of the stack
                this.small.x = x
                this.small.y = y
                --moveDiskToPole(small);
            end
        end
        
        if obj == this.medium then
            
            if _fn.isOnTopOfAll(this.medium, this.small, this.large) then
                
                this.medium.x = x
                this.medium.y = y
                
            end
            
        end
        
        if obj == this.large then
            
            if _fn.isOnTopOfAll(this.large, this.medium, this.small) then
                this.large.x = x; end
            this.large.y = y
        end
        
    end
