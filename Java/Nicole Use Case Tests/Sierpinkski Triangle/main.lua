this = {}; _fn = {}   -- This file was generated by Code12 from "SierpinkskiTriangle.java"
package.path = package.path .. ';../../Desktop/Code12/?.lua;../../../Desktop/Code12/?.lua'
require('Code12.api')
    
    this.c1 = nil; 
    this.c2 = nil; 
    this.c3 = nil; 
    
    this.slider = nil; 
    
    
    -- TODO: do this without using circles, just the limiting circle and points
    
        
        
    
    
    function _fn.start()
        
        this.slider = ct.rect(0, 50, 10, 10, "black")
        this.slider.visible = false
        
        this.c1 = ct.circle(50, 10, 1, "blue")
        this.c2 = ct.circle(10, 90, 1, "green")
        this.c3 = ct.circle(90, 90, 1, "red")
        
        _fn.drawTriangle(this.c1, this.c2, this.c3, 1)
        
        -- set up everything in advance
        -- way to do this more efficiently?
        local c4 = ct.circle(150, 10, 1, "blue")
        local c5 = ct.circle(110, 90, 1, "green")
        local c6 = ct.circle(190, 90, 1, "red")
        _fn.drawTriangle(c4, c5, c6, 2)
        
        
        local c7 = ct.circle(250, 10, 1, "blue")
        local c8 = ct.circle(210, 90, 1, "green")
        local c9 = ct.circle(290, 90, 1, "red")
        
        _fn.drawTriangle(c7, c8, c9, 3)
        
        
        local c10 = ct.circle(350, 10, 1, "blue")
        local c11 = ct.circle(310, 90, 1, "green")
        local c12 = ct.circle(390, 90, 1, "red")
        
        _fn.drawTriangle(c10, c11, c12, 4)
        
        local c13 = ct.circle(450, 10, 1, "blue")
        local c14 = ct.circle(410, 90, 1, "green")
        local c15 = ct.circle(490, 90, 1, "red")
        
        _fn.drawTriangle(c13, c14, c15, 5)
        
        local c16 = ct.circle(550, 10, 1, "blue")
        local c17 = ct.circle(510, 90, 1, "green")
        local c18 = ct.circle(590, 90, 1, "red")
        
        _fn.drawTriangle(c16, c17, c18, 6)
        
        local c19 = ct.circle(650, 10, 1, "blue")
        local c20 = ct.circle(610, 90, 1, "green")
        local c21 = ct.circle(690, 90, 1, "red")
        
        _fn.drawTriangle(c19, c20, c21, 7)
        
        local c22 = ct.circle(750, 10, 1, "blue")
        local c23 = ct.circle(710, 90, 1, "green")
        local c24 = ct.circle(790, 90, 1, "red")
        
        _fn.drawTriangle(c22, c23, c24, 8)
        
        local c25 = ct.circle(850, 10, 1, "blue")
        local c26 = ct.circle(810, 90, 1, "green")
        local c27 = ct.circle(890, 90, 1, "red")
        
        _fn.drawTriangle(c25, c26, c27, 9)
        
        
    end
    
    -- return a pair of points (x,y) between circles
    function _fn.midpoint(circleOne, circleTwo)
        
        local m = { length = 2, default = 0 }
        ct.checkArrayIndex(m, 0); m[1+(0)] = (circleOne.x + circleTwo.x) / 2
        ct.checkArrayIndex(m, 1); m[1+(1)] = (circleOne.y + circleTwo.y) / 2
        return m
    end
    
    function _fn.drawTriangle(circle1, circle2, circle3, size)
        
        if math.abs(size) < 2 then
            local limit = ct.circle(circle1.x, circle1.y, 2); 
        else 
            
            local midOne = _fn.midpoint(circle1, circle2)
            local midTwo = _fn.midpoint(circle2, circle3)
            local midThree = _fn.midpoint(circle3, circle1)
            
            -- Circles to represent the midpoints
            local midOneCircle = ct.circle(ct.indexArray(midOne, 0), ct.indexArray(midOne, 1), 1)
            local midTwoCircle = ct.circle(ct.indexArray(midTwo, 0), ct.indexArray(midTwo, 1), 1)
            local midThreeCircle = ct.circle(ct.indexArray(midThree, 0), ct.indexArray(midThree, 1), 1)
            
            _fn.drawTriangle(circle1, midOneCircle, midThreeCircle, size - 1)
            
            _fn.drawTriangle(midOneCircle, circle2, midTwoCircle, size - 1)
            
            _fn.drawTriangle(midThreeCircle, midTwoCircle, circle3, size - 1)
            
        end
        
    end
    function _fn.update()
        
        this.slider.xSpeed = 15
        
        -- TODO: improve this lol
        if this.slider.x > 100 then
            
            ct.setScreenOrigin(100, 0)
        end
        
        if this.slider.x > 200 then
            
            ct.setScreenOrigin(200, 0)
        end
        
        if this.slider.x > 300 then
            
            ct.setScreenOrigin(300, 0)
        end
        
        if this.slider.x > 400 then
            
            ct.setScreenOrigin(400, 0)
        end
        
        if this.slider.x > 500 then
            
            ct.setScreenOrigin(500, 0)
        end
        
        if this.slider.x > 600 then
            
            ct.setScreenOrigin(600, 0)
        end
        
        if this.slider.x > 700 then
            
            ct.setScreenOrigin(700, 0)
        end
        
        if this.slider.x > 800 then
            
            ct.setScreenOrigin(800, 0)
        end
        
    end
    
