this = {}; _fn = {}   -- This file was generated by Code12 from "SierpinkskiTriangle.java"
package.path = package.path .. ';../../Desktop/Code12/?.lua;../../../Desktop/Code12/?.lua'
require('Code12.api')
    
    
    
        
        
    
    
    function _fn.start()
        
        
        local c1 = ct.circle(50, 10, 1, "blue")
        local c2 = ct.circle(10, 90, 1, "green")
        local c3 = ct.circle(90, 90, 1, "red")
        
        _fn.drawTriangle(c1, c2, c3, 9)
    end
    
    -- return a pair of points (x,y) between circles
    function _fn.midpoint(circleOne, circleTwo)
        
        local m = { length = 2, default = 0 }
        ct.checkArrayIndex(m, 0); m[1+(0)] = (circleOne.x + circleTwo.x) / 2
        ct.checkArrayIndex(m, 1); m[1+(1)] = (circleOne.y + circleTwo.y) / 2
        return m
    end
    
    function _fn.drawTriangle(circle1, circle2, circle3, size)
        
        if math.abs(size) < 2 then
            local limit = ct.circle(circle1.x, circle1.y, 2); 
        else 
            
            local midOne = _fn.midpoint(circle1, circle2)
            local midTwo = _fn.midpoint(circle2, circle3)
            local midThree = _fn.midpoint(circle3, circle1)
            
            -- Circles to represent the midpoints
            local midOneCircle = ct.circle(ct.indexArray(midOne, 0), ct.indexArray(midOne, 1), 1)
            local midTwoCircle = ct.circle(ct.indexArray(midTwo, 0), ct.indexArray(midTwo, 1), 1)
            local midThreeCircle = ct.circle(ct.indexArray(midThree, 0), ct.indexArray(midThree, 1), 1)
            
            _fn.drawTriangle(circle1, midOneCircle, midThreeCircle, size - 1)
            
            _fn.drawTriangle(midOneCircle, circle2, midTwoCircle, size - 1)
            
            _fn.drawTriangle(midThreeCircle, midTwoCircle, circle3, size - 1)
            
        end
        
    end
    
    -- experiment...on click, change origin, recurse again 
    --but closer up scale
    
    function _fn.update()
        
    end
    
