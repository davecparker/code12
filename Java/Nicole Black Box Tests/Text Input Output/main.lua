this = {}; _fn = {}   -- This file was generated by Code12 from "TextTest.java"
package.path = package.path .. ';../../Desktop/Code12/?.lua;../../../Desktop/Code12/?.lua'
require('Code12.api')
-- Text Input



    
    this.circle = nil; 
    this.square = nil; 
    this.rect = nil; 
    this.line = nil; 
    
    this.inputArray = nil; 
    --String[][] string2DArray;
    
    
    
        
        
    
    
    function _fn.start()
        
        
        -- Printing to console
        -- ct.print()
        -- ct.println()
        -- These objects will also be used to test logging methods in update()
        this.circle = ct.circle(50, 50, 10, "black")
        this.square = ct.rect(10, 10, 10, 10, "gray")
        this.rect = ct.rect(ct.getWidth() / 2, ct.getHeight() / 2, 5, 10, "red")
        this.line = ct.line(10, 10, 20, 20)
        
        ct.print("There is a " .. this.circle:toString() .. " and a " .. this.square:toString())
        ct.println( "" )
        
        local test = "Saving stuff into a string."
        ct.println(test)
        
        local concat = "Testing string..."
        ct.println(concat .. " concatenation")
        
        local LIMIT = ct.inputInt("Enter # of times to start logging stationary game objects")
        
        local i = 0; while i < LIMIT do
            
            ct.log(this.rect)
            ct.logm("There is a ", this.line)
        i = i + 1; end
        
        ct.print("Line feeds \nusing Java's \nescape character.")
        
        ct.println( "" )
        --ct.println("\"Double quotes!\" tab:\t\'Single quotes!\'");
        
        ct.print("Carriage return \r ")
        ct.print("Form feed \f ")
        
        -- Testing input methods
        ct.println( "" )
        local d = ct.inputNumber("Enter a double: ")
        if ct.isError(d) then
            ct.println("NaN or infinity"); end
        ct.println(d)
        local bool = ct.inputBoolean("Enter a boolean: ")
        --  bool = false;   //bug; this should default to false if user skips it
        if bool then
            ct.println("Boolean is true"); 
        else 
            ct.println("Boolean is false"); end
        
        -- Testing various String methods
        ct.println( "" )
        local longString = "Enter a test string to be used with Java's string methods: "
        local input = ct.inputString(longString)
        
        ct.println("The length of " .. input .. " is " .. string.len(input))
        ct.println(input .. " to upper case is " .. string.upper(input))
        ct.println(input .. " to lower case is " .. string.lower(input))
        
        local index = ct.inputInt("Enter a valid index for your test string: ")
        
        --if ( index >= 0 && index < input.length() )
        --ct.println("The char at index " + index + " is " + input.charAt( index ) );
        
        local anotherInput = ct.inputString("Enter a second string: ")
        
        local comparing = ct.stringCompare(input, anotherInput)
        
        if comparing > 0 then
            ct.println(input .. " is lexicographically greater than " .. anotherInput); 
        elseif comparing == 0 then
            
            ct.println(input .. " and " .. anotherInput .. " are equal.")
            if (input == anotherInput) then
                ct.print("equivalent to .equals method)"); end
        
        elseif comparing < 0 then
            ct.println(input .. " is lexicographically less than " .. anotherInput); end
        
        local alphabet = "abcdefghijklmnopqrstuvwxyz"
        local letter = ct.inputString("Enter an alphabet letter: ")
        ct.println(ct.indexOfString(alphabet, letter) + 1 .. " is the index of " .. letter)
        
        -- substring methods
        local s = ct.inputString("Enter another string: ")
        
        local start = ct.inputInt("Enter starting index: ")
        
        if start >= 0 then
            ct.println(ct.substring(s, start)); 
        else 
            ct.println("Index cannot be negative!"); end
        
        local _end = ct.inputInt("Enter ending index: ")
        
        
        if _end < string.len(s) then
            ct.println(ct.substring(s, start, _end)); 
        else 
            ct.println("End index is out of bounds!"); end
        
        -- trim method
        local excess = "      excess whitespace       "
        ct.println(excess)
        ct.println("After trimming: " .. ct.trimString(excess))
        
        -- Testing string equality
        --String a = "equal";
        --String b = "equal";
        -- Memory is allocated once
        --ct.println("Two strings pointing to the same spot in memory returns " + ( a == b ) );   // prints true
        
        local a1 = "equal"
        local b1 = "equal"
        if (a1 == b1) then
            ct.println("Two equal strings compared using the equals() method returns true"); end
        local a2 = "equa"
        -- Appending allocates new memory for String a1
        --a2 += "l";
        -- a1 and b1 have different references
        local b2 = "equal"
        --ct.println("Two equal strings, but one dynamically created returns " + (a2 == b2) );  // prints false
        
        local a3 = "equal"
        -- Explicitly allocating new memory for the string b2
        --String b3 = new String("equal");
        --ct.println("Two equal strings, but one explictly instantiated returns " + (a3 == b3) );   // also prints false
        
        local a4 = "equal"
        --String b4 = new String("equal").intern();    // check to see if the string exists in pool then return a reference to it
        --ct.println("Two equal strings, one created using the intern() method returns " + (a4 == b4) );   // returns true
        
        -- Testing out printing arrays to console
        this.inputArray = { length = 10, default = 0 }
        local i = 0; while i < this.inputArray.length do
            
            ct.checkArrayIndex(this.inputArray, i); this.inputArray[1+(i)] = ct.inputInt("Enter an integer to fill the array: ")
        i = i + 1; end
        
        local i = 0; while i < this.inputArray.length do
            
            ct.println("The integer at index " .. i .. " is " .. ct.indexArray(this.inputArray, i))
        i = i + 1; end
        
        local rows = ct.inputInt("Enter # of rows for a 2D array: ")
        local columns = ct.inputInt("Enter # of columns: ")
        
        
        -- string2DArray = new String[rows][columns];
        --       
        --       for ( rows = 0; rows < string2DArray.length; rows++ )
        --       {
        --          for ( columns = 0; columns < string2DArray[rows].length; columns++ )
        --          {
        --             string2DArray[rows][columns] = ct.inputString("Write strings into the array: ");
        --             // if no user input, fill with default string
        --             string2DArray[rows][columns] = "Default";
        --          }
        --       }
        --       
        --       for ( rows = 0; rows < string2DArray.length; rows++ )
        --       {
        --          ct.print("\nrow " + rows + ":\t" );
        --          for ( columns = 0; columns < string2DArray[rows].length; columns++ )
        --          {
        --             ct.print( string2DArray[rows][columns] + "\t");
        --          }
        --          ct.println();
        --       }
        
    end
    
    function _fn.update()
        
        this.circle.xSpeed = 1
        if this.circle.x >= ct.getWidth() then
            this.circle.x = 0; end
        ct.log(this.circle)
        
        this.rect.ySpeed = -1
        ct.logm("There is a ", this.rect)
        ct.logm(" this many units off-screen: ", this.rect.x)
        local x = ct.clickX()
        local y = ct.clickY()
        ct.logm("There was a mouse click at ", x, y)
        
    end
    
