this = {}; _fn = {}   -- This file was generated by Code12 from "EventsTest.java"
package.path = package.path .. ';../../Desktop/Code12/?.lua;../../../Desktop/Code12/?.lua'
require('Code12.api')















    
    this.helpMenu = nil; 
    this.text = nil; 
    this.text1 = nil; 
    this.text2 = nil; 
    this.sprite = nil; 
    this.dialogue = nil; 
    this.obstacles = { length = 4, default = nil }
    this.seconds = 0
    this.gravity = 1.0
    
    
        
        
    
    
    function _fn.start()
        
        this.sprite = ct.image("sprite.png", 50, 50, 10)
        ct.checkArrayIndex(this.obstacles, 0); this.obstacles[1+(0)] = ct.circle(10, ct.getHeight() - 10, 10)
        ct.checkArrayIndex(this.obstacles, 1); this.obstacles[1+(1)] = ct.circle(ct.getWidth() - 10, 10, 10, "green")
        ct.checkArrayIndex(this.obstacles, 2); this.obstacles[1+(2)] = ct.circle(10, 10, 20, "purple")
        ct.checkArrayIndex(this.obstacles, 3); this.obstacles[1+(3)] = ct.circle(ct.getWidth() - 10, ct.getHeight() - 10, 15, "blue")
        
    end
    
    function _fn.update()
        
        this.sprite.clickable = true
        
        -- reverseDirection method keeps objects on screen
        local i = 0; while i < this.obstacles.length do
            
            _fn.reverseDirection(ct.indexArray(this.obstacles, i))
            
            -- if the sprite hits an obstacle, deflect
            if this.sprite:hit(ct.indexArray(this.obstacles, i)) then
                
                this.sprite.xSpeed = this.sprite.xSpeed * (-1)
                this.sprite.ySpeed = this.sprite.ySpeed * (-1)
                -- testing garbage collection
                -- delete object
                ct.indexArray(this.obstacles, i):delete()
                -- Should return false if object was deleted
                if this.sprite:hit(ct.indexArray(this.obstacles, i)) == false then
                    ct.println(ct.indexArray(this.obstacles, i):toString() .. " has been deleted."); end
            end
        i = i + 1; end
        
        -- Bounce sprite off of walls
        _fn.reverseDirection(this.sprite)
        
        
    end
    
    function _fn.onMousePress(obj, x, y)
        
        local rand = ct.random(1, 3)
        if obj ~= nil then
            
            if obj == this.sprite then
                
                if rand == 1 then
                    this.dialogue = ct.text("Ow!", this.sprite.x, this.sprite.y + 5, 3); 
                elseif rand == 2 then
                    this.dialogue = ct.text("Let go!", this.sprite.x, this.sprite.y + 5, 3); 
                else 
                    this.dialogue = ct.text("Release me!", this.sprite.x, this.sprite.y + 5, 3); end
                this.sprite.ySpeed = 0
                this.sprite.xSpeed = 0
            end
            
        end
    end
    
    function _fn.onMouseDrag(obj, x, y)
        
        if obj ~= nil then
            
            if obj == this.sprite then
                
                this.sprite.x = x
                this.sprite.y = y
                
            end
        end
    end
    
    function _fn.onMouseRelease(obj, x, y)
        
        if obj ~= nil then
            
            if obj == this.sprite then
                
                this.seconds = this.seconds + 1
                this.dialogue:delete()
                
                local v = 0; while v < 0.050 do
                    
                    if this.sprite.x > ct.getWidth() / 2 and this.sprite.y < ct.getHeight() / 2 then
                        
                        this.sprite.ySpeed = this.sprite.ySpeed - (v * this.gravity)
                        this.sprite.xSpeed = this.sprite.xSpeed + (v * this.gravity)
                    
                    elseif this.sprite.x > ct.getWidth() / 2 and this.sprite.y > ct.getHeight() / 2 then
                        
                        this.sprite.ySpeed = this.sprite.ySpeed + (v * this.gravity)
                        this.sprite.xSpeed = this.sprite.xSpeed + (v * this.gravity)
                    
                    elseif this.sprite.x < ct.getWidth() / 2 and this.sprite.y < ct.getHeight() / 2 then
                        
                        this.sprite.ySpeed = this.sprite.ySpeed - (v * this.gravity)
                        this.sprite.xSpeed = this.sprite.xSpeed - (v * this.gravity)
                    
                    elseif this.sprite.x < ct.getWidth() / 2 and this.sprite.y > ct.getHeight() / 2 then
                        
                        this.sprite.ySpeed = this.sprite.ySpeed + (v * this.gravity)
                        this.sprite.xSpeed = this.sprite.xSpeed - (v * this.gravity)
                    end
                    
                    -- The longer the sprite is held down whilst being moved around, the faster its velocity
                    if this.seconds > 2 then
                        
                        this.sprite.ySpeed = this.sprite.ySpeed - (2 * v * this.gravity)
                        this.sprite.xSpeed = this.sprite.xSpeed + (2 * v * this.gravity)
                    end
                    
                    if this.seconds > 3 then
                        
                        this.sprite.ySpeed = this.sprite.ySpeed - (3 * v * this.gravity)
                        this.sprite.xSpeed = this.sprite.xSpeed + (3 * v * this.gravity)
                    end
                    
                v = v + (0.0025); end
            end
        end
        
    end
    
    -- Move around obstacles
    function _fn.onKeyPress(keyName)
        
        if (keyName == "right") then
            ct.checkArrayIndex(this.obstacles, 0); this.obstacles[1+(0)].xSpeed = 0.5; 
        elseif (keyName == "left") then
            ct.checkArrayIndex(this.obstacles, 0); this.obstacles[1+(0)].xSpeed = -0.5; 
        elseif (keyName == "up") then
            ct.checkArrayIndex(this.obstacles, 1); this.obstacles[1+(1)].ySpeed = -2; 
        elseif (keyName == "down") then
            ct.checkArrayIndex(this.obstacles, 1); this.obstacles[1+(1)].ySpeed = 2; 
        elseif (keyName == "w") then
            ct.checkArrayIndex(this.obstacles, 2); this.obstacles[1+(2)].ySpeed = -1; 
        elseif (keyName == "s") then
            ct.checkArrayIndex(this.obstacles, 2); this.obstacles[1+(2)].ySpeed = 1; 
        elseif (keyName == "d") then
            ct.checkArrayIndex(this.obstacles, 3); this.obstacles[1+(3)].xSpeed = 0.25; 
        elseif (keyName == "a") then
            ct.checkArrayIndex(this.obstacles, 3); this.obstacles[1+(3)].xSpeed = -0.25; end
        
    end
    
    function _fn.reverseDirection(obj)
        
        if obj ~= nil then
            
            if obj.x <= 0 or obj.x >= ct.getWidth() then
                obj.xSpeed = obj.xSpeed * (-1 * this.gravity); end
            if obj.y <= 0 or obj.y >= ct.getHeight() then
                obj.ySpeed = obj.ySpeed * (-1 * this.gravity); end
        end
    end
    
    function _fn.onKeyRelease(keyName)
        
        if (keyName == "right") then
            ct.checkArrayIndex(this.obstacles, 0); this.obstacles[1+(0)].xSpeed = 0; 
        elseif (keyName == "left") then
            ct.checkArrayIndex(this.obstacles, 0); this.obstacles[1+(0)].xSpeed = 0; 
        elseif (keyName == "up") then
            ct.checkArrayIndex(this.obstacles, 1); this.obstacles[1+(1)].ySpeed = 0; 
        elseif (keyName == "down") then
            ct.checkArrayIndex(this.obstacles, 1); this.obstacles[1+(1)].ySpeed = 0; 
        elseif (keyName == "w") then
            ct.checkArrayIndex(this.obstacles, 2); this.obstacles[1+(2)].ySpeed = 0; 
        elseif (keyName == "s") then
            ct.checkArrayIndex(this.obstacles, 2); this.obstacles[1+(2)].ySpeed = 0; 
        elseif (keyName == "d") then
            ct.checkArrayIndex(this.obstacles, 3); this.obstacles[1+(3)].xSpeed = 0; 
        elseif (keyName == "a") then
            ct.checkArrayIndex(this.obstacles, 3); this.obstacles[1+(3)].xSpeed = 0; end
    end
    
    function _fn.onCharTyped(ch)
        
        -- Instructions/Help Menu
        if (ch == "H") then
            
            this.helpMenu = ct.rect(50, 50, 30, 30, "gray")
            this.helpMenu.lineWidth = 2
            this.helpMenu:setLayer(2)
            
            this.text = ct.text("Functional keys: ", this.helpMenu.x, this.helpMenu.y - 5, 3)
            this.text1 = ct.text("WASD and arrow keys", this.helpMenu.x, this.helpMenu.y, 3)
            this.text2 = ct.text("[ Press escape to exit ]", this.helpMenu.x, this.helpMenu.y + 10, 2)
            
            this.text:setLayer(3)
            this.text1:setLayer(3)
            this.text2:setLayer(3)
            
        end
        
        if ct.keyPressed("escape") then
            
            this.helpMenu:delete()
            this.text:delete()
            this.text1:delete()
            this.text2:delete()
        end
        
    end
    
    function _fn.onResize()
        
        local aspectRatio = ct.getWidth() / ct.getHeight()
        ct.print(aspectRatio)
        if aspectRatio < 0.50 then
            ct.setBackColor("light cyan"); 
        elseif aspectRatio < 1 then
            ct.setBackColor("light red"); 
        else 
            ct.setBackColor("light yellow"); end
        
    end
