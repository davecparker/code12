this = {}; _fn = {}   -- This file was generated by Code12 from "MathMiscTypeConversionWhiteBoxTest.java"
package.path = package.path .. ';../../Desktop/Code12/?.lua;../../../Desktop/Code12/?.lua'
require('Code12.api')
-- --------------
-- int ct.random( int min, int max )
-- int ct.round( double d )
-- double ct.roundDecimal( double d, int numPlaces )
-- boolean ct.isError( double d )
-- double ct.distance( double x1, double y1, double x2, double y2 )
-- int ct.getTimer( )
-- double getVersion( )

-- Type Conversion
-- ---------------
-- int ct.toInt( double d )                     // truncates
-- int ct.parseInt( String s )                 // 0 if failure
-- boolean ct.canParseInt( String s )
-- double ct.parseNumber( String s )         // NaN if failure
-- boolean ct.canParseNumber( String s )
-- String ct.formatDecimal( double d )
-- String ct.formatDecimal( double d, int numPlaces )
-- String ct.formatInt( int i )
-- String ct.formatInt( int i, int numDigits )     // uses leading 0's




    
    
        
        
    
    
    this.EPSILON = 0.0000001
    this.VERSION = 0.5
    
    this.allTestsPassed = true
    
    this.timerDisplay = nil; 
    this.startTimeMs = 0; 
    this.countDownDisplay = nil; 
    this.countDownSec = 0; 
    
    function _fn.start()
        
        ct.setOutputFile("output.txt")
        ct.println("Tests started")
        
        _fn.runTests_roundDecimal(true)
        _fn.runTests_random(true)
        _fn.runTests_round(true)
        _fn.runTests_intDiv(true)
        _fn.runTests_isError(true)
        _fn.runTests_distance(true)
        _fn.runTests_getVersion(true)
        _fn.runTests_toInt(true)
        _fn.runTests_parseInt(true)
        _fn.runTests_canParseInt(true)
        _fn.runTests_parseNumber(true)
        _fn.runTests_canParseNumber(true)
        _fn.runTests_formatDecimal(true)
        _fn.runTests_formatInt(true)
        
        ct.println("Tests finished")
        
        if this.allTestsPassed then
            
            ct.println("All tests passed")
        end
        ct.setOutputFile(nil)
        _fn.initTests_getTimer(true)
    end
    
    function _fn.update()
        
        _fn.runTests_getTimer(true)
    end
    
    
    -- Utility functions 
    -- -------------------------------------------------------------
    
    function _fn.printError(error)
        
        this.allTestsPassed = false
        ct.println(error)
    end
    
    function _fn.testRandom(min, max)
        
        -- try
        -- {
        local output = ct.random(min, max)
        if output < min or output > max then
            
            _fn.printError("ct.random(" .. min .. "," .. max .. ") = " .. output)
        end
        -- }
        -- catch( Exception e )
        -- {
        --     printError( "ct.random(" + min + "," + max + ") throws " + e.toString() );
        --      }
    end
    
    function _fn.testRound(d, expected)
        
        local output = ct.round(d)
        if output ~= expected then
            _fn.printError("ct.round(" .. d .. ") = " .. output .. "; " .. expected .. " expected"); end
    end
    
    function _fn.testRoundDecimal(d, numPlaces, expected)
        
        local output = ct.roundDecimal(d, numPlaces)
        if math.abs(output - expected) > this.EPSILON then
            _fn.printError("ct.roundDecimal(" .. d .. ", " .. numPlaces .. ") = " .. output .. "; " .. expected .. " expected"); end
    end
    
    function _fn.testIntDiv(n, d, expected)
        
        local output = ct.intDiv(n, d)
        if output ~= expected then
            _fn.printError("ct.round(" .. n .. "/" .. d .. ") = " .. output .. "; " .. expected .. " expected"); end
    end
    
    function _fn.testIsError(d, expected)
        
        local output = ct.isError(d)
        if output ~= expected then
            
            if output then
                _fn.printError("ct.isError(" .. d .. ") = true; false expected"); 
            else 
                _fn.printError("ct.isError(" .. d .. ") = false; true expected"); end
        end
        
    end
    
    function _fn.testDistance(x1, y1, x2, y2, expected)
        
        local output = ct.distance(x1, y1, x2, y2)
        if math.abs(output - expected) > this.EPSILON then
            _fn.printError("ct.distance(" .. x1 .. "," .. y1 .. "," .. x2 .. "," .. y2 .. ") = " .. output .. "; " .. expected .. " expected"); end
    end
    
    function _fn.testToInt(d, expected)
        
        local output = ct.toInt(d)
        if output ~= expected then
            _fn.printError("ct.toInt(" .. d .. ") = " .. output .. "; " .. expected .. " expected"); end
    end
    
    function _fn.testParseInt(s, expected)
        
        local output = ct.parseInt(s)
        if output ~= expected then
            _fn.printError("ct.parseInt(" .. s .. ") = " .. output .. "; " .. expected .. " expected"); end
    end
    
    function _fn.testCanParseInt(s, expected)
        
        local output = ct.canParseInt(s)
        if output ~= expected then
            
            if output then
                _fn.printError("ct.canParseInt(" .. s .. ") = true; false expected"); 
            else 
                _fn.printError("ct.canParseInt(" .. s .. ") = false; true expected"); end
        end
    end
    
    function _fn.testParseNumber(s, expected)
        
        local output = ct.parseNumber(s)
        if math.abs(output - expected) > this.EPSILON then
            _fn.printError("ct.parseNumber(" .. s .. ") = " .. output .. "; " .. expected .. " expected"); end
    end
    
    function _fn.testParseNumberError(s)
        
        local output = ct.parseNumber(s)
        if not ct.isError(output) then
            _fn.printError("ct.parseNumber(" .. s .. ") = " .. output .. "; NaN expected"); end
    end
    
    function _fn.testCanParseNumber(s, expected)
        
        local output = ct.canParseNumber(s)
        if output ~= expected then
            
            if output then
                _fn.printError("ct.canParseNumber(" .. s .. ") = true; false expected"); 
            else 
                _fn.printError("ct.canParseNumber(" .. s .. ") = false; true expected"); end
        end
    end
    
    function _fn.testFormatDecimal(d, expected)
        
        local output = ct.formatDecimal(d)
        if not (output == expected) then
            _fn.printError("ct.formatDecimal(" .. d .. ") = " .. output .. "; " .. expected .. " expected"); end
    end
    
    function _fn.testFormatDecimal(d, numPlaces, expected)
        
        local output = ct.formatDecimal(d, numPlaces)
        if not (output == expected) then
            _fn.printError("ct.formatDecimal(" .. d .. ", " .. numPlaces .. ") = " .. output .. "; " .. expected .. " expected"); end
    end
    
    function _fn.testFormatInt(i, expected)
        
        local output = ct.formatInt(i)
        if not (output == expected) then
            _fn.printError("ct.formatInt(" .. i .. ") = " .. output .. "; " .. expected .. " expected"); end
    end
    
    function _fn.testFormatInt(i, numPlaces, expected)
        
        local output = ct.formatInt(i, numPlaces)
        if not (output == expected) then
            _fn.printError("ct.formatInt(" .. i .. ", " .. numPlaces .. ") = " .. output .. "; " .. expected .. " expected"); end
    end
    
    -- Tests 
    -- -------------------------------------------------------------
    
    function _fn.runTests_random(run)
        
        if run then
            
            -- testRandom( 10, 1 );
            --             testRandom( -2147483648, 2147483647 ); // throws exception
            --             testRandom( 0, 2147483647 ); // throws exception
            --             testRandom( -2147483648 / 2, 2147483647 / 2 ); // throws exception 
            
            -- testRandom( 0, 2147483647 - 1 );
            -- testRandom( ct.intDiv(-2147483648,1), -1 );
            -- testRandom( ct.intDiv(-2147483648,2) + 1, ct.intDiv(2147483647,2) );
            -- testRandom( ct.intDiv(-2147483648,2), ct.intDiv(2147483647,2) - 1 );
            
            ct.println("ct.random tests done")
        end
    end
    
    function _fn.runTests_round(run)
        
        if run then
            
            -- If the argument is NaN, the result is 0
            _fn.testRound(0.0 / 0, 0)
            _fn.testRound(math.log(-1), 0)
            
            -- If the argument is negative infinity or any value less than or equal to the value of Long.MIN_VALUE, the result is equal to the value of (int)Long.MIN_VALUE.
            _fn.testRound(-1.0 / 0, 0)
            -- testRound( 4.9E-324, 0 );
            
            -- If the argument is positive infinity or any value greater than or equal to the value of Long.MAX_VALUE, the result is equal to the value of (int)Long.MAX_VALUE.
            _fn.testRound(1.0 / 0, -1)
            -- testRound( 1.7976931348623157E308, -1 );
            
            _fn.testRound(2147483647, 2147483647)
            _fn.testRound(1.0 * 2147483647 + 1, -2147483648)
            
            _fn.testRound(-2147483648, -2147483648)
            _fn.testRound(-2147483648 - 1, 2147483647)
            
            ct.println("ct.round tests done")
        end
    end
    
    function _fn.runTests_roundDecimal(run)
        
        if run then
            
            -- Ties round to the nearest even number if numPlaces is used
            _fn.testRoundDecimal(1.45, 1, 1.4)
            _fn.testRoundDecimal(1.35, 1, 1.4)
            
            -- How should negative values for numPlaces work?
            _fn.testRoundDecimal(123456.7, -1, 123460.0)
            _fn.testRoundDecimal(123456.7, -2, 123500.0)
            _fn.testRoundDecimal(123456.7, -3, 123000.0)
            
            ct.println("ct.roundDecimal tests done")
        end
    end
    
    function _fn.runTests_intDiv(run)
        
        if run then
            
            _fn.testIntDiv(0, 0, 0)
            _fn.testIntDiv(1, 0, 2147483647)
            _fn.testIntDiv(-1, 0, -2147483648)
            _fn.testIntDiv(0, 1, 0)
            _fn.testIntDiv(0, -1, 0)
            
            _fn.testIntDiv(-2147483648, -2147483648, 1)
            _fn.testIntDiv(2147483647, 2147483647, 1)
            _fn.testIntDiv(2147483647, -2147483648, -1)
            _fn.testIntDiv(-2147483648, 2147483647, -2)
            
            
            -- There is one special case, if the dividend is the -2147483648 and the divisor is -1, 
            -- then integer overflow occurs and the result is equal to the -2147483648.
            _fn.testIntDiv(-2147483648, -1, -2147483648)
            
            local i = 0; while i < 1000 do
                
                local n = 0; local d = 0; 
                
                n = ct.random(ct.intDiv(-2147483648, 2) + 1, ct.intDiv(2147483647, 2))
                d = ct.random(ct.intDiv(-2147483648, 2) + 1, ct.intDiv(2147483647, 2))
                
                local expected = 0
                
                if n > 0 and d > 0 or n < 0 and d < 0 then
                    
                    -- n and d are the same sign
                    expected = ct.intDiv(n, d)
                
                elseif n > 0 and d < 0 or n < 0 and d > 0 then
                    
                    -- n and d are opposite signs
                    expected = ct.intDiv(n, d) - 1
                
                elseif d == 0 then
                    
                    if n > 0 then
                        
                        expected = 2147483647
                    
                    elseif n < 0 then
                        
                        expected = -2147483648
                    end
                end
                
                _fn.testIntDiv(n, d, expected)
            i = i + 1; end
            
            ct.println("ct.intDiv tests done")
        end
    end
    
    function _fn.runTests_isError(run)
        
        if run then
            
            _fn.testIsError(0.0 / 0, true)
            _fn.testIsError(1.0 / 0, false)
            _fn.testIsError(-1.0 / 0, false)
            local i = 0; while i < 1000 do
                
                local d = ct.random(-2147483648 + 1, -1) + ct.random(0, 1000) / 1000.0
                _fn.testIsError(d, false)
                
                d = ct.random(0, 2147483647 - 1) + ct.random(0, 1000) / 1000.0
                _fn.testIsError(d, false)
                
            i = i + 1; end
            
            ct.println("ct.isError tests done")
        end
    end
    
    function _fn.runTests_distance(run)
        
        if run then
            
            -- double pInf = Double.POSITIVE_INFINITY;
            -- double nInf = Double.NEGATIVE_INFINITY;
            -- double nAn = Double.NaN;
            
            -- testDistance( 0, 0, 0, pInf, Double.POSITIVE_INFINITY );
            -- testDistance( 0, 0, pInf, 0, Double.POSITIVE_INFINITY );
            -- testDistance( 0, pInf, 0, 0, Double.POSITIVE_INFINITY );
            -- testDistance( pInf, 0, 0, 0, Double.POSITIVE_INFINITY );
            
            -- testDistance( 0, 0, 0, nInf, Double.POSITIVE_INFINITY );
            -- testDistance( 0, 0, nInf, 0, Double.POSITIVE_INFINITY );
            -- testDistance( 0, nInf, 0, 0, Double.POSITIVE_INFINITY );
            -- testDistance( nInf, 0, 0, 0, Double.POSITIVE_INFINITY );
            
            -- testDistance( pInf, pInf, pInf, pInf, Double.POSITIVE_INFINITY );
            -- testDistance( nInf, nInf, nInf, nInf, Double.POSITIVE_INFINITY );
            -- testDistance( pInf, pInf, nInf, nInf, Double.POSITIVE_INFINITY );
            -- testDistance( nInf, nInf, pInf, pInf, Double.POSITIVE_INFINITY );
            
            -- testDistance( 0, 0, 0, nAn, Double.POSITIVE_INFINITY );
            -- testDistance( 0, 0, nAn, 0, Double.POSITIVE_INFINITY );
            -- testDistance( 0, nAn, 0, 0, Double.POSITIVE_INFINITY );
            -- testDistance( nAn, 0, 0, 0, Double.POSITIVE_INFINITY );
            
            -- testDistance( nAn, pInf, nInf, nAn, Double.POSITIVE_INFINITY );
            -- testDistance( nAn, 0, 0, 0, Double.NaN );
            
            _fn.testDistance(1.7976931348623157E308, 0, 0, 0, 1.7976931348623157E308)
            _fn.testDistance(0, 1.7976931348623157E308, 0, 0, 1.7976931348623157E308)
            
            _fn.testDistance(4.9E-324, 0, 0, 0, 4.9E-324)
            _fn.testDistance(0, 4.9E-324, 0, 0, 4.9E-324)
            
            ct.println("ct.distance tests done")
        end
    end
    
    function _fn.initTests_getTimer(run)
        
        if run then
            
            this.timerDisplay = ct.text("", 5, 10, 5)
            this.timerDisplay:align("left")
            this.countDownDisplay = ct.text("", 5, 20, 5)
            this.countDownDisplay:align("left")
            
            this.countDownSec = 10
            local days = 24.855134814814814814814814814815
            local hours = days * 24
            local minutes = hours * 60
            local seconds = minutes * 60 - this.countDownSec
            local extraTimeMs = ct.toInt(seconds * 1000)
            this.startTimeMs = ct.getTimer() - extraTimeMs
            
            ct.println("ct.getTimer() = " .. ct.getTimer() .. " when called from start()")
        end
    end
    
    function _fn.runTests_getTimer(run)
        
        if run then
            
            local currentMs = ct.getTimer()
            this.timerDisplay:setText("Timer millis: " .. ct.toInt(currentMs - this.startTimeMs))
            local secondsTillRollover = this.countDownSec - ct.intDiv(currentMs, 1000)
            this.countDownDisplay:setText("Countdown to rollover: " .. secondsTillRollover)
        end
    end
    
    function _fn.runTests_getVersion(run)
        
        if run then
            
            local ver = ct.getVersion()
            if ver ~= this.VERSION then
                
                this.allTestsPassed = false
                _fn.printError("ct.getVersion() = " .. ver .. "; " .. this.VERSION .. " expected")
            end
            ct.println("ct.getVersion tests done")
        end
    end
    
    function _fn.runTests_toInt(run)
        
        if run then
            
            _fn.testToInt(2147483647 * 1.0, 2147483647)
            _fn.testToInt(-2147483648 * 1.0, -2147483648)
            
            ct.println("ct.toInt tests done")
        end
    end
    
    function _fn.runTests_parseInt(run)
        
        if run then
            
            _fn.testParseInt("" .. 2147483647, 2147483647)
            _fn.testParseInt("" .. -2147483648, -2147483648)
            _fn.testParseInt("5.0", 0)
            
            ct.println("ct.parseInt tests done")
        end
    end
    
    function _fn.runTests_canParseInt(run)
        
        if run then
            
            _fn.testCanParseInt("" .. 2147483647, true)
            _fn.testCanParseInt("" .. -2147483648, true)
            _fn.testCanParseInt("5.0", false)
            
            ct.println("ct.canParseInt tests done")
        end
    end
    
    function _fn.runTests_parseNumber(run)
        
        if run then
            
            _fn.testParseNumber("" .. 1.7976931348623157E308, 1.7976931348623157E308)
            _fn.testParseNumber("" .. 4.9E-324, 4.9E-324)
            -- testParseNumber( "" + 1.0/0, Double.POSITIVE_INFINITY );
            -- testParseNumber( "" + (-1.0/0), Double.NEGATIVE_INFINITY );
            
            ct.println("ct.parseNumber tests done")
        end
    end
    
    function _fn.runTests_canParseNumber(run)
        
        if run then
            
            _fn.testCanParseNumber("" .. 1.7976931348623157E308, true)
            _fn.testCanParseNumber("" .. 4.9E-324, true)
            _fn.testCanParseNumber("" .. 1.0 / 0, true)
            _fn.testCanParseNumber("" .. (-1.0 / 0), true)
            
            ct.println("ct.canParseNumber tests done")
        end
    end
    
    function _fn.runTests_formatDecimal(run)
        
        if run then
            
            -- if ( numPlaces <= 0 ), Math.rInt() rounds ties to the nearest event number.
            _fn.testFormatDecimal(2.5, 0, "2.0")
            _fn.testFormatDecimal(1.5, 0, "2.0")
            _fn.testFormatDecimal(-3.5, 0, "-4.0")
            _fn.testFormatDecimal(-4.5, 0, "-4.0")
            
            _fn.testFormatDecimal(1.0 / 0, 0, "Infinity")
            _fn.testFormatDecimal(-1.0 / 0, 0, "-Infinity")
            _fn.testFormatDecimal(0.0 / 0, 0, "NaN")
            _fn.testFormatDecimal(math.sqrt(-1), 0, "NaN")
            
            ct.println("ct.formatDecimal tests done")
        end
    end
    
    function _fn.runTests_formatInt(run)
        
        if run then
            
            _fn.testFormatInt(123, 0, "")
            _fn.testFormatInt(456, -1, "")
            _fn.testFormatInt(456, 1, "456")
            
            ct.println("ct.formatInt tests done")
        end
    end
