this = {}; _fn = {}   -- This file was generated by Code12 from "DrawingProgram.java"
package.path = package.path .. ';../../Desktop/Code12/?.lua;../../../Desktop/Code12/?.lua'
require('Code12.api')

-- Drawing Program
-- Code12 Programming Concepts 8: If-else
-- A simple program for drawing circles, ovals, rectangles, and lines.
-- Clicking the toolbar buttons at the top of the window sets the shape and color drawn.
-- Clicking and draging the mouse draws a new shape centered at the click and scaled to 
-- extend to the end of the drag.
-- Clicking and dragging a drawn shape moves it around the window.
-- The backspace key deletes a drawn shape after it is clicked on.
-- The "C" key clears all drawn shapes from the window.

-- Case use test for the following subset of the Code12 API:

-- Math and Misc.
-- --------------
-- double ct.distance( double x1, double y1, double x2, double y2 )




    
    
        
        
    
    
    this.boxSize = 0; 
    
    this.circle = nil; 
    this.ellipse = nil; 
    this.rectangle = nil; 
    this.line = nil; 
    this.selectBox = nil; 
    this.selectedShapeBox = nil; 
    this.newObj = nil; 
    this.selectedObj = nil; 
    
    -- clickable squares for selecting fill/line color
    this.black = nil; 
    this.white = nil; 
    this.red = nil; 
    this.green = nil; 
    this.blue = nil; 
    this.cyan = nil; 
    this.majenta = nil; 
    this.yellow = nil; 
    this.gray = nil; 
    this.orange = nil; 
    this.pink = nil; 
    this.purple = nil; 
    this.selectedColorSwatch = nil; 
    this.selectedColor = nil; 
    
    this.xMinColors = 0; 
    this.selectBoxOn = false; 
    
    function start()
        
        ct.setTitle("Drawing Program")
        this.boxSize = 5
        local yBoxes = this.boxSize / 2
        local iconImage = nil; 
        
        -- Make circle icon
        this.circle = ct.rect(this.boxSize / 2, yBoxes, this.boxSize, this.boxSize, "white")
        this.circle.clickable = true
        iconImage = ct.circle(this.circle.x, this.circle.y, this.boxSize * 0.75, "white")
        this.circle:setLayer(2)
        iconImage:setLayer(2)
        
        -- Make ellipse icon
        this.ellipse = ct.rect(this.circle.x + this.boxSize, yBoxes, this.boxSize, this.boxSize, "white")
        this.ellipse.clickable = true
        iconImage = ct.circle(this.ellipse.x, this.ellipse.y, this.boxSize * 0.75, "white")
        iconImage.height = iconImage.height * (0.7)
        this.ellipse:setLayer(2)
        iconImage:setLayer(2)
        
        -- Make rectangle icon
        this.rectangle = ct.rect(this.ellipse.x + this.boxSize, yBoxes, this.boxSize, this.boxSize, "white")
        this.rectangle.clickable = true
        iconImage = ct.rect(this.rectangle.x, this.rectangle.y, this.boxSize * 0.7, this.boxSize * 0.7, "white")
        this.rectangle:setLayer(2)
        iconImage:setLayer(2)
        
        -- Make line icon
        this.line = ct.rect(this.rectangle.x + this.boxSize, yBoxes, this.boxSize, this.boxSize, "white")
        this.line.clickable = true
        iconImage = ct.line(this.line.x - this.boxSize * 0.35, this.line.y + this.boxSize * 0.35, this.line.x + this.boxSize * 0.35, this.line.y - this.boxSize * 0.35)
        this.line:setLayer(2)
        iconImage:setLayer(2)
        
        -- Make arrow icon for selecting objects
        this.selectBox = ct.rect(this.line.x + this.boxSize * 2, yBoxes, this.boxSize, this.boxSize, "white")
        this.selectBox.clickable = true
        iconImage = ct.image("arrow.png", this.selectBox.x, this.selectBox.y, this.boxSize)
        
        -- Make color boxes
        this.purple = ct.rect(100 - this.boxSize / 2, yBoxes, this.boxSize, this.boxSize, "purple")
        this.pink = ct.rect(this.purple.x - this.boxSize, yBoxes, this.boxSize, this.boxSize, "pink")
        this.orange = ct.rect(this.pink.x - this.boxSize, yBoxes, this.boxSize, this.boxSize, "orange")
        this.gray = ct.rect(this.orange.x - this.boxSize, yBoxes, this.boxSize, this.boxSize, "gray")
        this.yellow = ct.rect(this.gray.x - this.boxSize, yBoxes, this.boxSize, this.boxSize, "yellow")
        this.majenta = ct.rect(this.yellow.x - this.boxSize, yBoxes, this.boxSize, this.boxSize, "majenta")
        this.cyan = ct.rect(this.majenta.x - this.boxSize, yBoxes, this.boxSize, this.boxSize, "cyan")
        this.blue = ct.rect(this.cyan.x - this.boxSize, yBoxes, this.boxSize, this.boxSize, "blue")
        this.green = ct.rect(this.blue.x - this.boxSize, yBoxes, this.boxSize, this.boxSize, "green")
        this.red = ct.rect(this.green.x - this.boxSize, yBoxes, this.boxSize, this.boxSize, "red")
        this.white = ct.rect(this.red.x - this.boxSize, yBoxes, this.boxSize, this.boxSize, "white")
        this.black = ct.rect(this.white.x - this.boxSize, yBoxes, this.boxSize, this.boxSize, "black")
        
        this.black:setLayer(2)
        this.white:setLayer(2)
        this.red:setLayer(2)
        this.green:setLayer(2)
        this.blue:setLayer(2)
        this.cyan:setLayer(2)
        this.majenta:setLayer(2)
        this.yellow:setLayer(2)
        this.gray:setLayer(2)
        this.orange:setLayer(2)
        this.pink:setLayer(2)
        this.purple:setLayer(2)
        
        this.black.clickable = true
        this.white.clickable = true
        this.red.clickable = true
        this.green.clickable = true
        this.blue.clickable = true
        this.cyan.clickable = true
        this.majenta.clickable = true
        this.yellow.clickable = true
        this.gray.clickable = true
        this.orange.clickable = true
        this.pink.clickable = true
        this.purple.clickable = true
        
        this.black:setText("black")
        this.white:setText("white")
        this.red:setText("red")
        this.green:setText("green")
        this.blue:setText("blue")
        this.cyan:setText("cyan")
        this.majenta:setText("majenta")
        this.yellow:setText("yellow")
        this.gray:setText("gray")
        this.orange:setText("orange")
        this.pink:setText("pink")
        this.purple:setText("purple")
        
        -- Set xMinColors 
        this.xMinColors = this.black.x - this.boxSize / 2
        
        -- Set selected shape
        this.selectedShapeBox = this.circle
        this.selectedShapeBox.lineWidth = 3
        this.selectBoxOn = false
        
        -- Set selected color
        this.selectedColor = "black"
        this.selectedColorSwatch = this.black
        this.selectedColorSwatch.lineWidth = 3
    end
    
    function onMousePress(obj, x, y)
        
        if y > this.boxSize then
            
            -- click is in the drawing area below the toolbox row
            if not this.selectBoxOn then
                
                -- draw a new shape
                if this.selectedShapeBox == this.circle or this.selectedShapeBox == this.ellipse then
                    this.newObj = ct.circle(x, y, 0); 
                elseif this.selectedShapeBox == this.rectangle then
                    this.newObj = ct.rect(x, y, 0, 0); 
                elseif this.selectedShapeBox == this.line then
                    
                    this.newObj = ct.line(x, y, x, y)
                    this.newObj:setLineColor(this.selectedColor)
                end
                
                if this.selectedShapeBox ~= this.line then
                    
                    this.newObj.clickable = true
                    this.newObj:setFillColor(this.selectedColor)
                end
                -- Make newObj the selectedObj
                this.selectedObj = this.newObj
            
            elseif obj ~= nil then
                
                this.selectedObj = obj
            end
        
        elseif obj ~= nil then
            
            if x >= this.xMinColors then
                
                -- obj is a color swatch
                this.selectedColorSwatch.lineWidth = 1
                this.selectedColorSwatch = obj
                this.selectedColorSwatch.lineWidth = 3
                this.selectedColorSwatch:setLayer(2)
                this.selectedColor = this.selectedColorSwatch:getText()
            
            else 
                
                -- obj is a shape selector or the select box
                this.selectedShapeBox.lineWidth = 1
                this.selectedShapeBox = obj
                this.selectedShapeBox.lineWidth = 3
                
                if obj == this.selectBox then
                    this.selectBoxOn = true; 
                else 
                    this.selectBoxOn = false; end
            end
        end
    end
    
    function onMouseDrag(obj, x, y)
        
        if y > this.boxSize then
            
            if not this.selectBoxOn then
                
                if this.selectedShapeBox == this.circle then
                    
                    local newDiameter = 2 * ct.distance(this.newObj.x, this.newObj.y, x, y)
                    this.newObj.width = newDiameter
                    this.newObj.height = newDiameter
                
                elseif this.selectedShapeBox == this.ellipse or this.selectedShapeBox == this.rectangle then
                    
                    local newWidth = 2 * ct.distance(this.newObj.x, 0, x, 0)
                    local newHeight = 2 * ct.distance(0, this.newObj.y, 0, y)
                    this.newObj.width = newWidth
                    this.newObj.height = newHeight
                
                elseif this.selectedShapeBox == this.line then
                    
                    this.newObj.width = x - this.newObj.x
                    this.newObj.height = y - this.newObj.y
                end
                this.newObj.group = "drawing"
            
            elseif obj ~= nil then
                
                obj.x = x
                obj.y = y
                obj:setLayer(1)
            end
        end
    end
    
    function onKeyPress(keyName)
        
        if keyName:equals("backspace") then
            
            if this.selectedObj ~= nil then
                this.selectedObj:delete(); end
        
        elseif keyName:equals("c") then
            ct.clearGroup("drawing"); end
    end
